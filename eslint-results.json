[{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/account/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/admin/customer-notifications/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/admin/notifications/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/admin/phone-number-requests/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/admin/phone-numbers/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/admin/tickets/[id]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/admin/tickets/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/admin/users/[id]/onboarding/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/admin/backorder-requests/route.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":204,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":204,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6946,6949],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6946,6949],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":206,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":206,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7031,7034],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7031,7034],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":208,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":208,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7116,7119],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7116,7119],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":369,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":369,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12348,12351],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12348,12351],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":375,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":375,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12705,12708],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12705,12708],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":582,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":582,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19924,19927],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19924,19927],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":584,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":584,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20058,20061],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20058,20061],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":588,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":588,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20210,20213],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20210,20213],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":590,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":590,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20337,20340],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20337,20340],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":592,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":592,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20490,20493],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20490,20493],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":594,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":594,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20660,20663],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20660,20663],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/admin/check-balances/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/admin/countries/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/admin/countries/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/admin/kpi-alerts/check/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/admin/kpi-alerts/test/route.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":69,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2551,2554],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2551,2554],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/admin/kpi-settings/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/admin/low-balance-users/route.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":22,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[653,656],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[653,656],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":37,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1101,1104],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1101,1104],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/admin/notification-logs/resend/route.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1453,1456],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1453,1456],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":59,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2737,2740],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2737,2740],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":69,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3181,3184],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3181,3184],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":180,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":180,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6788,6791],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6788,6791],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/admin/notification-logs/resend/test/route.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[752,755],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[752,755],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/admin/notification-logs/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/admin/notification-logs/test-send/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/admin/onboarding/[userId]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/admin/payments/integrity/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/admin/phone-numbers/[id]/assign/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/admin/phone-numbers/[id]/cancel/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/admin/phone-numbers/[id]/reserve/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/admin/phone-numbers/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/admin/phone-numbers/[id]/suspend/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/admin/phone-numbers/[id]/unassign/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/admin/phone-numbers/[id]/unreserve/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/admin/phone-numbers/bulk-unassign/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/admin/phone-numbers/migrate-billing-dates/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/admin/phone-numbers/requests/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/admin/phone-numbers/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/admin/providers/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/admin/providers/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/admin/scheduler/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/admin/support/canned-responses/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/admin/support/canned-responses/[id]/usage/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/admin/support/canned-responses/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/admin/support/predefined-issues/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/admin/support/predefined-issues/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/admin/tickets/[id]/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":57,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1974,1977],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1974,1977],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":153,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":153,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4784,4787],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4784,4787],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":572,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":572,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18691,18694],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18691,18694],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getCurrentUser } from '@/lib/authService';\nimport { connectToDatabase } from '@/lib/db';\nimport TicketModel from '@/models/Ticket';\nimport UserModel from '@/models/User';\nimport UserOnboardingModel from '@/models/UserOnboarding';\nimport TicketNotificationService from '@/services/TicketNotificationService';\n\ninterface RouteParams {\n  params: {\n    id: string;\n  };\n}\n\n// GET /api/admin/tickets/[id] - Get specific ticket details for admin\nexport async function GET(request: NextRequest, { params }: RouteParams) {\n  try {\n    const user = await getCurrentUser();\n    if (!user?.id) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    await connectToDatabase();\n\n    // Check if user is admin\n    const currentUser = await UserModel.findById(user.id).lean();\n    if (!currentUser || currentUser.role !== 'admin') {\n      return NextResponse.json({ error: 'Admin access required' }, { status: 403 });\n    }\n\n    // Await params before accessing properties (Next.js 15 requirement)\n    const { id } = await params;\n\n    const ticket = await TicketModel.findById(id).lean();\n\n    if (!ticket) {\n      return NextResponse.json({ error: 'Ticket not found' }, { status: 404 });\n    }\n\n    // Get user details for the ticket owner, assigned user, and all reply authors\n    const userIds = [ticket.userId, ...ticket.replies.map(reply => reply.authorId)];\n    if (ticket.assignedTo) {\n      // Only add to userIds if it's a valid ObjectId, not an email\n      if (ticket.assignedTo.match(/^[0-9a-fA-F]{24}$/)) {\n        userIds.push(ticket.assignedTo);\n      }\n    }\n    const uniqueUserIds = [...new Set(userIds)];\n    \n    const users = await UserModel.find({ _id: { $in: uniqueUserIds } })\n      .select('_id email name role')\n      .lean();\n\n    const userMap = users.reduce((acc, user) => {\n      acc[user._id.toString()] = user;\n      return acc;\n    }, {} as Record<string, any>);\n\n    // Get onboarding data for the ticket owner\n    const ticketOwnerOnboarding = await UserOnboardingModel.findOne({ userId: ticket.userId }).lean();\n\n    // Add user details to replies\n    const repliesWithUserInfo = ticket.replies.map(reply => ({\n      ...reply,\n      author: userMap[reply.authorId] || null\n    }));\n\n    // Get assigned user details - handle both ObjectId and email\n    let assignedToUser = null;\n    if (ticket.assignedTo) {\n      if (ticket.assignedTo.match(/^[0-9a-fA-F]{24}$/)) {\n        // It's an ObjectId\n        assignedToUser = userMap[ticket.assignedTo.toString()];\n      } else {\n        // It's an email address - look it up directly\n        assignedToUser = await UserModel.findOne({ email: ticket.assignedTo })\n          .select('_id email name role')\n          .lean();\n      }\n    }\n\n    // Combine user data with onboarding data for the ticket owner\n    const ticketOwnerUser = userMap[ticket.userId];\n    let enhancedUser = ticketOwnerUser;\n    \n    if (ticketOwnerUser && ticketOwnerOnboarding) {\n      enhancedUser = {\n        ...ticketOwnerUser,\n        name: ticketOwnerUser.name,\n        company: ticketOwnerOnboarding.companyName,\n        phone: ticketOwnerOnboarding.phoneNumber,\n        address: ticketOwnerOnboarding.address,\n        onboarding: ticketOwnerOnboarding\n      };\n    }\n\n    return NextResponse.json({\n      ...ticket,\n      user: enhancedUser || null,\n      assignedTo: assignedToUser,\n      replies: repliesWithUserInfo\n    });\n\n  } catch (error) {\n    console.error('Error fetching admin ticket:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\n// PUT /api/admin/tickets/[id] - Update ticket as admin\nexport async function PUT(request: NextRequest, { params }: RouteParams) {\n  try {\n    const user = await getCurrentUser();\n    if (!user?.id) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    await connectToDatabase();\n\n    // Check if user is admin\n    const currentUser = await UserModel.findById(user.id).lean();\n    if (!currentUser || currentUser.role !== 'admin') {\n      return NextResponse.json({ error: 'Admin access required' }, { status: 403 });\n    }\n\n    // Await params before accessing properties (Next.js 15 requirement)\n    const { id } = await params;\n\n    const body = await request.json();\n    const { \n      action, \n      content, \n      attachments, \n      status, \n      assignedTo, \n      priority,\n      tags,\n      internalNotes,\n      estimatedResolutionTime,\n      isInternal\n    } = body;\n\n    // Find the ticket\n    const ticket = await TicketModel.findById(id);\n\n    if (!ticket) {\n      return NextResponse.json({ error: 'Ticket not found' }, { status: 404 });\n    }\n\n    let notificationData: any = null;\n\n    switch (action) {\n      case 'add_reply':\n        if (!content) {\n          return NextResponse.json(\n            { error: 'Reply content is required' },\n            { status: 400 }\n          );\n        }\n\n        ticket.replies.push({\n          content: content.trim(),\n          attachments: attachments || [],\n          authorId: user.id,\n          authorType: 'admin',\n          createdAt: new Date(),\n          isInternal: isInternal || false\n        });\n\n        // Update status based on reply type\n        if (isInternal) {\n          // Internal notes don't change status\n        } else if (ticket.status === 'waiting_admin' || ticket.status === 'open') {\n          ticket.status = 'waiting_user';\n        }\n\n        // Prepare notification data for reply (only for non-internal replies)\n        if (!isInternal) {\n          notificationData = {\n            type: 'reply',\n            replyContent: getPlainTextFromHtml(content.trim()),\n            isInternal: false,\n            author: currentUser\n          };\n        }\n        break;\n\n      case 'update_status':\n        if (!status) {\n          return NextResponse.json(\n            { error: 'Status is required' },\n            { status: 400 }\n          );\n        }\n\n        const oldStatus = ticket.status;\n        ticket.status = status;\n\n        // Set resolution/closure timestamps\n        if (status === 'resolved' && oldStatus !== 'resolved') {\n          ticket.resolvedAt = new Date();\n        } else if (status === 'closed' && oldStatus !== 'closed') {\n          ticket.closedAt = new Date();\n          if (!ticket.resolvedAt) {\n            ticket.resolvedAt = new Date();\n          }\n        } else if (status === 'open' || status === 'in_progress') {\n          ticket.resolvedAt = undefined;\n          ticket.closedAt = undefined;\n        }\n\n        // Add system message for status change (visible to user)\n        const statusLabels: Record<string, string> = {\n          'open': 'Open',\n          'in_progress': 'In Progress',\n          'waiting_user': 'Waiting for Customer',\n          'waiting_admin': 'Waiting for Support',\n          'resolved': 'Resolved',\n          'closed': 'Closed'\n        };\n        \n        ticket.replies.push({\n          content: `🔄 Support team changed status to \"${statusLabels[status] || status}\".`,\n          attachments: [],\n          authorId: user.id,\n          authorType: 'admin',\n          createdAt: new Date(),\n          isInternal: false\n        });\n\n        // Prepare notification data\n        if (status === 'resolved') {\n          notificationData = {\n            type: 'resolved',\n            oldStatus,\n            newStatus: status,\n            changedBy: currentUser\n          };\n        } else {\n          notificationData = {\n            type: 'status_change',\n            oldStatus,\n            newStatus: status,\n            changedBy: currentUser\n          };\n        }\n        break;\n\n      case 'assign_ticket':\n        const oldAssignedTo = ticket.assignedTo;\n        \n        if (assignedTo) {\n          // Verify the assigned user exists and is admin\n          // Try to find by ObjectId first, then by email if it's not a valid ObjectId\n          let assignedUser;\n          \n          // Check if assignedTo looks like an ObjectId (24 character hex string)\n          if (assignedTo.match(/^[0-9a-fA-F]{24}$/)) {\n            assignedUser = await UserModel.findById(assignedTo).lean();\n          } else {\n            // Assume it's an email address\n            assignedUser = await UserModel.findOne({ email: assignedTo }).lean();\n          }\n          \n          if (!assignedUser || assignedUser.role !== 'admin') {\n            return NextResponse.json(\n              { error: 'Invalid assigned user' },\n              { status: 400 }\n            );\n          }\n          \n          // Add system message for assignment (visible to user)\n          const assignedName = assignedUser.name || assignedUser.email;\n          \n          ticket.replies.push({\n            content: `👤 Ticket assigned to ${assignedName}.`,\n            attachments: [],\n            authorId: user.id,\n            authorType: 'admin',\n            createdAt: new Date(),\n            isInternal: false\n          });\n\n          notificationData = {\n            type: 'assigned',\n            oldAssignedTo,\n            newAssignedTo: assignedUser,\n            changedBy: currentUser\n          };\n        } else {\n          // Unassignment\n          ticket.replies.push({\n            content: `👤 Ticket unassigned.`,\n            attachments: [],\n            authorId: user.id,\n            authorType: 'admin',\n            createdAt: new Date(),\n            isInternal: false\n          });\n\n          notificationData = {\n            type: 'unassigned',\n            oldAssignedTo,\n            newAssignedTo: null,\n            changedBy: currentUser\n          };\n        }\n        ticket.assignedTo = assignedTo || undefined;\n        break;\n\n      case 'update_priority':\n        if (!priority) {\n          return NextResponse.json(\n            { error: 'Priority is required' },\n            { status: 400 }\n          );\n        }\n        \n        const priorityLabels: Record<string, string> = {\n          'low': 'Low',\n          'medium': 'Medium',\n          'high': 'High',\n          'urgent': 'Urgent'\n        };\n        \n        const oldPriority = ticket.priority;\n        ticket.priority = priority;\n        \n        // Add system message for priority change (visible to user)\n        ticket.replies.push({\n          content: `⚡ Support team changed priority to \"${priorityLabels[priority] || priority}\".`,\n          attachments: [],\n          authorId: user.id,\n          authorType: 'admin',\n          createdAt: new Date(),\n          isInternal: false\n        });\n\n        notificationData = {\n          type: 'priority_change',\n          oldPriority,\n          newPriority: priority,\n          changedBy: currentUser\n        };\n        break;\n\n      case 'update_tags':\n        ticket.tags = tags || [];\n        // No notification for tag updates\n        break;\n\n      case 'update_internal_notes':\n        ticket.internalNotes = internalNotes || '';\n        // No notification for internal notes\n        break;\n\n      case 'set_estimated_resolution':\n        ticket.estimatedResolutionTime = estimatedResolutionTime \n          ? new Date(estimatedResolutionTime) \n          : undefined;\n        // No notification for estimated resolution time\n        break;\n\n      case 'bulk_update':\n        // Allow multiple updates in one request\n        if (status) {\n          const oldStatus = ticket.status;\n          ticket.status = status;\n          \n          if (status === 'resolved' && oldStatus !== 'resolved') {\n            ticket.resolvedAt = new Date();\n          } else if (status === 'closed' && oldStatus !== 'closed') {\n            ticket.closedAt = new Date();\n            if (!ticket.resolvedAt) {\n              ticket.resolvedAt = new Date();\n            }\n          }\n\n          // Prepare notification for bulk status change\n          if (status === 'resolved') {\n            notificationData = {\n              type: 'resolved',\n              oldStatus,\n              newStatus: status,\n              changedBy: currentUser\n            };\n          } else {\n            notificationData = {\n              type: 'status_change',\n              oldStatus,\n              newStatus: status,\n              changedBy: currentUser\n            };\n          }\n        }\n        \n        if (assignedTo !== undefined) {\n          const oldAssignedTo = ticket.assignedTo;\n          ticket.assignedTo = assignedTo || undefined;\n          \n          // If not already notifying for status change, notify for assignment\n          if (!notificationData && assignedTo && assignedTo !== oldAssignedTo) {\n            // Use the same lookup logic as above\n            let assignedUser;\n            \n            // Check if assignedTo looks like an ObjectId (24 character hex string)\n            if (assignedTo.match(/^[0-9a-fA-F]{24}$/)) {\n              assignedUser = await UserModel.findById(assignedTo).lean();\n            } else {\n              // Assume it's an email address\n              assignedUser = await UserModel.findOne({ email: assignedTo }).lean();\n            }\n            \n            notificationData = {\n              type: 'assigned',\n              oldAssignedTo,\n              newAssignedTo: assignedUser,\n              changedBy: currentUser\n            };\n          }\n        }\n        \n        if (priority) ticket.priority = priority;\n        if (tags !== undefined) ticket.tags = tags;\n        if (internalNotes !== undefined) ticket.internalNotes = internalNotes;\n        if (estimatedResolutionTime !== undefined) {\n          ticket.estimatedResolutionTime = estimatedResolutionTime \n            ? new Date(estimatedResolutionTime) \n            : undefined;\n        }\n        break;\n\n      default:\n        return NextResponse.json(\n          { error: 'Invalid action' },\n          { status: 400 }\n        );\n    }\n\n    await ticket.save();\n\n    // Send notifications asynchronously if needed\n    if (notificationData) {\n      process.nextTick(async () => {\n        try {\n          // Get the updated ticket with populated user data for notifications\n          const populatedTicket = await TicketModel.findById(ticket._id).lean();\n          const userDetails = await UserModel.findById(ticket.userId).lean();\n          const userOnboarding = await UserOnboardingModel.findOne({ userId: ticket.userId }).lean();\n\n          if (!populatedTicket || !userDetails) {\n            console.error('Failed to get ticket or user details for notification');\n            return;\n          }\n\n          // Add user information to ticket for notifications\n          const ticketWithUser = {\n            ...populatedTicket,\n            user: {\n              _id: userDetails._id,\n              email: userDetails.email,\n              name: userDetails.name,\n              company: userOnboarding?.companyName\n            }\n          };\n\n          // Add assigned user details if present\n          if (populatedTicket.assignedTo) {\n            let assignedUser;\n            \n            // Check if assignedTo looks like an ObjectId (24 character hex string)\n            if (populatedTicket.assignedTo.match(/^[0-9a-fA-F]{24}$/)) {\n              assignedUser = await UserModel.findById(populatedTicket.assignedTo).lean();\n            } else {\n              // Assume it's an email address\n              assignedUser = await UserModel.findOne({ email: populatedTicket.assignedTo }).lean();\n            }\n            \n            if (assignedUser) {\n              ticketWithUser.assignedTo = {\n                _id: assignedUser._id,\n                email: assignedUser.email,\n                name: assignedUser.name,\n                firstName: assignedUser.firstName,\n                lastName: assignedUser.lastName\n              };\n            }\n          }\n\n          const notificationService = TicketNotificationService.getInstance();\n\n          switch (notificationData.type) {\n            case 'reply':\n              await notificationService.notifyTicketReplied(\n                ticketWithUser,\n                notificationData.replyContent,\n                notificationData.isInternal,\n                notificationData.author\n              );\n              break;\n            case 'status_change':\n              await notificationService.notifyTicketUpdated(ticketWithUser, {\n                action: 'status_changed',\n                changedBy: notificationData.changedBy,\n                changes: {\n                  oldStatus: notificationData.oldStatus,\n                  newStatus: notificationData.newStatus\n                }\n              });\n              break;\n            case 'resolved':\n              await notificationService.notifyTicketResolved(\n                ticketWithUser,\n                notificationData.changedBy\n              );\n              break;\n            case 'assigned':\n              await notificationService.notifyTicketAssigned(\n                ticketWithUser,\n                notificationData.changedBy\n              );\n              break;\n            case 'unassigned':\n              await notificationService.notifyTicketUpdated(ticketWithUser, {\n                action: 'unassigned',\n                changedBy: notificationData.changedBy,\n                changes: {\n                  oldAssignedTo: notificationData.oldAssignedTo,\n                  newAssignedTo: null\n                }\n              });\n              break;\n            case 'priority_change':\n              await notificationService.notifyTicketUpdated(ticketWithUser, {\n                action: 'priority_changed',\n                changedBy: notificationData.changedBy,\n                changes: {\n                  oldPriority: notificationData.oldPriority,\n                  newPriority: notificationData.newPriority\n                }\n              });\n              break;\n          }\n        } catch (error) {\n          console.error('Error sending admin ticket notification:', error);\n        }\n      });\n    }\n\n    // After saving, get the updated ticket with populated user details\n    const updatedTicket = await TicketModel.findById(ticket._id).lean();\n    \n    // Get user details for response\n    const userIds = [updatedTicket.userId];\n    if (updatedTicket.assignedTo) {\n      // Only add to userIds if it's a valid ObjectId, not an email\n      if (updatedTicket.assignedTo.match(/^[0-9a-fA-F]{24}$/)) {\n        userIds.push(updatedTicket.assignedTo);\n      }\n    }\n    \n    const users = await UserModel.find({ _id: { $in: userIds } })\n      .select('_id email firstName lastName role')\n      .lean();\n\n    const userMap = users.reduce((acc, user) => {\n      acc[user._id.toString()] = user;\n      return acc;\n    }, {} as Record<string, any>);\n\n    // Get assigned user details - handle both ObjectId and email\n    let assignedToUser = null;\n    if (updatedTicket.assignedTo) {\n      if (updatedTicket.assignedTo.match(/^[0-9a-fA-F]{24}$/)) {\n        // It's an ObjectId\n        assignedToUser = userMap[updatedTicket.assignedTo.toString()];\n      } else {\n        // It's an email address - look it up directly\n        assignedToUser = await UserModel.findOne({ email: updatedTicket.assignedTo })\n          .select('_id email name role')\n          .lean();\n      }\n    }\n\n    return NextResponse.json({\n      message: 'Ticket updated successfully',\n      ticket: {\n        ...updatedTicket,\n        _id: updatedTicket._id.toString(),\n        user: userMap[updatedTicket.userId],\n        assignedTo: assignedToUser,\n      }\n    });\n\n  } catch (error) {\n    console.error('Error updating admin ticket:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\n// DELETE /api/admin/tickets/[id] - Delete ticket (admin only)\nexport async function DELETE(request: NextRequest, { params }: RouteParams) {\n  try {\n    const user = await getCurrentUser();\n    if (!user?.id) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    await connectToDatabase();\n\n    // Check if user is admin\n    const currentUser = await UserModel.findById(user.id).lean();\n    if (!currentUser || currentUser.role !== 'admin') {\n      return NextResponse.json({ error: 'Admin access required' }, { status: 403 });\n    }\n\n    // Await params before accessing properties (Next.js 15 requirement)\n    const { id } = await params;\n\n    // Find the ticket (admins can delete any ticket)\n    const ticket = await TicketModel.findById(id);\n\n    if (!ticket) {\n      return NextResponse.json({ error: 'Ticket not found' }, { status: 404 });\n    }\n\n    // Get ticket details for logging before deletion\n    const ticketDetails = {\n      ticketNumber: ticket.ticketNumber,\n      title: ticket.title,\n      userId: ticket.userId,\n      userEmail: ticket.userEmail,\n      status: ticket.status,\n      priority: ticket.priority,\n      service: ticket.service,\n      repliesCount: ticket.replies.length,\n      attachmentsCount: ticket.attachments?.length || 0,\n      replyAttachmentsCount: ticket.replies.reduce((acc, reply) => acc + (reply.attachments?.length || 0), 0),\n      createdAt: ticket.createdAt,\n      assignedTo: ticket.assignedTo\n    };\n\n    // Log admin deletion action (for audit trail)\n    console.log(`Admin deletion: User ${currentUser.email} (${currentUser._id}) deleted ticket ${ticket.ticketNumber} (${ticket._id})`);\n    console.log('Deleted ticket details:', ticketDetails);\n\n    // TODO: Enhanced file cleanup for production\n    // Collect all attachment file paths for cleanup\n    const attachmentFiles = [\n      ...(ticket.attachments || []).map(att => att.filename || att.url),\n      ...ticket.replies.flatMap(reply => \n        (reply.attachments || []).map(att => att.filename || att.url)\n      )\n    ].filter(Boolean);\n    \n    if (attachmentFiles.length > 0) {\n      console.log(`Ticket had ${attachmentFiles.length} attachment files that may need cleanup:`, attachmentFiles);\n      // TODO: Implement actual file deletion from storage (S3, local storage, etc.)\n    }\n\n    // Delete the ticket and all associated data\n    await TicketModel.findByIdAndDelete(id);\n\n    // TODO: Optional - Send notification to customer about ticket deletion\n    // This could be implemented if you want to notify customers when their tickets are deleted\n\n    return NextResponse.json({\n      message: 'Ticket deleted successfully',\n      deletedTicket: {\n        id: ticket._id.toString(),\n        ticketNumber: ticket.ticketNumber,\n        title: ticket.title,\n        deletedBy: {\n          id: currentUser._id.toString(),\n          email: currentUser.email,\n          name: currentUser.name || `${currentUser.firstName || ''} ${currentUser.lastName || ''}`.trim() || 'Admin'\n        },\n        deletedAt: new Date().toISOString()\n      }\n    });\n\n  } catch (error) {\n    console.error('Error deleting admin ticket:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\n// Helper function to extract plain text from HTML content\nconst getPlainTextFromHtml = (html: string): string => {\n  // Remove HTML tags and decode entities\n  return html\n    .replace(/<[^>]*>/g, '')\n    .replace(/&nbsp;/g, ' ')\n    .replace(/&amp;/g, '&')\n    .replace(/&lt;/g, '<')\n    .replace(/&gt;/g, '>')\n    .replace(/&quot;/g, '\"')\n    .replace(/&#x27;/g, \"'\")\n    .replace(/&#x2F;/g, '/')\n    .trim();\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/admin/tickets/bulk/route.ts","messages":[{"ruleId":"prefer-const","severity":2,"message":"'assignUpdate' is never reassigned. Use 'const' instead.","line":54,"column":13,"nodeType":"Identifier","messageId":"useConst","endLine":54,"endColumn":30,"fix":{"range":[1698,1833],"text":"const assignUpdate: any = {\n          assignedTo: assignTo,\n          assignedAt: new Date(),\n          updatedAt: new Date(),\n        };"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":54,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1716,1719],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1716,1719],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":245,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":245,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7864,7867],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7864,7867],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getCurrentUser } from '@/lib/authService';\nimport { connectToDatabase } from '@/lib/db';\nimport TicketModel from '@/models/Ticket';\nimport UserModel from '@/models/User';\n\n// PUT /api/admin/tickets/bulk - Bulk update tickets\nexport async function PUT(request: NextRequest) {\n  try {\n    const user = await getCurrentUser();\n    if (!user?.id) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    await connectToDatabase();\n\n    // Check if user is admin\n    const currentUser = await UserModel.findById(user.id).lean();\n    if (!currentUser || currentUser.role !== 'admin') {\n      return NextResponse.json({ error: 'Admin access required' }, { status: 403 });\n    }\n\n    const {\n      ticketIds,\n      action,\n      assignTo,\n      status,\n      priority,\n      internalNote\n    } = await request.json();\n\n    if (!ticketIds || !Array.isArray(ticketIds) || ticketIds.length === 0) {\n      return NextResponse.json({ error: 'No ticket IDs provided' }, { status: 400 });\n    }\n\n    if (!action) {\n      return NextResponse.json({ error: 'Action is required' }, { status: 400 });\n    }\n\n    const updatedTickets = [];\n\n    switch (action) {\n      case 'assign':\n        if (!assignTo) {\n          return NextResponse.json({ error: 'Assign to user is required' }, { status: 400 });\n        }\n\n        // Verify assignTo user exists and is admin\n        const assignToUser = await UserModel.findById(assignTo).lean();\n        if (!assignToUser || assignToUser.role !== 'admin') {\n          return NextResponse.json({ error: 'Invalid admin user for assignment' }, { status: 400 });\n        }\n\n        let assignUpdate: any = {\n          assignedTo: assignTo,\n          assignedAt: new Date(),\n          updatedAt: new Date(),\n        };\n\n        // Add internal note if provided\n        if (internalNote?.trim()) {\n          assignUpdate.$push = {\n            replies: {\n              content: internalNote,\n              authorType: 'admin',\n              authorId: user.id,\n              isInternal: true,\n              createdAt: new Date(),\n            }\n          };\n        }\n\n        await TicketModel.updateMany(\n          { _id: { $in: ticketIds } },\n          assignUpdate\n        );\n\n        // Fetch updated tickets\n        const assignedTickets = await TicketModel.find({ _id: { $in: ticketIds } })\n          .populate('user', 'firstName lastName email')\n          .populate('assignedTo', 'firstName lastName email')\n          .lean();\n\n        updatedTickets.push(...assignedTickets);\n        break;\n\n      case 'update_status':\n        if (!status) {\n          return NextResponse.json({ error: 'Status is required' }, { status: 400 });\n        }\n\n        const statusLabels: Record<string, string> = {\n          'open': 'Open',\n          'in_progress': 'In Progress',\n          'waiting_user': 'Waiting for Customer',\n          'waiting_admin': 'Waiting for Support',\n          'resolved': 'Resolved',\n          'closed': 'Closed'\n        };\n\n        const statusUpdate = {\n          status,\n          updatedAt: new Date(),\n          $push: {\n            replies: {\n              content: `🔄 Support team changed status to \"${statusLabels[status] || status}\".`,\n              authorType: 'admin',\n              authorId: user.id,\n              isInternal: false,\n              createdAt: new Date(),\n            }\n          }\n        };\n\n        // Add additional internal note if provided\n        if (internalNote?.trim()) {\n          // For bulk operations, we'll add both the visible system message above\n          // and an internal note if admin provided additional context\n          await TicketModel.updateMany(\n            { _id: { $in: ticketIds } },\n            {\n              ...statusUpdate,\n              $push: {\n                replies: {\n                  $each: [\n                    {\n                      content: `🔄 Support team changed status to \"${statusLabels[status] || status}\".`,\n                      authorType: 'admin',\n                      authorId: user.id,\n                      isInternal: false,\n                      createdAt: new Date(),\n                    },\n                    {\n                      content: `Status changed to ${status}: ${internalNote}`,\n                      authorType: 'admin',\n                      authorId: user.id,\n                      isInternal: true,\n                      createdAt: new Date(),\n                    }\n                  ]\n                }\n              }\n            }\n          );\n        } else {\n          await TicketModel.updateMany(\n            { _id: { $in: ticketIds } },\n            statusUpdate\n          );\n        }\n\n        // Fetch updated tickets\n        const statusUpdatedTickets = await TicketModel.find({ _id: { $in: ticketIds } })\n          .populate('user', 'firstName lastName email')\n          .populate('assignedTo', 'firstName lastName email')\n          .lean();\n\n        updatedTickets.push(...statusUpdatedTickets);\n        break;\n\n      case 'update_priority':\n        if (!priority) {\n          return NextResponse.json({ error: 'Priority is required' }, { status: 400 });\n        }\n\n        const priorityLabels: Record<string, string> = {\n          'low': 'Low',\n          'medium': 'Medium',\n          'high': 'High',\n          'urgent': 'Urgent'\n        };\n\n        const priorityUpdate = {\n          priority,\n          updatedAt: new Date(),\n          $push: {\n            replies: {\n              content: `⚡ Support team changed priority to \"${priorityLabels[priority] || priority}\".`,\n              authorType: 'admin',\n              authorId: user.id,\n              isInternal: false,\n              createdAt: new Date(),\n            }\n          }\n        };\n\n        // Add additional internal note if provided\n        if (internalNote?.trim()) {\n          await TicketModel.updateMany(\n            { _id: { $in: ticketIds } },\n            {\n              ...priorityUpdate,\n              $push: {\n                replies: {\n                  $each: [\n                    {\n                      content: `⚡ Support team changed priority to \"${priorityLabels[priority] || priority}\".`,\n                      authorType: 'admin',\n                      authorId: user.id,\n                      isInternal: false,\n                      createdAt: new Date(),\n                    },\n                    {\n                      content: `Priority changed to ${priority}: ${internalNote}`,\n                      authorType: 'admin',\n                      authorId: user.id,\n                      isInternal: true,\n                      createdAt: new Date(),\n                    }\n                  ]\n                }\n              }\n            }\n          );\n        } else {\n          await TicketModel.updateMany(\n            { _id: { $in: ticketIds } },\n            priorityUpdate\n          );\n        }\n\n        // Fetch updated tickets\n        const priorityUpdatedTickets = await TicketModel.find({ _id: { $in: ticketIds } })\n          .populate('user', 'firstName lastName email')\n          .populate('assignedTo', 'firstName lastName email')\n          .lean();\n\n        updatedTickets.push(...priorityUpdatedTickets);\n        break;\n\n      case 'delete':\n        await TicketModel.deleteMany({ _id: { $in: ticketIds } });\n        \n        return NextResponse.json({\n          message: `Successfully deleted ${ticketIds.length} ticket${ticketIds.length === 1 ? '' : 's'}`,\n          deletedCount: ticketIds.length\n        });\n\n      default:\n        return NextResponse.json({ error: 'Invalid action' }, { status: 400 });\n    }\n\n    return NextResponse.json({\n      message: `Successfully updated ${ticketIds.length} ticket${ticketIds.length === 1 ? '' : 's'}`,\n      updatedTickets: updatedTickets.map((ticket: any) => ({\n        ...ticket,\n        _id: ticket._id.toString(),\n        user: ticket.user ? {\n          ...ticket.user,\n          _id: ticket.user._id.toString()\n        } : null,\n        assignedTo: ticket.assignedTo ? {\n          ...ticket.assignedTo,\n          _id: ticket.assignedTo._id.toString()\n        } : null,\n      }))\n    });\n\n  } catch (error) {\n    console.error('Error in bulk ticket update:', error);\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/admin/tickets/debug/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/admin/tickets/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":37,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1471,1474],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1471,1474],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":54,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2047,2050],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2047,2050],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":102,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3689,3692],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3689,3692],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":109,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4012,4015],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4012,4015],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":114,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4181,4184],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4181,4184],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getCurrentUser } from '@/lib/authService';\nimport { connectToDatabase } from '@/lib/db';\nimport TicketModel from '@/models/Ticket';\nimport UserModel from '@/models/User';\nimport UserOnboardingModel from '@/models/UserOnboarding';\n\n// GET /api/admin/tickets - List all tickets for admin\nexport async function GET(request: NextRequest) {\n  try {\n    const user = await getCurrentUser();\n    if (!user?.id) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    await connectToDatabase();\n\n    // Check if user is admin\n    const currentUser = await UserModel.findById(user.id).lean();\n    if (!currentUser || currentUser.role !== 'admin') {\n      return NextResponse.json({ error: 'Admin access required' }, { status: 403 });\n    }\n\n    const { searchParams } = new URL(request.url);\n    const page = parseInt(searchParams.get('page') || '1');\n    const limit = parseInt(searchParams.get('limit') || '20');\n    const status = searchParams.get('status');\n    const service = searchParams.get('service');\n    const priority = searchParams.get('priority');\n    const assignedTo = searchParams.get('assignedTo');\n    const userId = searchParams.get('userId');\n    const search = searchParams.get('search');\n    const sortBy = searchParams.get('sortBy') || 'createdAt';\n    const sortOrder = searchParams.get('sortOrder') || 'desc';\n\n    // Build filter query\n    const filter: any = {};\n    \n    if (status) filter.status = status;\n    if (service) filter.service = service;\n    if (priority) filter.priority = priority;\n    if (assignedTo) filter.assignedTo = assignedTo;\n    if (userId) filter.userId = userId;\n    if (search) {\n      filter.$or = [\n        { title: { $regex: search, $options: 'i' } },\n        { ticketNumber: { $regex: search, $options: 'i' } },\n        { description: { $regex: search, $options: 'i' } },\n        { userEmail: { $regex: search, $options: 'i' } }\n      ];\n    }\n\n    const skip = (page - 1) * limit;\n    const sort: any = {};\n    sort[sortBy] = sortOrder === 'desc' ? -1 : 1;\n\n    const [tickets, total] = await Promise.all([\n      TicketModel.find(filter)\n        .sort(sort)\n        .skip(skip)\n        .limit(limit)\n        .lean(),\n      TicketModel.countDocuments(filter)\n    ]);\n\n    // Get user details for tickets\n    const userIds = [...new Set(tickets.map(ticket => ticket.userId))];\n    \n    // Separate ObjectIds and emails for assignedTo\n    const assignedToValues = [...new Set(\n      tickets\n        .map(ticket => ticket.assignedTo)\n        .filter(Boolean)\n    )];\n    \n    const assignedUserIds = assignedToValues.filter(id => \n      typeof id === 'string' && id.match(/^[0-9a-fA-F]{24}$/)\n    );\n    \n    const assignedUserEmails = assignedToValues.filter(id => \n      typeof id === 'string' && id.includes('@')\n    );\n    \n    const [users, assignedUsersById, assignedUsersByEmail, userOnboardings] = await Promise.all([\n      UserModel.find({ _id: { $in: userIds } })\n        .select('_id email name')\n        .lean(),\n      assignedUserIds.length > 0 ? UserModel.find({ _id: { $in: assignedUserIds } })\n        .select('_id email name role')\n        .lean() : Promise.resolve([]),\n      assignedUserEmails.length > 0 ? UserModel.find({ email: { $in: assignedUserEmails } })\n        .select('_id email name role')\n        .lean() : Promise.resolve([]),\n      UserOnboardingModel.find({ userId: { $in: userIds.map(id => id.toString()) } })\n        .select('userId companyName')\n        .lean()\n    ]);\n\n    const userMap = users.reduce((acc, user) => {\n      acc[user._id.toString()] = user;\n      return acc;\n    }, {} as Record<string, any>);\n\n    // Create maps for both ObjectId and email-based assignments\n    const assignedUserMap = [...assignedUsersById, ...assignedUsersByEmail].reduce((acc, user) => {\n      acc[user._id.toString()] = user; // Map by ObjectId\n      acc[user.email] = user; // Map by email\n      return acc;\n    }, {} as Record<string, any>);\n\n    const onboardingMap = userOnboardings.reduce((acc, onboarding) => {\n      acc[onboarding.userId] = onboarding;\n      return acc;\n    }, {} as Record<string, any>);\n\n    // Add user details to tickets\n    const ticketsWithUserInfo = tickets.map(ticket => ({\n      ...ticket,\n      user: userMap[ticket.userId] || null,\n      userOnboarding: onboardingMap[ticket.userId] || null,\n      assignedTo: ticket.assignedTo ? assignedUserMap[ticket.assignedTo] || ticket.assignedTo : null,\n      replyCount: ticket.replies.length,\n      lastReplyAt: ticket.replies.length > 0 \n        ? ticket.replies[ticket.replies.length - 1].createdAt \n        : null\n    }));\n\n    const totalPages = Math.ceil(total / limit);\n\n    // Get statistics\n    const stats = await TicketModel.aggregate([\n      {\n        $group: {\n          _id: '$status',\n          count: { $sum: 1 }\n        }\n      }\n    ]);\n\n    const statusStats = stats.reduce((acc, stat) => {\n      acc[stat._id] = stat.count;\n      return acc;\n    }, {} as Record<string, number>);\n\n    return NextResponse.json({\n      tickets: ticketsWithUserInfo,\n      pagination: {\n        page,\n        limit,\n        total,\n        totalPages,\n        hasMore: page < totalPages\n      },\n      stats: {\n        total,\n        ...statusStats\n      }\n    });\n\n  } catch (error) {\n    console.error('Error fetching admin tickets:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/admin/tickets/test-notifications/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":71,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2815,2818],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2815,2818],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":125,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5090,5093],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5090,5093],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":165,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":165,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6214,6217],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6214,6217],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":167,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":167,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6279,6282],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6279,6282],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":167,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":167,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6327,6330],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6327,6330],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'type' is defined but never used.","line":167,"column":82,"nodeType":null,"messageId":"unusedVar","endLine":167,"endColumn":86},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":193,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":193,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7155,7158],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7155,7158],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":198,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":198,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7323,7326],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7323,7326],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":213,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":213,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7791,7794],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7791,7794],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'request' is defined but never used.","line":227,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":227,"endColumn":34}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getCurrentUser } from '@/lib/authService';\nimport { connectToDatabase } from '@/lib/db';\nimport UserModel from '@/models/User';\nimport TicketNotificationService from '@/services/TicketNotificationService';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const user = await getCurrentUser();\n    if (!user?.id) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    await connectToDatabase();\n\n    // Check if user is admin\n    const currentUser = await UserModel.findById(user.id).lean();\n    if (!currentUser || currentUser.role !== 'admin') {\n      return NextResponse.json({ error: 'Admin access required' }, { status: 403 });\n    }\n\n    const body = await request.json();\n    const { notificationType, testEmail, includeCustomerInTest = false } = body;\n\n    if (!notificationType || !testEmail) {\n      return NextResponse.json(\n        { error: 'notificationType and testEmail are required' },\n        { status: 400 }\n      );\n    }\n\n    // Validate notification type\n    const validTypes = ['ticket_created', 'ticket_updated', 'ticket_resolved', 'ticket_assigned', 'ticket_replied'];\n    if (!validTypes.includes(notificationType)) {\n      return NextResponse.json(\n        { error: 'Invalid notification type' },\n        { status: 400 }\n      );\n    }\n\n    // Create sample ticket data for testing\n    const sampleTicket = {\n      _id: '507f1f77bcf86cd799439011',\n      ticketNumber: 'TKT-000001',\n      title: 'Test Support Ticket - Email Notification Demo',\n      description: 'This is a test ticket created to demonstrate the email notification system. It includes sample data to showcase how notifications appear in various scenarios.',\n      service: 'technical_support',\n      priority: 'medium',\n      status: 'open',\n      userId: '507f1f77bcf86cd799439012',\n      userEmail: 'customer@example.com',\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      resolvedAt: notificationType === 'ticket_resolved' ? new Date() : undefined,\n      user: {\n        _id: '507f1f77bcf86cd799439012',\n        email: 'customer@example.com',\n        name: 'John Smith',\n        firstName: 'John',\n        lastName: 'Smith',\n        company: 'Acme Corporation'\n      },\n      assignedTo: ['ticket_assigned', 'ticket_replied'].includes(notificationType) ? {\n        _id: user.id,\n        email: currentUser.email,\n        name: currentUser.name || 'Support Agent',\n        role: currentUser.role\n      } : undefined,\n      customerSatisfactionRating: notificationType === 'ticket_resolved' ? 5 : undefined,\n      customerSatisfactionComment: notificationType === 'ticket_resolved' ? 'Excellent support! The team resolved my issue quickly and professionally.' : undefined,\n      replies: [] as any[]\n    };\n\n    // Add sample reply if it's a reply notification\n    if (notificationType === 'ticket_replied') {\n      sampleTicket.replies = [{\n        content: 'Thank you for contacting our support team. I\\'ve reviewed your issue and I\\'m here to help you resolve it. Let me investigate this further and get back to you with a solution.',\n        authorId: user.id,\n        authorType: 'admin',\n        createdAt: new Date(),\n        isInternal: false,\n        attachments: []\n      }];\n    }\n\n    // Add sample conversation for ticket updates to show recent messages\n    if (notificationType === 'ticket_updated') {\n      sampleTicket.replies = [\n        {\n          content: 'I\\'m experiencing issues with call quality on outbound calls. The audio cuts out frequently and customers are complaining.',\n          authorId: '507f1f77bcf86cd799439012',\n          authorType: 'customer',\n          createdAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000), // 2 days ago\n          isInternal: false,\n          attachments: []\n        },\n        {\n          content: 'Thank you for reporting this issue. I\\'ve reviewed your account and noticed some configuration issues with your codec settings. I\\'m updating your account configuration now.',\n          authorId: user.id,\n          authorType: 'admin',\n          createdAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000), // 1 day ago\n          isInternal: false,\n          attachments: []\n        },\n        {\n          content: 'Internal note: Updated codec from G.711 to G.729 and adjusted jitter buffer settings. Also increased packet timeout to 200ms.',\n          authorId: user.id,\n          authorType: 'admin',\n          createdAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000), // 1 day ago\n          isInternal: true,\n          attachments: []\n        },\n        {\n          content: 'The configuration has been updated. Please test your calls now and let me know if you notice any improvement in call quality.',\n          authorId: user.id,\n          authorType: 'admin',\n          createdAt: new Date(Date.now() - 6 * 60 * 60 * 1000), // 6 hours ago\n          isInternal: false,\n          attachments: []\n        }\n      ];\n    }\n\n    // Create action details based on notification type\n    let actionDetails: any = {};\n    \n    switch (notificationType) {\n      case 'ticket_updated':\n        sampleTicket.status = 'in_progress';\n        actionDetails = {\n          action: 'status_changed',\n          changedBy: currentUser,\n          changes: {\n            oldStatus: 'open',\n            newStatus: 'in_progress'\n          }\n        };\n        break;\n      case 'ticket_resolved':\n        sampleTicket.status = 'resolved';\n        actionDetails = {\n          action: 'resolved',\n          changedBy: currentUser\n        };\n        break;\n      case 'ticket_assigned':\n        actionDetails = {\n          action: 'assigned',\n          changedBy: currentUser\n        };\n        break;\n      case 'ticket_replied':\n        actionDetails = {\n          action: 'replied',\n          changedBy: currentUser,\n          replyContent: sampleTicket.replies[0].content,\n          isInternal: false\n        };\n        break;\n    }\n\n    const notificationService = TicketNotificationService.getInstance();\n\n    // Temporarily override the notification recipients for testing\n    const originalGetNotificationRecipients = (notificationService as any).getNotificationRecipients;\n    \n    (notificationService as any).getNotificationRecipients = async (ticket: any, type: string) => {\n      const recipients = [];\n      \n      // Always include the test email as admin\n      recipients.push({\n        email: testEmail,\n        name: 'Test Admin',\n        type: 'admin'\n      });\n\n      // Optionally include customer template but sent to the same test email\n      if (includeCustomerInTest && ticket.user) {\n        recipients.push({\n          email: testEmail, // Send customer email to the same test email address\n          name: ticket.user.name,\n          type: 'customer' // This will generate the customer template\n        });\n      }\n\n      return recipients;\n    };\n\n    try {\n      // Send the test notification\n      const result = await notificationService.sendTicketNotification(sampleTicket, {\n        ticketId: sampleTicket._id,\n        notificationType: notificationType as any,\n        actionDetails: Object.keys(actionDetails).length > 0 ? actionDetails : undefined\n      });\n\n      // Restore original method\n      (notificationService as any).getNotificationRecipients = originalGetNotificationRecipients;\n\n      return NextResponse.json({\n        message: 'Test notification sent successfully',\n        results: result.results,\n        sampleData: {\n          notificationType,\n          ticketNumber: sampleTicket.ticketNumber,\n          testEmail,\n          includeCustomerInTest\n        }\n      });\n\n    } catch (error) {\n      // Restore original method in case of error\n      (notificationService as any).getNotificationRecipients = originalGetNotificationRecipients;\n      throw error;\n    }\n\n  } catch (error) {\n    console.error('Error sending test notification:', error);\n    return NextResponse.json(\n      { error: 'Failed to send test notification' },\n      { status: 500 }\n    );\n  }\n}\n\n// GET endpoint to get available notification types for testing\nexport async function GET(request: NextRequest) {\n  try {\n    const user = await getCurrentUser();\n    if (!user?.id) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    await connectToDatabase();\n\n    // Check if user is admin\n    const currentUser = await UserModel.findById(user.id).lean();\n    if (!currentUser || currentUser.role !== 'admin') {\n      return NextResponse.json({ error: 'Admin access required' }, { status: 403 });\n    }\n\n    const notificationTypes = [\n      {\n        value: 'ticket_created',\n        label: 'Ticket Created',\n        description: 'Sent when a new support ticket is created'\n      },\n      {\n        value: 'ticket_updated',\n        label: 'Ticket Updated',\n        description: 'Sent when ticket status, priority, or assignment changes'\n      },\n      {\n        value: 'ticket_resolved',\n        label: 'Ticket Resolved',\n        description: 'Sent when a ticket is marked as resolved'\n      },\n      {\n        value: 'ticket_assigned',\n        label: 'Ticket Assigned',\n        description: 'Sent when a ticket is assigned to a support agent'\n      },\n      {\n        value: 'ticket_replied',\n        label: 'Ticket Reply',\n        description: 'Sent when a new reply is added to a ticket'\n      }\n    ];\n\n    return NextResponse.json({\n      notificationTypes,\n      currentUserEmail: currentUser.email\n    });\n\n  } catch (error) {\n    console.error('Error getting notification types:', error);\n    return NextResponse.json(\n      { error: 'Failed to get notification types' },\n      { status: 500 }\n    );\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/admin/unsolved-tickets/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":111,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3288,3291],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3288,3291],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":130,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":130,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3994,3997],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3994,3997],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getCurrentUser } from '@/lib/authService';\nimport { connectToDatabase } from '@/lib/db';\nimport TicketModel from '@/models/Ticket';\nimport User from '@/models/User';\nimport UserOnboardingModel from '@/models/UserOnboarding';\n\ninterface UnsolvedTicket {\n  id: string;\n  ticketNumber: string;\n  title: string;\n  service: string;\n  priority: 'low' | 'medium' | 'high' | 'urgent';\n  status: string; // Can be any status from the database\n  createdAt: Date;\n  updatedAt: Date;\n  user: {\n    id: string;\n    name: string;\n    email: string;\n    companyName?: string; // Company name from onboarding\n  };\n  assignedTo?: {\n    id: string;\n    name: string;\n    email: string;\n  };\n  daysOpen: number;\n  lastReplyAt?: Date;\n  replyCount: number;\n}\n\nexport async function GET(request: NextRequest) {\n  try {\n    const currentUser = await getCurrentUser();\n    \n    if (!currentUser) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    if (currentUser.role !== 'admin') {\n      return NextResponse.json({ error: 'Forbidden - Admin access required' }, { status: 403 });\n    }\n\n    await connectToDatabase();\n\n    const { searchParams } = new URL(request.url);\n    const limit = parseInt(searchParams.get('limit') || '10');\n\n    if (limit > 50) {\n      return NextResponse.json(\n        { error: 'Limit cannot exceed 50' }, \n        { status: 400 }\n      );\n    }\n\n    // Fetch unsolved tickets (excluding 'closed' and 'resolved' statuses)\n    const tickets = await TicketModel.find({\n      status: { $nin: ['closed', 'resolved'] }\n    })\n    .sort({ createdAt: -1 }) // Latest first\n    .limit(limit)\n    .lean();\n\n    console.log(`🎫 Found ${tickets.length} unsolved tickets`);\n    if (tickets.length === 0) {\n      console.log('❗ No unsolved tickets found in database');\n      return NextResponse.json({\n        tickets: [],\n        stats: {\n          total: 0,\n          byPriority: { urgent: 0, high: 0, medium: 0, low: 0 },\n          byStatus: { open: 0, in_progress: 0, waiting_user: 0, waiting_admin: 0 },\n          oldestTicket: 0,\n          averageDaysOpen: 0,\n        },\n        limit,\n        timestamp: new Date().toISOString()\n      });\n    }\n\n    // Get unique user IDs from tickets\n    const userIds = [...new Set(tickets.map(ticket => ticket.userId).filter(Boolean))];\n    \n    console.log('🎫 Raw tickets sample:', tickets.slice(0, 2).map(t => ({ \n      _id: t._id, \n      userId: t.userId, \n      userIdType: typeof t.userId,\n      title: t.title \n    })));\n    \n    // Manually fetch user data since userId is stored as string, not ObjectId reference\n    const users = await User.find({\n      _id: { $in: userIds }\n    }).lean();\n    \n    console.log('👥 Raw users data:', users.map(u => ({ \n      _id: u._id, \n      _idType: typeof u._id,\n      _idString: u._id.toString(),\n      name: u.name, \n      email: u.email \n    })));\n    \n    // Create a map of userId to user data (using object like admin tickets route)\n    const userMap = users.reduce((acc, user) => {\n      const userId = user._id.toString();\n      acc[userId] = user;\n      console.log('🗂️ Adding to userMap:', userId, '→', { name: user.name, email: user.email });\n      return acc;\n    }, {} as Record<string, any>);\n    \n    console.log('📋 Total users fetched:', users.length);\n    console.log('🗂️ UserMap keys:', Object.keys(userMap));\n    console.log('🗂️ UserMap contents:', userMap);\n    console.log('🎫 Ticket userIds:', userIds);\n\n    // Fetch onboarding data for all users\n    const onboardingData = await UserOnboardingModel.find({\n      userId: { $in: userIds }\n    }).lean();\n\n    // Create a map of userId to company name\n    const onboardingMap = onboardingData.reduce((acc, onboarding) => {\n      acc[onboarding.userId] = onboarding.companyName;\n      return acc;\n    }, {} as Record<string, string>);\n\n    // Transform tickets data\n    const unsolvedTickets: UnsolvedTicket[] = tickets.map((ticket: any) => {\n      const now = new Date();\n      const createdAt = new Date(ticket.createdAt);\n      const daysOpen = Math.floor((now.getTime() - createdAt.getTime()) / (1000 * 60 * 60 * 24));\n      \n      // Count replies (assuming replies are stored in a replies array)\n      const replyCount = ticket.replies?.length || 0;\n      \n      // Get last reply date\n      const lastReplyAt = ticket.replies?.length > 0 \n        ? new Date(ticket.replies[ticket.replies.length - 1].createdAt)\n        : undefined;\n\n      // Get user data from userMap\n      const userData = userMap[ticket.userId];\n      \n      // Better debugging\n      console.log(`🔍 Processing ticket ${ticket.ticketNumber}:`);\n      console.log(`   - Ticket userId: \"${ticket.userId}\" (${typeof ticket.userId})`);\n      console.log(`   - UserMap has key: ${userMap.hasOwnProperty(ticket.userId)}`);\n      console.log(`   - UserData found:`, userData ? { name: userData.name, email: userData.email } : 'null');\n      \n      const userName = userData?.name || `Unknown User (${ticket.userId})`;\n      const userEmail = userData?.email || '';\n\n      return {\n        id: ticket._id.toString(),\n        ticketNumber: ticket.ticketNumber || `TKT-${ticket._id.toString().slice(-6)}`,\n        title: ticket.title,\n        service: ticket.service || 'General',\n        priority: ticket.priority || 'medium',\n        status: ticket.status,\n        createdAt: new Date(ticket.createdAt),\n        updatedAt: new Date(ticket.updatedAt),\n        user: {\n          id: ticket.userId || '',\n          name: userName,\n          email: userEmail,\n          companyName: onboardingMap[ticket.userId] || undefined\n        },\n        assignedTo: ticket.assignedTo ? {\n          id: ticket.assignedTo,\n          name: 'Admin User', // We'd need to fetch admin users separately if needed\n          email: '',\n        } : undefined,\n        daysOpen,\n        lastReplyAt,\n        replyCount,\n      };\n    });\n\n    // Calculate statistics\n    const stats = {\n      total: unsolvedTickets.length,\n      byPriority: {\n        urgent: unsolvedTickets.filter(t => t.priority === 'urgent').length,\n        high: unsolvedTickets.filter(t => t.priority === 'high').length,\n        medium: unsolvedTickets.filter(t => t.priority === 'medium').length,\n        low: unsolvedTickets.filter(t => t.priority === 'low').length,\n      },\n      byStatus: {\n        open: unsolvedTickets.filter(t => t.status === 'open').length,\n        in_progress: unsolvedTickets.filter(t => t.status === 'in_progress').length,\n        waiting_user: unsolvedTickets.filter(t => t.status === 'waiting_user').length,\n        waiting_admin: unsolvedTickets.filter(t => t.status === 'waiting_admin').length,\n      },\n      oldestTicket: unsolvedTickets.length > 0 \n        ? Math.max(...unsolvedTickets.map(t => t.daysOpen))\n        : 0,\n      averageDaysOpen: unsolvedTickets.length > 0\n        ? Math.round(unsolvedTickets.reduce((sum, t) => sum + t.daysOpen, 0) / unsolvedTickets.length)\n        : 0,\n    };\n\n    const responseData = {\n      tickets: unsolvedTickets,\n      stats,\n      limit,\n      timestamp: new Date().toISOString()\n    };\n\n    return NextResponse.json(responseData);\n\n  } catch (error) {\n    console.error('Error fetching unsolved tickets:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch unsolved tickets' },\n      { status: 500 }\n    );\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/admin/user-defaults/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'request' is defined but never used.","line":168,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":168,"endColumn":34}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getCurrentUser } from '@/lib/authService';\nimport { \n  initializeUserDefaults, \n  resetUserPreferences, \n  checkUserPreferences,\n  bulkInitializeUsers \n} from '@/lib/userSetup';\n\n/**\n * GET /api/admin/user-defaults\n * Check preferences status for a user or multiple users\n */\nexport async function GET(request: NextRequest) {\n  try {\n    const currentUser = await getCurrentUser();\n    \n    if (!currentUser || currentUser.role !== 'admin') {\n      return NextResponse.json({ error: 'Unauthorized - Admin access required' }, { status: 403 });\n    }\n\n    const { searchParams } = new URL(request.url);\n    const userId = searchParams.get('userId');\n\n    if (!userId) {\n      return NextResponse.json({ error: 'userId parameter is required' }, { status: 400 });\n    }\n\n    const status = await checkUserPreferences(userId);\n\n    return NextResponse.json({\n      userId,\n      status,\n      message: status.needsInitialization \n        ? 'User needs preference initialization'\n        : 'User preferences are set up'\n    });\n\n  } catch (error) {\n    console.error('Error checking user preferences:', error);\n    return NextResponse.json({ \n      error: 'Failed to check user preferences',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    }, { status: 500 });\n  }\n}\n\n/**\n * POST /api/admin/user-defaults\n * Initialize or reset user preferences\n */\nexport async function POST(request: NextRequest) {\n  try {\n    const currentUser = await getCurrentUser();\n    \n    if (!currentUser || currentUser.role !== 'admin') {\n      return NextResponse.json({ error: 'Unauthorized - Admin access required' }, { status: 403 });\n    }\n\n    const body = await request.json();\n    const { \n      action, \n      userId, \n      userRole = 'user', \n      resetOptions = { resetDashboard: true, resetNotifications: true },\n      users // For bulk operations\n    } = body;\n\n    if (!action) {\n      return NextResponse.json({ error: 'Action is required' }, { status: 400 });\n    }\n\n    switch (action) {\n      case 'initialize': {\n        if (!userId) {\n          return NextResponse.json({ error: 'userId is required for initialize action' }, { status: 400 });\n        }\n\n        const result = await initializeUserDefaults(userId, userRole);\n        \n        if (result.success) {\n          return NextResponse.json({\n            success: true,\n            message: `Successfully initialized default preferences for user ${userId}`,\n            data: {\n              dashboardPreferences: result.dashboardPreferences,\n              notificationPreferences: result.notificationPreferences\n            }\n          });\n        } else {\n          return NextResponse.json({\n            error: 'Failed to initialize user preferences',\n            details: result.error\n          }, { status: 500 });\n        }\n      }\n\n      case 'reset': {\n        if (!userId) {\n          return NextResponse.json({ error: 'userId is required for reset action' }, { status: 400 });\n        }\n\n        const result = await resetUserPreferences(userId, userRole, resetOptions);\n        \n        if (result.success) {\n          return NextResponse.json({\n            success: true,\n            message: `Successfully reset preferences for user ${userId}`,\n            reset: result.reset\n          });\n        } else {\n          return NextResponse.json({\n            error: 'Failed to reset user preferences',\n            details: result.error\n          }, { status: 500 });\n        }\n      }\n\n      case 'bulk-initialize': {\n        if (!users || !Array.isArray(users)) {\n          return NextResponse.json({ \n            error: 'users array is required for bulk-initialize action' \n          }, { status: 400 });\n        }\n\n        // Validate users array structure\n        for (const user of users) {\n          if (!user.userId || !['admin', 'user'].includes(user.role)) {\n            return NextResponse.json({ \n              error: 'Each user must have userId and role (admin or user)' \n            }, { status: 400 });\n          }\n        }\n\n        const result = await bulkInitializeUsers(users);\n        \n        return NextResponse.json({\n          success: true,\n          message: `Bulk initialization complete`,\n          results: {\n            totalUsers: users.length,\n            successful: result.success,\n            failed: result.failed,\n            errors: result.errors\n          }\n        });\n      }\n\n      default:\n        return NextResponse.json({ \n          error: 'Invalid action. Supported actions: initialize, reset, bulk-initialize' \n        }, { status: 400 });\n    }\n\n  } catch (error) {\n    console.error('Error in user defaults API:', error);\n    return NextResponse.json({ \n      error: 'Internal server error',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    }, { status: 500 });\n  }\n}\n\n/**\n * PUT /api/admin/user-defaults\n * Update default preference templates (for future users)\n */\nexport async function PUT(request: NextRequest) {\n  try {\n    const currentUser = await getCurrentUser();\n    \n    if (!currentUser || currentUser.role !== 'admin') {\n      return NextResponse.json({ error: 'Unauthorized - Admin access required' }, { status: 403 });\n    }\n\n    // This could be used to update the default preference templates\n    // For now, we'll return a message indicating this feature could be implemented\n    return NextResponse.json({\n      message: 'Default preference template updates would be implemented here',\n      note: 'Currently, defaults are defined in code. Consider implementing dynamic template management.'\n    });\n\n  } catch (error) {\n    console.error('Error updating default templates:', error);\n    return NextResponse.json({ \n      error: 'Internal server error',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    }, { status: 500 });\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/admin/users-pending/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[702,705],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[702,705],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getCurrentUser } from '@/lib/authService';\nimport { connectToDatabase } from '@/lib/db';\nimport User from '@/models/User';\n\nexport async function GET(request: NextRequest) {\n  try {\n    const currentUser = await getCurrentUser();\n    \n    if (!currentUser || currentUser.role !== 'admin') {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { searchParams } = new URL(request.url);\n    const filter = searchParams.get('filter') || 'all'; // all, missing_sippy, pending_verification\n    const limit = parseInt(searchParams.get('limit') || '10');\n\n    await connectToDatabase();\n\n    let query: any = {};\n    \n    // Build query based on filter\n    switch (filter) {\n      case 'missing_sippy':\n        query = {\n          $or: [\n            { sippyAccountId: { $exists: false } },\n            { sippyAccountId: null },\n            { sippyAccountId: '' }\n          ]\n        };\n        break;\n      case 'pending_verification':\n        query = {\n          $or: [\n            { isEmailVerified: { $ne: true } },\n            { isEmailVerified: { $exists: false } }\n          ]\n        };\n        break;\n      case 'all':\n      default:\n        query = {\n          $or: [\n            // Missing Sippy Account ID\n            { sippyAccountId: { $exists: false } },\n            { sippyAccountId: null },\n            { sippyAccountId: '' },\n            // Pending email verification\n            { isEmailVerified: { $ne: true } },\n            { isEmailVerified: { $exists: false } }\n          ]\n        };\n        break;\n    }\n\n    // Get users that need attention\n    const users = await User.find(query)\n      .select('name email role sippyAccountId isEmailVerified createdAt creationMethod')\n      .sort({ createdAt: -1 })\n      .limit(limit)\n      .lean();\n\n    // Get counts for each category\n    const [missingSippyCount, pendingVerificationCount, totalPendingCount] = await Promise.all([\n      User.countDocuments({\n        $or: [\n          { sippyAccountId: { $exists: false } },\n          { sippyAccountId: null },\n          { sippyAccountId: '' }\n        ]\n      }),\n      User.countDocuments({\n        $or: [\n          { isEmailVerified: { $ne: true } },\n          { isEmailVerified: { $exists: false } }\n        ]\n      }),\n      User.countDocuments(query)\n    ]);\n\n    // Transform users to add flags for what's missing\n    const transformedUsers = users.map(user => ({\n      ...user,\n      id: user._id.toString(),\n      needsSippyId: !user.sippyAccountId,\n      needsEmailVerification: !user.isEmailVerified,\n      isRecent: new Date(user.createdAt).getTime() > Date.now() - (7 * 24 * 60 * 60 * 1000) // within 7 days\n    }));\n\n    return NextResponse.json({\n      users: transformedUsers,\n      counts: {\n        missingSippy: missingSippyCount,\n        pendingVerification: pendingVerificationCount,\n        totalPending: totalPendingCount\n      },\n      filter,\n      limit\n    });\n  } catch (error) {\n    console.error('Error fetching pending users:', error);\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/admin/users/[id]/verify-email/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/admin/users/route.ts","messages":[{"ruleId":"prefer-const","severity":2,"message":"'query' is never reassigned. Use 'const' instead.","line":29,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":29,"endColumn":19,"fix":{"range":[1051,1071],"text":"const query: any = {};"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1062,1065],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1062,1065],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":62,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1974,1977],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1974,1977],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { connectToDatabase } from '@/lib/db';\nimport User from '@/models/User';\nimport UserOnboardingModel from '@/models/UserOnboarding';\nimport { getCurrentUser } from '@/lib/authService';\n\nexport async function GET(request: NextRequest) {\n  try {\n    // Check authentication and admin role\n    const currentUser = await getCurrentUser();\n    if (!currentUser) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    await connectToDatabase();\n    const user = await User.findById(currentUser.id);\n    if (!user || user.role !== 'admin') {\n      return NextResponse.json({ error: 'Admin access required' }, { status: 403 });\n    }\n\n    // Get URL parameters\n    const url = new URL(request.url);\n    const search = url.searchParams.get('search') || '';\n    const limit = parseInt(url.searchParams.get('limit') || '50');\n    const sippyOnly = url.searchParams.get('sippyOnly') === 'true';\n    const role = url.searchParams.get('role');\n\n    // Build query\n    let query: any = {};\n    \n    if (role) {\n      query.role = role;\n    }\n    \n    if (sippyOnly) {\n      query.sippyAccountId = { $exists: true, $ne: null, $type: 'number' };\n    }\n\n    if (search) {\n      query.$or = [\n        { name: { $regex: search, $options: 'i' } },\n        { email: { $regex: search, $options: 'i' } }\n      ];\n    }\n\n    // Get users\n    const users = await User.find(query)\n      .select('_id name email sippyAccountId role')\n      .limit(limit)\n      .sort({ name: 1 });\n\n    // Get onboarding data for all users\n    const userIds = users.map(user => user._id.toString());\n    const onboardings = await UserOnboardingModel.find({ userId: { $in: userIds } })\n      .select('userId companyName')\n      .lean();\n\n    // Create onboarding map\n    const onboardingMap = onboardings.reduce((acc, onboarding) => {\n      acc[onboarding.userId] = onboarding;\n      return acc;\n    }, {} as Record<string, any>);\n\n    const userList = users.map(user => ({\n      _id: user._id.toString(),\n      name: user.name,\n      email: user.email,\n      sippyAccountId: user.sippyAccountId,\n      role: user.role,\n      // Add company information from onboarding in nested structure\n      firstName: user.name?.split(' ')[0] || '',\n      lastName: user.name?.split(' ').slice(1).join(' ') || '',\n      onboarding: {\n        companyName: onboardingMap[user._id.toString()]?.companyName || null,\n      },\n      // Also include it directly for backward compatibility\n      companyName: onboardingMap[user._id.toString()]?.companyName || null,\n    }));\n\n    return NextResponse.json({ users: userList });\n\n  } catch (error) {\n    console.error('Error fetching users:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch users' },\n      { status: 500 }\n    );\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/admin/webhook-events/cleanup/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'request' is defined but never used.","line":6,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":40,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1115,1118],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1115,1118],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":44,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1283,1286],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1283,1286],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'request' is defined but never used.","line":92,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":92,"endColumn":34}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getCurrentUser } from '@/lib/authService';\nimport WebhookEvent from '@/models/WebhookEvent';\nimport { connectToDatabase } from '@/lib/db';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const user = await getCurrentUser();\n    if (!user || user.role !== 'admin') {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    await connectToDatabase();\n\n    // Find and clean up any orphaned webhook events\n    const duplicateEvents = await WebhookEvent.aggregate([\n      {\n        $group: {\n          _id: { \n            paymentIntentId: \"$paymentIntentId\", \n            eventType: \"$eventType\" \n          },\n          count: { $sum: 1 },\n          events: { $push: \"$$ROOT\" }\n        }\n      },\n      {\n        $match: {\n          \"count\": { $gt: 1 },\n          \"_id.paymentIntentId\": { $ne: null }\n        }\n      }\n    ]);\n\n    let cleanedUp = 0;\n    let processedPayments = 0;\n\n    for (const group of duplicateEvents) {\n      const events = group.events;\n      const processedEvent = events.find((e: any) => e.processed);\n      \n      if (processedEvent) {\n        // Keep the processed event, mark others as processed too\n        const duplicates = events.filter((e: any) => e._id.toString() !== processedEvent._id.toString());\n        \n        for (const duplicate of duplicates) {\n          await WebhookEvent.findByIdAndUpdate(duplicate._id, {\n            processed: true,\n            processedAt: processedEvent.processedAt || new Date(),\n            metadata: {\n              ...duplicate.metadata,\n              cleanedUp: true,\n              originalEventId: processedEvent.eventId\n            }\n          });\n          cleanedUp++;\n        }\n        processedPayments++;\n      }\n    }\n\n    // Get statistics\n    const stats = await WebhookEvent.aggregate([\n      {\n        $group: {\n          _id: {\n            provider: \"$provider\",\n            eventType: \"$eventType\",\n            processed: \"$processed\"\n          },\n          count: { $sum: 1 }\n        }\n      }\n    ]);\n\n    return NextResponse.json({\n      message: 'Webhook events cleanup completed',\n      cleaned: cleanedUp,\n      processedPayments,\n      duplicateGroups: duplicateEvents.length,\n      statistics: stats\n    });\n\n  } catch (error) {\n    console.error('Webhook cleanup error:', error);\n    return NextResponse.json({ \n      error: 'Failed to clean up webhook events' \n    }, { status: 500 });\n  }\n}\n\nexport async function GET(request: NextRequest) {\n  try {\n    const user = await getCurrentUser();\n    if (!user || user.role !== 'admin') {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    await connectToDatabase();\n\n    // Get webhook event statistics\n    const stats = await WebhookEvent.aggregate([\n      {\n        $group: {\n          _id: {\n            provider: \"$provider\",\n            eventType: \"$eventType\",\n            processed: \"$processed\"\n          },\n          count: { $sum: 1 },\n          latest: { $max: \"$createdAt\" }\n        }\n      },\n      {\n        $sort: { \"_id.provider\": 1, \"_id.eventType\": 1 }\n      }\n    ]);\n\n    // Check for potential duplicates\n    const duplicates = await WebhookEvent.aggregate([\n      {\n        $group: {\n          _id: { \n            paymentIntentId: \"$paymentIntentId\", \n            eventType: \"$eventType\" \n          },\n          count: { $sum: 1 },\n          eventIds: { $push: \"$eventId\" }\n        }\n      },\n      {\n        $match: {\n          \"count\": { $gt: 1 },\n          \"_id.paymentIntentId\": { $ne: null }\n        }\n      }\n    ]);\n\n    const recentEvents = await WebhookEvent.find()\n      .sort({ createdAt: -1 })\n      .limit(20)\n      .select('eventId eventType provider processed paymentIntentId createdAt');\n\n    return NextResponse.json({\n      statistics: stats,\n      duplicates: duplicates.length,\n      duplicateDetails: duplicates,\n      recentEvents,\n      totalEvents: await WebhookEvent.countDocuments()\n    });\n\n  } catch (error) {\n    console.error('Webhook stats error:', error);\n    return NextResponse.json({ \n      error: 'Failed to get webhook statistics' \n    }, { status: 500 });\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/auth/forgot-password/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/auth/login/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/auth/logout/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":12,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":17}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server';\n\nexport async function POST() {\n  try {\n    // Create response\n    const response = NextResponse.json({ success: true });\n    \n    // Clear auth cookie directly in the response\n    response.cookies.delete('auth_token');\n    \n    return response;\n  } catch (error) {\n    return NextResponse.json(\n      { message: 'Logout failed' },\n      { status: 500 }\n    );\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/auth/me/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/auth/register/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":52,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1726,1729],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1726,1729],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'emailError' is defined but never used.","line":95,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":95,"endColumn":24}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { EmailVerificationService } from '@/services/EmailVerificationService';\nimport User from '@/models/User';\nimport { connectToDatabase } from '@/lib/db';\nimport { SippyCredentials } from '@/lib/sippyClient';\nimport { initializeUserDefaults } from '@/lib/userSetup';\n\ninterface SippyCredentialsStore {\n  [userId: string]: SippyCredentials;\n}\n\n// In-memory store for Sippy credentials\n// In a production app, these would be encrypted and stored in a database\nconst sippyCredentialsStore: SippyCredentialsStore = {};\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { name, email, password, sippyAccountId, sippyCredentials } = body;\n\n    // Validate required fields (sippyAccountId is now optional - will be assigned by admin)\n    if (!name || !email || !password) {\n      return NextResponse.json(\n        { message: 'Name, email, and password are required' },\n        { status: 400 }\n      );\n    }\n\n    await connectToDatabase();\n\n    // Check if user already exists\n    const existingUser = await User.findOne({ email });\n    if (existingUser) {\n      if (existingUser.isEmailVerified) {\n        return NextResponse.json(\n          { message: 'User already exists with verified email. Please login instead.' },\n          { status: 400 }\n        );\n      } else {\n        return NextResponse.json(\n          { \n            message: 'Registration in progress. Please check your email for verification code.',\n            requiresVerification: true,\n            email: existingUser.email\n          },\n          { status: 200 }\n        );\n      }\n    }\n\n    // Create user data object\n    const userData: any = {\n      name,\n      email,\n      password,\n      isEmailVerified: false, // Explicitly set to false\n      creationMethod: 'signup', // User registered via signup form\n    };\n\n    // Only add sippyAccountId if provided (for backwards compatibility)\n    if (sippyAccountId) {\n      userData.sippyAccountId = sippyAccountId;\n    }\n\n    // Create the user (unverified)\n    const user = await User.create(userData);\n    const userId = user._id.toString();\n\n    // Store Sippy credentials in memory if provided\n    if (sippyCredentials) {\n      sippyCredentialsStore[userId] = sippyCredentials;\n    }\n\n    // Initialize default preferences for the new user\n    try {\n      await initializeUserDefaults(userId, 'user');\n      console.log(`✅ Default preferences initialized for new user: ${email}`);\n    } catch (prefError) {\n      // Log the error but don't fail registration\n      console.error('❌ Failed to initialize default preferences for new user:', prefError);\n    }\n\n    // Send verification email\n    try {\n      const verificationService = EmailVerificationService.getInstance();\n      await verificationService.sendVerificationEmail(email, name);\n      \n      return NextResponse.json({\n        success: true,\n        message: 'Registration successful! Please check your email for a verification code.',\n        requiresVerification: true,\n        email: email,\n        userId: userId\n      });\n    } catch (emailError) {\n      // If email sending fails, we still want to indicate successful registration\n      // but with a different message\n      return NextResponse.json({\n        success: true,\n        message: 'Registration successful! However, we encountered an issue sending the verification email. Please contact support.',\n        requiresVerification: true,\n        email: email,\n        userId: userId,\n        emailError: true\n      });\n    }\n\n  } catch (error) {\n    // Handle specific validation errors\n    if (error instanceof Error) {\n      if (error.message.includes('duplicate key') || error.message.includes('E11000')) {\n        return NextResponse.json(\n          { message: 'User with this email already exists' },\n          { status: 400 }\n        );\n      }\n      if (error.message.includes('validation failed')) {\n        return NextResponse.json(\n          { message: 'Please check your input and try again' },\n          { status: 400 }\n        );\n      }\n    }\n    \n    return NextResponse.json(\n      { message: error instanceof Error ? error.message : 'Registration failed' },\n      { status: 400 }\n    );\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/auth/reset-password/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/auth/send-verification/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/auth/verify-email/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/backorder-requests/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'User' is defined but never used.","line":6,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":12},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":45,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1849,1852],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1849,1852],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":94,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":94,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3246,3249],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3246,3249],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":99,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3536,3539],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3536,3539],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getCurrentUser } from '@/lib/authService';\nimport { connectToDatabase } from '@/lib/db';\nimport BackorderRequest from '@/models/BackorderRequest';\nimport PhoneNumber from '@/models/PhoneNumber';\nimport User from '@/models/User';\nimport UserOnboarding from '@/models/UserOnboarding';\nimport mongoose from 'mongoose';\nimport { z } from 'zod';\nimport { sendAdminBackorderRequestNotification } from '@/lib/adminNotifications';\n\n// Validation schema for creating backorder requests\nconst createBackorderRequestSchema = z.object({\n  phoneNumberId: z.string().min(1, 'Phone number ID is required'),\n  reason: z.string().max(500, 'Reason cannot exceed 500 characters').optional(),\n  businessJustification: z.string().max(1000, 'Business justification cannot exceed 1000 characters').optional(),\n  priority: z.enum(['low', 'medium', 'high', 'urgent']).default('medium'),\n});\n\n// GET - List backorder requests (with filters and pagination)\nexport async function GET(request: NextRequest) {\n  try {\n    const user = await getCurrentUser();\n    \n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    await connectToDatabase();\n\n    const { searchParams } = new URL(request.url);\n    \n    // Parse query parameters\n    const page = Math.max(1, parseInt(searchParams.get('page') || '1'));\n    const limit = Math.min(100, Math.max(1, parseInt(searchParams.get('limit') || '20')));\n    const skip = (page - 1) * limit;\n    \n    const status = searchParams.get('status');\n    const priority = searchParams.get('priority');\n    const search = searchParams.get('search');\n    const sortBy = searchParams.get('sortBy') || 'createdAt';\n    const sortOrder = searchParams.get('sortOrder') === 'asc' ? 1 : -1;\n\n    // Build filter object\n    const filter: any = {};\n    \n    // Non-admins can only see their own requests\n    if (user.role !== 'admin') {\n      filter.userId = new mongoose.Types.ObjectId(user.id);\n    } else {\n      // Admins can filter by userId if specified\n      const userId = searchParams.get('userId');\n      if (userId) {\n        filter.userId = new mongoose.Types.ObjectId(userId);\n      }\n    }\n\n    if (status) {\n      filter.status = status;\n    }\n\n    if (priority) {\n      filter.priority = priority;\n    }\n\n    if (search) {\n      filter.$or = [\n        { requestNumber: { $regex: search, $options: 'i' } },\n        { userEmail: { $regex: search, $options: 'i' } },\n        { reason: { $regex: search, $options: 'i' } },\n        { businessJustification: { $regex: search, $options: 'i' } },\n      ];\n    }\n\n    // Get total count\n    const total = await BackorderRequest.countDocuments(filter);\n\n    // Get requests with populated data\n    const requests = await BackorderRequest.find(filter)\n      .populate({\n        path: 'phoneNumberId',\n        select: 'number country countryCode numberType provider monthlyRate setupFee currency capabilities',\n      })\n      .populate({\n        path: 'userId',\n        select: 'name email',\n      })\n      .sort({ [sortBy]: sortOrder })\n      .skip(skip)\n      .limit(limit)\n      .lean();\n\n    // Get onboarding data for users if needed\n    const userIds = requests.map((request: any) => request.userId._id);\n    const onboardingData = await UserOnboarding.find({ userId: { $in: userIds } }).lean();\n    const onboardingMap = new Map(onboardingData.map(ob => [ob.userId.toString(), ob]));\n\n    // Format the response\n    const formattedRequests = requests.map((request: any) => {\n      const onboarding = onboardingMap.get(request.userId._id.toString());\n      return {\n        ...request,\n        _id: request._id.toString(),\n        phoneNumberId: request.phoneNumberId._id.toString(),\n        userId: request.userId._id.toString(),\n        phoneNumber: request.phoneNumberId ? {\n          ...request.phoneNumberId,\n          _id: request.phoneNumberId._id.toString(),\n        } : undefined,\n        user: request.userId ? {\n          ...request.userId,\n          _id: request.userId._id.toString(),\n          company: onboarding?.companyName,\n          onboarding: onboarding,\n        } : undefined,\n      };\n    });\n\n    return NextResponse.json({\n      requests: formattedRequests,\n      pagination: {\n        page,\n        limit,\n        total,\n        totalPages: Math.ceil(total / limit),\n      },\n    });\n\n  } catch (error) {\n    console.error('Error fetching backorder requests:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch backorder requests' },\n      { status: 500 }\n    );\n  }\n}\n\n// POST - Create a new backorder request\nexport async function POST(request: NextRequest) {\n  try {\n    const user = await getCurrentUser();\n    \n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    await connectToDatabase();\n\n    const body = await request.json();\n    \n    // Validate the request body\n    const validatedData = createBackorderRequestSchema.parse(body);\n\n    // Verify the phone number exists and is backorder-only\n    const phoneNumber = await PhoneNumber.findById(validatedData.phoneNumberId);\n    \n    if (!phoneNumber) {\n      return NextResponse.json(\n        { error: 'Phone number not found' },\n        { status: 404 }\n      );\n    }\n\n    if (!phoneNumber.backorderOnly) {\n      return NextResponse.json(\n        { error: 'This phone number is available for direct purchase, not backorder' },\n        { status: 400 }\n      );\n    }\n\n    // Check if user already has a pending request for this number\n    const existingRequest = await BackorderRequest.findOne({\n      phoneNumberId: validatedData.phoneNumberId,\n      userId: new mongoose.Types.ObjectId(user.id),\n      status: { $in: ['pending', 'approved'] },\n    });\n\n    if (existingRequest) {\n      return NextResponse.json(\n        { error: 'You already have a pending or approved backorder request for this phone number' },\n        { status: 400 }\n      );\n    }\n\n    // Create the backorder request\n    const backorderRequest = new BackorderRequest({\n      phoneNumberId: validatedData.phoneNumberId,\n      userId: new mongoose.Types.ObjectId(user.id),\n      userEmail: user.email,\n      status: 'pending',\n      priority: validatedData.priority,\n      reason: validatedData.reason,\n      businessJustification: validatedData.businessJustification,\n      // Set expiration to 30 days from now\n      expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),\n    });\n\n    await backorderRequest.save();\n\n    console.log(`📋 New backorder request created: ${backorderRequest.requestNumber} for number ${phoneNumber.number} by user ${user.email}`);\n\n    // Populate the response data\n    const populatedRequest = await BackorderRequest.findById(backorderRequest._id)\n      .populate({\n        path: 'phoneNumberId',\n        select: 'number country countryCode numberType provider monthlyRate setupFee currency capabilities',\n      })\n      .populate({\n        path: 'userId',\n        select: 'name email',\n      })\n      .lean();\n\n    // Get onboarding data for the user\n    const onboarding = await UserOnboarding.findOne({ userId: new mongoose.Types.ObjectId(user.id) }).lean();\n\n    // Format the response\n    const formattedRequest = {\n      ...populatedRequest,\n      _id: populatedRequest!._id.toString(),\n      phoneNumberId: populatedRequest!.phoneNumberId._id.toString(),\n      userId: populatedRequest!.userId._id.toString(),\n      phoneNumber: {\n        ...populatedRequest!.phoneNumberId,\n        _id: populatedRequest!.phoneNumberId._id.toString(),\n      },\n      user: {\n        ...populatedRequest!.userId,\n        _id: populatedRequest!.userId._id.toString(),\n        company: onboarding?.companyName,\n        onboarding: onboarding,\n      },\n    };\n\n    // Send admin notification\n    await sendAdminBackorderRequestNotification({\n      phoneNumber: {\n        number: phoneNumber.number,\n        country: phoneNumber.country,\n        numberType: phoneNumber.numberType,\n        monthlyRate: phoneNumber.monthlyRate || 0,\n        setupFee: phoneNumber.setupFee || 0,\n        currency: phoneNumber.currency,\n        capabilities: phoneNumber.capabilities || []\n      },\n      user: {\n        name: user.name || user.email,\n        email: user.email,\n        company: onboarding?.companyName\n      },\n      request: {\n        requestNumber: backorderRequest.requestNumber,\n        submittedAt: backorderRequest.createdAt.toISOString(),\n        reason: validatedData.reason,\n        businessJustification: validatedData.businessJustification\n      },\n      requestType: 'single'\n    });\n\n    return NextResponse.json({\n      message: 'Backorder request created successfully',\n      request: formattedRequest,\n    }, { status: 201 });\n\n  } catch (error) {\n    console.error('Error creating backorder request:', error);\n    \n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { error: 'Validation failed', details: error.errors },\n        { status: 400 }\n      );\n    }\n    \n    return NextResponse.json(\n      { error: 'Failed to create backorder request' },\n      { status: 500 }\n    );\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/countries/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'request' is defined but never used.","line":6,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":34}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { connectToDatabase } from '@/lib/db';\nimport { Country } from '@/models/Country';\n\n// GET /api/countries - Get active countries for forms\nexport async function GET(request: NextRequest) {\n  try {\n    await connectToDatabase();\n\n    const countries = await Country.find({ isActive: true })\n      .sort({ name: 1 })\n      .select('name code phoneCode');\n\n    return NextResponse.json({ countries });\n  } catch (error) {\n    console.error('Error fetching countries:', error);\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/customer-notifications/instant/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/customer-notifications/scheduled/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":21,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[743,746],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[743,746],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getCurrentUser } from '@/lib/authService';\nimport CustomerNotificationService from '@/services/CustomerNotificationService';\n\n// GET /api/customer-notifications/scheduled\nexport async function GET(request: NextRequest) {\n  try {\n    const currentUser = await getCurrentUser();\n    if (!currentUser) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    if (currentUser.role !== 'admin') {\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n    }\n\n    const { searchParams } = new URL(request.url);\n    const status = searchParams.get('status');\n    const templateId = searchParams.get('templateId');\n\n    const filters: any = {};\n    if (status) filters.status = status.split(',');\n    if (templateId) filters.templateId = templateId;\n\n    const service = CustomerNotificationService.getInstance();\n    const notifications = await service.getScheduledNotifications(filters);\n\n    return NextResponse.json({ notifications });\n  } catch (error) {\n    console.error('Error fetching scheduled notifications:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch scheduled notifications' },\n      { status: 500 }\n    );\n  }\n}\n\n// POST /api/customer-notifications/scheduled\nexport async function POST(request: NextRequest) {\n  try {\n    const currentUser = await getCurrentUser();\n    if (!currentUser) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    if (currentUser.role !== 'admin') {\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n    }\n\n    const body = await request.json();\n    const {\n      name,\n      description,\n      templateId,\n      schedule,\n      targetUsers,\n      channels,\n      contentOverrides,\n      templateVariables\n    } = body;\n\n    // Validation\n    if (!name || !templateId || !schedule || !targetUsers || !channels?.length) {\n      return NextResponse.json(\n        { error: 'Missing required fields' },\n        { status: 400 }\n      );\n    }\n\n    const service = CustomerNotificationService.getInstance();\n    const notification = await service.scheduleNotification({\n      name,\n      description,\n      templateId,\n      schedule,\n      targetUsers,\n      channels,\n      contentOverrides,\n      templateVariables,\n      createdBy: currentUser.id,\n      status: 'draft'\n    });\n\n    return NextResponse.json({ notification }, { status: 201 });\n  } catch (error) {\n    console.error('Error creating scheduled notification:', error);\n    return NextResponse.json(\n      { error: 'Failed to create scheduled notification' },\n      { status: 500 }\n    );\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/customer-notifications/templates/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/dashboard/preferences/add-missing-widgets/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'request' is defined but never used.","line":7,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getCurrentUser } from '@/lib/authService';\nimport { connectToDatabase } from '@/lib/db';\nimport DashboardPreferencesModel from '@/models/DashboardPreferences';\nimport { getWidgetsForRole } from '@/lib/defaultDashboardPreferences';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const currentUser = await getCurrentUser();\n    \n    if (!currentUser) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    await connectToDatabase();\n    \n    // Get current user preferences\n    const preferences = await DashboardPreferencesModel.findOne({ \n      userId: currentUser.id \n    });\n\n    if (!preferences) {\n      return NextResponse.json(\n        { error: 'Dashboard preferences not found' }, \n        { status: 404 }\n      );\n    }\n\n    // Get all widgets that should be available for this user's role\n    const allWidgetsForRole = getWidgetsForRole(currentUser.role as 'admin' | 'user');\n    \n    // Get current widget IDs\n    const currentWidgetIds = new Set(preferences.widgets.map(w => w.id));\n    \n    // Find missing widgets\n    const missingWidgets = allWidgetsForRole.filter(\n      widget => !currentWidgetIds.has(widget.id)\n    );\n\n    if (missingWidgets.length === 0) {\n      return NextResponse.json({\n        message: 'No missing widgets found',\n        addedWidgets: [],\n        totalWidgets: preferences.widgets.length\n      });\n    }\n\n    // Add missing widgets to preferences\n    // Set their order to be after existing widgets\n    const maxOrder = Math.max(...preferences.widgets.map(w => w.order), 0);\n    \n    missingWidgets.forEach((widget, index) => {\n      widget.order = maxOrder + index + 1;\n    });\n\n    // Update preferences with new widgets\n    preferences.widgets = [...preferences.widgets, ...missingWidgets];\n    preferences.lastUpdated = new Date();\n    \n    await preferences.save();\n\n    const addedWidgetNames = missingWidgets.map(w => {\n      const widgetNames: Record<string, string> = {\n        'welcome': 'Welcome',\n        'balance': 'Account Balance',\n        'indicator-1': 'Cost of Day',\n        'indicator-2': 'ASR (Success Rate)',\n        'indicator-3': 'ACD (Avg Call Duration)',\n        'indicator-4': 'Total Minutes',\n        'user-attention': 'Users Requiring Attention',\n        'low-balance-users': 'Low Balance Users',\n        'unsolved-tickets': 'Unsolved Tickets',\n        'phone-number-requests': 'Phone Number Requests',\n        'date-selector': 'Date Selector',\n      };\n      return widgetNames[w.id] || w.id;\n    });\n\n    return NextResponse.json({\n      message: `Successfully added ${missingWidgets.length} missing widget(s)`,\n      addedWidgets: addedWidgetNames,\n      addedWidgetIds: missingWidgets.map(w => w.id),\n      totalWidgets: preferences.widgets.length,\n      preferences: {\n        id: preferences._id,\n        userId: preferences.userId,\n        widgets: preferences.widgets,\n        lastUpdated: preferences.lastUpdated\n      }\n    });\n\n  } catch (error) {\n    console.error('Error adding missing widgets:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' }, \n      { status: 500 }\n    );\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/dashboard/preferences/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getWidgetsForRole' is defined but never used.","line":5,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":62}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getCurrentUser } from '@/lib/authService';\nimport { connectToDatabase } from '@/lib/db';\nimport DashboardPreferencesModel, { WidgetConfig } from '@/models/DashboardPreferences';\nimport { createDefaultDashboardPreferences, getWidgetsForRole } from '@/lib/defaultDashboardPreferences';\n\n// Define all available widgets\nconst DEFAULT_WIDGETS: WidgetConfig[] = [\n  {\n    id: 'date-selector',\n    enabled: true,\n    collapsed: false,\n    collapsible: false,\n    order: 0,\n    size: 'full',\n    gridCols: 12,\n    gridRows: 1,\n    position: { row: 0, col: 0 },\n    locked: false,\n    alwaysVisible: false,\n    category: 'overview',\n    aspectRatio: 'wide',\n    refreshInterval: 0,\n    priority: 9,\n    showTitle: true,\n    responsive: {\n      mobile: { gridCols: 12, size: 'full' },\n      tablet: { gridCols: 12, size: 'full' }\n    }\n  },\n  {\n    id: 'welcome',\n    enabled: true,\n    collapsed: false,\n    collapsible: true,\n    order: 1,\n    size: 'medium',\n    gridCols: 6,\n    gridRows: 1,\n    position: { row: 1, col: 0 },\n    locked: false,\n    alwaysVisible: false,\n    minSize: 'medium',\n    maxSize: 'large',\n    category: 'overview',\n    aspectRatio: 'auto',\n    refreshInterval: 0,\n    priority: 8,\n    showTitle: true,\n    responsive: {\n      mobile: { gridCols: 12, size: 'medium' },\n      tablet: { gridCols: 6, size: 'medium' }\n    }\n  },\n  {\n    id: 'balance',\n    enabled: true,\n    collapsed: false,\n    collapsible: false,\n    order: 2,\n    size: 'medium',\n    gridCols: 6,\n    gridRows: 1,\n    position: { row: 1, col: 6 },\n    locked: false,\n    alwaysVisible: true,\n    minSize: 'medium',\n    maxSize: 'large',\n    category: 'overview',\n    aspectRatio: 'auto',\n    refreshInterval: 300,\n    priority: 10,\n    showTitle: true,\n    responsive: {\n      mobile: { gridCols: 12, size: 'medium' },\n      tablet: { gridCols: 6, size: 'medium' }\n    }\n  },\n  {\n    id: 'user-attention',\n    enabled: true,\n    collapsed: false,\n    collapsible: true,\n    order: 3,\n    size: 'full',\n    gridCols: 12,\n    gridRows: 2,\n    position: { row: 2, col: 0 },\n    locked: false,\n    alwaysVisible: false,\n    minSize: 'large',\n    maxSize: 'full',\n    category: 'admin',\n    aspectRatio: 'auto',\n    refreshInterval: 600,\n    priority: 7,\n    showTitle: true,\n    responsive: {\n      mobile: { gridCols: 12, size: 'full' },\n      tablet: { gridCols: 12, size: 'full' }\n    }\n  },\n  {\n    id: 'low-balance-users',\n    enabled: true,\n    collapsed: false,\n    collapsible: true,\n    order: 4,\n    size: 'full',\n    gridCols: 12,\n    gridRows: 2,\n    position: { row: 4, col: 0 },\n    locked: false,\n    alwaysVisible: false,\n    minSize: 'large',\n    maxSize: 'full',\n    category: 'admin',\n    aspectRatio: 'auto',\n    refreshInterval: 900,\n    priority: 8,\n    showTitle: true,\n    responsive: {\n      mobile: { gridCols: 12, size: 'full' },\n      tablet: { gridCols: 12, size: 'full' }\n    }\n  },\n  {\n    id: 'indicator-1',\n    enabled: true,\n    collapsed: false,\n    collapsible: true,\n    order: 5,\n    size: 'small',\n    gridCols: 3,\n    gridRows: 1,\n    position: { row: 6, col: 0 },\n    locked: false,\n    alwaysVisible: false,\n    minSize: 'small',\n    maxSize: 'medium',\n    category: 'metrics',\n    aspectRatio: 'square',\n    refreshInterval: 0,\n    priority: 5,\n    showTitle: true,\n    responsive: {\n      mobile: { gridCols: 6, size: 'small' },\n      tablet: { gridCols: 3, size: 'small' }\n    }\n  },\n  {\n    id: 'indicator-2',\n    enabled: true,\n    collapsed: false,\n    collapsible: true,\n    order: 6,\n    size: 'small',\n    gridCols: 3,\n    gridRows: 1,\n    position: { row: 6, col: 3 },\n    locked: false,\n    alwaysVisible: false,\n    minSize: 'small',\n    maxSize: 'medium',\n    category: 'metrics',\n    aspectRatio: 'square',\n    refreshInterval: 0,\n    priority: 5,\n    showTitle: true,\n    responsive: {\n      mobile: { gridCols: 6, size: 'small' },\n      tablet: { gridCols: 3, size: 'small' }\n    }\n  },\n  {\n    id: 'indicator-3',\n    enabled: true,\n    collapsed: false,\n    collapsible: true,\n    order: 7,\n    size: 'small',\n    gridCols: 3,\n    gridRows: 1,\n    position: { row: 6, col: 6 },\n    locked: false,\n    alwaysVisible: false,\n    minSize: 'small',\n    maxSize: 'medium',\n    category: 'metrics',\n    aspectRatio: 'square',\n    refreshInterval: 0,\n    priority: 5,\n    showTitle: true,\n    responsive: {\n      mobile: { gridCols: 6, size: 'small' },\n      tablet: { gridCols: 3, size: 'small' }\n    }\n  },\n  {\n    id: 'indicator-4',\n    enabled: true,\n    collapsed: false,\n    collapsible: true,\n    order: 8,\n    size: 'small',\n    gridCols: 3,\n    gridRows: 1,\n    position: { row: 6, col: 9 },\n    locked: false,\n    alwaysVisible: false,\n    minSize: 'small',\n    maxSize: 'large',\n    category: 'metrics',\n    aspectRatio: 'square',\n    refreshInterval: 0,\n    priority: 5,\n    showTitle: true,\n    responsive: {\n      mobile: { gridCols: 6, size: 'small' },\n      tablet: { gridCols: 3, size: 'small' }\n    }\n  }\n];\n\nexport async function GET() {\n  try {\n    const currentUser = await getCurrentUser();\n    \n    if (!currentUser) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    await connectToDatabase();\n    \n    // Get or create user's dashboard preferences using the new default configuration\n    const preferences = await DashboardPreferencesModel.findOneAndUpdate(\n      { userId: currentUser.id },\n      {\n        $setOnInsert: createDefaultDashboardPreferences(\n          currentUser.id, \n          currentUser.role === 'admin' ? 'admin' : 'user'\n        )\n      },\n      { \n        new: true, \n        upsert: true \n      }\n    );\n\n    return NextResponse.json(preferences);\n  } catch (error) {\n    console.error('Error fetching dashboard preferences:', error);\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const currentUser = await getCurrentUser();\n    \n    if (!currentUser) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const body = await request.json();\n    \n    await connectToDatabase();\n\n    // Validate input\n    const {\n      layout,\n      gridColumns,\n      widgets,\n      theme,\n      compactMode,\n      autoSave,\n      showCategories,\n      categoryOrder\n    } = body;\n\n    // Basic validation\n    if (layout && !['grid', 'list', 'masonry', 'custom'].includes(layout)) {\n      return NextResponse.json({ error: 'Invalid layout value' }, { status: 400 });\n    }\n\n    if (theme && !['light', 'dark', 'auto'].includes(theme)) {\n      return NextResponse.json({ error: 'Invalid theme value' }, { status: 400 });\n    }\n\n    if (widgets && !Array.isArray(widgets)) {\n      return NextResponse.json({ error: 'Widgets must be an array' }, { status: 400 });\n    }\n\n    if (gridColumns && (gridColumns < 1 || gridColumns > 24)) {\n      return NextResponse.json({ error: 'Grid columns must be between 1 and 24' }, { status: 400 });\n    }\n\n    // Validate widget configurations\n    if (widgets) {\n      for (const widget of widgets) {\n        if (widget.gridCols && (widget.gridCols < 1 || widget.gridCols > 12)) {\n          return NextResponse.json({ \n            error: `Widget ${widget.id}: gridCols must be between 1 and 12` \n          }, { status: 400 });\n        }\n        \n        if (widget.gridRows && (widget.gridRows < 1 || widget.gridRows > 6)) {\n          return NextResponse.json({ \n            error: `Widget ${widget.id}: gridRows must be between 1 and 6` \n          }, { status: 400 });\n        }\n\n        if (widget.refreshInterval && (widget.refreshInterval < 0 || widget.refreshInterval > 3600)) {\n          return NextResponse.json({ \n            error: `Widget ${widget.id}: refreshInterval must be between 0 and 3600 seconds` \n          }, { status: 400 });\n        }\n\n        if (widget.priority && (widget.priority < 0 || widget.priority > 10)) {\n          return NextResponse.json({ \n            error: `Widget ${widget.id}: priority must be between 0 and 10` \n          }, { status: 400 });\n        }\n      }\n    }\n\n    // Find and update or create preferences using upsert\n    const updateData = {\n      ...(layout && { layout }),\n      ...(typeof gridColumns === 'number' && { gridColumns }),\n      ...(widgets && { widgets }),\n      ...(theme && { theme }),\n      ...(typeof compactMode === 'boolean' && { compactMode }),\n      ...(typeof autoSave === 'boolean' && { autoSave }),\n      ...(typeof showCategories === 'boolean' && { showCategories }),\n      ...(categoryOrder && { categoryOrder }),\n      lastUpdated: new Date()\n    };\n\n    // Add default values for new documents (only for fields not being updated)\n    const setOnInsertData = {\n      userId: currentUser.id,\n      ...(layout ? {} : { layout: 'grid' }),\n      ...(typeof gridColumns === 'number' ? {} : { gridColumns: 12 }),\n      ...(widgets ? {} : { widgets: DEFAULT_WIDGETS }),\n      ...(theme ? {} : { theme: 'auto' }),\n      ...(typeof compactMode === 'boolean' ? {} : { compactMode: false }),\n      ...(typeof autoSave === 'boolean' ? {} : { autoSave: true }),\n      ...(typeof showCategories === 'boolean' ? {} : { showCategories: false }),\n      ...(categoryOrder ? {} : { categoryOrder: ['overview', 'admin', 'metrics'] })\n    };\n\n    const preferences = await DashboardPreferencesModel.findOneAndUpdate(\n      { userId: currentUser.id },\n      {\n        $set: updateData,\n        $setOnInsert: setOnInsertData\n      },\n      { \n        new: true, \n        upsert: true,\n        runValidators: true\n      }\n    );\n\n    return NextResponse.json({\n      success: true,\n      message: 'Dashboard preferences updated successfully',\n      preferences\n    });\n  } catch (error) {\n    console.error('Error saving dashboard preferences:', error);\n    \n    // Handle specific MongoDB errors\n    if (error instanceof Error) {\n      if (error.message.includes('ConflictingUpdateOperators')) {\n        return NextResponse.json({ \n          error: 'Database conflict error. Please refresh the page and try again.' \n        }, { status: 409 });\n      }\n      \n      if (error.message.includes('ValidationError')) {\n        return NextResponse.json({ \n          error: 'Invalid data provided. Please check your settings and try again.' \n        }, { status: 400 });\n      }\n      \n      return NextResponse.json({ \n        error: `Failed to save preferences: ${error.message}` \n      }, { status: 500 });\n    }\n    \n    return NextResponse.json({ \n      error: 'An unexpected error occurred while saving preferences' \n    }, { status: 500 });\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/debug/cdr-test/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1269,1272],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1269,1272],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":63,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2735,2738],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2735,2738],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":74,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3110,3113],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3110,3113],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":87,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3710,3713],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3710,3713],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":181,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":181,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6588,6591],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6588,6591],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":239,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":239,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9156,9159],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9156,9159],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getCurrentUser } from '@/lib/authService';\nimport { getSippyApiCredentials } from '@/lib/sippyClientConfig';\nimport { SippyClient } from '@/lib/sippyClient';\n\n// Convert ISO date format to Sippy's required format\nfunction convertToSippyDateFormat(isoDate: string): string {\n  const date = new Date(isoDate);\n  \n  // Format: '%H:%M:%S.000 GMT %a %b %d %Y' \n  // Example: '09:57:29.000 GMT Wed Nov 18 2009'\n  const hours = date.getUTCHours().toString().padStart(2, '0');\n  const minutes = date.getUTCMinutes().toString().padStart(2, '0');\n  const seconds = date.getUTCSeconds().toString().padStart(2, '0');\n  \n  const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n  const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n  \n  const dayName = dayNames[date.getUTCDay()];\n  const monthName = monthNames[date.getUTCMonth()];\n  const day = date.getUTCDate().toString().padStart(2, '0');\n  const year = date.getUTCFullYear();\n  \n  return `${hours}:${minutes}:${seconds}.000 GMT ${dayName} ${monthName} ${day} ${year}`;\n}\n\n// Parse XML-RPC response to extract CDRs (same as active calls pattern)\nfunction parseCdrXmlResponse(xmlString: string): any {\n  if (typeof xmlString !== 'string') {\n    return xmlString; // Already parsed\n  }\n\n  console.log('🚀 Starting optimized CDR XML parsing for debug test...');\n  console.log('⚡ Extracting only essential fields: cost, duration, result, payment_currency, connect_time');\n\n  // Check for fault response first (same as active calls)\n  const faultRegex = new RegExp('<fault>\\\\s*<value>\\\\s*<struct>(.*?)</struct>\\\\s*</value>\\\\s*</fault>', 's');\n  const faultMatch = xmlString.match(faultRegex);\n  if (faultMatch) {\n    // Extract fault details\n    const faultContent = faultMatch[1];\n    const codeMatch = faultContent.match(/<name>faultCode<\\/name>\\s*<value>\\s*<int>(\\d+)<\\/int>/);\n    const messageMatch = faultContent.match(/<name>faultString<\\/name>\\s*<value>\\s*<string>([^<]*)<\\/string>/);\n    \n    const faultCode = codeMatch ? parseInt(codeMatch[1], 10) : 'Unknown';\n    const faultMessage = messageMatch ? messageMatch[1] : 'Unknown error';\n    \n    throw new Error(`Sippy API Fault ${faultCode}: ${faultMessage}`);\n  }\n\n  // Look for the cdrs member in the response\n  const cdrsRegex = new RegExp('<member>\\\\s*<name>cdrs</name>\\\\s*<value>\\\\s*<array>\\\\s*<data>(.*?)</data>\\\\s*</array>', 's');\n  const cdrsMatch = xmlString.match(cdrsRegex);\n  \n  if (!cdrsMatch) {\n    console.log('No CDRs array found in XML response');\n    return []; // No CDRs found\n  }\n\n  const cdrsData = cdrsMatch[1];\n  console.log('CDRs data length:', cdrsData.length);\n  \n  const cdrs: any[] = [];\n\n  // Find all struct elements within the CDRs array (same pattern as active calls)\n  const structRegex = new RegExp('<value>\\\\s*<struct>(.*?)</struct>\\\\s*</value>', 'gs');\n  let structMatch;\n  let structCount = 0;\n  \n  while ((structMatch = structRegex.exec(cdrsData)) !== null) {\n    structCount++;\n    const structContent = structMatch[1];\n    \n    const cdr: any = {};\n    \n    // Extract only the essential fields we need for dashboard widgets\n    const essentialFields = ['cost', 'duration', 'result', 'payment_currency', 'connect_time'];\n    \n    for (const fieldName of essentialFields) {\n      // Create a regex to find this specific field\n      const fieldRegex = new RegExp(`<member>\\\\s*<name>${fieldName}</name>\\\\s*<value>\\\\s*<([^>]+)>([^<]*)</[^>]+>\\\\s*</value>\\\\s*</member>`, 's');\n      const fieldMatch = structContent.match(fieldRegex);\n      \n      if (fieldMatch) {\n        const [, type, value] = fieldMatch;\n        \n        let parsedValue: any;\n        switch (type) {\n          case 'int':\n            parsedValue = parseInt(value || '0', 10);\n            break;\n          case 'double':\n            parsedValue = parseFloat(value || '0');\n            break;\n          case 'string':\n            parsedValue = value || '';\n            break;\n          case 'boolean':\n            parsedValue = value === '1' || value === 'true';\n            break;\n          case 'nil':\n            parsedValue = null;\n            break;\n          default:\n            parsedValue = value || '';\n        }\n        \n        cdr[fieldName] = parsedValue;\n      }\n    }\n    \n    // Only add CDR if it has at least some essential fields\n    if (Object.keys(cdr).length > 0) {\n      // Ensure required fields have default values\n      cdr.cost = cdr.cost || '0';\n      cdr.duration = cdr.duration || 0;\n      cdr.result = cdr.result || 0;\n      cdr.connect_time = cdr.connect_time || '';\n      \n      cdrs.push(cdr);\n    }\n  }\n\n  console.log(`✅ Debug CDR parsing complete: ${structCount} CDR structs processed, ${cdrs.length} valid CDRs extracted`);\n  console.log(`📊 Memory optimization: ~95% reduction (only 5 fields vs ~40+ fields per CDR)`);\n  \n  return cdrs;\n}\n\n// POST handler to test CDR fetching (same pattern as active calls)\nexport async function POST(request: NextRequest) {\n  try {\n    // Verify the user is authenticated (same as active calls)\n    const currentUser = await getCurrentUser();\n    \n    if (!currentUser) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n    \n    // Get test parameters from request body\n    const body = await request.json();\n    const {\n      i_account,\n      offset = 0,\n      limit = 10,\n      start_date,\n      end_date,\n      cli,\n      cld,\n      i_cdr,\n      type = 'non_zero_and_errors'\n    } = body;\n    \n    if (!i_account) {\n      return NextResponse.json({ error: 'Account ID is required' }, { status: 400 });\n    }\n    \n    const accountId = parseInt(i_account, 10);\n    if (isNaN(accountId)) {\n      return NextResponse.json({ error: 'Invalid account ID' }, { status: 400 });\n    }\n    \n    // For non-admin users, ensure they can only access their own account (same as active calls)\n    if (currentUser.role !== 'admin' && currentUser.sippyAccountId !== accountId) {\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n    }\n\n    // Get Sippy API credentials from settings (same as active calls)\n    const credentials = await getSippyApiCredentials();\n    \n    if (!credentials) {\n      return NextResponse.json({ error: 'Sippy API not configured' }, { status: 500 });\n    }\n    \n    // Create Sippy client (same as active calls)\n    const sippyClient = new SippyClient(credentials);\n\n    console.log('CDR Test: Fetching CDRs for account:', accountId);\n    \n    // Build options object for getAccountCDRs\n    const options: any = {\n      i_account: accountId,\n      type,\n      limit: parseInt(limit),\n      offset: parseInt(offset),\n      ...(cli && { cli }),\n      ...(cld && { cld }),\n      ...(i_cdr && { i_cdr })\n    };\n\n    // Convert dates to Sippy format if provided\n    if (start_date) {\n      try {\n        const convertedStartDate = convertToSippyDateFormat(start_date);\n        options.start_date = convertedStartDate;\n        console.log('📅 CDR Test - Date conversion - start_date:');\n        console.log('   Input (ISO):', start_date);\n        console.log('   Output (Sippy):', convertedStartDate);\n      } catch (error) {\n        console.error('❌ Invalid start_date format:', start_date, error);\n        return NextResponse.json({ error: 'Invalid start_date format' }, { status: 400 });\n      }\n    }\n\n    if (end_date) {\n      try {\n        const convertedEndDate = convertToSippyDateFormat(end_date);\n        options.end_date = convertedEndDate;\n        console.log('📅 CDR Test - Date conversion - end_date:');\n        console.log('   Input (ISO):', end_date);\n        console.log('   Output (Sippy):', convertedEndDate);\n      } catch (error) {\n        console.error('❌ Invalid end_date format:', end_date, error);\n        return NextResponse.json({ error: 'Invalid end_date format' }, { status: 400 });\n      }\n    }\n\n    console.log('🔍 CDR Test - Fetching CDRs with options:', options);\n    console.log('📋 CDR Test - Options object details:', JSON.stringify(options, null, 2));\n    \n    // Add timeout info if date range is specified\n    if (start_date || end_date) {\n      console.log('⚠️ CDR Test - Date range specified, using default SippyClient timeout');\n    } else {\n      console.log('ℹ️ CDR Test - No date range specified, will return last hour CDRs only');\n    }\n    \n    // Fetch CDRs from Sippy (using default SippyClient timeout)\n    const startTime = Date.now();\n    const rawResponse = await sippyClient.getAccountCDRs(options); // Use default timeout\n    const requestDuration = Date.now() - startTime;\n    \n    console.log(`✅ CDR Test - Request completed in ${requestDuration}ms`);\n    console.log('Raw Sippy CDR Test response type:', typeof rawResponse);\n    console.log('Raw Sippy CDR Test response length:', typeof rawResponse === 'string' ? (rawResponse as string).length : 'Not a string');\n    console.log('Raw Sippy CDR Test response preview:', typeof rawResponse === 'string' ? (rawResponse as string).substring(0, 500) : rawResponse);\n    \n    // Parse the XML response to extract CDRs array\n    const cdrs = parseCdrXmlResponse(rawResponse as any);\n    console.log('Parsed CDRs count:', Array.isArray(cdrs) ? cdrs.length : 'Not an array');\n    \n    // Return CDR data with enhanced debugging info\n    return NextResponse.json({ \n      success: true,\n      cdrs,\n      count: Array.isArray(cdrs) ? cdrs.length : 0,\n      requestDuration,\n      rawResponseLength: typeof rawResponse === 'string' ? (rawResponse as string).length : 0,\n      debugInfo: {\n        hasDateRange: !!(start_date || end_date),\n        timeoutUsed: 'default SippyClient timeout',\n        sippyApiPattern: 'Test pattern with default timeout'\n      }\n    });\n  } catch (error) {\n    console.error('Error in CDR test endpoint:', error);\n    \n    // Enhanced error reporting\n    let errorMessage = 'Failed to fetch CDR test data';\n    let errorType = 'unknown';\n    \n    if (error instanceof Error) {\n      errorMessage = error.message;\n      \n      if (error.message.includes('timeout')) {\n        errorType = 'timeout';\n        errorMessage = 'Request timed out after 30 seconds. Try reducing the date range or removing dates to test last hour only.';\n      } else if (error.message.includes('Sippy API Fault')) {\n        errorType = 'sippy_fault';\n      } else if (error.message.includes('No response received')) {\n        errorType = 'network';\n        errorMessage = 'Network connectivity issue. Check Sippy API endpoint and credentials.';\n      }\n    }\n    \n    return NextResponse.json(\n      { \n        success: false,\n        error: errorMessage,\n        errorType,\n        debugInfo: {\n          originalError: error instanceof Error ? error.message : 'Unknown error',\n          suggestion: errorType === 'timeout' \n            ? 'Try testing without dates first, then use smaller date ranges'\n            : 'Check network connectivity and API credentials'\n        }\n      },\n      { status: 500 }\n    );\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/debug/notifications/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/debug/push-subscriptions/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/init/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/kpi-thresholds/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'NextRequest' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":21}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getCurrentUser } from '@/lib/authService';\nimport { connectToDatabase } from '@/lib/db';\nimport KpiSettingsModel, { IKpiSettings } from '@/models/KpiSettings';\n\n// GET - Fetch KPI thresholds (public for all authenticated users)\nexport async function GET() {\n  try {\n    const currentUser = await getCurrentUser();\n    \n    if (!currentUser) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    await connectToDatabase();\n    \n    // Try to find admin KPI settings first\n    const adminSettings = await KpiSettingsModel.findOne({}).lean() as IKpiSettings | null;\n    \n    // If no admin settings found, return defaults\n    if (!adminSettings) {\n      const defaultThresholds = {\n        costThresholds: {\n          low: 1.0,\n          medium: 10.0\n        },\n        asrThresholds: {\n          critical: 50,\n          poor: 70,\n          fair: 85,\n          good: 95\n        },\n        acdThresholds: {\n          short: 30,\n          normal: 120,\n          long: 300\n        },\n        totalMinutesThresholds: {\n          light: 60,\n          moderate: 300,\n          heavy: 600\n        },\n        currency: 'EUR',\n        refreshInterval: 300\n      };\n      \n      return NextResponse.json(defaultThresholds);\n    }\n\n    // Return the admin's configured thresholds (without sensitive data)\n    const publicThresholds = {\n      costThresholds: adminSettings.costThresholds,\n      asrThresholds: adminSettings.asrThresholds,\n      acdThresholds: adminSettings.acdThresholds,\n      totalMinutesThresholds: adminSettings.totalMinutesThresholds,\n      currency: adminSettings.currency,\n      refreshInterval: adminSettings.refreshInterval\n    };\n\n    return NextResponse.json(publicThresholds);\n    \n  } catch (error) {\n    console.error('Error fetching KPI thresholds:', error);\n    \n    // Return defaults on error\n    const defaultThresholds = {\n      costThresholds: {\n        low: 1.0,\n        medium: 10.0\n      },\n      asrThresholds: {\n        critical: 50,\n        poor: 70,\n        fair: 85,\n        good: 95\n      },\n      acdThresholds: {\n        short: 30,\n        normal: 120,\n        long: 300\n      },\n      totalMinutesThresholds: {\n        light: 60,\n        moderate: 300,\n        heavy: 600\n      },\n      currency: 'EUR',\n      refreshInterval: 300\n    };\n    \n    return NextResponse.json(defaultThresholds);\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/notifications/[id]/archive/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/notifications/[id]/read/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/notifications/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/notifications/clear-all/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/notifications/enable-push-for-user/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'request' is defined but never used.","line":7,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { connectToDatabase } from '@/lib/db';\nimport { NotificationPreferencesModel } from '@/models/InternalNotification';\nimport { createDefaultPreferences, NotificationType } from '@/types/notifications';\nimport { getCurrentUser } from '@/lib/authService';\n\nexport async function POST(request: NextRequest) {\n  try {\n    // Get current user from authentication\n    const currentUser = await getCurrentUser();\n    \n    if (!currentUser) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    await connectToDatabase();\n\n    // Get or create user preferences\n    let preferences = await NotificationPreferencesModel.findOne({ userId: currentUser.id });\n\n    if (!preferences) {\n      // Create default preferences if they don't exist\n      const defaultPrefs = createDefaultPreferences(currentUser.id);\n      preferences = new NotificationPreferencesModel(defaultPrefs);\n    }\n\n    // Enable push notifications globally\n    preferences.enablePushNotifications = true;\n\n    // Enable push notifications for all notification types by default\n    const allNotificationTypes: NotificationType[] = [\n      'ticket_created', 'ticket_updated', 'ticket_assigned', 'ticket_reply', 'ticket_resolved',\n      'payment_success', 'payment_failed', 'low_balance', 'zero_balance',\n      'phone_number_approved', 'phone_number_rejected', 'phone_number_purchased', 'phone_number_assigned',\n      'system_maintenance', 'user_verification', 'admin_alert', 'rate_deck_updated', 'call_quality_alert', 'security_alert'\n    ];\n\n    allNotificationTypes.forEach(type => {\n      if (preferences.typePreferences[type]) {\n        preferences.typePreferences[type].enablePush = true;\n      }\n    });\n\n    preferences.updatedAt = new Date();\n    await preferences.save();\n\n    console.log(`Push notifications enabled for user: ${currentUser.id}`);\n\n    return NextResponse.json({ \n      success: true, \n      message: 'Push notifications enabled successfully',\n      preferences \n    });\n  } catch (error) {\n    console.error('Error enabling push notifications for user:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/notifications/mark-all-read/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/notifications/preferences/admin/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'request' is defined but never used.","line":8,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_id' is assigned a value but never used.","line":75,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":75,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'__v' is assigned a value but never used.","line":76,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":76,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'userId' is assigned a value but never used.","line":77,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":77,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'createdAt' is assigned a value but never used.","line":78,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":78,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'updatedAt' is assigned a value but never used.","line":79,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":79,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'request' is defined but never used.","line":145,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":145,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_id' is assigned a value but never used.","line":175,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":175,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'userId' is assigned a value but never used.","line":175,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":175,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'createdAt' is assigned a value but never used.","line":175,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":175,"endColumn":35}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { connectToDatabase } from '@/lib/db';\nimport { NotificationPreferencesModel } from '@/models/InternalNotification';\nimport { createDefaultPreferences } from '@/types/notifications';\nimport { getCurrentUser } from '@/lib/authService';\nimport User from '@/models/User';\n\nexport async function GET(request: NextRequest) {\n  try {\n    // Get current user from authentication\n    const currentUser = await getCurrentUser();\n    \n    if (!currentUser) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    if (currentUser.role !== 'admin') {\n      return NextResponse.json({ error: 'Admin access required' }, { status: 403 });\n    }\n\n    await connectToDatabase();\n\n    // Get admin's preferences to use as global defaults\n    let adminPreferences = await NotificationPreferencesModel.findOne({ userId: currentUser.id });\n\n    if (!adminPreferences) {\n      // Create default preferences for admin\n      const defaultPrefs = createDefaultPreferences(currentUser.id);\n      adminPreferences = new NotificationPreferencesModel(defaultPrefs);\n      await adminPreferences.save();\n    }\n\n    // Get stats about current user preferences and total users\n    const totalUsersInSystem = await User.countDocuments();\n    const totalUsersWithPreferences = await NotificationPreferencesModel.countDocuments();\n    const enabledPushUsers = await NotificationPreferencesModel.countDocuments({ enablePushNotifications: true });\n    const enabledSoundUsers = await NotificationPreferencesModel.countDocuments({ enableSounds: true });\n\n    return NextResponse.json({\n      globalDefaults: adminPreferences,\n      stats: {\n        totalUsers: totalUsersInSystem,\n        usersWithPreferences: totalUsersWithPreferences,\n        enabledPushUsers,\n        enabledSoundUsers\n      }\n    });\n  } catch (error) {\n    console.error('Error fetching admin notification preferences:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function PUT(request: NextRequest) {\n  try {\n    // Get current user from authentication\n    const currentUser = await getCurrentUser();\n    \n    if (!currentUser) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    if (currentUser.role !== 'admin') {\n      return NextResponse.json({ error: 'Admin access required' }, { status: 403 });\n    }\n\n    const body = await request.json();\n    const { applyToAllUsers = false, ...updates } = body;\n\n    // Filter out MongoDB internal fields that shouldn't be updated\n    const {\n      _id,\n      __v,\n      userId,\n      createdAt,\n      updatedAt,\n      ...cleanUpdates\n    } = updates;\n\n    await connectToDatabase();\n\n    // Update admin's preferences first (these serve as global defaults)\n    const adminPreferences = await NotificationPreferencesModel.findOneAndUpdate(\n      { userId: currentUser.id },\n      { \n        ...cleanUpdates,\n        updatedAt: new Date()\n      },\n      { \n        new: true,\n        upsert: true // Create if doesn't exist\n      }\n    );\n\n    let appliedToUsers = 0;\n\n    // If requested, apply to all existing users\n    if (applyToAllUsers) {\n      // Get all users from the system\n      const allUsers = await User.find({}, { _id: 1 }).lean();\n      \n      for (const user of allUsers) {\n        if (user._id.toString() === currentUser.id) {\n          continue; // Skip admin user\n        }\n\n        // Update existing preferences or create new ones with admin defaults\n        await NotificationPreferencesModel.findOneAndUpdate(\n          { userId: user._id.toString() },\n          { \n            ...cleanUpdates,\n            userId: user._id.toString(),\n            updatedAt: new Date()\n          },\n          { \n            upsert: true, // Create if doesn't exist\n            new: true\n          }\n        );\n        appliedToUsers++;\n      }\n    }\n\n    return NextResponse.json({\n      success: true,\n      adminPreferences,\n      appliedToUsers,\n      message: applyToAllUsers \n        ? `Settings updated and applied to ${appliedToUsers} users`\n        : 'Admin settings updated as global defaults'\n    });\n  } catch (error) {\n    console.error('Error updating admin notification preferences:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\n// Reset all users to current admin defaults\nexport async function POST(request: NextRequest) {\n  try {\n    // Get current user from authentication\n    const currentUser = await getCurrentUser();\n    \n    if (!currentUser) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    if (currentUser.role !== 'admin') {\n      return NextResponse.json({ error: 'Admin access required' }, { status: 403 });\n    }\n\n    await connectToDatabase();\n\n    // Get admin's current preferences\n    const adminPreferences = await NotificationPreferencesModel.findOne({ userId: currentUser.id });\n\n    if (!adminPreferences) {\n      return NextResponse.json(\n        { error: 'Admin preferences not found' },\n        { status: 404 }\n      );\n    }\n\n    // Get all users from the system\n    const allUsers = await User.find({}, { _id: 1 }).lean();\n    \n    // Apply admin preferences to all other users\n    const adminPrefsObj = adminPreferences.toObject();\n    const { _id, userId, createdAt, ...prefsToApply } = adminPrefsObj;\n\n    let appliedToUsers = 0;\n\n    for (const user of allUsers) {\n      if (user._id.toString() === currentUser.id) {\n        continue; // Skip admin user\n      }\n\n      await NotificationPreferencesModel.findOneAndUpdate(\n        { userId: user._id.toString() },\n        { \n          ...prefsToApply,\n          userId: user._id.toString(),\n          updatedAt: new Date()\n        },\n        { \n          upsert: true, // Create if doesn't exist\n          new: true\n        }\n      );\n      appliedToUsers++;\n    }\n\n    return NextResponse.json({\n      success: true,\n      appliedToUsers,\n      message: `Reset ${appliedToUsers} users to admin defaults`\n    });\n  } catch (error) {\n    console.error('Error resetting user preferences to admin defaults:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/notifications/preferences/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'request' is defined but never used.","line":7,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_id' is assigned a value but never used.","line":30,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'adminUserId' is assigned a value but never used.","line":30,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'createdAt' is assigned a value but never used.","line":30,"column":43,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":52},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'updatedAt' is assigned a value but never used.","line":30,"column":54,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":63},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'userId' is assigned a value but never used.","line":69,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":69,"endColumn":19}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { connectToDatabase } from '@/lib/db';\nimport { NotificationPreferencesModel } from '@/models/InternalNotification';\nimport { createDefaultPreferences } from '@/types/notifications';\nimport { getCurrentUser } from '@/lib/authService';\n\nexport async function GET(request: NextRequest) {\n  try {\n    // Get current user from authentication\n    const currentUser = await getCurrentUser();\n    \n    if (!currentUser) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    await connectToDatabase();\n\n    let preferences = await NotificationPreferencesModel.findOne({ userId: currentUser.id });\n\n    if (!preferences) {\n      // Check if there are admin-defined global defaults\n      const adminPreferences = await NotificationPreferencesModel.findOne({ \n        userId: { $exists: true } \n      }).sort({ createdAt: 1 }); // Get the first (likely admin) preferences\n\n      let defaultPrefs;\n      if (adminPreferences && currentUser.role !== 'admin') {\n        // Use admin preferences as template for new users\n        const adminPrefsObj = adminPreferences.toObject();\n        const { _id, userId: adminUserId, createdAt, updatedAt, ...prefsToApply } = adminPrefsObj;\n        defaultPrefs = {\n          ...prefsToApply,\n          userId: currentUser.id,\n          createdAt: new Date(),\n          updatedAt: new Date()\n        };\n        console.log('Creating preferences for user based on admin defaults:', currentUser.id);\n      } else {\n        // Use system defaults (for admin or if no admin preferences exist)\n        defaultPrefs = createDefaultPreferences(currentUser.id);\n        console.log('Creating default preferences for user:', currentUser.id);\n      }\n      \n      preferences = new NotificationPreferencesModel(defaultPrefs);\n      await preferences.save();\n    }\n\n    return NextResponse.json(preferences);\n  } catch (error) {\n    console.error('Error fetching notification preferences:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function PUT(request: NextRequest) {\n  try {\n    // Get current user from authentication\n    const currentUser = await getCurrentUser();\n    \n    if (!currentUser) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const body = await request.json();\n    // Remove userId from body if it exists (we use authenticated user)\n    const { userId, ...updates } = body;\n\n    await connectToDatabase();\n\n    const updatedPreferences = await NotificationPreferencesModel.findOneAndUpdate(\n      { userId: currentUser.id },\n      { \n        ...updates,\n        updatedAt: new Date()\n      },\n      { \n        new: true,\n        upsert: true // Create if doesn't exist\n      }\n    );\n\n    if (!updatedPreferences) {\n      return NextResponse.json(\n        { error: 'Failed to update preferences' },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json(updatedPreferences);\n  } catch (error) {\n    console.error('Error updating notification preferences:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/notifications/push-subscription/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'request' is defined but never used.","line":79,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":79,"endColumn":37}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { connectToDatabase } from '@/lib/db';\nimport { PushSubscriptionModel } from '@/models/PushSubscription';\nimport { getCurrentUser } from '@/lib/authService';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const user = await getCurrentUser();\n    \n    if (!user?.id) {\n      return NextResponse.json({ error: 'Authentication required' }, { status: 401 });\n    }\n\n    const subscriptionData = await request.json();\n    \n    if (!subscriptionData || !subscriptionData.endpoint) {\n      return NextResponse.json({ error: 'Invalid subscription data' }, { status: 400 });\n    }\n\n    // Validate that the subscription has the required keys\n    if (!subscriptionData.keys || !subscriptionData.keys.p256dh || !subscriptionData.keys.auth) {\n      return NextResponse.json({ error: 'Invalid subscription keys' }, { status: 400 });\n    }\n\n    await connectToDatabase();\n\n    // Check if subscription already exists\n    const existingSubscription = await PushSubscriptionModel.findOne({\n      userId: user.id,\n      endpoint: subscriptionData.endpoint\n    });\n\n    if (existingSubscription) {\n      // Update existing subscription\n      existingSubscription.keys = {\n        p256dh: subscriptionData.keys.p256dh,\n        auth: subscriptionData.keys.auth\n      };\n      existingSubscription.subscriptionData = subscriptionData;\n      existingSubscription.isActive = true;\n      existingSubscription.updatedAt = new Date();\n      await existingSubscription.save();\n      \n      return NextResponse.json({ \n        success: true, \n        message: 'Subscription updated',\n        subscription: existingSubscription \n      });\n    }\n\n    // Create new subscription\n    const subscription = new PushSubscriptionModel({\n      userId: user.id,\n      endpoint: subscriptionData.endpoint,\n      keys: {\n        p256dh: subscriptionData.keys.p256dh,\n        auth: subscriptionData.keys.auth\n      },\n      subscriptionData,\n      isActive: true\n    });\n\n    await subscription.save();\n\n    return NextResponse.json({ \n      success: true, \n      message: 'Subscription saved',\n      subscription \n    });\n  } catch (error) {\n    console.error('Error saving push subscription:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function DELETE(request: NextRequest) {\n  try {\n    const user = await getCurrentUser();\n    \n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    await connectToDatabase();\n\n    await PushSubscriptionModel.findOneAndUpdate(\n      { userId: user.id },\n      { isActive: false, updatedAt: new Date() }\n    );\n\n    return NextResponse.json({ \n      success: true, \n      message: 'Push subscription removed successfully' \n    });\n  } catch (error) {\n    console.error('Error removing push subscription:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/notifications/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'priorities' is assigned a value but never used.","line":34,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":37,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1505,1508],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1505,1508],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":109,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3514,3517],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3514,3517],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { connectToDatabase } from '@/lib/db';\nimport InternalNotificationModel, { NotificationPreferencesModel } from '@/models/InternalNotification';\nimport { PushSubscriptionModel } from '@/models/PushSubscription';\nimport { NotificationType, NotificationTemplates, createDefaultPreferences } from '@/types/notifications';\nimport { getCurrentUser } from '@/lib/authService';\nimport webpush from 'web-push';\n\n// Configure web-push with VAPID keys\nwebpush.setVapidDetails(\n  process.env.WEB_PUSH_CONTACT || 'mailto:admin@example.com',\n  process.env.NEXT_PUBLIC_VAPID_PUBLIC_KEY!,\n  process.env.VAPID_PRIVATE_KEY!\n);\n\nexport async function GET(request: NextRequest) {\n  try {\n    // Get current user from authentication\n    const currentUser = await getCurrentUser();\n    \n    if (!currentUser) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    await connectToDatabase();\n\n    // Parse query parameters\n    const url = new URL(request.url);\n    const limit = parseInt(url.searchParams.get('limit') || '50');\n    const offset = parseInt(url.searchParams.get('offset') || '0');\n    const search = url.searchParams.get('search');\n    const types = url.searchParams.get('types')?.split(',') as NotificationType[];\n    const statuses = url.searchParams.get('statuses')?.split(',');\n    const priorities = url.searchParams.get('priorities')?.split(',');\n\n    // Build query using authenticated user\n    const query: any = { userId: currentUser.id };\n\n    if (statuses?.length) {\n      query.status = { $in: statuses };\n    }\n\n    if (types?.length) {\n      query.type = { $in: types };\n    }\n\n    if (search) {\n      query.$or = [\n        { title: { $regex: search, $options: 'i' } },\n        { message: { $regex: search, $options: 'i' } }\n      ];\n    }\n\n    const total = await InternalNotificationModel.countDocuments(query);\n    const notifications = await InternalNotificationModel\n      .find(query)\n      .sort({ createdAt: -1 })\n      .limit(limit)\n      .skip(offset);\n\n    return NextResponse.json({ notifications, total });\n  } catch (error) {\n    console.error('Error fetching notifications:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    // Get current user from authentication\n    const currentUser = await getCurrentUser();\n    \n    if (!currentUser) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const body = await request.json();\n    const { type, data } = body;\n\n    if (!type) {\n      return NextResponse.json(\n        { error: 'type is required' },\n        { status: 400 }\n      );\n    }\n\n    await connectToDatabase();\n\n    // Get user preferences to check if notification should be created\n    let preferences = await NotificationPreferencesModel.findOne({ userId: currentUser.id });\n    \n    if (!preferences) {\n      // Create default preferences\n      const defaultPrefs = createDefaultPreferences(currentUser.id);\n      preferences = new NotificationPreferencesModel(defaultPrefs);\n      await preferences.save();\n    }\n\n    // Check if user wants this type of notification\n    const typePrefs = preferences.typePreferences[type];\n    if (!typePrefs?.enabled) {\n      return NextResponse.json({ message: 'Notification type disabled for user' }, { status: 200 });\n    }\n\n    // Check do not disturb\n    if ((preferences as any).isInDoNotDisturbPeriod()) {\n      return NextResponse.json({ message: 'User in do not disturb period' }, { status: 200 });\n    }\n\n    // Get notification template\n    if (!NotificationTemplates[type as NotificationType]) {\n      return NextResponse.json(\n        { error: 'Invalid notification type' },\n        { status: 400 }\n      );\n    }\n    \n    const template = NotificationTemplates[type as NotificationType];\n    \n    // Create notification object\n    const notificationData = {\n      userId: currentUser.id,\n      type,\n      title: template.getTitle(data),\n      message: template.getMessage(data),\n      priority: typePrefs?.priority || 'medium',\n      status: 'unread',\n      data,\n      icon: template.icon,\n      sound: preferences.soundTheme || template.sound,\n      showToast: typePrefs?.showToast ?? true,\n      showPush: typePrefs?.enablePush ?? false,\n      persistent: ['urgent', 'high'].includes(typePrefs?.priority || 'medium')\n    };\n\n    // Save to database\n    const notification = new InternalNotificationModel(notificationData);\n    await notification.save();\n\n    // Send push notification if enabled (moved inline to avoid authentication issues)\n    if (preferences.enablePushNotifications && typePrefs?.enablePush) {\n      try {\n        // Get active push subscriptions for the user\n        const subscriptions = await PushSubscriptionModel.find({ \n          userId: currentUser.id, \n          isActive: true \n        });\n\n        if (subscriptions.length > 0) {\n          const pushPromises = subscriptions.map(async (sub) => {\n            try {\n              const payload = JSON.stringify({\n                title: notification.title,\n                body: notification.message,\n                icon: '/icons/notification-icon.svg',\n                badge: '/icons/notification-badge.svg',\n                tag: notification.type,\n                data: {\n                  notificationId: notification._id,\n                  actionUrl: data?.actionUrl,\n                  type: notification.type\n                },\n                actions: [\n                  {\n                    action: 'view',\n                    title: 'View'\n                  },\n                  {\n                    action: 'dismiss',\n                    title: 'Dismiss'\n                  }\n                ]\n              });\n\n              await webpush.sendNotification(sub.subscriptionData, payload);\n              return { success: true, endpoint: sub.endpoint };\n            } catch (error) {\n              console.error('Failed to send push notification to:', sub.endpoint, error);\n              \n              // If subscription is invalid, mark it as inactive\n              if (error instanceof Error && (\n                error.message.includes('410') || // Gone\n                error.message.includes('invalid') ||\n                error.message.includes('expired')\n              )) {\n                await PushSubscriptionModel.findByIdAndUpdate(sub._id, { \n                  isActive: false,\n                  updatedAt: new Date()\n                });\n              }\n              \n              return { success: false, endpoint: sub.endpoint, error: error instanceof Error ? error.message : 'Unknown error' };\n            }\n          });\n\n          const results = await Promise.allSettled(pushPromises);\n          const successCount = results.filter(r => r.status === 'fulfilled' && r.value.success).length;\n          \n          // Only log if there are failures\n          if (successCount < results.length) {\n            console.log(`Push notifications sent. Success: ${successCount}, Failed: ${results.length - successCount}`);\n          }\n        }\n      } catch (error) {\n        console.error('Error sending push notifications:', error);\n      }\n    }\n\n    return NextResponse.json(notification);\n  } catch (error) {\n    console.error('Error creating notification:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/notifications/send-push/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/notifications/stats/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'request' is defined but never used.","line":6,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":34},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[575,578],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[575,578],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { connectToDatabase } from '@/lib/db';\nimport InternalNotificationModel from '@/models/InternalNotification';\nimport { getCurrentUser } from '@/lib/authService';\n\nexport async function GET(request: NextRequest) {\n  try {\n    // Get current user from authentication\n    const currentUser = await getCurrentUser();\n    \n    if (!currentUser) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    await connectToDatabase();\n\n    const stats = await (InternalNotificationModel as any).getUserStats(currentUser.id);\n    return NextResponse.json(stats);\n  } catch (error) {\n    console.error('Error fetching notification stats:', error);\n    return NextResponse.json(\n      { total: 0, unread: 0, byType: {}, byPriority: {}, todayCount: 0, weekCount: 0 },\n      { status: 200 }\n    );\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/payment-gateways/[id]/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":63,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2096,2099],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2096,2099],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getCurrentUser } from '@/lib/authService';\nimport { PaymentGateway } from '@/models/PaymentGateway';\nimport { connectToDatabase } from '@/lib/db';\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const user = await getCurrentUser();\n    if (!user || user.role !== 'admin') {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { id } = await params;\n    await connectToDatabase();\n    \n    const gateway = await PaymentGateway.findById(id)\n      .select('-configuration.secretKey -configuration.clientSecret -configuration.accessToken -configuration.keySecret -configuration.webhookSecret');\n\n    if (!gateway) {\n      return NextResponse.json({ error: 'Payment gateway not found' }, { status: 404 });\n    }\n\n    return NextResponse.json({ gateway });\n  } catch (error) {\n    console.error('Error fetching payment gateway:', error);\n    return NextResponse.json({ error: 'Failed to fetch payment gateway' }, { status: 500 });\n  }\n}\n\nexport async function PUT(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const user = await getCurrentUser();\n    if (!user || user.role !== 'admin') {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { id } = await params;\n    const body = await request.json();\n    const { name, configuration, settings, isActive } = body;\n\n    await connectToDatabase();\n\n    const gateway = await PaymentGateway.findById(id);\n    if (!gateway) {\n      return NextResponse.json({ error: 'Payment gateway not found' }, { status: 404 });\n    }\n\n    // If making this gateway active, deactivate other gateways of the same provider\n    if (isActive && !gateway.isActive) {\n      await PaymentGateway.updateMany(\n        { provider: gateway.provider, isActive: true, _id: { $ne: id } },\n        { isActive: false, updatedBy: user.id, updatedAt: new Date() }\n      );\n    }\n\n    // Update gateway\n    const updateData: any = {\n      updatedBy: user.id,\n      updatedAt: new Date()\n    };\n\n    if (name) updateData.name = name;\n    if (configuration) {\n      // Merge configuration, keeping existing values if not provided\n      updateData.configuration = {\n        ...gateway.configuration,\n        ...configuration\n      };\n    }\n    if (settings) {\n      updateData.settings = {\n        ...gateway.settings,\n        ...settings\n      };\n    }\n    if (typeof isActive === 'boolean') updateData.isActive = isActive;\n\n    const updatedGateway = await PaymentGateway.findByIdAndUpdate(\n      id,\n      updateData,\n      { new: true }\n    ).select('-configuration.secretKey -configuration.clientSecret -configuration.accessToken -configuration.keySecret -configuration.webhookSecret');\n\n    return NextResponse.json({ \n      message: 'Payment gateway updated successfully',\n      gateway: updatedGateway \n    });\n  } catch (error) {\n    console.error('Error updating payment gateway:', error);\n    return NextResponse.json({ error: 'Failed to update payment gateway' }, { status: 500 });\n  }\n}\n\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const user = await getCurrentUser();\n    if (!user || user.role !== 'admin') {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { id } = await params;\n    await connectToDatabase();\n\n    const gateway = await PaymentGateway.findByIdAndDelete(id);\n    if (!gateway) {\n      return NextResponse.json({ error: 'Payment gateway not found' }, { status: 404 });\n    }\n\n    return NextResponse.json({ message: 'Payment gateway deleted successfully' });\n  } catch (error) {\n    console.error('Error deleting payment gateway:', error);\n    return NextResponse.json({ error: 'Failed to delete payment gateway' }, { status: 500 });\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/payment-gateways/available/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/payment-gateways/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'IPaymentGateway' is defined but never used.","line":3,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":41}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getCurrentUser } from '@/lib/authService';\nimport { PaymentGateway, IPaymentGateway } from '@/models/PaymentGateway';\nimport { connectToDatabase } from '@/lib/db';\n\nexport async function GET() {\n  try {\n    const user = await getCurrentUser();\n    if (!user || user.role !== 'admin') {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    await connectToDatabase();\n    \n    const gateways = await PaymentGateway.find({})\n      .select('-configuration.secretKey -configuration.clientSecret -configuration.accessToken -configuration.keySecret -configuration.webhookSecret')\n      .sort({ createdAt: -1 });\n\n    return NextResponse.json({ gateways });\n  } catch (error) {\n    console.error('Error fetching payment gateways:', error);\n    return NextResponse.json({ error: 'Failed to fetch payment gateways' }, { status: 500 });\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const user = await getCurrentUser();\n    if (!user || user.role !== 'admin') {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const body = await request.json();\n    const { name, provider, configuration, settings, isActive } = body;\n\n    if (!name || !provider || !configuration) {\n      return NextResponse.json({ error: 'Missing required fields' }, { status: 400 });\n    }\n\n    await connectToDatabase();\n\n    // If making this gateway active, deactivate other gateways of the same provider\n    if (isActive) {\n      await PaymentGateway.updateMany(\n        { provider, isActive: true },\n        { isActive: false, updatedBy: user.id, updatedAt: new Date() }\n      );\n    }\n\n    const gateway = new PaymentGateway({\n      name,\n      provider,\n      configuration,\n      settings: {\n        allowedCurrencies: settings?.allowedCurrencies || ['USD'],\n        minimumAmount: settings?.minimumAmount || 10,\n        maximumAmount: settings?.maximumAmount || 10000,\n        processingFee: settings?.processingFee || 2.9,\n        fixedFee: settings?.fixedFee || 0.30\n      },\n      isActive: isActive || false,\n      createdBy: user.id,\n      updatedBy: user.id\n    });\n\n    await gateway.save();\n\n    // Return without sensitive data\n    const gatewayResponse = gateway.toObject();\n    delete gatewayResponse.configuration.secretKey;\n    delete gatewayResponse.configuration.clientSecret;\n    delete gatewayResponse.configuration.accessToken;\n    delete gatewayResponse.configuration.keySecret;\n    delete gatewayResponse.configuration.webhookSecret;\n\n    return NextResponse.json({ \n      message: 'Payment gateway created successfully',\n      gateway: gatewayResponse \n    });\n  } catch (error) {\n    console.error('Error creating payment gateway:', error);\n    return NextResponse.json({ error: 'Failed to create payment gateway' }, { status: 500 });\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/payments/[id]/receipt/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":45,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1423,1426],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1423,1426],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":178,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":178,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5268,5271],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5268,5271],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":213,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":213,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6237,6240],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6237,6240],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getCurrentUser } from '@/lib/authService';\nimport { Payment } from '@/models/Payment';\nimport { connectToDatabase } from '@/lib/db';\nimport { Types } from 'mongoose';\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const user = await getCurrentUser();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    await connectToDatabase();\n\n    const resolvedParams = await params;\n    const paymentId = resolvedParams.id;\n\n    // Build query based on whether the ID is a valid MongoDB ObjectId or not\n    let query;\n    if (Types.ObjectId.isValid(paymentId)) {\n      // If it's a valid ObjectId, search by both _id and paymentIntentId\n      query = {\n        $or: [\n          { _id: paymentId },\n          { paymentIntentId: paymentId }\n        ]\n      };\n    } else {\n      // If it's not a valid ObjectId (like payment intent IDs), only search by paymentIntentId\n      query = { paymentIntentId: paymentId };\n    }\n\n    // Find payment by MongoDB ID or Payment Intent ID\n    const payment = await Payment.findOne(query).lean();\n\n    if (!payment) {\n      return NextResponse.json({ error: 'Payment not found' }, { status: 404 });\n    }\n\n    // Type assertion since we know findOne returns a single document\n    const paymentDoc = payment as any;\n\n    // Check if user can access this payment\n    if (user.role !== 'admin' && paymentDoc.userId !== user.id) {\n      return NextResponse.json({ error: 'Access denied' }, { status: 403 });\n    }\n\n    // Generate receipt data\n    const receiptData = {\n      // Receipt header\n      receiptNumber: paymentDoc.paymentReference || `RCP-${paymentDoc._id}`,\n      issueDate: paymentDoc.paymentCompletedAt || paymentDoc.createdAt,\n      paymentDate: paymentDoc.paymentCompletedAt || paymentDoc.createdAt,\n      \n      // Company/Service info (you might want to make this configurable)\n      company: {\n        name: 'Sippy Dashboard',\n        address: 'VoIP Services',\n        email: 'support@sippydashboard.com',\n        website: 'https://sippydashboard.com'\n      },\n      \n      // Customer info\n      customer: {\n        email: paymentDoc.userEmail,\n        accountId: paymentDoc.sippyAccountId,\n        customerId: paymentDoc.sippyCustomerId\n      },\n      \n      // Payment details\n      payment: {\n        id: paymentDoc.paymentIntentId,\n        status: paymentDoc.status,\n        method: paymentDoc.paymentMethodType,\n        gateway: paymentDoc.gatewayName,\n        provider: paymentDoc.provider\n      },\n      \n      // Card details (if available)\n      card: paymentDoc.cardBrand && paymentDoc.cardLast4 ? {\n        brand: paymentDoc.cardBrand,\n        last4: paymentDoc.cardLast4,\n        country: paymentDoc.cardCountry\n      } : null,\n      \n      // Amount breakdown\n      amounts: {\n        topupAmount: paymentDoc.topupAmount,\n        processingFee: paymentDoc.processingFee,\n        fixedFee: paymentDoc.fixedFee,\n        totalCharged: paymentDoc.totalChargedAmount,\n        currency: paymentDoc.currency\n      },\n      \n      // Tax information (if applicable)\n      tax: paymentDoc.taxAmount ? {\n        amount: paymentDoc.taxAmount,\n        rate: paymentDoc.taxRate ? `${(paymentDoc.taxRate * 100).toFixed(2)}%` : null\n      } : null,\n      \n      // Additional info\n      description: paymentDoc.description,\n      notes: paymentDoc.notes,\n      \n      // URLs\n      receiptUrl: paymentDoc.receiptUrl,\n      \n      // Metadata\n      createdAt: paymentDoc.createdAt,\n      updatedAt: paymentDoc.updatedAt\n    };\n\n    return NextResponse.json({\n      success: true,\n      receipt: receiptData\n    });\n\n  } catch (error) {\n    console.error('Error generating receipt:', error);\n    return NextResponse.json({ \n      error: 'Failed to generate receipt' \n    }, { status: 500 });\n  }\n}\n\n// PUT endpoint to update payment record (admin only)\nexport async function PUT(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const user = await getCurrentUser();\n    if (!user || user.role !== 'admin') {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    await connectToDatabase();\n\n    const resolvedParams = await params;\n    const paymentId = resolvedParams.id;\n    const body = await request.json();\n\n    // Build query based on whether the ID is a valid MongoDB ObjectId or not\n    let query;\n    if (Types.ObjectId.isValid(paymentId)) {\n      // If it's a valid ObjectId, search by both _id and paymentIntentId\n      query = {\n        $or: [\n          { _id: paymentId },\n          { paymentIntentId: paymentId }\n        ]\n      };\n    } else {\n      // If it's not a valid ObjectId (like payment intent IDs), only search by paymentIntentId\n      query = { paymentIntentId: paymentId };\n    }\n\n    // Find payment\n    const payment = await Payment.findOne(query);\n\n    if (!payment) {\n      return NextResponse.json({ error: 'Payment not found' }, { status: 404 });\n    }\n\n    // Update allowed fields\n    const allowedUpdates = [\n      'notes',\n      'description',\n      'taxAmount',\n      'taxRate',\n      'paymentReference'\n    ];\n\n    const updates: any = {};\n    for (const field of allowedUpdates) {\n      if (body[field] !== undefined) {\n        updates[field] = body[field];\n      }\n    }\n\n    if (Object.keys(updates).length === 0) {\n      return NextResponse.json({ \n        error: 'No valid fields to update' \n      }, { status: 400 });\n    }\n\n    // Add audit trail\n    updates.updatedAt = new Date();\n    if (!payment.rawPaymentData) {\n      payment.rawPaymentData = {};\n    }\n    if (!payment.rawPaymentData.auditTrail) {\n      payment.rawPaymentData.auditTrail = [];\n    }\n    payment.rawPaymentData.auditTrail.push({\n      updatedBy: user.email,\n      updatedAt: new Date(),\n      changes: updates\n    });\n\n    // Update payment\n    const updatedPayment = await Payment.findOneAndUpdate(\n      { _id: payment._id },\n      { ...updates, rawPaymentData: payment.rawPaymentData },\n      { new: true }\n    ).lean();\n\n    console.log(`💾 Payment record updated by admin:\n      - Payment ID: ${(updatedPayment as any)?.paymentIntentId}\n      - Updated by: ${user.email}\n      - Changes: ${JSON.stringify(updates)}`);\n\n    return NextResponse.json({\n      success: true,\n      message: 'Payment record updated successfully',\n      payment: updatedPayment\n    });\n\n  } catch (error) {\n    console.error('Error updating payment record:', error);\n    return NextResponse.json({ \n      error: 'Failed to update payment record' \n    }, { status: 500 });\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/payments/create-intent/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/payments/history/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1025,1028],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1025,1028],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":99,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3357,3360],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3357,3360],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'provider' is assigned a value but never used.","line":160,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":160,"endColumn":15}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getCurrentUser } from '@/lib/authService';\nimport { Payment } from '@/models/Payment';\nimport User from '@/models/User';\nimport { connectToDatabase } from '@/lib/db';\n\nexport async function GET(request: NextRequest) {\n  try {\n    const user = await getCurrentUser();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    await connectToDatabase();\n\n    const { searchParams } = new URL(request.url);\n    const limit = parseInt(searchParams.get('limit') || '50');\n    const offset = parseInt(searchParams.get('offset') || '0');\n    const status = searchParams.get('status'); // succeeded, failed, pending, etc.\n    const startDate = searchParams.get('start_date');\n    const endDate = searchParams.get('end_date');\n    const includeRawData = searchParams.get('include_raw') === 'true';\n    const userId = searchParams.get('user_id'); // Add user filter parameter\n\n    // Build query filters\n    const filters: any = {};\n\n    // Filter by user (admins can see all payments with accountId param)\n    if (user.role === 'admin') {\n      const accountId = searchParams.get('account_id');\n      if (accountId) {\n        filters.sippyAccountId = parseInt(accountId);\n      }\n      // Add user filter for admin\n      if (userId) {\n        filters.userId = userId;\n      }\n      // If no accountId specified, admin sees all payments\n    } else {\n      // Regular users only see their own payments\n      filters.userId = user.id;\n    }\n\n    // Status filter\n    if (status && status !== 'all') {\n      filters.status = status;\n    }\n\n    // Date range filter\n    if (startDate || endDate) {\n      filters.createdAt = {};\n      if (startDate) {\n        // Set start date to beginning of day\n        const start = new Date(startDate);\n        start.setUTCHours(0, 0, 0, 0);\n        filters.createdAt.$gte = start;\n      }\n      if (endDate) {\n        // Set end date to end of day (23:59:59.999)\n        const end = new Date(endDate);\n        end.setUTCHours(23, 59, 59, 999);\n        filters.createdAt.$lte = end;\n      }\n    }\n\n    // Get payments with pagination and populate user data\n    const paymentsQuery = Payment.find(filters)\n      .sort({ createdAt: -1 })\n      .limit(limit)\n      .skip(offset);\n\n    // Exclude raw data unless specifically requested (for performance)\n    if (!includeRawData) {\n      paymentsQuery.select('-rawPaymentData -rawWebhookData');\n    }\n\n    const payments = await paymentsQuery.lean();\n\n    // Get user information for each payment to include user names\n    const userIds = [...new Set(payments.map(p => p.userId))];\n    const users = await User.find({ _id: { $in: userIds } })\n      .select('_id name email')\n      .lean();\n    \n    // Create a map for quick user lookup\n    const userMap = new Map(users.map(user => [user._id.toString(), user]));\n    \n    // Enhance payments with user information\n    const enhancedPayments = payments.map(payment => ({\n      ...payment,\n      userName: userMap.get(payment.userId)?.name || 'Unknown User',\n      userEmail: payment.userEmail || userMap.get(payment.userId)?.email || 'Unknown Email'\n    }));\n\n    // Get total count for pagination\n    const totalCount = await Payment.countDocuments(filters);\n\n    // Get payment statistics\n    const stats = await (Payment as any).getPaymentStats(\n      user.role === 'admin' ? undefined : user.id,\n      startDate && endDate ? {\n        start: new Date(startDate),\n        end: new Date(endDate)\n      } : undefined\n    );\n\n    return NextResponse.json({\n      success: true,\n      payments: enhancedPayments,\n      pagination: {\n        total: totalCount,\n        limit,\n        offset,\n        hasMore: offset + payments.length < totalCount\n      },\n      statistics: stats[0] || {\n        totalPayments: 0,\n        successfulPayments: 0,\n        totalTopupAmount: 0,\n        totalFeesCollected: 0,\n        totalChargedAmount: 0,\n        averagePaymentAmount: 0,\n        currencies: []\n      },\n      filters: {\n        status,\n        startDate,\n        endDate,\n        accountId: user.role === 'admin' ? searchParams.get('account_id') : user.sippyAccountId\n      }\n    });\n\n  } catch (error) {\n    console.error('Error fetching payment history:', error);\n    return NextResponse.json({ \n      error: 'Failed to fetch payment history' \n    }, { status: 500 });\n  }\n}\n\n// POST endpoint for creating manual payment records (admin only)\nexport async function POST(request: NextRequest) {\n  try {\n    const user = await getCurrentUser();\n    if (!user || user.role !== 'admin') {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    await connectToDatabase();\n\n    const body = await request.json();\n    const {\n      userId,\n      sippyAccountId,\n      amount,\n      currency = 'USD',\n      description,\n      notes,\n      paymentMethodType = 'other',\n      provider = 'manual'\n    } = body;\n\n    if (!userId || !sippyAccountId || !amount) {\n      return NextResponse.json({ \n        error: 'Missing required fields: userId, sippyAccountId, amount' \n      }, { status: 400 });\n    }\n\n    // Get user details\n    const targetUser = await User.findById(userId);\n    if (!targetUser) {\n      return NextResponse.json({ error: 'User not found' }, { status: 404 });\n    }\n\n    // Create manual payment record\n    const paymentRecord = new Payment({\n      // Core identification\n      paymentIntentId: `manual_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      webhookEventId: `manual_${Date.now()}`,\n      \n      // User and account info\n      userId: targetUser._id.toString(),\n      userEmail: targetUser.email,\n      sippyAccountId: parseInt(sippyAccountId),\n      sippyCustomerId: targetUser.sippyCustomerId,\n      \n      // Payment amounts\n      topupAmount: amount,\n      processingFee: 0,\n      fixedFee: 0,\n      totalChargedAmount: amount,\n      currency: currency.toUpperCase(),\n      \n      // Payment gateway info\n      provider: 'manual',\n      gatewayId: 'manual',\n      gatewayName: 'Manual Entry',\n      \n      // Payment method details\n      paymentMethodType,\n      \n      // Payment status and timing\n      status: 'succeeded',\n      paymentIntentStatus: 'succeeded',\n      paymentInitiatedAt: new Date(),\n      paymentCompletedAt: new Date(),\n      sippyProcessedAt: new Date(),\n      \n      // Additional metadata\n      description: description || `Manual payment entry of ${amount} ${currency}`,\n      notes: notes || `Manual payment created by admin ${user.email}`,\n      \n      // Raw data storage\n      rawPaymentData: {\n        manualEntry: true,\n        createdBy: user.email,\n        createdAt: new Date().toISOString()\n      }\n    });\n\n    // Generate payment reference\n    paymentRecord.generatePaymentReference();\n\n    await paymentRecord.save();\n\n    console.log(`📋 Manual payment record created:\n      - Payment Reference: ${paymentRecord.paymentReference}\n      - Payment ID: ${paymentRecord.paymentIntentId}\n      - User: ${paymentRecord.userEmail}\n      - Amount: ${paymentRecord.totalChargedAmount} ${paymentRecord.currency}\n      - Created by: ${user.email}`);\n\n    return NextResponse.json({\n      success: true,\n      message: 'Manual payment record created successfully',\n      payment: {\n        id: paymentRecord._id,\n        paymentIntentId: paymentRecord.paymentIntentId,\n        paymentReference: paymentRecord.paymentReference,\n        amount: paymentRecord.totalChargedAmount,\n        currency: paymentRecord.currency,\n        userEmail: paymentRecord.userEmail,\n        createdAt: paymentRecord.createdAt\n      }\n    });\n\n  } catch (error) {\n    console.error('Error creating manual payment record:', error);\n    return NextResponse.json({ \n      error: 'Failed to create manual payment record' \n    }, { status: 500 });\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/payments/record-failure/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":116,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":116,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4052,4055],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4052,4055],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getCurrentUser } from '@/lib/authService';\nimport { Payment } from '@/models/Payment';\nimport { PaymentGateway } from '@/models/PaymentGateway';\nimport { connectToDatabase } from '@/lib/db';\nimport Stripe from 'stripe';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const user = await getCurrentUser();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const body = await request.json();\n    const {\n      paymentIntentId,\n      error,\n      errorCode,\n      errorType,\n      amount,\n      currency,\n      cardBrand,\n      cardLast4,\n      gatewayName,\n      userAgent,\n      ipAddress\n    } = body;\n\n    if (!paymentIntentId || !error || !amount || !currency) {\n      return NextResponse.json({ \n        error: 'Missing required fields: paymentIntentId, error, amount, currency' \n      }, { status: 400 });\n    }\n\n    await connectToDatabase();\n\n    // Get the payment gateway for additional context\n    const gateway = await PaymentGateway.findOne({ \n      provider: 'stripe', \n      isActive: true \n    });\n\n    if (!gateway) {\n      return NextResponse.json({ \n        error: 'No active payment gateway found' \n      }, { status: 400 });\n    }\n\n    // Get additional details from Stripe if possible\n    let stripePaymentIntent = null;\n    let expandedDetails = null;\n    \n    try {\n      const stripe = new Stripe(gateway.configuration.secretKey!, {\n        apiVersion: '2025-04-30.basil'\n      });\n      \n      stripePaymentIntent = await stripe.paymentIntents.retrieve(paymentIntentId, {\n        expand: ['payment_method', 'latest_charge']\n      });\n      \n      // Extract additional details from Stripe\n      if (stripePaymentIntent) {\n        const paymentMethod = stripePaymentIntent.payment_method as Stripe.PaymentMethod;\n        const latestCharge = stripePaymentIntent.latest_charge as Stripe.Charge;\n        \n        expandedDetails = {\n          paymentMethod: paymentMethod ? {\n            id: paymentMethod.id,\n            type: paymentMethod.type,\n            card: paymentMethod.card ? {\n              brand: paymentMethod.card.brand,\n              last4: paymentMethod.card.last4,\n              exp_month: paymentMethod.card.exp_month,\n              exp_year: paymentMethod.card.exp_year,\n              country: paymentMethod.card.country,\n              funding: paymentMethod.card.funding,\n              fingerprint: paymentMethod.card.fingerprint\n            } : null,\n            billing_details: paymentMethod.billing_details\n          } : null,\n          latestCharge: latestCharge ? {\n            id: latestCharge.id,\n            status: latestCharge.status,\n            outcome: latestCharge.outcome,\n            failure_code: latestCharge.failure_code,\n            failure_message: latestCharge.failure_message,\n            risk_level: latestCharge.outcome?.risk_level,\n            risk_score: latestCharge.outcome?.risk_score,\n            billing_details: latestCharge.billing_details\n          } : null\n        };\n      }\n    } catch (stripeError) {\n      console.warn('Could not retrieve additional details from Stripe:', stripeError);\n      // Continue without Stripe details - we still want to record the failure\n    }\n\n    // Generate a unique payment reference for failed payments\n    const timestamp = new Date().toISOString().slice(0, 10).replace(/-/g, '');\n    const randomSuffix = Math.random().toString(36).substring(2, 8).toUpperCase();\n    const paymentReference = `FAIL-${timestamp}-${randomSuffix}`;\n\n    // Create comprehensive failed payment record\n    const failedPaymentRecord = new Payment({\n      // Core identification\n      paymentIntentId: paymentIntentId,\n      webhookEventId: 'frontend_failure', // Special marker for frontend-reported failures\n      paymentReference: paymentReference,\n      \n      // User and account info\n      userId: user.id,\n      userEmail: user.email,\n      sippyAccountId: user.sippyAccountId || 0,\n      sippyCustomerId: (user as any).sippyCustomerId,\n      \n      // Payment amounts (what was attempted)\n      topupAmount: amount,\n      processingFee: 0, // No fees charged on failed payments\n      fixedFee: 0,\n      totalChargedAmount: 0, // No amount actually charged\n      currency: currency.toUpperCase(),\n      \n      // Payment gateway info\n      provider: 'stripe',\n      gatewayId: gateway._id.toString(),\n      gatewayName: gatewayName || gateway.name,\n      \n      // Payment method details (from frontend or Stripe)\n      paymentMethodType: 'card',\n      cardBrand: cardBrand || expandedDetails?.paymentMethod?.card?.brand,\n      cardLast4: cardLast4 || expandedDetails?.paymentMethod?.card?.last4,\n      cardCountry: expandedDetails?.paymentMethod?.card?.country,\n      cardFingerprint: expandedDetails?.paymentMethod?.card?.fingerprint,\n      \n      // Failure details\n      status: 'failed',\n      paymentIntentStatus: stripePaymentIntent?.status || 'failed',\n      failureCode: errorCode,\n      failureMessage: error,\n      \n      // Timestamps\n      paymentInitiatedAt: stripePaymentIntent ? new Date(stripePaymentIntent.created * 1000) : new Date(),\n      paymentCompletedAt: new Date(), // When the failure was recorded\n      // Note: No sippyProcessedAt since we don't send failed payments to Sippy\n      \n      // Security and analysis data\n      userAgent: userAgent,\n      ipAddress: ipAddress,\n      description: `Failed payment attempt: ${error}`,\n      notes: `Payment failed with error: ${error}. Error code: ${errorCode}. Error type: ${errorType}. No funds were charged and no credit was added to Sippy account.`,\n      \n      // Raw data for analysis\n      rawPaymentData: {\n        frontendReported: {\n          error,\n          errorCode,\n          errorType,\n          timestamp: new Date().toISOString(),\n          userAgent,\n          ipAddress\n        },\n        stripePaymentIntent: stripePaymentIntent ? {\n          id: stripePaymentIntent.id,\n          amount: stripePaymentIntent.amount,\n          currency: stripePaymentIntent.currency,\n          status: stripePaymentIntent.status,\n          created: stripePaymentIntent.created,\n          description: stripePaymentIntent.description,\n          metadata: stripePaymentIntent.metadata,\n          last_payment_error: stripePaymentIntent.last_payment_error\n        } : null,\n        expandedDetails: expandedDetails\n      }\n    });\n\n    await failedPaymentRecord.save();\n\n    console.log('🚨 Failed payment recorded:', {\n      paymentReference: paymentReference,\n      paymentIntentId: paymentIntentId,\n      userId: user.id,\n      userEmail: user.email,\n      error: error,\n      errorCode: errorCode,\n      amount: amount,\n      currency: currency\n    });\n\n    return NextResponse.json({\n      success: true,\n      paymentReference: paymentReference,\n      message: 'Failed payment recorded for analysis'\n    });\n\n  } catch (error) {\n    console.error('Error recording failed payment:', error);\n    return NextResponse.json({ \n      error: 'Failed to record payment failure' \n    }, { status: 500 });\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/payments/webhook/stripe/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":52,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1951,1954],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1951,1954],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prefer-const","severity":2,"message":"'existingEvent' is never reassigned. Use 'const' instead.","line":57,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":57,"endColumn":22,"fix":{"range":[2096,2203],"text":"const existingEvent = await WebhookEvent.findOne({ \n      eventId: event.id,\n      provider: 'stripe'\n    });"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":137,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":137,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5155,5158],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5155,5158],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":199,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":199,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7267,7270],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7267,7270],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":317,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":317,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12096,12099],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12096,12099],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":332,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":332,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12710,12713],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12710,12713],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":635,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":635,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[25749,25752],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[25749,25752],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { PaymentGateway } from '@/models/PaymentGateway';\nimport User from '@/models/User';\nimport WebhookEvent, { IWebhookEvent } from '@/models/WebhookEvent';\nimport { Payment } from '@/models/Payment';\nimport { connectToDatabase } from '@/lib/db';\nimport { getSippyApiCredentials } from '@/lib/sippyClientConfig';\nimport { SippyClient } from '@/lib/sippyClient';\nimport { sendGatewayPaymentSuccessEmail } from '@/lib/paymentEmailService';\nimport Stripe from 'stripe';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.text();\n    const signature = request.headers.get('stripe-signature');\n\n    if (!signature) {\n      return NextResponse.json({ error: 'Missing signature' }, { status: 400 });\n    }\n\n    await connectToDatabase();\n\n    // Get the active Stripe gateway to get the webhook secret\n    const gateway = await PaymentGateway.findOne({ provider: 'stripe', isActive: true });\n    if (!gateway || !gateway.configuration.webhookSecret) {\n      console.error('No active Stripe gateway found or webhook secret missing');\n      return NextResponse.json({ error: 'Configuration error' }, { status: 400 });\n    }\n\n    const stripe = new Stripe(gateway.configuration.secretKey!, {\n      apiVersion: '2025-04-30.basil'\n    });\n\n    let event: Stripe.Event;\n\n    try {\n      event = stripe.webhooks.constructEvent(\n        body,\n        signature,\n        gateway.configuration.webhookSecret\n      );\n    } catch (err) {\n      console.error('Webhook signature verification failed:', err);\n      return NextResponse.json({ error: 'Invalid signature' }, { status: 400 });\n    }\n\n    console.log('Stripe webhook event:', event.type);\n\n    // Extract payment intent ID for payment-related events\n    let paymentIntentId = null;\n    if (event.type.includes('payment_intent') || event.type.includes('charge')) {\n      const eventData = event.data.object as any;\n      paymentIntentId = eventData.payment_intent || eventData.id;\n    }\n\n    // Check if this specific event has already been processed\n    let existingEvent = await WebhookEvent.findOne({ \n      eventId: event.id,\n      provider: 'stripe'\n    });\n\n    if (existingEvent && existingEvent.processed) {\n      console.log(`🚫 Event ${event.id} already processed, skipping...`);\n      return NextResponse.json({ \n        received: true, \n        message: 'Event already processed' \n      });\n    }\n\n    // For payment_intent.succeeded events, use atomic operation to prevent duplicates\n    if (event.type === 'payment_intent.succeeded' && paymentIntentId) {\n      console.log('💳 Attempting atomic processing for payment_intent.succeeded:', {\n        paymentIntentId: paymentIntentId,\n        eventId: event.id\n      });\n\n      // ADDITIONAL SAFEGUARD: Double-check if this payment was already processed\n      const alreadyProcessedPayment = await WebhookEvent.findOne({\n        paymentIntentId: paymentIntentId,\n        eventType: 'payment_intent.succeeded',\n        processed: true,\n        provider: 'stripe'\n      });\n\n      if (alreadyProcessedPayment) {\n        console.log(`🚫 SAFEGUARD: Payment ${paymentIntentId} already processed by event ${alreadyProcessedPayment.eventId}, skipping...`);\n        \n        // Still create/mark this event as processed for tracking\n        if (!existingEvent) {\n          const duplicateEvent = new WebhookEvent({\n            eventId: event.id,\n            eventType: event.type,\n            provider: 'stripe' as const,\n            paymentIntentId: paymentIntentId,\n            processed: true,\n            processedAt: new Date(),\n            metadata: {\n              stripeEvent: { id: event.id, type: event.type, created: event.created, livemode: event.livemode },\n              skippedReason: 'Payment already processed - safeguard check',\n              originalProcessedEvent: alreadyProcessedPayment.eventId\n            }\n          });\n          await duplicateEvent.save();\n        }\n        \n        return NextResponse.json({ \n          received: true, \n          message: 'Payment already processed - safeguard check' \n        });\n      }\n\n      // Create a special \"payment completion\" record atomically\n      // This will fail if any other event has already created one for this payment\n      try {\n        const paymentCompletionRecord = new WebhookEvent({\n          eventId: `payment_completion_${paymentIntentId}`,\n          eventType: 'payment_completion_marker',\n          provider: 'stripe' as const,\n          paymentIntentId: paymentIntentId,\n          processed: false,\n          metadata: {\n            originalEventId: event.id,\n            originalEventType: event.type,\n            createdForPayment: paymentIntentId,\n            timestamp: new Date(),\n            stripeEventData: {\n              id: event.id,\n              type: event.type,\n              created: event.created,\n              livemode: event.livemode\n            }\n          }\n        });\n\n        await paymentCompletionRecord.save();\n        console.log(`🔒 Payment completion marker created for ${paymentIntentId} by event ${event.id}`);\n      } catch (error: any) {\n        // If we get a duplicate key error, another event already processed this payment\n        if (error.code === 11000) {\n          console.log(`🚫 ATOMIC LOCK: Payment ${paymentIntentId} already being processed by another event, skipping...`);\n          \n          // Still create/mark this event as processed for tracking\n          if (!existingEvent) {\n            const duplicateEvent = new WebhookEvent({\n              eventId: event.id,\n              eventType: event.type,\n              provider: 'stripe' as const,\n              paymentIntentId: paymentIntentId,\n              processed: true,\n              processedAt: new Date(),\n              metadata: {\n                stripeEvent: { id: event.id, type: event.type, created: event.created, livemode: event.livemode },\n                skippedReason: 'Payment already being processed - atomic lock',\n                atomicLockError: error.message\n              }\n            });\n            await duplicateEvent.save();\n          }\n          \n          return NextResponse.json({ \n            received: true, \n            message: 'Payment already processed by another event' \n          });\n        } else {\n          // Re-throw if it's a different error\n          console.error('Unexpected error creating payment completion marker:', error);\n          throw error;\n        }\n      }\n    }\n\n    // Create or update the webhook event record\n    const webhookEventData = {\n      eventId: event.id,\n      eventType: event.type,\n      provider: 'stripe' as const,\n      paymentIntentId: paymentIntentId,\n      metadata: {\n        stripeEvent: {\n          id: event.id,\n          type: event.type,\n          created: event.created,\n          livemode: event.livemode\n        }\n      }\n    };\n\n    let webhookEvent: IWebhookEvent;\n    if (existingEvent) {\n      webhookEvent = existingEvent;\n      // Ensure metadata exists\n      if (!webhookEvent.metadata) {\n        webhookEvent.metadata = {};\n      }\n    } else {\n      try {\n        webhookEvent = new WebhookEvent(webhookEventData);\n        await webhookEvent.save();\n      } catch (error: any) {\n        // Handle race condition: if another request created the same event simultaneously\n        if (error.code === 11000 && error.keyPattern?.eventId) {\n          console.log(`🔄 Race condition detected for event ${event.id}, fetching existing record...`);\n          const raceConditionEvent = await WebhookEvent.findOne({ \n            eventId: event.id,\n            provider: 'stripe'\n          });\n          \n          if (raceConditionEvent && raceConditionEvent.processed) {\n            console.log(`🚫 Event ${event.id} was processed by another request, skipping...`);\n            return NextResponse.json({ \n              received: true, \n              message: 'Event already processed (race condition)' \n            });\n          }\n          \n          // If not processed yet, use the existing record\n          webhookEvent = raceConditionEvent!;\n        } else {\n          // Re-throw if it's a different error\n          throw error;\n        }\n      }\n    }\n\n    // Handle the payment_intent.succeeded event ONLY (ignore charge.succeeded to prevent duplicates)\n    if (event.type === 'payment_intent.succeeded') {\n      const paymentIntent = event.data.object as Stripe.PaymentIntent;\n      const metadata = paymentIntent.metadata;\n\n      console.log('💳 Processing payment_intent.succeeded:', {\n        paymentIntentId: paymentIntent.id,\n        amount: paymentIntent.amount,\n        metadata\n      });\n\n      if (!metadata.userId || !metadata.sippyAccountId || !metadata.topupAmount) {\n        console.error('Missing required metadata in payment intent');\n        \n        // Clean up the payment completion marker\n        if (paymentIntentId) {\n          await WebhookEvent.findOneAndDelete({\n            eventId: `payment_completion_${paymentIntentId}`,\n            eventType: 'payment_completion_marker',\n            provider: 'stripe'\n          });\n        }\n        \n        return NextResponse.json({ error: 'Missing metadata' }, { status: 400 });\n      }\n\n      try {\n        // Get user details\n        const user = await User.findById(metadata.userId);\n        if (!user) {\n          console.error('User not found:', metadata.userId);\n          \n          // Clean up the payment completion marker\n          await WebhookEvent.findOneAndDelete({\n            eventId: `payment_completion_${paymentIntentId}`,\n            eventType: 'payment_completion_marker',\n            provider: 'stripe'\n          });\n          \n          return NextResponse.json({ error: 'User not found' }, { status: 404 });\n        }\n\n        // Get Sippy API credentials\n        const sippyCredentials = await getSippyApiCredentials();\n        if (!sippyCredentials) {\n          console.error('Sippy API credentials not configured');\n          \n          // Clean up the payment completion marker\n          await WebhookEvent.findOneAndDelete({\n            eventId: `payment_completion_${paymentIntentId}`,\n            eventType: 'payment_completion_marker',\n            provider: 'stripe'\n          });\n          \n          return NextResponse.json({ error: 'Sippy API not configured' }, { status: 500 });\n        }\n\n        // Initialize Sippy client\n        const sippyClient = new SippyClient(sippyCredentials);\n\n        // Add credit to Sippy account\n        const topupAmount = parseFloat(metadata.topupAmount);\n        const result = await sippyClient.addAccountCredit({\n          i_account: parseInt(metadata.sippyAccountId),\n          amount: topupAmount,\n          currency: paymentIntent.currency.toUpperCase(),\n          payment_notes: `Stripe payment - ${paymentIntent.id} - Top-up via ${gateway.name}`\n        });\n\n        console.log('Sippy credit added successfully:', result);\n\n        // Get expanded payment intent with payment method details for both payment record and email\n        const expandedPaymentIntent = await stripe.paymentIntents.retrieve(paymentIntent.id, {\n          expand: ['payment_method', 'charges']\n        });\n        \n        // Extract payment method details\n        const paymentMethod = expandedPaymentIntent.payment_method as Stripe.PaymentMethod;\n        const cardDetails = paymentMethod?.card;\n        const billingDetails = paymentMethod?.billing_details;\n\n        // SAVE COMPREHENSIVE PAYMENT DETAILS TO MONGODB\n        try {\n          console.log('🔍 Starting Payment record creation...');\n          console.log('🔍 Payment Intent ID:', paymentIntent.id);\n          console.log('🔍 User ID:', metadata.userId);\n          console.log('🔍 User Email:', user.email);\n          console.log('🔍 Sippy Account ID:', metadata.sippyAccountId);\n          \n          console.log('🔍 Using already retrieved payment method details');\n          \n          // Get client IP and user agent from the original payment intent creation\n          const charges = (expandedPaymentIntent as any).charges?.data || [];\n          const latestCharge = charges[0];\n          \n          console.log('🔍 About to create Payment record with data:', {\n            paymentIntentId: paymentIntent.id,\n            userId: metadata.userId,\n            userEmail: user.email,\n            amount: topupAmount,\n            currency: paymentIntent.currency.toUpperCase()\n          });\n          \n          // Create comprehensive payment record\n          const paymentRecord = new Payment({\n            // Core identification\n            paymentIntentId: paymentIntent.id,\n            webhookEventId: (webhookEvent._id as any).toString(),\n            \n            // User and account info\n            userId: metadata.userId,\n            userEmail: user.email,\n            sippyAccountId: parseInt(metadata.sippyAccountId),\n            sippyCustomerId: user.sippyAccountId,\n            \n            // Payment amounts\n            topupAmount: topupAmount,\n            processingFee: parseFloat(metadata.processingFee),\n            fixedFee: parseFloat(metadata.fixedFee),\n            totalChargedAmount: paymentIntent.amount / 100, // Convert from cents\n            currency: paymentIntent.currency.toUpperCase(),\n            \n            // Payment gateway info\n            provider: 'stripe',\n            gatewayId: metadata.gatewayId || gateway._id.toString(),\n            gatewayName: gateway.name,\n            \n            // Payment method details\n            paymentMethodType: paymentMethod?.type === 'card' ? 'card' : 'other',\n            cardBrand: cardDetails?.brand,\n            cardLast4: cardDetails?.last4,\n            cardCountry: cardDetails?.country,\n            cardFingerprint: cardDetails?.fingerprint,\n            \n            // Payment status and timing\n            status: 'succeeded',\n            paymentIntentStatus: paymentIntent.status,\n            paymentInitiatedAt: new Date(paymentIntent.created * 1000),\n            paymentCompletedAt: new Date(),\n            sippyProcessedAt: new Date(),\n            \n            // Additional metadata\n            description: paymentIntent.description || `Balance top-up of ${topupAmount} ${paymentIntent.currency.toUpperCase()}`,\n            notes: `Stripe payment processed via webhook. Sippy credit added successfully.`,\n            \n            // Raw data storage for debugging and completeness\n            rawPaymentData: {\n              paymentIntent: {\n                id: paymentIntent.id,\n                amount: paymentIntent.amount,\n                currency: paymentIntent.currency,\n                status: paymentIntent.status,\n                created: paymentIntent.created,\n                description: paymentIntent.description,\n                metadata: paymentIntent.metadata,\n                receipt_email: paymentIntent.receipt_email,\n                shipping: paymentIntent.shipping\n              },\n              paymentMethod: paymentMethod ? {\n                id: paymentMethod.id,\n                type: paymentMethod.type,\n                card: cardDetails ? {\n                  brand: cardDetails.brand,\n                  last4: cardDetails.last4,\n                  exp_month: cardDetails.exp_month,\n                  exp_year: cardDetails.exp_year,\n                  fingerprint: cardDetails.fingerprint,\n                  country: cardDetails.country,\n                  funding: cardDetails.funding\n                } : null,\n                billing_details: billingDetails\n              } : null,\n              latestCharge: latestCharge ? {\n                id: latestCharge.id,\n                amount: latestCharge.amount,\n                currency: latestCharge.currency,\n                status: latestCharge.status,\n                outcome: latestCharge.outcome,\n                receipt_url: latestCharge.receipt_url,\n                billing_details: latestCharge.billing_details\n              } : null\n            },\n            rawWebhookData: {\n              eventId: event.id,\n              eventType: event.type,\n              created: event.created,\n              livemode: event.livemode,\n              api_version: event.api_version,\n              request: event.request\n            }\n          });\n          \n          console.log('🔍 Payment record created in memory, generating payment reference...');\n          \n          // Generate payment reference\n          paymentRecord.generatePaymentReference();\n          \n          console.log('🔍 Payment reference generated:', paymentRecord.paymentReference);\n          \n          // Save receipt URL if available\n          if (latestCharge?.receipt_url) {\n            paymentRecord.receiptUrl = latestCharge.receipt_url;\n            console.log('🔍 Receipt URL added:', latestCharge.receipt_url);\n          }\n          \n          console.log('🔍 About to save Payment record to MongoDB...');\n          \n          await paymentRecord.save();\n          \n          console.log(`💾 Payment record saved to MongoDB:\n            - Payment ID: ${paymentRecord.paymentIntentId}\n            - Payment Reference: ${paymentRecord.paymentReference}\n            - MongoDB ID: ${paymentRecord._id}\n            - Card: ${paymentRecord.cardBrand} ending in ${paymentRecord.cardLast4}\n            - Amount: ${paymentRecord.totalChargedAmount} ${paymentRecord.currency}\n            - Top-up: ${paymentRecord.topupAmount} ${paymentRecord.currency}`);\n          \n          // Add payment record reference to webhook event metadata\n          if (!webhookEvent.metadata) {\n            webhookEvent.metadata = {};\n          }\n          webhookEvent.metadata.paymentRecord = {\n            id: paymentRecord._id.toString(),\n            paymentReference: paymentRecord.paymentReference,\n            totalAmount: paymentRecord.totalChargedAmount,\n            topupAmount: paymentRecord.topupAmount\n          };\n          \n        } catch (paymentRecordError) {\n          console.error('❌ Failed to save payment record to MongoDB:', paymentRecordError);\n          console.error('❌ Error details:', {\n            message: paymentRecordError instanceof Error ? paymentRecordError.message : 'Unknown error',\n            stack: paymentRecordError instanceof Error ? paymentRecordError.stack : null,\n            name: paymentRecordError instanceof Error ? paymentRecordError.name : null\n          });\n          // Don't fail the whole transaction if payment record creation fails\n          // The payment was successful and Sippy was credited, just log the error\n          if (!webhookEvent.metadata) {\n            webhookEvent.metadata = {};\n          }\n          webhookEvent.metadata.paymentRecordError = {\n            message: paymentRecordError instanceof Error ? paymentRecordError.message : 'Unknown error',\n            timestamp: new Date()\n          };\n        }\n\n        // CRITICAL MONITORING: Log the exact amount added vs payment amount\n        const stripeAmountInEur = paymentIntent.amount / 100; // Stripe amount is in cents\n        console.log(`🔍 PAYMENT INTEGRITY CHECK:\n          - Stripe Payment Amount: €${stripeAmountInEur} (${paymentIntent.amount} cents)\n          - Sippy Credit Amount: €${topupAmount}\n          - User Top-up Request: €${metadata.topupAmount}\n          - Processing Fee: €${metadata.processingFee}\n          - Fixed Fee: €${metadata.fixedFee}\n          - Payment Intent ID: ${paymentIntent.id}\n          - Event ID: ${event.id}\n          - Timestamp: ${new Date().toISOString()}`);\n\n        // Verify amounts match expectations\n        const expectedTotal = topupAmount + parseFloat(metadata.processingFee) + parseFloat(metadata.fixedFee);\n        const actualTotal = stripeAmountInEur;\n        const amountDifference = Math.abs(expectedTotal - actualTotal);\n        \n        if (amountDifference > 0.01) { // Allow 1 cent tolerance for rounding\n          console.error(`⚠️ AMOUNT MISMATCH DETECTED:\n            - Expected Total: €${expectedTotal.toFixed(2)}\n            - Actual Charged: €${actualTotal.toFixed(2)}\n            - Difference: €${amountDifference.toFixed(2)}\n            - Payment: ${paymentIntent.id}`);\n        }\n\n        // Mark the webhook event as processed\n        webhookEvent.processed = true;\n        webhookEvent.processedAt = new Date();\n        if (!webhookEvent.metadata) {\n          webhookEvent.metadata = {};\n        }\n        webhookEvent.metadata.sippy = {\n          accountId: metadata.sippyAccountId,\n          amount: topupAmount,\n          currency: paymentIntent.currency.toUpperCase(),\n          result: result\n        };\n        // Add integrity check results to metadata\n        webhookEvent.metadata.integrityCheck = {\n          stripeAmount: stripeAmountInEur,\n          sippyAmount: topupAmount,\n          expectedTotal: expectedTotal,\n          actualTotal: actualTotal,\n          amountDifference: amountDifference,\n          passed: amountDifference <= 0.01\n        };\n        await webhookEvent.save();\n\n        // Mark the payment completion marker as processed\n        await WebhookEvent.findOneAndUpdate({\n          eventId: `payment_completion_${paymentIntentId}`,\n          eventType: 'payment_completion_marker',\n          provider: 'stripe'\n        }, {\n          processed: true,\n          processedAt: new Date(),\n          'metadata.completedBy': event.id\n        });\n\n        // Log the successful transaction\n        console.log(`✅ Balance top-up completed:\n          - User: ${user.email}\n          - Sippy Account: ${metadata.sippyAccountId}\n          - Amount: ${topupAmount} ${paymentIntent.currency.toUpperCase()}\n          - Stripe Payment ID: ${paymentIntent.id}\n          - Processing Fee: ${metadata.processingFee} ${paymentIntent.currency.toUpperCase()}\n          - Fixed Fee: ${metadata.fixedFee} ${paymentIntent.currency.toUpperCase()}`);\n\n        // Send payment success email\n        try {\n          await sendGatewayPaymentSuccessEmail({\n            userId: metadata.userId,\n            amount: topupAmount,\n            currency: paymentIntent.currency.toUpperCase(),\n            paymentMethod: cardDetails ? `${cardDetails.brand} ****${cardDetails.last4}` : 'Card',\n            transactionId: paymentIntent.id,\n            fees: {\n              processingFee: parseFloat(metadata.processingFee),\n              fixedFee: parseFloat(metadata.fixedFee),\n            },\n            gateway: gateway.name,\n          });\n          console.log(`📧 Payment success email queued for ${user.email}`);\n        } catch (emailError) {\n          console.error('Failed to send payment success email:', emailError);\n          // Don't fail the payment processing if email fails\n        }\n\n        return NextResponse.json({ \n          success: true,\n          message: 'Payment processed and balance updated successfully' \n        });\n\n      } catch (error) {\n        console.error('Error processing Sippy credit:', error);\n        \n        // Clean up the payment completion marker on error\n        await WebhookEvent.findOneAndDelete({\n          eventId: `payment_completion_${paymentIntentId}`,\n          eventType: 'payment_completion_marker',\n          provider: 'stripe'\n        });\n        \n        // Mark the event as failed for potential retry\n        if (!webhookEvent.metadata) {\n          webhookEvent.metadata = {};\n        }\n        webhookEvent.metadata.error = {\n          message: error instanceof Error ? error.message : 'Unknown error',\n          timestamp: new Date()\n        };\n        await webhookEvent.save();\n        \n        return NextResponse.json({ \n          error: 'Payment successful but failed to update account balance',\n          paymentIntentId: paymentIntent.id,\n          needsManualProcessing: true\n        }, { status: 500 });\n      }\n    } else {\n      // For other event types (including charge.succeeded), just mark as processed without doing anything\n      webhookEvent.processed = true;\n      webhookEvent.processedAt = new Date();\n      \n      if (event.type === 'charge.succeeded') {\n        if (!webhookEvent.metadata) {\n          webhookEvent.metadata = {};\n        }\n        webhookEvent.metadata.note = 'Charge event ignored - payment processed via payment_intent.succeeded';\n        console.log(`ℹ️ Ignoring charge.succeeded event - payment will be processed by payment_intent.succeeded`);\n      }\n      \n      await webhookEvent.save();\n    }\n\n    // Handle other event types if needed\n    if (event.type === 'payment_intent.payment_failed') {\n      const paymentIntent = event.data.object as Stripe.PaymentIntent;\n      console.log('❌ Payment failed:', {\n        paymentIntentId: paymentIntent.id,\n        lastPaymentError: paymentIntent.last_payment_error\n      });\n\n      // Save failed payment record to MongoDB\n      try {\n        const metadata = paymentIntent.metadata;\n        \n        if (metadata.userId && metadata.sippyAccountId && metadata.topupAmount) {\n          const user = await User.findById(metadata.userId);\n          \n          if (user) {\n            // Get expanded payment intent with payment method details\n            const expandedPaymentIntent = await stripe.paymentIntents.retrieve(paymentIntent.id, {\n              expand: ['payment_method']\n            });\n            \n            const paymentMethod = expandedPaymentIntent.payment_method as Stripe.PaymentMethod;\n            const cardDetails = paymentMethod?.card;\n            const failureError = paymentIntent.last_payment_error;\n            \n            // Create payment record for failed payment\n            const failedPaymentRecord = new Payment({\n              // Core identification\n              paymentIntentId: paymentIntent.id,\n              webhookEventId: (webhookEvent._id as any).toString(),\n              \n              // User and account info\n              userId: metadata.userId,\n              userEmail: user.email,\n              sippyAccountId: parseInt(metadata.sippyAccountId),\n              sippyCustomerId: user.sippyCustomerId,\n              \n              // Payment amounts\n              topupAmount: parseFloat(metadata.topupAmount),\n              processingFee: parseFloat(metadata.processingFee || '0'),\n              fixedFee: parseFloat(metadata.fixedFee || '0'),\n              totalChargedAmount: paymentIntent.amount / 100,\n              currency: paymentIntent.currency.toUpperCase(),\n              \n              // Payment gateway info\n              provider: 'stripe',\n              gatewayId: metadata.gatewayId || gateway._id.toString(),\n              gatewayName: gateway.name,\n              \n              // Payment method details (if available)\n              paymentMethodType: paymentMethod?.type === 'card' ? 'card' : 'other',\n              cardBrand: cardDetails?.brand,\n              cardLast4: cardDetails?.last4,\n              cardCountry: cardDetails?.country,\n              cardFingerprint: cardDetails?.fingerprint,\n              \n              // Payment status and timing\n              status: 'failed',\n              paymentIntentStatus: paymentIntent.status,\n              failureCode: failureError?.code,\n              failureMessage: failureError?.message,\n              paymentInitiatedAt: new Date(paymentIntent.created * 1000),\n              \n              // Additional metadata\n              description: paymentIntent.description || `Failed balance top-up attempt of ${metadata.topupAmount} ${paymentIntent.currency.toUpperCase()}`,\n              notes: `Payment failed: ${failureError?.message || 'Unknown error'}`,\n              \n              // Raw data storage\n              rawPaymentData: {\n                paymentIntent: {\n                  id: paymentIntent.id,\n                  amount: paymentIntent.amount,\n                  currency: paymentIntent.currency,\n                  status: paymentIntent.status,\n                  created: paymentIntent.created,\n                  description: paymentIntent.description,\n                  metadata: paymentIntent.metadata,\n                  last_payment_error: paymentIntent.last_payment_error\n                },\n                paymentMethod: paymentMethod ? {\n                  id: paymentMethod.id,\n                  type: paymentMethod.type,\n                  card: cardDetails ? {\n                    brand: cardDetails.brand,\n                    last4: cardDetails.last4,\n                    country: cardDetails.country,\n                    fingerprint: cardDetails.fingerprint\n                  } : null\n                } : null\n              },\n              rawWebhookData: {\n                eventId: event.id,\n                eventType: event.type,\n                created: event.created,\n                livemode: event.livemode\n              }\n            });\n            \n            await failedPaymentRecord.save();\n            console.log(`💾 Failed payment record saved to MongoDB:\n              - Payment ID: ${failedPaymentRecord.paymentIntentId}\n              - MongoDB ID: ${failedPaymentRecord._id}\n              - User: ${failedPaymentRecord.userEmail}\n              - Amount: ${failedPaymentRecord.totalChargedAmount} ${failedPaymentRecord.currency}\n              - Failure: ${failedPaymentRecord.failureCode} - ${failedPaymentRecord.failureMessage}`);\n            \n            // Add payment record reference to webhook event metadata\n            if (!webhookEvent.metadata) {\n              webhookEvent.metadata = {};\n            }\n            webhookEvent.metadata.failedPaymentRecord = {\n              id: failedPaymentRecord._id.toString(),\n              failureCode: failedPaymentRecord.failureCode,\n              failureMessage: failedPaymentRecord.failureMessage,\n              amount: failedPaymentRecord.totalChargedAmount\n            };\n            \n            await webhookEvent.save();\n          }\n        }\n      } catch (failedPaymentRecordError) {\n        console.error('❌ Failed to save failed payment record to MongoDB:', failedPaymentRecordError);\n      }\n    }\n\n    return NextResponse.json({ received: true });\n\n  } catch (error) {\n    console.error('Webhook error:', error);\n    return NextResponse.json({ \n      error: 'Webhook processing failed' \n    }, { status: 500 });\n  }\n}\n\n// Disable body parsing for webhooks\nexport const runtime = 'nodejs'; ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/phone-numbers/available/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'NumberRateDeck' is defined but never used.","line":5,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":32,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1251,1254],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1251,1254],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":54,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1765,1768],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1765,1768],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":119,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4141,4144],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4141,4144],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getCurrentUser } from '@/lib/authService';\nimport { connectToDatabase } from '@/lib/db';\nimport PhoneNumber from '@/models/PhoneNumber';\nimport NumberRateDeck from '@/models/NumberRateDeck';\nimport NumberRate from '@/models/NumberRate';\nimport mongoose from 'mongoose';\n\n// GET - List available phone numbers for purchase\nexport async function GET(request: NextRequest) {\n  try {\n    // Verify the user is authenticated\n    const user = await getCurrentUser();\n    \n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    // Connect to the database\n    await connectToDatabase();\n\n    const { searchParams } = new URL(request.url);\n    const page = parseInt(searchParams.get('page') || '1');\n    const limit = parseInt(searchParams.get('limit') || '12');\n    const search = searchParams.get('search') || '';\n    const country = searchParams.get('country');\n    const numberType = searchParams.get('numberType');\n    const sortBy = searchParams.get('sortBy') || 'monthlyRate';\n    const sortOrder = searchParams.get('sortOrder') || 'asc';\n\n    // Build query for available phone numbers (both regular and backorder-only)\n    const query: any = {\n      status: 'available',\n      rateDeckId: { $exists: true, $ne: null }, // Must have a rate deck assigned\n    };\n\n    if (search) {\n      query.$or = [\n        { number: { $regex: search, $options: 'i' } },\n        { country: { $regex: search, $options: 'i' } },\n        { description: { $regex: search, $options: 'i' } },\n      ];\n    }\n\n    if (country) {\n      query.country = country;\n    }\n\n    if (numberType) {\n      query.numberType = numberType;\n    }\n\n    // Build sort object\n    const sort: any = {};\n    sort[sortBy] = sortOrder === 'asc' ? 1 : -1;\n\n    // Execute query with pagination\n    const skip = (page - 1) * limit;\n    \n    const [phoneNumbers, total, countries, numberTypes] = await Promise.all([\n      PhoneNumber.find(query)\n        .sort(sort)\n        .skip(skip)\n        .limit(limit)\n        .lean(),\n      PhoneNumber.countDocuments(query),\n      // Get available countries for filter (include both types)\n      PhoneNumber.distinct('country', { status: 'available', rateDeckId: { $exists: true, $ne: null } }),\n      // Get available number types for filter (include both types)\n      PhoneNumber.distinct('numberType', { status: 'available', rateDeckId: { $exists: true, $ne: null } })\n    ]);\n\n    console.log(`[API] Available numbers query result: ${phoneNumbers.length} numbers, total: ${total}`);\n\n    // Transform the response and fetch rates for each number\n    const transformedNumbers = await Promise.all(\n      phoneNumbers.map(async (number) => {\n        const rate = await findMatchingRate(number, number.rateDeckId?.toString() || '');\n        console.log(`[API] Number ${number.number}: rateDeckId=${number.rateDeckId}, rate=${rate?.rate || 'not found'}, prefix=${rate?.prefix || 'N/A'}`);\n        \n        return {\n          ...number,\n          _id: number._id.toString(),\n          rateDeckId: number.rateDeckId ? number.rateDeckId.toString() : undefined,\n          rateDeckName: undefined, // Not populated\n          monthlyRate: rate?.rate || 0,\n          setupFee: rate?.setupFee || number.setupFee || 0,\n          ratePrefix: rate?.prefix,\n          rateDescription: rate?.description,\n          createdAt: number.createdAt.toISOString(),\n          updatedAt: number.updatedAt.toISOString(),\n        };\n      })\n    );\n\n    const totalPages = Math.ceil(total / limit);\n\n    return NextResponse.json({\n      phoneNumbers: transformedNumbers,\n      total,\n      page,\n      limit,\n      totalPages,\n      filters: {\n        countries: countries.sort(),\n        numberTypes: numberTypes.sort(),\n      },\n    });\n  } catch (error) {\n    console.error('Error fetching available phone numbers:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch available phone numbers' },\n      { status: 500 }\n    );\n  }\n}\n\n// Helper function to find matching rate for a phone number\nconst findMatchingRate = async (phoneNumber: any, rateDeckId: string) => {\n  if (!rateDeckId) return null;\n  \n  console.log(`[Rate Matching] Looking for rates for number: ${phoneNumber.number}, country: ${phoneNumber.country}, type: ${phoneNumber.numberType}, rateDeckId: ${rateDeckId}`);\n  \n  // Find all rates for this rate deck\n  const rates = await NumberRate.find({\n    rateDeckId: new mongoose.Types.ObjectId(rateDeckId),\n  }).lean();\n  \n  console.log(`[Rate Matching] Found ${rates.length} rates in deck ${rateDeckId}`);\n  \n  if (rates.length > 0) {\n    console.log(`[Rate Matching] Sample rates:`, rates.slice(0, 3).map(r => ({\n      prefix: r.prefix,\n      country: r.country,\n      type: r.type,\n      rate: r.rate\n    })));\n  }\n  \n  // Normalize phone number for prefix matching (remove + and any spaces)\n  const normalizedNumber = phoneNumber.number.replace(/^\\+/, '').replace(/\\s/g, '');\n  console.log(`[Rate Matching] Normalized phone number: ${normalizedNumber} (from ${phoneNumber.number})`);\n  \n  // First, try to find rates matching country and type\n  const countryTypeRates = rates.filter(rate => \n    rate.country.toLowerCase() === phoneNumber.country.toLowerCase() && \n    rate.type === phoneNumber.numberType\n  );\n  \n  console.log(`[Rate Matching] Found ${countryTypeRates.length} rates matching country and type`);\n  \n  if (countryTypeRates.length > 0) {\n    // Among matching country/type rates, find the one with longest matching prefix\n    let bestMatch = null;\n    let longestMatch = 0;\n    \n    for (const rate of countryTypeRates) {\n      // Normalize rate prefix for comparison (remove + and spaces)\n      const normalizedPrefix = rate.prefix.replace(/^\\+/, '').replace(/\\s/g, '');\n      const matches = normalizedNumber.startsWith(normalizedPrefix);\n      \n      console.log(`[Rate Matching] Checking prefix ${rate.prefix} (normalized: ${normalizedPrefix}) against ${normalizedNumber}: ${matches}`);\n      \n      if (matches && normalizedPrefix.length > longestMatch) {\n        bestMatch = rate;\n        longestMatch = normalizedPrefix.length;\n      }\n    }\n    \n    if (bestMatch) {\n      console.log(`[Rate Matching] Best match: prefix=${bestMatch.prefix}, rate=${bestMatch.rate}, setupFee=${bestMatch.setupFee}`);\n      return bestMatch;\n    }\n  }\n  \n  // Fallback: try prefix matching only\n  console.log(`[Rate Matching] No country/type match, trying prefix-only matching`);\n  let bestMatch = null;\n  let longestMatch = 0;\n  \n  for (const rate of rates) {\n    // Normalize rate prefix for comparison (remove + and spaces)\n    const normalizedPrefix = rate.prefix.replace(/^\\+/, '').replace(/\\s/g, '');\n    const matches = normalizedNumber.startsWith(normalizedPrefix);\n    \n    if (matches && normalizedPrefix.length > longestMatch) {\n      bestMatch = rate;\n      longestMatch = normalizedPrefix.length;\n    }\n  }\n  \n  if (bestMatch) {\n    console.log(`[Rate Matching] Fallback match: prefix=${bestMatch.prefix}, rate=${bestMatch.rate}, country=${bestMatch.country}, type=${bestMatch.type}`);\n  } else {\n    console.log(`[Rate Matching] No matching rate found for ${phoneNumber.number}`);\n  }\n  \n  return bestMatch;\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/phone-numbers/backorder-available/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'NumberRateDeck' is defined but never used.","line":5,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":32,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1236,1239],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1236,1239],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":55,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1813,1816],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1813,1816],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":120,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":120,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4214,4217],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4214,4217],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getCurrentUser } from '@/lib/authService';\nimport { connectToDatabase } from '@/lib/db';\nimport PhoneNumber from '@/models/PhoneNumber';\nimport NumberRateDeck from '@/models/NumberRateDeck';\nimport NumberRate from '@/models/NumberRate';\nimport mongoose from 'mongoose';\n\n// GET - List backorder-only phone numbers available for request\nexport async function GET(request: NextRequest) {\n  try {\n    // Verify the user is authenticated\n    const user = await getCurrentUser();\n    \n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    // Connect to the database\n    await connectToDatabase();\n\n    const { searchParams } = new URL(request.url);\n    const page = parseInt(searchParams.get('page') || '1');\n    const limit = parseInt(searchParams.get('limit') || '12');\n    const search = searchParams.get('search') || '';\n    const country = searchParams.get('country');\n    const numberType = searchParams.get('numberType');\n    const sortBy = searchParams.get('sortBy') || 'monthlyRate';\n    const sortOrder = searchParams.get('sortOrder') || 'asc';\n\n    // Build query for backorder-only phone numbers\n    const query: any = {\n      status: 'available',\n      backorderOnly: true, // Only show backorder-only numbers\n      rateDeckId: { $exists: true, $ne: null }, // Must have a rate deck assigned\n    };\n\n    if (search) {\n      query.$or = [\n        { number: { $regex: search, $options: 'i' } },\n        { country: { $regex: search, $options: 'i' } },\n        { description: { $regex: search, $options: 'i' } },\n      ];\n    }\n\n    if (country) {\n      query.country = country;\n    }\n\n    if (numberType) {\n      query.numberType = numberType;\n    }\n\n    // Build sort object\n    const sort: any = {};\n    sort[sortBy] = sortOrder === 'asc' ? 1 : -1;\n\n    // Execute query with pagination\n    const skip = (page - 1) * limit;\n    \n    const [phoneNumbers, total, countries, numberTypes] = await Promise.all([\n      PhoneNumber.find(query)\n        .sort(sort)\n        .skip(skip)\n        .limit(limit)\n        .lean(),\n      PhoneNumber.countDocuments(query),\n      // Get available countries for filter\n      PhoneNumber.distinct('country', { status: 'available', backorderOnly: true, rateDeckId: { $exists: true, $ne: null } }),\n      // Get available number types for filter\n      PhoneNumber.distinct('numberType', { status: 'available', backorderOnly: true, rateDeckId: { $exists: true, $ne: null } })\n    ]);\n\n    console.log(`[API] Backorder-only numbers query result: ${phoneNumbers.length} numbers, total: ${total}`);\n\n    // Transform the response and fetch rates for each number\n    const transformedNumbers = await Promise.all(\n      phoneNumbers.map(async (number) => {\n        const rate = await findMatchingRate(number, number.rateDeckId?.toString() || '');\n        console.log(`[API] Backorder number ${number.number}: rateDeckId=${number.rateDeckId}, rate=${rate?.rate || 'not found'}, prefix=${rate?.prefix || 'N/A'}`);\n        \n        return {\n          ...number,\n          _id: number._id.toString(),\n          rateDeckId: number.rateDeckId ? number.rateDeckId.toString() : undefined,\n          rateDeckName: undefined, // Not populated\n          monthlyRate: rate?.rate || 0,\n          setupFee: rate?.setupFee || number.setupFee || 0,\n          ratePrefix: rate?.prefix,\n          rateDescription: rate?.description,\n          createdAt: number.createdAt.toISOString(),\n          updatedAt: number.updatedAt.toISOString(),\n        };\n      })\n    );\n\n    const totalPages = Math.ceil(total / limit);\n\n    return NextResponse.json({\n      phoneNumbers: transformedNumbers,\n      total,\n      page,\n      limit,\n      totalPages,\n      filters: {\n        countries: countries.sort(),\n        numberTypes: numberTypes.sort(),\n      },\n    });\n  } catch (error) {\n    console.error('Error fetching backorder-only phone numbers:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch backorder-only phone numbers' },\n      { status: 500 }\n    );\n  }\n}\n\n// Helper function to find matching rate for a phone number\nconst findMatchingRate = async (phoneNumber: any, rateDeckId: string) => {\n  if (!rateDeckId) return null;\n  \n  console.log(`[Rate Matching] Looking for rates for backorder number: ${phoneNumber.number}, country: ${phoneNumber.country}, type: ${phoneNumber.numberType}, rateDeckId: ${rateDeckId}`);\n  \n  // Find all rates for this rate deck\n  const rates = await NumberRate.find({\n    rateDeckId: new mongoose.Types.ObjectId(rateDeckId),\n  }).lean();\n  \n  console.log(`[Rate Matching] Found ${rates.length} rates in deck ${rateDeckId}`);\n  \n  // Normalize phone number for prefix matching (remove + and any spaces)\n  const normalizedNumber = phoneNumber.number.replace(/^\\+/, '').replace(/\\s/g, '');\n  console.log(`[Rate Matching] Normalized phone number: ${normalizedNumber} (from ${phoneNumber.number})`);\n  \n  // First, try to find rates matching country and type\n  const countryTypeRates = rates.filter(rate => \n    rate.country.toLowerCase() === phoneNumber.country.toLowerCase() && \n    rate.type === phoneNumber.numberType\n  );\n  \n  console.log(`[Rate Matching] Found ${countryTypeRates.length} rates matching country and type`);\n  \n  if (countryTypeRates.length > 0) {\n    // Among matching country/type rates, find the one with longest matching prefix\n    let bestMatch = null;\n    let longestMatch = 0;\n    \n    for (const rate of countryTypeRates) {\n      // Normalize rate prefix for comparison (remove + and spaces)\n      const normalizedPrefix = rate.prefix.replace(/^\\+/, '').replace(/\\s/g, '');\n      const matches = normalizedNumber.startsWith(normalizedPrefix);\n      \n      console.log(`[Rate Matching] Checking prefix ${rate.prefix} (normalized: ${normalizedPrefix}) against ${normalizedNumber}: ${matches}`);\n      \n      if (matches && normalizedPrefix.length > longestMatch) {\n        bestMatch = rate;\n        longestMatch = normalizedPrefix.length;\n      }\n    }\n    \n    if (bestMatch) {\n      console.log(`[Rate Matching] Best match: prefix=${bestMatch.prefix}, rate=${bestMatch.rate}, setupFee=${bestMatch.setupFee}`);\n      return bestMatch;\n    }\n  }\n  \n  // Fallback: try prefix matching only\n  console.log(`[Rate Matching] No country/type match, trying prefix-only matching`);\n  let bestMatch = null;\n  let longestMatch = 0;\n  \n  for (const rate of rates) {\n    // Normalize rate prefix for comparison (remove + and spaces)\n    const normalizedPrefix = rate.prefix.replace(/^\\+/, '').replace(/\\s/g, '');\n    const matches = normalizedNumber.startsWith(normalizedPrefix);\n    \n    if (matches && normalizedPrefix.length > longestMatch) {\n      bestMatch = rate;\n      longestMatch = normalizedPrefix.length;\n    }\n  }\n  \n  if (bestMatch) {\n    console.log(`[Rate Matching] Fallback match: prefix=${bestMatch.prefix}, rate=${bestMatch.rate}, country=${bestMatch.country}, type=${bestMatch.type}`);\n  } else {\n    console.log(`[Rate Matching] No matching rate found for ${phoneNumber.number}`);\n  }\n  \n  return bestMatch;\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/phone-numbers/billing/process-scheduled/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PhoneNumberAssignment' is defined but never used.","line":6,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'User' is defined but never used.","line":7,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'mongoose' is defined but never used.","line":10,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":36,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1424,1427],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1424,1427],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":37,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1454,1457],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1454,1457],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":78,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2694,2697],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2694,2697],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":79,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2745,2748],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2745,2748],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":189,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":189,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7132,7135],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7132,7135],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":190,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":190,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7194,7197],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7194,7197],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'request' is defined but never used.","line":230,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":230,"endColumn":34}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getCurrentUser } from '@/lib/authService';\nimport { connectToDatabase } from '@/lib/db';\nimport PhoneNumber from '@/models/PhoneNumber';\nimport PhoneNumberBilling from '@/models/PhoneNumberBilling';\nimport PhoneNumberAssignment from '@/models/PhoneNumberAssignment';\nimport User from '@/models/User';\nimport { SippyClient } from '@/lib/sippyClient';\nimport { getSippyApiCredentials } from '@/lib/sippyClientConfig';\nimport mongoose from 'mongoose';\n\n/**\n * POST /api/phone-numbers/billing/process-scheduled\n * Process scheduled monthly billing for phone numbers\n * This endpoint is designed to be called by a cron job\n */\nexport async function POST(request: NextRequest) {\n  try {\n    // Verify this is an admin request or internal cron\n    const user = await getCurrentUser();\n    \n    // Allow internal cron requests (check for API key) or admin users\n    const authHeader = request.headers.get('authorization');\n    const internalApiKey = process.env.INTERNAL_API_KEY;\n    \n    const isInternalRequest = authHeader === `Bearer ${internalApiKey}` && internalApiKey;\n    const isAdminRequest = user && user.role === 'admin';\n    \n    if (!isInternalRequest && !isAdminRequest) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    await connectToDatabase();\n\n    const startTime = Date.now();\n    const processedBillings: any[] = [];\n    const errors: any[] = [];\n\n    // Find all pending billings that are due for processing\n    const today = new Date();\n    today.setHours(0, 0, 0, 0); // Start of today\n\n    const dueBillings = await PhoneNumberBilling.find({\n      status: 'pending',\n      billingDate: { $lte: today }, // Due today or overdue\n      transactionType: { $in: ['monthly_fee', 'setup_fee'] }, // Only process fees, not refunds\n    })\n    .populate('phoneNumberId')\n    .populate('userId')\n    .populate('assignmentId')\n    .lean();\n\n    console.log(`🔍 Found ${dueBillings.length} due billing records to process`);\n\n    if (dueBillings.length === 0) {\n      return NextResponse.json({\n        message: 'No billing records due for processing',\n        processed: 0,\n        errors: 0,\n        requestDuration: Date.now() - startTime,\n      });\n    }\n\n    // Get Sippy API credentials\n    const credentials = await getSippyApiCredentials();\n    \n    if (!credentials) {\n      return NextResponse.json({ \n        error: 'Sippy API not configured' \n      }, { status: 500 });\n    }\n\n    const sippyClient = new SippyClient(credentials);\n\n    // Process each billing record\n    for (const billing of dueBillings) {\n      try {\n        const phoneNumber = billing.phoneNumberId as any;\n        const billingUser = billing.userId as any;\n\n        // Verify user has Sippy account ID\n        if (!billingUser.sippyAccountId) {\n          errors.push({\n            billingId: billing._id,\n            phoneNumber: phoneNumber.number,\n            user: billingUser.email,\n            error: 'User does not have Sippy account ID',\n          });\n          continue;\n        }\n\n        // Prepare billing note\n        const paymentNotes = `Monthly charge for Number: ${phoneNumber.number} (${billing.transactionType})`;\n\n        console.log(`💸 Processing billing for ${phoneNumber.number} - ${billingUser.email} - ${billing.amount} ${billing.currency}`);\n\n        // Process the charge using Sippy accountDebit\n        // NOTE: Based on billing reflexions - we always charge full amount, no proration\n        const debitResult = await sippyClient.accountDebit({\n          i_account: billingUser.sippyAccountId,\n          amount: billing.amount,\n          currency: billing.currency,\n          payment_notes: paymentNotes,\n        });\n\n        // Update billing record based on result\n        try {\n          if (debitResult.result === 'success' || debitResult.result === '1') {\n            // Success - mark as paid\n            billing.status = 'paid';\n            billing.paidDate = new Date();\n            billing.sippyTransactionId = debitResult.tx_id || `debit_${Date.now()}`;\n            billing.processedBy = 'automated_billing';\n            \n            await billing.save();\n            \n            // Update phone number's last billed date\n            await PhoneNumber.findByIdAndUpdate(billing.phoneNumberId, {\n              lastBilledDate: new Date(),\n            });\n\n            console.log(`✅ Successfully processed billing ${billing._id} for ${billing.amount} ${billing.currency}`);\n            \n            processedBillings.push({\n              billingId: billing._id,\n              amount: billing.amount,\n              currency: billing.currency,\n              status: 'success',\n              sippyTransactionId: billing.sippyTransactionId,\n            });\n\n          } else {\n            // Failed - mark as failed and handle negative balance\n            billing.status = 'failed';\n            billing.failureReason = debitResult.error || 'Insufficient funds';\n            billing.processedBy = 'automated_billing';\n            \n            await billing.save();\n            \n            // If failure is due to insufficient funds, suspend the number\n            if (debitResult.error?.toLowerCase().includes('insufficient') || \n                debitResult.error?.toLowerCase().includes('balance')) {\n              \n              await PhoneNumber.findByIdAndUpdate(billing.phoneNumberId, {\n                status: 'suspended',\n                notes: `Suspended due to insufficient funds: ${debitResult.error}`,\n              });\n              \n              console.log(`🚫 Suspended phone number ${phoneNumber.number} due to insufficient funds`);\n            }\n            \n            console.log(`❌ Failed to process billing ${billing._id}: ${debitResult.error}`);\n            \n            errors.push({\n              billingId: billing._id,\n              amount: billing.amount,\n              currency: billing.currency,\n              error: debitResult.error || 'Unknown error',\n              phoneNumber: phoneNumber.number,\n            });\n          }\n        } catch (dbError) {\n          console.error('Database update error after Sippy operation:', dbError);\n          errors.push({\n            billingId: billing._id,\n            amount: billing.amount,\n            currency: billing.currency,\n            error: `Database error: ${dbError instanceof Error ? dbError.message : 'Unknown error'}`,\n            phoneNumber: phoneNumber.number,\n          });\n        }\n\n      } catch (error) {\n        console.error(`❌ Error processing billing ${billing._id}:`, error);\n        \n        // Mark billing as failed\n        try {\n          await PhoneNumberBilling.findByIdAndUpdate(billing._id, {\n            status: 'failed',\n            failureReason: error instanceof Error ? error.message : 'Processing error',\n            processedBy: 'automated_billing',\n          });\n        } catch (updateError) {\n          console.error('Failed to update billing record:', updateError);\n        }\n\n        errors.push({\n          billingId: billing._id,\n          phoneNumber: (billing.phoneNumberId as any)?.number || 'Unknown',\n          user: (billing.userId as any)?.email || 'Unknown',\n          error: error instanceof Error ? error.message : 'Unknown error',\n        });\n      }\n    }\n\n    const requestDuration = Date.now() - startTime;\n\n    console.log(`✅ Billing processing completed:`);\n    console.log(`   - Processed: ${processedBillings.length}`);\n    console.log(`   - Errors: ${errors.length}`);\n    console.log(`   - Duration: ${requestDuration}ms`);\n\n    return NextResponse.json({\n      message: 'Scheduled billing processing completed',\n      processed: processedBillings.length,\n      errors: errors.length,\n      requestDuration,\n      processedBillings: processedBillings.slice(0, 10), // Limit response size\n      errorSummary: errors.slice(0, 10), // Limit response size\n      timestamp: new Date().toISOString(),\n    });\n\n  } catch (error) {\n    console.error('Error in scheduled billing processing:', error);\n    \n    return NextResponse.json(\n      { \n        error: 'Failed to process scheduled billing',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * GET /api/phone-numbers/billing/process-scheduled\n * Get status of scheduled billing (for monitoring)\n */\nexport async function GET(request: NextRequest) {\n  try {\n    const user = await getCurrentUser();\n    \n    if (!user || user.role !== 'admin') {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    await connectToDatabase();\n\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n\n    // Get counts of different billing statuses\n    const [pendingDue, pendingFuture, processedToday, failedToday] = await Promise.all([\n      PhoneNumberBilling.countDocuments({\n        status: 'pending',\n        billingDate: { $lte: today },\n        transactionType: { $in: ['monthly_fee', 'setup_fee'] },\n      }),\n      PhoneNumberBilling.countDocuments({\n        status: 'pending',\n        billingDate: { $gt: today },\n        transactionType: { $in: ['monthly_fee', 'setup_fee'] },\n      }),\n      PhoneNumberBilling.countDocuments({\n        status: 'paid',\n        paidDate: { $gte: today },\n        processedBy: 'automated_billing',\n      }),\n      PhoneNumberBilling.countDocuments({\n        status: 'failed',\n        updatedAt: { $gte: today },\n        processedBy: 'automated_billing',\n      }),\n    ]);\n\n    return NextResponse.json({\n      status: 'healthy',\n      timestamp: new Date().toISOString(),\n      pendingDue,\n      pendingFuture,\n      processedToday,\n      failedToday,\n      nextRun: 'Manual or cron-scheduled',\n    });\n\n  } catch (error) {\n    console.error('Error getting scheduled billing status:', error);\n    \n    return NextResponse.json(\n      { \n        error: 'Failed to get billing status',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    );\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/phone-numbers/billing/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/phone-numbers/purchase/bulk/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'NumberRateDeck' is defined but never used.","line":8,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1037,1040],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1037,1040],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":104,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":104,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4283,4286],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4283,4286],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":105,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4296,4299],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4296,4299],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":204,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":204,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7243,7246],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7243,7246],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":205,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":205,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7270,7273],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7270,7273],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":376,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":376,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13828,13831],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13828,13831],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getCurrentUser } from '@/lib/authService';\nimport { connectToDatabase } from '@/lib/db';\nimport PhoneNumber from '@/models/PhoneNumber';\nimport PhoneNumberAssignment from '@/models/PhoneNumberAssignment';\nimport PhoneNumberBilling from '@/models/PhoneNumberBilling';\nimport NumberRate from '@/models/NumberRate';\nimport NumberRateDeck from '@/models/NumberRateDeck';\nimport mongoose from 'mongoose';\nimport { z } from 'zod';\nimport { sendAdminUserPurchaseNotification } from '@/lib/adminNotifications';\nimport UserOnboarding from '@/models/UserOnboarding';\n\n// Validation schema for bulk purchasing phone numbers\nconst bulkPurchaseSchema = z.object({\n  phoneNumberIds: z.array(z.string().min(1, 'Phone number ID is required')).min(1, 'At least one phone number is required').max(20, 'Maximum 20 numbers can be purchased at once'),\n});\n\n// Helper function to find matching rate for a phone number (copied from single purchase)\nconst findMatchingRate = async (phoneNumber: any, rateDeckId: string) => {\n  if (!rateDeckId) return null;\n  \n  console.log(`[Rate Matching] Looking for rates for number: ${phoneNumber.number}, country: ${phoneNumber.country}, type: ${phoneNumber.numberType}, rateDeckId: ${rateDeckId}`);\n  \n  // Find all rates for this rate deck\n  const rates = await NumberRate.find({\n    rateDeckId: new mongoose.Types.ObjectId(rateDeckId),\n  }).lean();\n  \n  console.log(`[Rate Matching] Found ${rates.length} rates in deck ${rateDeckId}`);\n  \n  if (rates.length > 0) {\n    console.log(`[Rate Matching] Sample rates:`, rates.slice(0, 3).map(r => ({\n      prefix: r.prefix,\n      country: r.country,\n      type: r.type,\n      rate: r.rate\n    })));\n  }\n  \n  // Normalize phone number for prefix matching (remove + and any spaces)\n  const normalizedNumber = phoneNumber.number.replace(/^\\+/, '').replace(/\\s/g, '');\n  console.log(`[Rate Matching] Normalized phone number: ${normalizedNumber} (from ${phoneNumber.number})`);\n  \n  // First, try to find rates matching country and type\n  const countryTypeRates = rates.filter(rate => \n    rate.country.toLowerCase() === phoneNumber.country.toLowerCase() && \n    rate.type === phoneNumber.numberType\n  );\n  \n  console.log(`[Rate Matching] Found ${countryTypeRates.length} rates matching country and type`);\n  \n  if (countryTypeRates.length > 0) {\n    // Among matching country/type rates, find the one with longest matching prefix\n    let bestMatch = null;\n    let longestMatch = 0;\n    \n    for (const rate of countryTypeRates) {\n      // Normalize rate prefix for comparison (remove + and spaces)\n      const normalizedPrefix = rate.prefix.replace(/^\\+/, '').replace(/\\s/g, '');\n      const matches = normalizedNumber.startsWith(normalizedPrefix);\n      \n      console.log(`[Rate Matching] Checking prefix ${rate.prefix} (normalized: ${normalizedPrefix}) against ${normalizedNumber}: ${matches}`);\n      \n      if (matches && normalizedPrefix.length > longestMatch) {\n        bestMatch = rate;\n        longestMatch = normalizedPrefix.length;\n      }\n    }\n    \n    if (bestMatch) {\n      console.log(`[Rate Matching] Best match: prefix=${bestMatch.prefix}, rate=${bestMatch.rate}, setupFee=${bestMatch.setupFee}`);\n      return bestMatch;\n    }\n  }\n  \n  // Fallback: try prefix matching only\n  console.log(`[Rate Matching] No country/type match, trying prefix-only matching`);\n  let bestMatch = null;\n  let longestMatch = 0;\n  \n  for (const rate of rates) {\n    // Normalize rate prefix for comparison (remove + and spaces)\n    const normalizedPrefix = rate.prefix.replace(/^\\+/, '').replace(/\\s/g, '');\n    const matches = normalizedNumber.startsWith(normalizedPrefix);\n    \n    if (matches && normalizedPrefix.length > longestMatch) {\n      bestMatch = rate;\n      longestMatch = normalizedPrefix.length;\n    }\n  }\n  \n  if (bestMatch) {\n    console.log(`[Rate Matching] Fallback match: prefix=${bestMatch.prefix}, rate=${bestMatch.rate}, country=${bestMatch.country}, type=${bestMatch.type}`);\n  } else {\n    console.log(`[Rate Matching] No matching rate found for ${phoneNumber.number}`);\n  }\n  \n  return bestMatch;\n};\n\n// Helper function to handle phone number updates and record creation\nconst updatePhoneNumberAndCreateRecords = async (\n  phoneNumber: any,\n  user: any,\n  now: Date,\n  nextBillingDate: Date,\n  monthlyRate: number,\n  setupFee: number\n) => {\n  // Update phone number status and assignment\n  await PhoneNumber.findByIdAndUpdate(\n    phoneNumber._id,\n    {\n      $set: {\n        status: 'assigned',\n        assignedTo: new mongoose.Types.ObjectId(user.id),\n        assignedBy: user.email,\n        assignedAt: now,\n        nextBillingDate,\n        lastBilledDate: now, // First billing starts today\n        monthlyRate: monthlyRate, // Store the calculated rate\n        setupFee: setupFee, // Store the calculated setup fee\n        // Clear any previous unassignment data\n        unassignedAt: null,\n        unassignedBy: null,\n        unassignedReason: null,\n      }\n    }\n  );\n\n  // Create assignment record\n  const assignment = new PhoneNumberAssignment({\n    phoneNumberId: phoneNumber._id,\n    userId: new mongoose.Types.ObjectId(user.id),\n    assignedBy: user.email,\n    assignedAt: now,\n    status: 'active',\n    billingStartDate: now,\n    monthlyRate: monthlyRate,\n    setupFee: setupFee,\n    currency: phoneNumber.currency,\n    billingCycle: phoneNumber.billingCycle,\n  });\n  await assignment.save();\n\n  // Create initial billing record if there's a monthly rate\n  if (monthlyRate && monthlyRate > 0) {\n    const billing = new PhoneNumberBilling({\n      phoneNumberId: phoneNumber._id,\n      userId: new mongoose.Types.ObjectId(user.id),\n      assignmentId: assignment._id,\n      amount: monthlyRate,\n      currency: phoneNumber.currency,\n      billingDate: now,\n      billingPeriodStart: now,\n      billingPeriodEnd: new Date(nextBillingDate.getTime() - 24 * 60 * 60 * 1000), // Day before next billing\n      description: `Monthly charge for ${phoneNumber.number}`,\n      transactionType: 'monthly_fee',\n      status: 'pending',\n    });\n    await billing.save();\n  }\n\n  // Create setup fee billing if applicable\n  if (setupFee && setupFee > 0) {\n    const setupBilling = new PhoneNumberBilling({\n      phoneNumberId: phoneNumber._id,\n      userId: new mongoose.Types.ObjectId(user.id),\n      assignmentId: assignment._id,\n      amount: setupFee,\n      currency: phoneNumber.currency,\n      billingDate: now,\n      billingPeriodStart: now,\n      billingPeriodEnd: now,\n      description: `Setup fee for ${phoneNumber.number}`,\n      transactionType: 'setup_fee',\n      status: 'pending',\n    });\n    await setupBilling.save();\n  }\n};\n\n// POST - Bulk purchase phone numbers\nexport async function POST(request: NextRequest) {\n  try {\n    // Verify the user is authenticated\n    const user = await getCurrentUser();\n    \n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    // Connect to the database\n    await connectToDatabase();\n\n    const body = await request.json();\n    \n    // Validate the request body\n    const validatedData = bulkPurchaseSchema.parse(body);\n\n    const now = new Date();\n    const results = {\n      successful: [] as any[],\n      failed: [] as any[],\n      summary: {\n        total: validatedData.phoneNumberIds.length,\n        successful: 0,\n        failed: 0,\n        totalCost: 0,\n        totalSetupFees: 0,\n      }\n    };\n\n    console.log(`🔄 User ${user.email} starting bulk purchase of ${validatedData.phoneNumberIds.length} phone numbers`);\n\n    // Process each phone number individually\n    for (const phoneNumberId of validatedData.phoneNumberIds) {\n      try {\n        // Find the phone number and verify it's available\n        const phoneNumber = await PhoneNumber.findOne({\n          _id: new mongoose.Types.ObjectId(phoneNumberId),\n          status: 'available',\n          rateDeckId: { $exists: true, $ne: null }, // Must have a rate deck assigned\n          backorderOnly: { $ne: true }, // Cannot purchase backorder-only numbers directly\n        });\n\n        if (!phoneNumber) {\n          // Check if it's a backorder-only number to provide specific error message\n          const backorderNumber = await PhoneNumber.findOne({\n            _id: new mongoose.Types.ObjectId(phoneNumberId),\n            status: 'available',\n            backorderOnly: true,\n          });\n          \n          if (backorderNumber) {\n            results.failed.push({\n              phoneNumberId,\n              error: 'This phone number requires a backorder request and cannot be purchased directly',\n              number: backorderNumber.number\n            });\n          } else {\n            results.failed.push({\n              phoneNumberId,\n              error: 'Phone number not found or not available for purchase',\n              number: 'Unknown'\n            });\n          }\n          continue;\n        }\n\n        // Find the matching rate for this phone number\n        const rate = await findMatchingRate(phoneNumber, phoneNumber.rateDeckId?.toString() || '');\n        \n        if (!rate) {\n          results.failed.push({\n            phoneNumberId,\n            error: 'No rate found for this phone number',\n            number: phoneNumber.number\n          });\n          continue;\n        }\n\n        const monthlyRate = rate.rate;\n        const setupFee = rate.setupFee || phoneNumber.setupFee || 0;\n\n        // Calculate next billing date (today + billing cycle)\n        const nextBillingDate = new Date(now);\n        if (phoneNumber.billingCycle === 'yearly') {\n          nextBillingDate.setFullYear(nextBillingDate.getFullYear() + 1);\n        } else {\n          nextBillingDate.setMonth(nextBillingDate.getMonth() + 1);\n        }\n\n        // Perform the purchase operations\n        try {\n          console.log(`🔄 Purchasing phone number ${phoneNumber.number} with rates: ${monthlyRate} ${phoneNumber.currency}/month, setup: ${setupFee} ${phoneNumber.currency}`);\n          \n          await updatePhoneNumberAndCreateRecords(phoneNumber, user, now, nextBillingDate, monthlyRate, setupFee);\n          \n          // Create result object with available data\n          const result = {\n            phoneNumberId,\n            number: phoneNumber.number,\n            country: phoneNumber.country,\n            numberType: phoneNumber.numberType,\n            monthlyRate,\n            setupFee,\n            currency: phoneNumber.currency,\n            billingCycle: phoneNumber.billingCycle,\n            // rateDeckName is optional and we'll skip it to avoid populate issues\n          };\n\n          results.successful.push(result);\n          results.summary.totalCost += monthlyRate;\n          results.summary.totalSetupFees += setupFee;\n          \n          console.log(`✅ Successfully purchased phone number ${phoneNumber.number}`);\n          \n        } catch (purchaseError) {\n          console.error(`Error purchasing phone number ${phoneNumber.number}:`, purchaseError);\n          \n          // Try to rollback phone number status if possible (best effort)\n          try {\n            await PhoneNumber.findByIdAndUpdate(phoneNumber._id, {\n              $set: {\n                status: 'available',\n                assignedTo: null,\n                assignedBy: null,\n                assignedAt: null,\n              }\n            });\n          } catch (rollbackError) {\n            console.error('Error during rollback:', rollbackError);\n          }\n          \n          results.failed.push({\n            phoneNumberId,\n            error: purchaseError instanceof Error ? purchaseError.message : 'Purchase operation failed',\n            number: phoneNumber.number\n          });\n        }\n\n      } catch (error) {\n        console.error(`Error processing phone number ${phoneNumberId}:`, error);\n        results.failed.push({\n          phoneNumberId,\n          error: error instanceof Error ? error.message : 'Unknown error occurred',\n          number: 'Unknown'\n        });\n      }\n    }\n\n    // Update summary counts\n    results.summary.successful = results.successful.length;\n    results.summary.failed = results.failed.length;\n\n    console.log(`✅ Bulk purchase completed for user ${user.email}: ${results.summary.successful} successful, ${results.summary.failed} failed`);\n\n    // Send admin notification if there were successful purchases\n    if (results.summary.successful > 0) {\n      try {\n        // Get user's company information from onboarding data\n        let userCompany;\n        try {\n          const userOnboarding = await UserOnboarding.findOne({ userId: user.id }).lean();\n          userCompany = userOnboarding?.companyName;\n        } catch (error) {\n          console.error('Error fetching user onboarding data:', error);\n        }\n\n        await sendAdminUserPurchaseNotification({\n          phoneNumber: {\n            number: `${results.summary.successful} phone numbers`,\n            country: 'Various',\n            numberType: 'Various',\n            monthlyRate: results.summary.totalCost,\n            setupFee: results.summary.totalSetupFees,\n            currency: results.successful[0]?.currency || 'USD',\n            capabilities: []\n          },\n          user: {\n            name: user.name || user.email,\n            email: user.email,\n            company: userCompany\n          },\n          purchase: {\n            purchaseId: `BULK-${Date.now()}`,\n            purchaseDate: now.toISOString(),\n            totalAmount: results.summary.totalCost + results.summary.totalSetupFees,\n            billingStartDate: now.toISOString(),\n            nextBillingDate: new Date(now.getTime() + 30 * 24 * 60 * 60 * 1000).toISOString()\n          },\n          purchaseType: 'bulk',\n          numbersCount: results.summary.successful,\n          purchasedNumbers: results.successful.map((item: any) => ({\n            number: item.number,\n            country: item.country,\n            numberType: item.numberType,\n            monthlyRate: item.monthlyRate,\n            setupFee: item.setupFee,\n            capabilities: []\n          }))\n        });\n      } catch (emailError) {\n        console.error('Failed to send admin bulk purchase notification:', emailError);\n        // Don't fail the request if admin email fails\n      }\n    }\n\n    const statusCode = results.summary.failed > 0 && results.summary.successful === 0 ? 400 : \n                       results.summary.failed > 0 ? 207 : // 207 Multi-Status for partial success\n                       201; // 201 Created for complete success\n\n    return NextResponse.json({\n      message: `Bulk purchase completed: ${results.summary.successful} successful, ${results.summary.failed} failed`,\n      successful: results.successful,\n      failed: results.failed,\n      summary: results.summary,\n    }, { status: statusCode });\n\n  } catch (error) {\n    console.error('Error in bulk purchase:', error);\n    \n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { error: 'Validation failed', details: error.errors },\n        { status: 400 }\n      );\n    }\n    \n    return NextResponse.json(\n      { error: 'Failed to process bulk purchase' },\n      { status: 500 }\n    );\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/phone-numbers/purchase/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1154,1157],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1154,1157],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":215,"column":5,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":215,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":226,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":226,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8491,8494],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8491,8494],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":382,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":382,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13742,13745],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13742,13745],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":383,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":383,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13755,13758],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13755,13758],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getCurrentUser } from '@/lib/authService';\nimport { connectToDatabase } from '@/lib/db';\nimport PhoneNumber from '@/models/PhoneNumber';\nimport PhoneNumberAssignment from '@/models/PhoneNumberAssignment';\nimport PhoneNumberBilling from '@/models/PhoneNumberBilling';\nimport NumberRate from '@/models/NumberRate';\nimport NumberRateDeck from '@/models/NumberRateDeck';\nimport BrandingSettings from '@/models/BrandingSettings';\nimport UserOnboarding from '@/models/UserOnboarding';\nimport mongoose from 'mongoose';\nimport { z } from 'zod';\nimport { generateNumberPurchaseNotificationTemplate } from '@/lib/emailTemplates/phoneNumberNotifications';\nimport { logAndSendEmail } from '@/lib/emailLogger';\nimport SmtpService from '@/services/SmtpService';\nimport { sendAdminUserPurchaseNotification } from '@/lib/adminNotifications';\n\n// Validation schema for purchasing phone numbers\nconst purchaseSchema = z.object({\n  phoneNumberId: z.string().min(1, 'Phone number ID is required'),\n});\n\n// Helper function to find matching rate for a phone number\nconst findMatchingRate = async (phoneNumber: any, rateDeckId: string) => {\n  if (!rateDeckId) return null;\n  \n  console.log(`[Rate Matching] Looking for rates for number: ${phoneNumber.number}, country: ${phoneNumber.country}, type: ${phoneNumber.numberType}, rateDeckId: ${rateDeckId}`);\n  \n  // Find all rates for this rate deck\n  const rates = await NumberRate.find({\n    rateDeckId: new mongoose.Types.ObjectId(rateDeckId),\n  }).lean();\n  \n  console.log(`[Rate Matching] Found ${rates.length} rates in deck ${rateDeckId}`);\n  \n  if (rates.length > 0) {\n    console.log(`[Rate Matching] Sample rates:`, rates.slice(0, 3).map(r => ({\n      prefix: r.prefix,\n      country: r.country,\n      type: r.type,\n      rate: r.rate\n    })));\n  }\n  \n  // Normalize phone number for prefix matching (remove + and any spaces)\n  const normalizedNumber = phoneNumber.number.replace(/^\\+/, '').replace(/\\s/g, '');\n  console.log(`[Rate Matching] Normalized phone number: ${normalizedNumber} (from ${phoneNumber.number})`);\n  \n  // First, try to find rates matching country and type\n  const countryTypeRates = rates.filter(rate => \n    rate.country.toLowerCase() === phoneNumber.country.toLowerCase() && \n    rate.type === phoneNumber.numberType\n  );\n  \n  console.log(`[Rate Matching] Found ${countryTypeRates.length} rates matching country and type`);\n  \n  if (countryTypeRates.length > 0) {\n    // Among matching country/type rates, find the one with longest matching prefix\n    let bestMatch = null;\n    let longestMatch = 0;\n    \n    for (const rate of countryTypeRates) {\n      // Normalize rate prefix for comparison (remove + and spaces)\n      const normalizedPrefix = rate.prefix.replace(/^\\+/, '').replace(/\\s/g, '');\n      const matches = normalizedNumber.startsWith(normalizedPrefix);\n      \n      console.log(`[Rate Matching] Checking prefix ${rate.prefix} (normalized: ${normalizedPrefix}) against ${normalizedNumber}: ${matches}`);\n      \n      if (matches && normalizedPrefix.length > longestMatch) {\n        bestMatch = rate;\n        longestMatch = normalizedPrefix.length;\n      }\n    }\n    \n    if (bestMatch) {\n      console.log(`[Rate Matching] Best match: prefix=${bestMatch.prefix}, rate=${bestMatch.rate}, setupFee=${bestMatch.setupFee}`);\n      return bestMatch;\n    }\n  }\n  \n  // Fallback: try prefix matching only\n  console.log(`[Rate Matching] No country/type match, trying prefix-only matching`);\n  let bestMatch = null;\n  let longestMatch = 0;\n  \n  for (const rate of rates) {\n    // Normalize rate prefix for comparison (remove + and spaces)\n    const normalizedPrefix = rate.prefix.replace(/^\\+/, '').replace(/\\s/g, '');\n    const matches = normalizedNumber.startsWith(normalizedPrefix);\n    \n    if (matches && normalizedPrefix.length > longestMatch) {\n      bestMatch = rate;\n      longestMatch = normalizedPrefix.length;\n    }\n  }\n  \n  if (bestMatch) {\n    console.log(`[Rate Matching] Fallback match: prefix=${bestMatch.prefix}, rate=${bestMatch.rate}, country=${bestMatch.country}, type=${bestMatch.type}`);\n  } else {\n    console.log(`[Rate Matching] No matching rate found for ${phoneNumber.number}`);\n  }\n  \n  return bestMatch;\n};\n\n// POST - Purchase a phone number\nexport async function POST(request: NextRequest) {\n  try {\n    // Verify the user is authenticated\n    const user = await getCurrentUser();\n    \n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    // Connect to the database\n    await connectToDatabase();\n\n    const body = await request.json();\n    \n    // Validate the request body\n    const validatedData = purchaseSchema.parse(body);\n\n    // Find the phone number and verify it's available\n    const phoneNumber = await PhoneNumber.findOne({\n      _id: new mongoose.Types.ObjectId(validatedData.phoneNumberId),\n      status: 'available',\n      rateDeckId: { $exists: true, $ne: null }, // Must have a rate deck assigned\n      backorderOnly: { $ne: true }, // Cannot purchase backorder-only numbers directly\n    });\n\n    if (!phoneNumber) {\n      // Check if it's a backorder-only number to provide specific error message\n      const backorderNumber = await PhoneNumber.findOne({\n        _id: new mongoose.Types.ObjectId(validatedData.phoneNumberId),\n        status: 'available',\n        backorderOnly: true,\n      });\n      \n      if (backorderNumber) {\n        return NextResponse.json(\n          { error: 'This phone number requires a backorder request and cannot be purchased directly' },\n          { status: 400 }\n        );\n      }\n      \n      return NextResponse.json(\n        { error: 'Phone number not found or not available for purchase' },\n        { status: 404 }\n      );\n    }\n\n    // Find the matching rate for this phone number\n    const rateDeckId = phoneNumber.rateDeckId?.toString();\n    if (!rateDeckId) {\n      return NextResponse.json(\n        { error: 'No rate deck assigned to this phone number' },\n        { status: 400 }\n      );\n    }\n    \n    const rate = await findMatchingRate(phoneNumber, rateDeckId);\n    \n    if (!rate) {\n      return NextResponse.json(\n        { error: 'No rate found for this phone number' },\n        { status: 400 }\n      );\n    }\n\n    const monthlyRate = rate.rate;\n    const setupFee = rate.setupFee || phoneNumber.setupFee || 0;\n\n    const now = new Date();\n    \n    // Calculate next billing date (today + billing cycle)\n    const nextBillingDate = new Date(now);\n    if (phoneNumber.billingCycle === 'yearly') {\n      nextBillingDate.setFullYear(nextBillingDate.getFullYear() + 1);\n    } else {\n      nextBillingDate.setMonth(nextBillingDate.getMonth() + 1);\n    }\n\n    // Perform operations without transactions for standalone MongoDB (like admin assignment)\n    try {\n      console.log(`🔄 User ${user.email} purchasing phone number ${phoneNumber.number}`);\n      console.log(`💰 Using rates: ${monthlyRate} ${phoneNumber.currency}/month, setup: ${setupFee} ${phoneNumber.currency}`);\n      \n      await updatePhoneNumberAndCreateRecords(phoneNumber, user, now, nextBillingDate, monthlyRate, setupFee);\n      \n    } catch (purchaseError) {\n      console.error('Error during purchase operations:', purchaseError);\n      \n      // Try to rollback phone number status if possible (best effort)\n      try {\n        await PhoneNumber.findByIdAndUpdate(phoneNumber._id, {\n          $set: {\n            status: 'available',\n            assignedTo: null,\n            assignedBy: null,\n            assignedAt: null,\n          }\n        });\n      } catch (rollbackError) {\n        console.error('Error during rollback:', rollbackError);\n      }\n      \n      throw purchaseError;\n    }\n\n    console.log(`✅ User ${user.email} successfully purchased phone number ${phoneNumber.number}`);\n\n    // Ensure NumberRateDeck model is available for populate\n    // The import at the top should register the model, but we reference it here to be sure\n    NumberRateDeck.modelName;\n\n    // Return success response with updated number info\n    const updatedNumber = await PhoneNumber.findById(phoneNumber._id)\n      .populate('rateDeckId', 'name description currency')\n      .lean();\n\n    const response = {\n      ...updatedNumber,\n      _id: updatedNumber!._id.toString(),\n      rateDeckId: updatedNumber!.rateDeckId ? updatedNumber!.rateDeckId._id.toString() : undefined,\n      rateDeckName: updatedNumber!.rateDeckId ? (updatedNumber!.rateDeckId as any).name : undefined,\n      assignedTo: updatedNumber!.assignedTo?.toString(),\n      createdAt: updatedNumber!.createdAt.toISOString(),\n      updatedAt: updatedNumber!.updatedAt.toISOString(),\n      assignedAt: updatedNumber!.assignedAt?.toISOString(),\n      nextBillingDate: updatedNumber!.nextBillingDate?.toISOString(),\n      lastBilledDate: updatedNumber!.lastBilledDate?.toISOString(),\n    };\n\n    // Send purchase notification email\n    try {\n      // Get branding settings\n      let brandingSettings;\n      try {\n        brandingSettings = await BrandingSettings.findOne();\n      } catch (error) {\n        console.error('Error fetching branding settings:', error);\n        brandingSettings = null;\n      }\n\n      // Default branding if none found\n      const defaultBranding = {\n        companyName: 'Your VoIP Company',\n        companySlogan: 'Connecting the world',\n        primaryColor: '#3b82f6',\n        fontFamily: 'Inter'\n      };\n\n      const branding = {\n        companyName: brandingSettings?.companyName || defaultBranding.companyName,\n        companySlogan: brandingSettings?.companySlogan || defaultBranding.companySlogan,\n        primaryColor: brandingSettings?.primaryColor || defaultBranding.primaryColor,\n        fontFamily: brandingSettings?.fontFamily || defaultBranding.fontFamily\n      };\n\n      // Prepare notification data\n      const purchaseData = {\n        phoneNumber: {\n          number: phoneNumber.number,\n          country: phoneNumber.country,\n          numberType: phoneNumber.numberType,\n          monthlyRate: monthlyRate,\n          setupFee: setupFee,\n          currency: phoneNumber.currency,\n          capabilities: phoneNumber.capabilities || []\n        },\n        user: {\n          name: user.name || user.email,\n          email: user.email\n        },\n        purchase: {\n          purchaseId: `PU${Date.now()}`,\n          purchaseDate: now.toISOString(),\n          totalAmount: monthlyRate + setupFee,\n          billingStartDate: now.toISOString(),\n          nextBillingDate: nextBillingDate.toISOString()\n        },\n        purchaseType: 'direct' as const,\n        branding\n      };\n\n      const emailTemplate = generateNumberPurchaseNotificationTemplate(purchaseData);\n\n      // Send the email using logAndSendEmail\n      await logAndSendEmail(\n        {\n          userId: user.id,\n          userEmail: user.email,\n          userName: user.name || user.email,\n          sippyAccountId: user.sippyAccountId,\n          notificationType: 'number_purchase_single',\n          emailSubject: emailTemplate.subject,\n          emailBody: emailTemplate.html,\n          alertData: {\n            phoneNumber: phoneNumber.number,\n            purchaseId: purchaseData.purchase.purchaseId,\n            totalAmount: purchaseData.purchase.totalAmount,\n            currency: phoneNumber.currency\n          }\n        },\n        async () => {\n          const smtpService = SmtpService.getInstance();\n          return await smtpService.sendSupportEmail({\n            to: user.email,\n            subject: emailTemplate.subject,\n            html: emailTemplate.html,\n            text: emailTemplate.text\n          });\n        }\n      );\n\n      console.log(`📧 Purchase notification email sent to ${user.email}`);\n\n      // Get user's company information from onboarding data\n      let userCompany;\n      try {\n        const userOnboarding = await UserOnboarding.findOne({ userId: user.id }).lean();\n        userCompany = userOnboarding?.companyName;\n      } catch (error) {\n        console.error('Error fetching user onboarding data:', error);\n      }\n\n      // Send admin notification\n      await sendAdminUserPurchaseNotification({\n        phoneNumber: {\n          number: phoneNumber.number,\n          country: phoneNumber.country,\n          numberType: phoneNumber.numberType,\n          monthlyRate: monthlyRate,\n          setupFee: setupFee,\n          currency: phoneNumber.currency,\n          capabilities: phoneNumber.capabilities || []\n        },\n        user: {\n          name: user.name || user.email,\n          email: user.email,\n          company: userCompany\n        },\n        purchase: {\n          purchaseId: purchaseData.purchase.purchaseId,\n          purchaseDate: now.toISOString(),\n          totalAmount: monthlyRate + setupFee,\n          billingStartDate: now.toISOString(),\n          nextBillingDate: nextBillingDate.toISOString()\n        },\n        purchaseType: 'direct'\n      });\n    } catch (emailError) {\n      console.error('Failed to send purchase notification email:', emailError);\n      // Don't fail the purchase if email fails\n    }\n\n    return NextResponse.json({\n      message: 'Phone number purchased successfully',\n      phoneNumber: response,\n    }, { status: 201 });\n\n  } catch (error) {\n    console.error('Error purchasing phone number:', error);\n    \n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { error: 'Validation failed', details: error.errors },\n        { status: 400 }\n      );\n    }\n    \n    return NextResponse.json(\n      { error: 'Failed to purchase phone number' },\n      { status: 500 }\n    );\n  }\n}\n\n// Helper function to handle phone number updates and record creation\nasync function updatePhoneNumberAndCreateRecords(\n  phoneNumber: any,\n  user: any,\n  now: Date,\n  nextBillingDate: Date,\n  monthlyRate: number,\n  setupFee: number\n) {\n  // Update phone number status and assignment\n  await PhoneNumber.findByIdAndUpdate(\n    phoneNumber._id,\n    {\n      $set: {\n        status: 'assigned',\n        assignedTo: new mongoose.Types.ObjectId(user.id),\n        assignedBy: user.email,\n        assignedAt: now,\n        nextBillingDate,\n        lastBilledDate: now, // First billing starts today\n        monthlyRate: monthlyRate, // Store the calculated rate\n        setupFee: setupFee, // Store the calculated setup fee\n        // Clear any previous unassignment data\n        unassignedAt: null,\n        unassignedBy: null,\n        unassignedReason: null,\n      }\n    }\n  );\n\n  // Create assignment record\n  const assignment = new PhoneNumberAssignment({\n    phoneNumberId: phoneNumber._id,\n    userId: new mongoose.Types.ObjectId(user.id),\n    assignedBy: user.email,\n    assignedAt: now,\n    status: 'active',\n    billingStartDate: now,\n    monthlyRate: monthlyRate,\n    setupFee: setupFee,\n    currency: phoneNumber.currency,\n    billingCycle: phoneNumber.billingCycle,\n  });\n  await assignment.save();\n\n  // Create initial billing record if there's a monthly rate\n  if (monthlyRate && monthlyRate > 0) {\n    const billing = new PhoneNumberBilling({\n      phoneNumberId: phoneNumber._id,\n      userId: new mongoose.Types.ObjectId(user.id),\n      assignmentId: assignment._id,\n      amount: monthlyRate,\n      currency: phoneNumber.currency,\n      billingDate: now,\n      billingPeriodStart: now,\n      billingPeriodEnd: new Date(nextBillingDate.getTime() - 24 * 60 * 60 * 1000), // Day before next billing\n      description: `Monthly charge for ${phoneNumber.number}`,\n      transactionType: 'monthly_fee',\n      status: 'pending',\n    });\n    await billing.save();\n  }\n\n  // Create setup fee billing if applicable\n  if (setupFee && setupFee > 0) {\n    const setupBilling = new PhoneNumberBilling({\n      phoneNumberId: phoneNumber._id,\n      userId: new mongoose.Types.ObjectId(user.id),\n      assignmentId: assignment._id,\n      amount: setupFee,\n      currency: phoneNumber.currency,\n      billingDate: now,\n      billingPeriodStart: now,\n      billingPeriodEnd: now,\n      description: `Setup fee for ${phoneNumber.number}`,\n      transactionType: 'setup_fee',\n      status: 'pending',\n    });\n    await setupBilling.save();\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/phone-numbers/requests/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/phone-numbers/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'NumberRateDeck' is defined but never used.","line":6,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":31,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1175,1178],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1175,1178],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":52,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1707,1710],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1707,1710],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getCurrentUser } from '@/lib/authService';\nimport { connectToDatabase } from '@/lib/db';\nimport PhoneNumber from '@/models/PhoneNumber';\nimport PhoneNumberBilling from '@/models/PhoneNumberBilling';\nimport NumberRateDeck from '@/models/NumberRateDeck';\nimport mongoose from 'mongoose';\n\n// GET - List user's assigned phone numbers\nexport async function GET(request: NextRequest) {\n  try {\n    // Verify the user is authenticated\n    const user = await getCurrentUser();\n    \n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    // Connect to the database\n    await connectToDatabase();\n\n    const { searchParams } = new URL(request.url);\n    const page = parseInt(searchParams.get('page') || '1');\n    const limit = parseInt(searchParams.get('limit') || '10');\n    const search = searchParams.get('search') || '';\n    const status = searchParams.get('status');\n    const sortBy = searchParams.get('sortBy') || 'assignedAt';\n    const sortOrder = searchParams.get('sortOrder') || 'desc';\n\n    // Build query for user's assigned phone numbers\n    const query: any = {\n      assignedTo: new mongoose.Types.ObjectId(user.id),\n      status: 'assigned',\n    };\n\n    if (search) {\n      query.$or = [\n        { number: { $regex: search, $options: 'i' } },\n        { country: { $regex: search, $options: 'i' } },\n        { description: { $regex: search, $options: 'i' } },\n      ];\n    }\n\n    if (status && status !== 'all') {\n      // Additional status filtering if needed\n      if (status === 'active') {\n        query.status = 'assigned';\n      }\n    }\n\n    // Build sort object\n    const sort: any = {};\n    sort[sortBy] = sortOrder === 'asc' ? 1 : -1;\n\n    // Execute query with pagination\n    const skip = (page - 1) * limit;\n    \n    const [phoneNumbers, total] = await Promise.all([\n      PhoneNumber.find(query)\n        .sort(sort)\n        .skip(skip)\n        .limit(limit)\n        .lean(),\n      PhoneNumber.countDocuments(query)\n    ]);\n\n    console.log(`[API] User ${user.email} phone numbers query result: ${phoneNumbers.length} numbers, total: ${total}`);\n\n    // Get billing information for each phone number\n    const phoneNumbersWithBilling = phoneNumbers.length > 0 ? await Promise.all(\n      phoneNumbers.map(async (phoneNumber) => {\n        try {\n          // Get latest billing status\n          const latestBilling = await PhoneNumberBilling.findOne({\n            phoneNumberId: phoneNumber._id,\n            userId: new mongoose.Types.ObjectId(user.id),\n          })\n            .sort({ createdAt: -1 })\n            .lean();\n\n          // Get pending billing\n          const pendingBilling = await PhoneNumberBilling.findOne({\n            phoneNumberId: phoneNumber._id,\n            userId: new mongoose.Types.ObjectId(user.id),\n            status: 'pending',\n          })\n            .sort({ billingDate: 1 })\n            .lean();\n\n          return {\n            ...phoneNumber,\n            _id: phoneNumber._id.toString(),\n            rateDeckId: phoneNumber.rateDeckId ? phoneNumber.rateDeckId.toString() : undefined,\n            rateDeckName: undefined,\n            assignedTo: phoneNumber.assignedTo?.toString(),\n            createdAt: phoneNumber.createdAt.toISOString(),\n            updatedAt: phoneNumber.updatedAt.toISOString(),\n            assignedAt: phoneNumber.assignedAt?.toISOString(),\n            nextBillingDate: (() => {\n              // If nextBillingDate exists, use it\n              if (phoneNumber.nextBillingDate) {\n                return phoneNumber.nextBillingDate.toISOString();\n              }\n              \n              // If phone number is assigned but no nextBillingDate, calculate it\n              if (phoneNumber.assignedAt && phoneNumber.monthlyRate && phoneNumber.monthlyRate > 0) {\n                const nextBilling = new Date(phoneNumber.assignedAt);\n                if (phoneNumber.billingCycle === 'yearly') {\n                  nextBilling.setFullYear(nextBilling.getFullYear() + 1);\n                } else {\n                  nextBilling.setMonth(nextBilling.getMonth() + 1);\n                }\n                return nextBilling.toISOString();\n              }\n              \n              return undefined;\n            })(),\n            lastBilledDate: phoneNumber.lastBilledDate?.toISOString(),\n            // Billing information\n            latestBillingStatus: latestBilling?.status || 'none',\n            nextBillingAmount: pendingBilling?.amount || phoneNumber.monthlyRate || 0,\n            nextBillingDue: (() => {\n              // Use pending billing date if available\n              if (pendingBilling?.billingDate) {\n                return new Date(pendingBilling.billingDate).toISOString();\n              }\n              \n              // Use nextBillingDate if it exists\n              if (phoneNumber.nextBillingDate) {\n                return phoneNumber.nextBillingDate.toISOString();\n              }\n              \n              // Calculate next billing date from assignment date if needed\n              if (phoneNumber.assignedAt && phoneNumber.monthlyRate && phoneNumber.monthlyRate > 0) {\n                const nextBilling = new Date(phoneNumber.assignedAt);\n                if (phoneNumber.billingCycle === 'yearly') {\n                  nextBilling.setFullYear(nextBilling.getFullYear() + 1);\n                } else {\n                  nextBilling.setMonth(nextBilling.getMonth() + 1);\n                }\n                return nextBilling.toISOString();\n              }\n              \n              return undefined;\n            })(),\n          };\n        } catch (billingError) {\n          console.error(`[API] Error processing billing for phone number ${phoneNumber._id}:`, billingError);\n          // Return phone number without billing information if billing processing fails\n          return {\n            ...phoneNumber,\n            _id: phoneNumber._id.toString(),\n            rateDeckId: phoneNumber.rateDeckId ? phoneNumber.rateDeckId.toString() : undefined,\n            rateDeckName: undefined,\n            assignedTo: phoneNumber.assignedTo?.toString(),\n            createdAt: phoneNumber.createdAt.toISOString(),\n            updatedAt: phoneNumber.updatedAt.toISOString(),\n            assignedAt: phoneNumber.assignedAt?.toISOString(),\n            nextBillingDate: phoneNumber.nextBillingDate?.toISOString(),\n            lastBilledDate: phoneNumber.lastBilledDate?.toISOString(),\n            latestBillingStatus: 'error',\n            nextBillingAmount: phoneNumber.monthlyRate || 0,\n            nextBillingDue: undefined,\n          };\n        }\n      })\n    ) : [];\n\n    const totalPages = Math.ceil(total / limit);\n\n    return NextResponse.json({\n      phoneNumbers: phoneNumbersWithBilling,\n      total,\n      page,\n      limit,\n      totalPages,\n    });\n  } catch (error) {\n    console.error('Error fetching user phone numbers:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch phone numbers' },\n      { status: 500 }\n    );\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/providers/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[413,416],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[413,416],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { connectToDatabase } from '@/lib/db';\nimport { Provider } from '@/models/Provider';\n\n// GET /api/providers - Get active providers for forms\nexport async function GET(request: NextRequest) {\n  try {\n    await connectToDatabase();\n\n    const { searchParams } = new URL(request.url);\n    const service = searchParams.get('service');\n\n    const query: any = { isActive: true };\n    \n    if (service) {\n      query.services = { $in: [service] };\n    }\n\n    const providers = await Provider.find(query)\n      .sort({ name: 1 })\n      .select('name description services');\n\n    return NextResponse.json({ providers });\n  } catch (error) {\n    console.error('Error fetching providers:', error);\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/rates/numbers/decks/[id]/assignments/[userId]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/rates/numbers/decks/[id]/assignments/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":51,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1650,1653],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1650,1653],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":52,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1705,1708],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1705,1708],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":53,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1751,1754],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1751,1754],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":54,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1797,1800],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1797,1800],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":55,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1852,1855],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1852,1855],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":62,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2061,2064],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2061,2064],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":165,"column":118,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":165,"endColumn":121,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5605,5608],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5605,5608],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":196,"column":116,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":196,"endColumn":119,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6870,6873],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6870,6873],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getCurrentUser } from '@/lib/authService';\nimport { connectToDatabase } from '@/lib/db';\nimport RateDeckAssignment from '@/models/RateDeckAssignment';\nimport User from '@/models/User';\nimport NumberRateDeck from '@/models/NumberRateDeck';\nimport mongoose from 'mongoose';\n\n// GET - List users assigned to a number rate deck\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    // Verify the user is authenticated and is an admin\n    const user = await getCurrentUser();\n    \n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n    \n    if (user.role !== 'admin') {\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n    }\n\n    const { id: rateDeckId } = await params;\n    \n    // Connect to the database\n    await connectToDatabase();\n\n    // Verify the rate deck exists\n    const rateDeck = await NumberRateDeck.findById(rateDeckId);\n    if (!rateDeck) {\n      return NextResponse.json({ error: 'Rate deck not found' }, { status: 404 });\n    }\n\n    // Get all assignments for this rate deck\n    const assignments = await RateDeckAssignment\n      .find({\n        rateDeckId: new mongoose.Types.ObjectId(rateDeckId),\n        rateDeckType: 'number',\n        isActive: true,\n      })\n      .populate('userId', 'name email role sippyAccountId')\n      .sort({ assignedAt: -1 })\n      .lean();\n\n    // Transform the response\n    const assignedUsers = assignments.map(assignment => ({\n      id: assignment._id.toString(),\n      userId: (assignment.userId as any)._id.toString(),\n      name: (assignment.userId as any).name,\n      email: (assignment.userId as any).email,\n      role: (assignment.userId as any).role,\n      sippyAccountId: (assignment.userId as any).sippyAccountId,\n      assignedBy: assignment.assignedBy,\n      assignedAt: assignment.assignedAt.toISOString(),\n    }));\n    \n    return NextResponse.json({\n      rateDeck: {\n        id: (rateDeck._id as any).toString(),\n        name: rateDeck.name,\n        description: rateDeck.description,\n      },\n      assignedUsers,\n      total: assignedUsers.length,\n    });\n  } catch (error) {\n    console.error('Error fetching rate deck assignments:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch rate deck assignments' },\n      { status: 500 }\n    );\n  }\n}\n\n// POST - Assign users to a number rate deck\nexport async function POST(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    // Verify the user is authenticated and is an admin\n    const user = await getCurrentUser();\n    \n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n    \n    if (user.role !== 'admin') {\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n    }\n\n    const { id: rateDeckId } = await params;\n    const body = await request.json();\n    \n    const { userIds } = body;\n    \n    if (!userIds || !Array.isArray(userIds) || userIds.length === 0) {\n      return NextResponse.json(\n        { error: 'User IDs array is required' },\n        { status: 400 }\n      );\n    }\n\n    // Connect to the database\n    await connectToDatabase();\n\n    // Verify the rate deck exists\n    const rateDeck = await NumberRateDeck.findById(rateDeckId);\n    if (!rateDeck) {\n      return NextResponse.json({ error: 'Rate deck not found' }, { status: 404 });\n    }\n\n    // Verify all users exist\n    const users = await User.find({ _id: { $in: userIds.map(id => new mongoose.Types.ObjectId(id)) } });\n    if (users.length !== userIds.length) {\n      return NextResponse.json({ error: 'One or more users not found' }, { status: 404 });\n    }\n\n    const results: {\n      assigned: Array<{ userId: string; name?: string; email?: string }>;\n      alreadyAssigned: Array<{ userId: string; name?: string; email?: string }>;\n      errors: Array<{ userId: string; name?: string; email?: string; error: string }>;\n    } = {\n      assigned: [],\n      alreadyAssigned: [],\n      errors: [],\n    };\n\n    // Process each user assignment\n    for (const userId of userIds) {\n      try {\n        // Check if user is already assigned to this rate deck\n        const existingAssignment = await RateDeckAssignment.findOne({\n          userId: new mongoose.Types.ObjectId(userId),\n          rateDeckId: new mongoose.Types.ObjectId(rateDeckId),\n          rateDeckType: 'number',\n        });\n\n        if (existingAssignment) {\n          if (existingAssignment.isActive) {\n            const userData = users.find(u => u._id.toString() === userId);\n            results.alreadyAssigned.push({\n              userId,\n              name: userData?.name,\n              email: userData?.email,\n            });\n          } else {\n            // Check if user is assigned to any other number rate deck\n            const otherNumberAssignment = await RateDeckAssignment.findOne({\n              userId: new mongoose.Types.ObjectId(userId),\n              rateDeckType: 'number',\n              isActive: true,\n              rateDeckId: { $ne: new mongoose.Types.ObjectId(rateDeckId) },\n            }).populate('rateDeckId', 'name');\n\n            if (otherNumberAssignment) {\n              const userData = users.find(u => u._id.toString() === userId);\n              results.errors.push({\n                userId,\n                name: userData?.name,\n                email: userData?.email,\n                error: `User is already assigned to another number rate deck: ${(otherNumberAssignment.rateDeckId as any).name}`,\n              });\n            } else {\n              // Reactivate the assignment\n              existingAssignment.isActive = true;\n              existingAssignment.assignedBy = user.email;\n              existingAssignment.assignedAt = new Date();\n              await existingAssignment.save();\n\n              const userData = users.find(u => u._id.toString() === userId);\n              results.assigned.push({\n                userId,\n                name: userData?.name,\n                email: userData?.email,\n              });\n            }\n          }\n        } else {\n          // Check if user is already assigned to any other number rate deck\n          const otherNumberAssignment = await RateDeckAssignment.findOne({\n            userId: new mongoose.Types.ObjectId(userId),\n            rateDeckType: 'number',\n            isActive: true,\n          }).populate('rateDeckId', 'name');\n\n          if (otherNumberAssignment) {\n            const userData = users.find(u => u._id.toString() === userId);\n            results.errors.push({\n              userId,\n              name: userData?.name,\n              email: userData?.email,\n              error: `User is already assigned to another number rate deck: ${(otherNumberAssignment.rateDeckId as any).name}`,\n            });\n          } else {\n            // Create new assignment\n            const newAssignment = new RateDeckAssignment({\n              userId: new mongoose.Types.ObjectId(userId),\n              rateDeckId: new mongoose.Types.ObjectId(rateDeckId),\n              rateDeckType: 'number',\n              assignedBy: user.email,\n            });\n\n            await newAssignment.save();\n\n            const userData = users.find(u => u._id.toString() === userId);\n            results.assigned.push({\n              userId,\n              name: userData?.name,\n              email: userData?.email,\n            });\n          }\n        }\n      } catch (error) {\n        console.error(`Error assigning user ${userId}:`, error);\n        const userData = users.find(u => u._id.toString() === userId);\n        results.errors.push({\n          userId,\n          name: userData?.name,\n          email: userData?.email,\n          error: error instanceof Error ? error.message : 'Unknown error',\n        });\n      }\n    }\n\n    // Update the rate deck's assigned users count\n    const totalAssigned = await RateDeckAssignment.countDocuments({\n      rateDeckId: new mongoose.Types.ObjectId(rateDeckId),\n      rateDeckType: 'number',\n      isActive: true,\n    });\n\n    await NumberRateDeck.findByIdAndUpdate(\n      rateDeckId,\n      { \n        $set: { \n          assignedUsers: totalAssigned,\n          updatedAt: new Date(),\n        }\n      }\n    );\n    \n    return NextResponse.json({\n      success: true,\n      message: `Assignment completed. ${results.assigned.length} users assigned, ${results.alreadyAssigned.length} already assigned, ${results.errors.length} errors.`,\n      results,\n    });\n  } catch (error) {\n    console.error('Error assigning users to rate deck:', error);\n    return NextResponse.json(\n      { error: 'Failed to assign users to rate deck' },\n      { status: 500 }\n    );\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/rates/numbers/decks/[id]/duplicate/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":60,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1905,1908],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1905,1908],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getCurrentUser } from '@/lib/authService';\nimport NumberRateDeck from '@/models/NumberRateDeck';\nimport { connectToDatabase } from '@/lib/db';\n\nexport async function POST(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    // Verify the user is authenticated and is an admin\n    const user = await getCurrentUser();\n    \n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n    \n    if (user.role !== 'admin') {\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n    }\n\n    const { id } = params;\n    \n    // Connect to the database\n    await connectToDatabase();\n\n    // Find the rate deck to duplicate\n    const originalDeck = await NumberRateDeck.findById(id);\n    if (!originalDeck) {\n      return NextResponse.json(\n        { error: 'Number rate deck not found' },\n        { status: 404 }\n      );\n    }\n\n    // Generate a unique name for the duplicate\n    let duplicateName = `${originalDeck.name} (Copy)`;\n    let counter = 1;\n    \n    // Check if the name already exists and increment counter if needed\n    while (await NumberRateDeck.findOne({ name: duplicateName })) {\n      counter++;\n      duplicateName = `${originalDeck.name} (Copy ${counter})`;\n    }\n\n    // Create a duplicate with a new name\n    const duplicatedDeck = await NumberRateDeck.create({\n      name: duplicateName,\n      description: originalDeck.description,\n      currency: originalDeck.currency,\n      isActive: originalDeck.isActive,\n      isDefault: false, // Duplicates are never default\n      rateCount: originalDeck.rateCount,\n      assignedUsers: 0, // Start with no assigned users\n      createdBy: user.name || user.email,\n    });\n\n    // Transform the response to match frontend structure\n    const transformedDeck = {\n      id: (duplicatedDeck._id as any).toString(),\n      name: duplicatedDeck.name,\n      description: duplicatedDeck.description,\n      currency: duplicatedDeck.currency,\n      isActive: duplicatedDeck.isActive,\n      isDefault: duplicatedDeck.isDefault,\n      rateCount: duplicatedDeck.rateCount,\n      assignedUsers: duplicatedDeck.assignedUsers,\n      createdBy: duplicatedDeck.createdBy,\n      createdAt: duplicatedDeck.createdAt.toISOString(),\n      updatedAt: duplicatedDeck.updatedAt.toISOString(),\n    };\n    \n    return NextResponse.json(transformedDeck, { status: 201 });\n  } catch (error) {\n    console.error('Error duplicating number rate deck:', error);\n    return NextResponse.json(\n      { error: 'Failed to duplicate number rate deck' },\n      { status: 500 }\n    );\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/rates/numbers/decks/[id]/rates/[rateId]/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":114,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3393,3396],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3393,3396],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getCurrentUser } from '@/lib/authService';\nimport { connectToDatabase } from '@/lib/db';\nimport NumberRate from '@/models/NumberRate';\nimport NumberRateDeck from '@/models/NumberRateDeck';\nimport mongoose from 'mongoose';\n\nexport async function PUT(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string; rateId: string }> }\n) {\n  try {\n    // Verify the user is authenticated and is an admin\n    const user = await getCurrentUser();\n    \n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n    \n    if (user.role !== 'admin') {\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n    }\n\n    const { id: rateDeckId, rateId } = await params;\n    const body = await request.json();\n    \n    const { prefix, country, description, rate, type, effectiveDate } = body;\n    \n    if (!prefix || !country || rate === undefined || !type || !effectiveDate) {\n      return NextResponse.json(\n        { error: 'Prefix, country, rate, type, and effective date are required' },\n        { status: 400 }\n      );\n    }\n\n    // Validate rate is a positive number\n    if (typeof rate !== 'number' || rate < 0) {\n      return NextResponse.json(\n        { error: 'Rate must be a positive number' },\n        { status: 400 }\n      );\n    }\n\n    // Validate type\n    const validTypes = ['Geographic/Local', 'Mobile', 'National', 'Toll-free', 'Shared Cost', 'NPV (Verified Numbers)'];\n    if (!validTypes.includes(type)) {\n      return NextResponse.json(\n        { error: 'Invalid rate type' },\n        { status: 400 }\n      );\n    }\n\n    // Connect to the database\n    await connectToDatabase();\n\n    // Find the existing rate\n    const existingRate = await NumberRate.findOne({\n      _id: new mongoose.Types.ObjectId(rateId),\n      rateDeckId: new mongoose.Types.ObjectId(rateDeckId),\n    });\n\n    if (!existingRate) {\n      return NextResponse.json(\n        { error: 'Number rate not found' },\n        { status: 404 }\n      );\n    }\n\n    // Check if prefix is being changed and if it conflicts with another rate\n    if (prefix.trim() !== existingRate.prefix) {\n      const prefixConflict = await NumberRate.findOne({\n        rateDeckId: new mongoose.Types.ObjectId(rateDeckId),\n        prefix: prefix.trim(),\n        _id: { $ne: new mongoose.Types.ObjectId(rateId) },\n      });\n\n      if (prefixConflict) {\n        return NextResponse.json(\n          { error: 'A rate with this prefix already exists in this rate deck' },\n          { status: 400 }\n        );\n      }\n    }\n\n    // Update the rate\n    const updatedRate = await NumberRate.findOneAndUpdate(\n      {\n        _id: new mongoose.Types.ObjectId(rateId),\n        rateDeckId: new mongoose.Types.ObjectId(rateDeckId),\n      },\n      {\n        $set: {\n          prefix: prefix.trim(),\n          country: country.trim(),\n          description: description?.trim() || '',\n          rate: rate,\n          type: type,\n          effectiveDate: new Date(effectiveDate),\n          updatedAt: new Date(),\n        },\n      },\n      { new: true }\n    );\n\n    if (!updatedRate) {\n      return NextResponse.json(\n        { error: 'Failed to update number rate' },\n        { status: 500 }\n      );\n    }\n\n    // Transform the response to match frontend structure\n    const transformedRate = {\n      id: (updatedRate._id as any).toString(),\n      prefix: updatedRate.prefix,\n      country: updatedRate.country,\n      description: updatedRate.description,\n      rate: updatedRate.rate,\n      type: updatedRate.type,\n      effectiveDate: updatedRate.effectiveDate.toISOString().split('T')[0],\n      createdAt: updatedRate.createdAt.toISOString(),\n      updatedAt: updatedRate.updatedAt.toISOString(),\n    };\n    \n    return NextResponse.json(transformedRate);\n  } catch (error) {\n    console.error('Error updating number rate:', error);\n    return NextResponse.json(\n      { error: 'Failed to update number rate' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string; rateId: string }> }\n) {\n  try {\n    // Verify the user is authenticated and is an admin\n    const user = await getCurrentUser();\n    \n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n    \n    if (user.role !== 'admin') {\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n    }\n\n    const { id: rateDeckId, rateId } = await params;\n    \n    // Connect to the database\n    await connectToDatabase();\n\n    // Find and delete the rate\n    const deletedRate = await NumberRate.findOneAndDelete({\n      _id: new mongoose.Types.ObjectId(rateId),\n      rateDeckId: new mongoose.Types.ObjectId(rateDeckId),\n    });\n\n    if (!deletedRate) {\n      return NextResponse.json(\n        { error: 'Number rate not found' },\n        { status: 404 }\n      );\n    }\n\n    // Update the rate deck's rate count\n    await NumberRateDeck.findByIdAndUpdate(\n      rateDeckId,\n      { \n        $inc: { rateCount: -1 },\n        $set: { updatedAt: new Date() }\n      }\n    );\n    \n    return NextResponse.json({ \n      success: true,\n      message: 'Number rate deleted successfully' \n    });\n  } catch (error) {\n    console.error('Error deleting number rate:', error);\n    return NextResponse.json(\n      { error: 'Failed to delete number rate' },\n      { status: 500 }\n    );\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/rates/numbers/decks/[id]/rates/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":40,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1446,1449],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1446,1449],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":200,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":200,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5953,5956],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5953,5956],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getCurrentUser } from '@/lib/authService';\nimport { connectToDatabase } from '@/lib/db';\nimport NumberRate from '@/models/NumberRate';\nimport NumberRateDeck from '@/models/NumberRateDeck';\nimport mongoose from 'mongoose';\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    // Verify the user is authenticated and is an admin\n    const user = await getCurrentUser();\n    \n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n    \n    if (user.role !== 'admin') {\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n    }\n\n    const { id: rateDeckId } = await params;\n    const { searchParams } = new URL(request.url);\n    \n    // Parse query parameters\n    const offset = parseInt(searchParams.get('offset') || '0');\n    const limit = parseInt(searchParams.get('limit') || '50');\n    const prefix = searchParams.get('prefix') || '';\n    const country = searchParams.get('country') || '';\n    const type = searchParams.get('type') || '';\n    const minRate = searchParams.get('minRate') ? parseFloat(searchParams.get('minRate')!) : null;\n    const maxRate = searchParams.get('maxRate') ? parseFloat(searchParams.get('maxRate')!) : null;\n    \n    // Connect to the database\n    await connectToDatabase();\n\n    // Build filter query\n    const filter: any = { rateDeckId: new mongoose.Types.ObjectId(rateDeckId) };\n    \n    if (prefix) {\n      filter.prefix = { $regex: prefix, $options: 'i' };\n    }\n    \n    if (country) {\n      filter.country = { $regex: country, $options: 'i' };\n    }\n    \n    if (type && type !== 'all') {\n      filter.type = type;\n    }\n    \n    if (minRate !== null || maxRate !== null) {\n      filter.rate = {};\n      if (minRate !== null) filter.rate.$gte = minRate;\n      if (maxRate !== null) filter.rate.$lte = maxRate;\n    }\n\n    // Get total count for pagination\n    const total = await NumberRate.countDocuments(filter);\n\n    // Get rates with pagination\n    const rates = await NumberRate\n      .find(filter)\n      .sort({ prefix: 1, country: 1 })\n      .skip(offset)\n      .limit(limit)\n      .lean();\n\n    // Transform the response to match frontend structure\n    const transformedRates = rates.map(rate => ({\n      id: rate._id.toString(),\n      prefix: rate.prefix,\n      country: rate.country,\n      description: rate.description,\n      rate: rate.rate,\n      setupFee: rate.setupFee,\n      type: rate.type,\n      effectiveDate: rate.effectiveDate.toISOString().split('T')[0],\n      createdAt: rate.createdAt.toISOString(),\n      updatedAt: rate.updatedAt.toISOString(),\n    }));\n    \n    return NextResponse.json({\n      rates: transformedRates,\n      total,\n    });\n  } catch (error) {\n    console.error('Error fetching number rates:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch number rates' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    // Verify the user is authenticated and is an admin\n    const user = await getCurrentUser();\n    \n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n    \n    if (user.role !== 'admin') {\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n    }\n\n    const { id: rateDeckId } = await params;\n    const body = await request.json();\n    \n    const { prefix, country, description, rate, setupFee, type, effectiveDate } = body;\n    \n    if (!prefix || !country || rate === undefined || !type || !effectiveDate) {\n      return NextResponse.json(\n        { error: 'Prefix, country, rate, type, and effective date are required' },\n        { status: 400 }\n      );\n    }\n\n    // Validate rate is a positive number\n    if (typeof rate !== 'number' || rate < 0) {\n      return NextResponse.json(\n        { error: 'Rate must be a positive number' },\n        { status: 400 }\n      );\n    }\n\n    // Validate setupFee if provided\n    if (setupFee !== undefined && (typeof setupFee !== 'number' || setupFee < 0)) {\n      return NextResponse.json(\n        { error: 'Setup fee must be a positive number' },\n        { status: 400 }\n      );\n    }\n\n    // Validate type\n    const validTypes = ['Geographic/Local', 'Mobile', 'National', 'Toll-free', 'Shared Cost', 'NPV (Verified Numbers)'];\n    if (!validTypes.includes(type)) {\n      return NextResponse.json(\n        { error: 'Invalid rate type' },\n        { status: 400 }\n      );\n    }\n\n    // Connect to the database\n    await connectToDatabase();\n\n    // Check if a rate with the same prefix already exists for this rate deck\n    const existingRate = await NumberRate.findOne({\n      rateDeckId: new mongoose.Types.ObjectId(rateDeckId),\n      prefix: prefix.trim(),\n    });\n\n    if (existingRate) {\n      return NextResponse.json(\n        { error: 'A rate with this prefix already exists in this rate deck' },\n        { status: 400 }\n      );\n    }\n\n    // Create the new rate\n    const newRate = new NumberRate({\n      rateDeckId: new mongoose.Types.ObjectId(rateDeckId),\n      prefix: prefix.trim(),\n      country: country.trim(),\n      description: description?.trim() || '',\n      rate: rate,\n      setupFee: setupFee || 0,\n      type: type,\n      effectiveDate: new Date(effectiveDate),\n      createdBy: user.email,\n    });\n\n    const savedRate = await newRate.save();\n\n    if (!savedRate) {\n      return NextResponse.json(\n        { error: 'Failed to create number rate' },\n        { status: 500 }\n      );\n    }\n\n    // Update the rate deck's rate count\n    await NumberRateDeck.findByIdAndUpdate(\n      rateDeckId,\n      { \n        $inc: { rateCount: 1 },\n        $set: { updatedAt: new Date() }\n      }\n    );\n\n    // Transform the response to match frontend structure\n    const transformedRate = {\n      id: (savedRate._id as any).toString(),\n      prefix: savedRate.prefix,\n      country: savedRate.country,\n      description: savedRate.description,\n      rate: savedRate.rate,\n      setupFee: savedRate.setupFee,\n      type: savedRate.type,\n      effectiveDate: savedRate.effectiveDate.toISOString().split('T')[0],\n      createdAt: savedRate.createdAt.toISOString(),\n      updatedAt: savedRate.updatedAt.toISOString(),\n    };\n    \n    return NextResponse.json(transformedRate, { status: 201 });\n  } catch (error) {\n    console.error('Error creating number rate:', error);\n    return NextResponse.json(\n      { error: 'Failed to create number rate' },\n      { status: 500 }\n    );\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/rates/numbers/decks/[id]/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":38,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1082,1085],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1082,1085],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":137,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":137,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3877,3880],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3877,3880],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getCurrentUser } from '@/lib/authService';\nimport NumberRateDeck from '@/models/NumberRateDeck';\nimport { connectToDatabase } from '@/lib/db';\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    // Verify the user is authenticated and is an admin\n    const user = await getCurrentUser();\n    \n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n    \n    if (user.role !== 'admin') {\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n    }\n\n    const { id } = await params;\n    \n    // Connect to the database\n    await connectToDatabase();\n\n    // Find the rate deck\n    const rateDeck = await NumberRateDeck.findById(id);\n    if (!rateDeck) {\n      return NextResponse.json(\n        { error: 'Number rate deck not found' },\n        { status: 404 }\n      );\n    }\n\n    // Transform the response to match frontend structure\n    const transformedDeck = {\n      id: (rateDeck._id as any).toString(),\n      name: rateDeck.name,\n      description: rateDeck.description,\n      currency: rateDeck.currency,\n      isActive: rateDeck.isActive,\n      isDefault: rateDeck.isDefault,\n      rateCount: rateDeck.rateCount,\n      assignedUsers: rateDeck.assignedUsers,\n      createdBy: rateDeck.createdBy,\n      createdAt: rateDeck.createdAt.toISOString(),\n      updatedAt: rateDeck.updatedAt.toISOString(),\n    };\n    \n    return NextResponse.json(transformedDeck);\n  } catch (error) {\n    console.error('Error fetching number rate deck:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch number rate deck' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function PUT(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    // Verify the user is authenticated and is an admin\n    const user = await getCurrentUser();\n    \n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n    \n    if (user.role !== 'admin') {\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n    }\n\n    const { id } = await params;\n    const body = await request.json();\n    \n    const { name, description, currency, isActive, isDefault } = body;\n    \n    if (!name || !currency) {\n      return NextResponse.json(\n        { error: 'Name and currency are required' },\n        { status: 400 }\n      );\n    }\n\n    // Connect to the database\n    await connectToDatabase();\n\n    // Find the rate deck\n    const existingDeck = await NumberRateDeck.findById(id);\n    if (!existingDeck) {\n      return NextResponse.json(\n        { error: 'Number rate deck not found' },\n        { status: 404 }\n      );\n    }\n\n    // Check if name is being changed and if it conflicts with another deck\n    if (name !== existingDeck.name) {\n      const nameConflict = await NumberRateDeck.findOne({ \n        name, \n        _id: { $ne: id } \n      });\n      if (nameConflict) {\n        return NextResponse.json(\n          { error: 'A rate deck with this name already exists' },\n          { status: 400 }\n        );\n      }\n    }\n\n    // Update the rate deck\n    const updatedDeck = await NumberRateDeck.findByIdAndUpdate(\n      id,\n      {\n        name,\n        description: description || '',\n        currency: currency.toUpperCase(),\n        isActive: isActive !== undefined ? isActive : existingDeck.isActive,\n        isDefault: isDefault !== undefined ? isDefault : existingDeck.isDefault,\n      },\n      { new: true, runValidators: true }\n    );\n\n    if (!updatedDeck) {\n      return NextResponse.json(\n        { error: 'Failed to update rate deck' },\n        { status: 500 }\n      );\n    }\n\n    // Transform the response to match frontend structure\n    const transformedDeck = {\n      id: (updatedDeck._id as any).toString(),\n      name: updatedDeck.name,\n      description: updatedDeck.description,\n      currency: updatedDeck.currency,\n      isActive: updatedDeck.isActive,\n      isDefault: updatedDeck.isDefault,\n      rateCount: updatedDeck.rateCount,\n      assignedUsers: updatedDeck.assignedUsers,\n      createdBy: updatedDeck.createdBy,\n      createdAt: updatedDeck.createdAt.toISOString(),\n      updatedAt: updatedDeck.updatedAt.toISOString(),\n    };\n    \n    return NextResponse.json(transformedDeck);\n  } catch (error) {\n    console.error('Error updating number rate deck:', error);\n    return NextResponse.json(\n      { error: 'Failed to update number rate deck' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    // Verify the user is authenticated and is an admin\n    const user = await getCurrentUser();\n    \n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n    \n    if (user.role !== 'admin') {\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n    }\n\n    const { id } = await params;\n    \n    // Connect to the database\n    await connectToDatabase();\n\n    // Find the rate deck\n    const existingDeck = await NumberRateDeck.findById(id);\n    if (!existingDeck) {\n      return NextResponse.json(\n        { error: 'Number rate deck not found' },\n        { status: 404 }\n      );\n    }\n\n    // Check if it's the default deck\n    if (existingDeck.isDefault) {\n      return NextResponse.json(\n        { error: 'Cannot delete the default rate deck' },\n        { status: 400 }\n      );\n    }\n\n    // Check if it has assigned users (optional safety check)\n    if (existingDeck.assignedUsers > 0) {\n      return NextResponse.json(\n        { error: 'Cannot delete rate deck with assigned users. Please reassign users first.' },\n        { status: 400 }\n      );\n    }\n\n    // Remove the rate deck\n    await NumberRateDeck.findByIdAndDelete(id);\n    \n    return NextResponse.json({ \n      success: true,\n      message: 'Number rate deck deleted successfully' \n    });\n  } catch (error) {\n    console.error('Error deleting number rate deck:', error);\n    return NextResponse.json(\n      { error: 'Failed to delete number rate deck' },\n      { status: 500 }\n    );\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/rates/numbers/decks/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[963,966],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[963,966],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":32,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1085,1088],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1085,1088],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":68,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2124,2127],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2124,2127],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":175,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":175,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5148,5151],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5148,5151],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getCurrentUser } from '@/lib/authService';\nimport NumberRateDeck from '@/models/NumberRateDeck';\nimport RateDeckAssignment from '@/models/RateDeckAssignment';\nimport { connectToDatabase } from '@/lib/db';\nimport mongoose from 'mongoose';\n\nexport async function GET(request: NextRequest) {\n  try {\n    // Verify the user is authenticated\n    const user = await getCurrentUser();\n    \n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { searchParams } = new URL(request.url);\n    const offset = parseInt(searchParams.get('offset') || '0');\n    const limit = parseInt(searchParams.get('limit') || '50');\n    const name = searchParams.get('name') || '';\n    const isActive = searchParams.get('isActive');\n    const isDefault = searchParams.get('isDefault');\n\n    // Connect to the database\n    await connectToDatabase();\n\n    let rateDecks: any[] = [];\n    let total = 0;\n\n    if (user.role === 'admin') {\n      // Admin can see all rate decks\n      const query: any = {};\n      \n      if (name) {\n        query.name = { $regex: name, $options: 'i' };\n      }\n      \n      if (isActive && isActive !== 'all') {\n        query.isActive = isActive === 'true';\n      }\n      \n      if (isDefault && isDefault !== 'all') {\n        query.isDefault = isDefault === 'true';\n      }\n\n      // Get total count for pagination\n      total = await NumberRateDeck.countDocuments(query);\n\n      // Fetch rate decks with pagination\n      rateDecks = await NumberRateDeck.find(query)\n        .sort({ createdAt: -1 })\n        .skip(offset)\n        .limit(limit)\n        .lean();\n    } else {\n      // Regular users can only see their assigned rate decks\n      const assignments = await RateDeckAssignment\n        .find({\n          userId: new mongoose.Types.ObjectId(user.id),\n          rateDeckType: 'number',\n          isActive: true,\n        })\n        .lean();\n\n      const assignedRateDeckIds = assignments.map(assignment => assignment.rateDeckId);\n\n      if (assignedRateDeckIds.length > 0) {\n        const query: any = {\n          _id: { $in: assignedRateDeckIds }\n        };\n        \n        if (name) {\n          query.name = { $regex: name, $options: 'i' };\n        }\n        \n        if (isActive && isActive !== 'all') {\n          query.isActive = isActive === 'true';\n        }\n        \n        if (isDefault && isDefault !== 'all') {\n          query.isDefault = isDefault === 'true';\n        }\n\n        // Get total count for pagination\n        total = await NumberRateDeck.countDocuments(query);\n\n        // Fetch rate decks with pagination\n        rateDecks = await NumberRateDeck.find(query)\n          .sort({ createdAt: -1 })\n          .skip(offset)\n          .limit(limit)\n          .lean();\n      }\n    }\n\n    // Transform the data to match frontend structure\n    const transformedRateDecks = rateDecks.map(deck => ({\n      id: deck._id.toString(),\n      name: deck.name,\n      description: deck.description,\n      currency: deck.currency,\n      isActive: deck.isActive,\n      isDefault: deck.isDefault,\n      rateCount: deck.rateCount,\n      assignedUsers: deck.assignedUsers,\n      createdBy: deck.createdBy,\n      createdAt: deck.createdAt.toISOString(),\n      updatedAt: deck.updatedAt.toISOString(),\n    }));\n\n    return NextResponse.json({\n      rateDecks: transformedRateDecks,\n      total\n    });\n  } catch (error) {\n    console.error('Error fetching number rate decks:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch number rate decks' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    // Verify the user is authenticated and is an admin\n    const user = await getCurrentUser();\n    \n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n    \n    if (user.role !== 'admin') {\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n    }\n\n    const body = await request.json();\n    \n    // Validate the request body\n    const { name, description, currency, isActive, isDefault } = body;\n    \n    if (!name || !currency) {\n      return NextResponse.json(\n        { error: 'Name and currency are required' },\n        { status: 400 }\n      );\n    }\n\n    // Connect to the database\n    await connectToDatabase();\n\n    // Check if a rate deck with this name already exists\n    const existingDeck = await NumberRateDeck.findOne({ name });\n    if (existingDeck) {\n      return NextResponse.json(\n        { error: 'A rate deck with this name already exists' },\n        { status: 400 }\n      );\n    }\n\n    // Create new rate deck\n    const newRateDeck = await NumberRateDeck.create({\n      name,\n      description: description || '',\n      currency: currency.toUpperCase(),\n      isActive: isActive !== undefined ? isActive : true,\n      isDefault: isDefault || false,\n      rateCount: 0,\n      assignedUsers: 0,\n      createdBy: user.name || user.email,\n    });\n\n    // Transform the response to match frontend structure\n    const transformedRateDeck = {\n      id: (newRateDeck._id as any).toString(),\n      name: newRateDeck.name,\n      description: newRateDeck.description,\n      currency: newRateDeck.currency,\n      isActive: newRateDeck.isActive,\n      isDefault: newRateDeck.isDefault,\n      rateCount: newRateDeck.rateCount,\n      assignedUsers: newRateDeck.assignedUsers,\n      createdBy: newRateDeck.createdBy,\n      createdAt: newRateDeck.createdAt.toISOString(),\n      updatedAt: newRateDeck.updatedAt.toISOString(),\n    };\n    \n    return NextResponse.json(transformedRateDeck, { status: 201 });\n  } catch (error) {\n    console.error('Error creating number rate deck:', error);\n    return NextResponse.json(\n      { error: 'Failed to create number rate deck' },\n      { status: 500 }\n    );\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/rates/numbers/user-rates/route.ts","messages":[{"ruleId":"prefer-const","severity":2,"message":"'rateDeckFilter' is never reassigned. Use 'const' instead.","line":58,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":58,"endColumn":28,"fix":{"range":[1926,1997],"text":"const rateDeckFilter: any = { rateDeckId: { $in: assignedRateDeckIds } };"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":58,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1946,1949],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1946,1949],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":65,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2214,2217],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2214,2217],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getCurrentUser } from '@/lib/authService';\nimport { connectToDatabase } from '@/lib/db';\nimport RateDeckAssignment from '@/models/RateDeckAssignment';\nimport NumberRateDeck from '@/models/NumberRateDeck';\nimport NumberRate from '@/models/NumberRate';\nimport mongoose from 'mongoose';\n\n// GET - Get number rates for the current user from their assigned rate decks\nexport async function GET(request: NextRequest) {\n  try {\n    // Verify the user is authenticated\n    const user = await getCurrentUser();\n    \n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { searchParams } = new URL(request.url);\n    const offset = parseInt(searchParams.get('offset') || '0');\n    const limit = parseInt(searchParams.get('limit') || '50');\n    const prefix = searchParams.get('prefix') || '';\n    const country = searchParams.get('country') || '';\n    const type = searchParams.get('type');\n    const rateDeckId = searchParams.get('rateDeckId');\n    const minRate = searchParams.get('minRate');\n    const maxRate = searchParams.get('maxRate');\n\n    // Connect to the database\n    await connectToDatabase();\n\n    // Get user's assigned number rate decks\n    const assignments = await RateDeckAssignment\n      .find({\n        userId: new mongoose.Types.ObjectId(user.id),\n        rateDeckType: 'number',\n        isActive: true,\n      })\n      .lean();\n\n    if (assignments.length === 0) {\n      return NextResponse.json({\n        rates: [],\n        total: 0,\n        rateDecks: [],\n      });\n    }\n\n    const assignedRateDeckIds = assignments.map(assignment => assignment.rateDeckId);\n\n    // Get rate deck information for the filter dropdown\n    const rateDecks = await NumberRateDeck\n      .find({ _id: { $in: assignedRateDeckIds } })\n      .select('name currency')\n      .lean();\n\n    // Build query for rates\n    let rateDeckFilter: any = { rateDeckId: { $in: assignedRateDeckIds } };\n    \n    // If specific rate deck is requested, filter to that one\n    if (rateDeckId && rateDeckId !== 'all') {\n      rateDeckFilter.rateDeckId = new mongoose.Types.ObjectId(rateDeckId);\n    }\n\n    const rateQuery: any = rateDeckFilter;\n    \n    if (prefix) {\n      rateQuery.prefix = { $regex: prefix, $options: 'i' };\n    }\n    \n    if (country) {\n      rateQuery.country = { $regex: country, $options: 'i' };\n    }\n    \n    if (type && type !== 'all') {\n      rateQuery.type = type;\n    }\n    \n    if (minRate) {\n      rateQuery.rate = { ...rateQuery.rate, $gte: parseFloat(minRate) };\n    }\n    \n    if (maxRate) {\n      rateQuery.rate = { ...rateQuery.rate, $lte: parseFloat(maxRate) };\n    }\n\n    // Get total count for pagination\n    const total = await NumberRate.countDocuments(rateQuery);\n\n    // Fetch rates with pagination\n    const rates = await NumberRate\n      .find(rateQuery)\n      .sort({ prefix: 1, country: 1 })\n      .skip(offset)\n      .limit(limit)\n      .lean();\n\n    // Create a map of rate deck info for quick lookup\n    const rateDeckMap = new Map();\n    for (const deck of rateDecks) {\n      rateDeckMap.set(deck._id.toString(), deck);\n    }\n\n    // Transform the rates to include rate deck information\n    const transformedRates = rates.map(rate => {\n      const rateDeck = rateDeckMap.get(rate.rateDeckId.toString());\n      return {\n        id: rate._id.toString(),\n        prefix: rate.prefix,\n        country: rate.country,\n        description: rate.description,\n        rate: rate.rate,\n        type: rate.type,\n        effectiveDate: rate.effectiveDate?.toISOString() || null,\n        rateDeckId: rate.rateDeckId.toString(),\n        rateDeckName: rateDeck?.name || 'Unknown Rate Deck',\n        currency: rateDeck?.currency || 'USD',\n      };\n    });\n\n    // Transform rate decks for the response\n    const transformedRateDecks = rateDecks.map(deck => ({\n      id: deck._id.toString(),\n      name: deck.name,\n      currency: deck.currency,\n    }));\n\n    return NextResponse.json({\n      rates: transformedRates,\n      total,\n      rateDecks: transformedRateDecks,\n    });\n  } catch (error) {\n    console.error('Error fetching user number rates:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch your number rates' },\n      { status: 500 }\n    );\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/rates/sms/decks/[id]/assignments/[userId]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/rates/sms/decks/[id]/assignments/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":51,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1636,1639],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1636,1639],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":52,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1691,1694],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1691,1694],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":53,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1737,1740],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1737,1740],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":54,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1783,1786],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1783,1786],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":55,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1838,1841],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1838,1841],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":62,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2047,2050],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2047,2050],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":165,"column":112,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":165,"endColumn":115,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5573,5576],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5573,5576],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":196,"column":110,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":196,"endColumn":113,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6820,6823],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6820,6823],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getCurrentUser } from '@/lib/authService';\nimport { connectToDatabase } from '@/lib/db';\nimport RateDeckAssignment from '@/models/RateDeckAssignment';\nimport User from '@/models/User';\nimport SmsRateDeck from '@/models/SmsRateDeck';\nimport mongoose from 'mongoose';\n\n// GET - List users assigned to an SMS rate deck\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    // Verify the user is authenticated and is an admin\n    const user = await getCurrentUser();\n    \n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n    \n    if (user.role !== 'admin') {\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n    }\n\n    const { id: rateDeckId } = await params;\n    \n    // Connect to the database\n    await connectToDatabase();\n\n    // Verify the rate deck exists\n    const rateDeck = await SmsRateDeck.findById(rateDeckId);\n    if (!rateDeck) {\n      return NextResponse.json({ error: 'Rate deck not found' }, { status: 404 });\n    }\n\n    // Get all assignments for this rate deck\n    const assignments = await RateDeckAssignment\n      .find({\n        rateDeckId: new mongoose.Types.ObjectId(rateDeckId),\n        rateDeckType: 'sms',\n        isActive: true,\n      })\n      .populate('userId', 'name email role sippyAccountId')\n      .sort({ assignedAt: -1 })\n      .lean();\n\n    // Transform the response\n    const assignedUsers = assignments.map(assignment => ({\n      id: assignment._id.toString(),\n      userId: (assignment.userId as any)._id.toString(),\n      name: (assignment.userId as any).name,\n      email: (assignment.userId as any).email,\n      role: (assignment.userId as any).role,\n      sippyAccountId: (assignment.userId as any).sippyAccountId,\n      assignedBy: assignment.assignedBy,\n      assignedAt: assignment.assignedAt.toISOString(),\n    }));\n    \n    return NextResponse.json({\n      rateDeck: {\n        id: (rateDeck._id as any).toString(),\n        name: rateDeck.name,\n        description: rateDeck.description,\n      },\n      assignedUsers,\n      total: assignedUsers.length,\n    });\n  } catch (error) {\n    console.error('Error fetching SMS rate deck assignments:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch SMS rate deck assignments' },\n      { status: 500 }\n    );\n  }\n}\n\n// POST - Assign users to an SMS rate deck\nexport async function POST(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    // Verify the user is authenticated and is an admin\n    const user = await getCurrentUser();\n    \n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n    \n    if (user.role !== 'admin') {\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n    }\n\n    const { id: rateDeckId } = await params;\n    const body = await request.json();\n    \n    const { userIds } = body;\n    \n    if (!userIds || !Array.isArray(userIds) || userIds.length === 0) {\n      return NextResponse.json(\n        { error: 'User IDs array is required' },\n        { status: 400 }\n      );\n    }\n\n    // Connect to the database\n    await connectToDatabase();\n\n    // Verify the rate deck exists\n    const rateDeck = await SmsRateDeck.findById(rateDeckId);\n    if (!rateDeck) {\n      return NextResponse.json({ error: 'Rate deck not found' }, { status: 404 });\n    }\n\n    // Verify all users exist\n    const users = await User.find({ _id: { $in: userIds.map(id => new mongoose.Types.ObjectId(id)) } });\n    if (users.length !== userIds.length) {\n      return NextResponse.json({ error: 'One or more users not found' }, { status: 404 });\n    }\n\n    const results: {\n      assigned: Array<{ userId: string; name?: string; email?: string }>;\n      alreadyAssigned: Array<{ userId: string; name?: string; email?: string }>;\n      errors: Array<{ userId: string; name?: string; email?: string; error: string }>;\n    } = {\n      assigned: [],\n      alreadyAssigned: [],\n      errors: [],\n    };\n\n    // Process each user assignment\n    for (const userId of userIds) {\n      try {\n        // Check if user is already assigned to this rate deck\n        const existingAssignment = await RateDeckAssignment.findOne({\n          userId: new mongoose.Types.ObjectId(userId),\n          rateDeckId: new mongoose.Types.ObjectId(rateDeckId),\n          rateDeckType: 'sms',\n        });\n\n        if (existingAssignment) {\n          if (existingAssignment.isActive) {\n            const userData = users.find(u => u._id.toString() === userId);\n            results.alreadyAssigned.push({\n              userId,\n              name: userData?.name,\n              email: userData?.email,\n            });\n          } else {\n            // Check if user is assigned to any other SMS rate deck\n            const otherSmsAssignment = await RateDeckAssignment.findOne({\n              userId: new mongoose.Types.ObjectId(userId),\n              rateDeckType: 'sms',\n              isActive: true,\n              rateDeckId: { $ne: new mongoose.Types.ObjectId(rateDeckId) },\n            }).populate('rateDeckId', 'name');\n\n            if (otherSmsAssignment) {\n              const userData = users.find(u => u._id.toString() === userId);\n              results.errors.push({\n                userId,\n                name: userData?.name,\n                email: userData?.email,\n                error: `User is already assigned to another SMS rate deck: ${(otherSmsAssignment.rateDeckId as any).name}`,\n              });\n            } else {\n              // Reactivate the assignment\n              existingAssignment.isActive = true;\n              existingAssignment.assignedBy = user.email;\n              existingAssignment.assignedAt = new Date();\n              await existingAssignment.save();\n\n              const userData = users.find(u => u._id.toString() === userId);\n              results.assigned.push({\n                userId,\n                name: userData?.name,\n                email: userData?.email,\n              });\n            }\n          }\n        } else {\n          // Check if user is already assigned to any other SMS rate deck\n          const otherSmsAssignment = await RateDeckAssignment.findOne({\n            userId: new mongoose.Types.ObjectId(userId),\n            rateDeckType: 'sms',\n            isActive: true,\n          }).populate('rateDeckId', 'name');\n\n          if (otherSmsAssignment) {\n            const userData = users.find(u => u._id.toString() === userId);\n            results.errors.push({\n              userId,\n              name: userData?.name,\n              email: userData?.email,\n              error: `User is already assigned to another SMS rate deck: ${(otherSmsAssignment.rateDeckId as any).name}`,\n            });\n          } else {\n            // Create new assignment\n            const newAssignment = new RateDeckAssignment({\n              userId: new mongoose.Types.ObjectId(userId),\n              rateDeckId: new mongoose.Types.ObjectId(rateDeckId),\n              rateDeckType: 'sms',\n              assignedBy: user.email,\n            });\n\n            await newAssignment.save();\n\n            const userData = users.find(u => u._id.toString() === userId);\n            results.assigned.push({\n              userId,\n              name: userData?.name,\n              email: userData?.email,\n            });\n          }\n        }\n      } catch (error) {\n        console.error(`Error assigning user ${userId}:`, error);\n        const userData = users.find(u => u._id.toString() === userId);\n        results.errors.push({\n          userId,\n          name: userData?.name,\n          email: userData?.email,\n          error: error instanceof Error ? error.message : 'Unknown error',\n        });\n      }\n    }\n\n    // Update the rate deck's assigned users count\n    const totalAssigned = await RateDeckAssignment.countDocuments({\n      rateDeckId: new mongoose.Types.ObjectId(rateDeckId),\n      rateDeckType: 'sms',\n      isActive: true,\n    });\n\n    await SmsRateDeck.findByIdAndUpdate(\n      rateDeckId,\n      { \n        $set: { \n          assignedUsers: totalAssigned,\n          updatedAt: new Date(),\n        }\n      }\n    );\n    \n    return NextResponse.json({\n      success: true,\n      message: `Assignment completed. ${results.assigned.length} users assigned, ${results.alreadyAssigned.length} already assigned, ${results.errors.length} errors.`,\n      results,\n    });\n  } catch (error) {\n    console.error('Error assigning users to SMS rate deck:', error);\n    return NextResponse.json(\n      { error: 'Failed to assign users to SMS rate deck' },\n      { status: 500 }\n    );\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/rates/sms/decks/[id]/duplicate/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":60,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1887,1890],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1887,1890],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getCurrentUser } from '@/lib/authService';\nimport SmsRateDeck from '@/models/SmsRateDeck';\nimport { connectToDatabase } from '@/lib/db';\n\nexport async function POST(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    // Verify the user is authenticated and is an admin\n    const user = await getCurrentUser();\n    \n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n    \n    if (user.role !== 'admin') {\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n    }\n\n    const { id } = params;\n    \n    // Connect to the database\n    await connectToDatabase();\n\n    // Find the rate deck to duplicate\n    const originalDeck = await SmsRateDeck.findById(id);\n    if (!originalDeck) {\n      return NextResponse.json(\n        { error: 'SMS rate deck not found' },\n        { status: 404 }\n      );\n    }\n\n    // Generate a unique name for the duplicate\n    let duplicateName = `${originalDeck.name} (Copy)`;\n    let counter = 1;\n    \n    // Check if the name already exists and increment counter if needed\n    while (await SmsRateDeck.findOne({ name: duplicateName })) {\n      counter++;\n      duplicateName = `${originalDeck.name} (Copy ${counter})`;\n    }\n\n    // Create a duplicate with a new name\n    const duplicatedDeck = await SmsRateDeck.create({\n      name: duplicateName,\n      description: originalDeck.description,\n      currency: originalDeck.currency,\n      isActive: originalDeck.isActive,\n      isDefault: false, // Duplicates are never default\n      rateCount: originalDeck.rateCount,\n      assignedUsers: 0, // Start with no assigned users\n      createdBy: user.name || user.email,\n    });\n\n    // Transform the response to match frontend structure\n    const transformedDeck = {\n      id: (duplicatedDeck._id as any).toString(),\n      name: duplicatedDeck.name,\n      description: duplicatedDeck.description,\n      currency: duplicatedDeck.currency,\n      isActive: duplicatedDeck.isActive,\n      isDefault: duplicatedDeck.isDefault,\n      rateCount: duplicatedDeck.rateCount,\n      assignedUsers: duplicatedDeck.assignedUsers,\n      createdBy: duplicatedDeck.createdBy,\n      createdAt: duplicatedDeck.createdAt.toISOString(),\n      updatedAt: duplicatedDeck.updatedAt.toISOString(),\n    };\n    \n    return NextResponse.json(transformedDeck, { status: 201 });\n  } catch (error) {\n    console.error('Error duplicating SMS rate deck:', error);\n    return NextResponse.json(\n      { error: 'Failed to duplicate SMS rate deck' },\n      { status: 500 }\n    );\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/rates/sms/decks/[id]/rates/[rateId]/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":104,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":104,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3031,3034],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3031,3034],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getCurrentUser } from '@/lib/authService';\nimport { connectToDatabase } from '@/lib/db';\nimport SmsRate from '@/models/SmsRate';\nimport SmsRateDeck from '@/models/SmsRateDeck';\nimport mongoose from 'mongoose';\n\nexport async function PUT(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string; rateId: string }> }\n) {\n  try {\n    // Verify the user is authenticated and is an admin\n    const user = await getCurrentUser();\n    \n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n    \n    if (user.role !== 'admin') {\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n    }\n\n    const { id: rateDeckId, rateId } = await params;\n    const body = await request.json();\n    \n    const { prefix, country, description, rate, effectiveDate } = body;\n    \n    if (!prefix || !country || rate === undefined || !effectiveDate) {\n      return NextResponse.json(\n        { error: 'Prefix, country, rate, and effective date are required' },\n        { status: 400 }\n      );\n    }\n\n    // Validate rate is a positive number\n    if (typeof rate !== 'number' || rate < 0) {\n      return NextResponse.json(\n        { error: 'Rate must be a positive number' },\n        { status: 400 }\n      );\n    }\n\n    // Connect to the database\n    await connectToDatabase();\n\n    // Find the existing rate\n    const existingRate = await SmsRate.findOne({\n      _id: new mongoose.Types.ObjectId(rateId),\n      rateDeckId: new mongoose.Types.ObjectId(rateDeckId),\n    });\n\n    if (!existingRate) {\n      return NextResponse.json(\n        { error: 'SMS rate not found' },\n        { status: 404 }\n      );\n    }\n\n    // Check if prefix is being changed and if it conflicts with another rate\n    if (prefix.trim() !== existingRate.prefix) {\n      const prefixConflict = await SmsRate.findOne({\n        rateDeckId: new mongoose.Types.ObjectId(rateDeckId),\n        prefix: prefix.trim(),\n        _id: { $ne: new mongoose.Types.ObjectId(rateId) },\n      });\n\n      if (prefixConflict) {\n        return NextResponse.json(\n          { error: 'A rate with this prefix already exists in this rate deck' },\n          { status: 400 }\n        );\n      }\n    }\n\n    // Update the rate\n    const updatedRate = await SmsRate.findOneAndUpdate(\n      {\n        _id: new mongoose.Types.ObjectId(rateId),\n        rateDeckId: new mongoose.Types.ObjectId(rateDeckId),\n      },\n      {\n        $set: {\n          prefix: prefix.trim(),\n          country: country.trim(),\n          description: description?.trim() || '',\n          rate: rate,\n          effectiveDate: new Date(effectiveDate),\n          updatedAt: new Date(),\n        },\n      },\n      { new: true }\n    );\n\n    if (!updatedRate) {\n      return NextResponse.json(\n        { error: 'Failed to update SMS rate' },\n        { status: 500 }\n      );\n    }\n\n    // Transform the response to match frontend structure\n    const transformedRate = {\n      id: (updatedRate._id as any).toString(),\n      prefix: updatedRate.prefix,\n      country: updatedRate.country,\n      description: updatedRate.description,\n      rate: updatedRate.rate,\n      effectiveDate: updatedRate.effectiveDate.toISOString().split('T')[0],\n      createdAt: updatedRate.createdAt.toISOString(),\n      updatedAt: updatedRate.updatedAt.toISOString(),\n    };\n    \n    return NextResponse.json(transformedRate);\n  } catch (error) {\n    console.error('Error updating SMS rate:', error);\n    return NextResponse.json(\n      { error: 'Failed to update SMS rate' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string; rateId: string }> }\n) {\n  try {\n    // Verify the user is authenticated and is an admin\n    const user = await getCurrentUser();\n    \n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n    \n    if (user.role !== 'admin') {\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n    }\n\n    const { id: rateDeckId, rateId } = await params;\n    \n    // Connect to the database\n    await connectToDatabase();\n\n    // Find and delete the rate\n    const deletedRate = await SmsRate.findOneAndDelete({\n      _id: new mongoose.Types.ObjectId(rateId),\n      rateDeckId: new mongoose.Types.ObjectId(rateDeckId),\n    });\n\n    if (!deletedRate) {\n      return NextResponse.json(\n        { error: 'SMS rate not found' },\n        { status: 404 }\n      );\n    }\n\n    // Update the rate deck's rate count\n    await SmsRateDeck.findByIdAndUpdate(\n      rateDeckId,\n      { \n        $inc: { rateCount: -1 },\n        $set: { updatedAt: new Date() }\n      }\n    );\n    \n    return NextResponse.json({ \n      success: true,\n      message: 'SMS rate deleted successfully' \n    });\n  } catch (error) {\n    console.error('Error deleting SMS rate:', error);\n    return NextResponse.json(\n      { error: 'Failed to delete SMS rate' },\n      { status: 500 }\n    );\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/rates/sms/decks/[id]/rates/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":39,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1385,1388],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1385,1388],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":174,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":174,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5120,5123],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5120,5123],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getCurrentUser } from '@/lib/authService';\nimport { connectToDatabase } from '@/lib/db';\nimport SmsRate from '@/models/SmsRate';\nimport SmsRateDeck from '@/models/SmsRateDeck';\nimport mongoose from 'mongoose';\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    // Verify the user is authenticated and is an admin\n    const user = await getCurrentUser();\n    \n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n    \n    if (user.role !== 'admin') {\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n    }\n\n    const { id: rateDeckId } = await params;\n    const { searchParams } = new URL(request.url);\n    \n    // Parse query parameters\n    const offset = parseInt(searchParams.get('offset') || '0');\n    const limit = parseInt(searchParams.get('limit') || '50');\n    const prefix = searchParams.get('prefix') || '';\n    const country = searchParams.get('country') || '';\n    const minRate = searchParams.get('minRate') ? parseFloat(searchParams.get('minRate')!) : null;\n    const maxRate = searchParams.get('maxRate') ? parseFloat(searchParams.get('maxRate')!) : null;\n    \n    // Connect to the database\n    await connectToDatabase();\n\n    // Build filter query\n    const filter: any = { rateDeckId: new mongoose.Types.ObjectId(rateDeckId) };\n    \n    if (prefix) {\n      filter.prefix = { $regex: prefix, $options: 'i' };\n    }\n    \n    if (country) {\n      filter.country = { $regex: country, $options: 'i' };\n    }\n    \n    if (minRate !== null || maxRate !== null) {\n      filter.rate = {};\n      if (minRate !== null) filter.rate.$gte = minRate;\n      if (maxRate !== null) filter.rate.$lte = maxRate;\n    }\n\n    // Get total count for pagination\n    const total = await SmsRate.countDocuments(filter);\n\n    // Get rates with pagination\n    const rates = await SmsRate\n      .find(filter)\n      .sort({ prefix: 1, country: 1 })\n      .skip(offset)\n      .limit(limit)\n      .lean();\n\n    // Transform the response to match frontend structure\n    const transformedRates = rates.map(rate => ({\n      id: rate._id.toString(),\n      prefix: rate.prefix,\n      country: rate.country,\n      description: rate.description,\n      rate: rate.rate,\n      effectiveDate: rate.effectiveDate.toISOString().split('T')[0],\n      createdAt: rate.createdAt.toISOString(),\n      updatedAt: rate.updatedAt.toISOString(),\n    }));\n    \n    return NextResponse.json({\n      rates: transformedRates,\n      total,\n    });\n  } catch (error) {\n    console.error('Error fetching SMS rates:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch SMS rates' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    // Verify the user is authenticated and is an admin\n    const user = await getCurrentUser();\n    \n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n    \n    if (user.role !== 'admin') {\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n    }\n\n    const { id: rateDeckId } = await params;\n    const body = await request.json();\n    \n    const { prefix, country, description, rate, effectiveDate } = body;\n    \n    if (!prefix || !country || rate === undefined || !effectiveDate) {\n      return NextResponse.json(\n        { error: 'Prefix, country, rate, and effective date are required' },\n        { status: 400 }\n      );\n    }\n\n    // Validate rate is a positive number\n    if (typeof rate !== 'number' || rate < 0) {\n      return NextResponse.json(\n        { error: 'Rate must be a positive number' },\n        { status: 400 }\n      );\n    }\n\n    // Connect to the database\n    await connectToDatabase();\n\n    // Check if a rate with the same prefix already exists for this rate deck\n    const existingRate = await SmsRate.findOne({\n      rateDeckId: new mongoose.Types.ObjectId(rateDeckId),\n      prefix: prefix.trim(),\n    });\n\n    if (existingRate) {\n      return NextResponse.json(\n        { error: 'A rate with this prefix already exists in this rate deck' },\n        { status: 400 }\n      );\n    }\n\n    // Create the new rate\n    const newRate = new SmsRate({\n      rateDeckId: new mongoose.Types.ObjectId(rateDeckId),\n      prefix: prefix.trim(),\n      country: country.trim(),\n      description: description?.trim() || '',\n      rate: rate,\n      effectiveDate: new Date(effectiveDate),\n      createdBy: user.email,\n    });\n\n    const savedRate = await newRate.save();\n\n    if (!savedRate) {\n      return NextResponse.json(\n        { error: 'Failed to create SMS rate' },\n        { status: 500 }\n      );\n    }\n\n    // Update the rate deck's rate count\n    await SmsRateDeck.findByIdAndUpdate(\n      rateDeckId,\n      { \n        $inc: { rateCount: 1 },\n        $set: { updatedAt: new Date() }\n      }\n    );\n\n    // Transform the response to match frontend structure\n    const transformedRate = {\n      id: (savedRate._id as any).toString(),\n      prefix: savedRate.prefix,\n      country: savedRate.country,\n      description: savedRate.description,\n      rate: savedRate.rate,\n      effectiveDate: savedRate.effectiveDate.toISOString().split('T')[0],\n      createdAt: savedRate.createdAt.toISOString(),\n      updatedAt: savedRate.updatedAt.toISOString(),\n    };\n    \n    return NextResponse.json(transformedRate, { status: 201 });\n  } catch (error) {\n    console.error('Error creating SMS rate:', error);\n    return NextResponse.json(\n      { error: 'Failed to create SMS rate' },\n      { status: 500 }\n    );\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/rates/sms/decks/[id]/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":38,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1070,1073],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1070,1073],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":137,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":137,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3847,3850],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3847,3850],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getCurrentUser } from '@/lib/authService';\nimport SmsRateDeck from '@/models/SmsRateDeck';\nimport { connectToDatabase } from '@/lib/db';\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    // Verify the user is authenticated and is an admin\n    const user = await getCurrentUser();\n    \n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n    \n    if (user.role !== 'admin') {\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n    }\n\n    const { id } = await params;\n    \n    // Connect to the database\n    await connectToDatabase();\n\n    // Find the rate deck\n    const rateDeck = await SmsRateDeck.findById(id);\n    if (!rateDeck) {\n      return NextResponse.json(\n        { error: 'SMS rate deck not found' },\n        { status: 404 }\n      );\n    }\n\n    // Transform the response to match frontend structure\n    const transformedDeck = {\n      id: (rateDeck._id as any).toString(),\n      name: rateDeck.name,\n      description: rateDeck.description,\n      currency: rateDeck.currency,\n      isActive: rateDeck.isActive,\n      isDefault: rateDeck.isDefault,\n      rateCount: rateDeck.rateCount,\n      assignedUsers: rateDeck.assignedUsers,\n      createdBy: rateDeck.createdBy,\n      createdAt: rateDeck.createdAt.toISOString(),\n      updatedAt: rateDeck.updatedAt.toISOString(),\n    };\n    \n    return NextResponse.json(transformedDeck);\n  } catch (error) {\n    console.error('Error fetching SMS rate deck:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch SMS rate deck' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function PUT(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    // Verify the user is authenticated and is an admin\n    const user = await getCurrentUser();\n    \n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n    \n    if (user.role !== 'admin') {\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n    }\n\n    const { id } = await params;\n    const body = await request.json();\n    \n    const { name, description, currency, isActive, isDefault } = body;\n    \n    if (!name || !currency) {\n      return NextResponse.json(\n        { error: 'Name and currency are required' },\n        { status: 400 }\n      );\n    }\n\n    // Connect to the database\n    await connectToDatabase();\n\n    // Find the rate deck\n    const existingDeck = await SmsRateDeck.findById(id);\n    if (!existingDeck) {\n      return NextResponse.json(\n        { error: 'SMS rate deck not found' },\n        { status: 404 }\n      );\n    }\n\n    // Check if name is being changed and if it conflicts with another deck\n    if (name !== existingDeck.name) {\n      const nameConflict = await SmsRateDeck.findOne({ \n        name, \n        _id: { $ne: id } \n      });\n      if (nameConflict) {\n        return NextResponse.json(\n          { error: 'A rate deck with this name already exists' },\n          { status: 400 }\n        );\n      }\n    }\n\n    // Update the rate deck\n    const updatedDeck = await SmsRateDeck.findByIdAndUpdate(\n      id,\n      {\n        name,\n        description: description || '',\n        currency: currency.toUpperCase(),\n        isActive: isActive !== undefined ? isActive : existingDeck.isActive,\n        isDefault: isDefault !== undefined ? isDefault : existingDeck.isDefault,\n      },\n      { new: true, runValidators: true }\n    );\n\n    if (!updatedDeck) {\n      return NextResponse.json(\n        { error: 'Failed to update rate deck' },\n        { status: 500 }\n      );\n    }\n\n    // Transform the response to match frontend structure\n    const transformedDeck = {\n      id: (updatedDeck._id as any).toString(),\n      name: updatedDeck.name,\n      description: updatedDeck.description,\n      currency: updatedDeck.currency,\n      isActive: updatedDeck.isActive,\n      isDefault: updatedDeck.isDefault,\n      rateCount: updatedDeck.rateCount,\n      assignedUsers: updatedDeck.assignedUsers,\n      createdBy: updatedDeck.createdBy,\n      createdAt: updatedDeck.createdAt.toISOString(),\n      updatedAt: updatedDeck.updatedAt.toISOString(),\n    };\n    \n    return NextResponse.json(transformedDeck);\n  } catch (error) {\n    console.error('Error updating SMS rate deck:', error);\n    return NextResponse.json(\n      { error: 'Failed to update SMS rate deck' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    // Verify the user is authenticated and is an admin\n    const user = await getCurrentUser();\n    \n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n    \n    if (user.role !== 'admin') {\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n    }\n\n    const { id } = await params;\n    \n    // Connect to the database\n    await connectToDatabase();\n\n    // Find the rate deck\n    const existingDeck = await SmsRateDeck.findById(id);\n    if (!existingDeck) {\n      return NextResponse.json(\n        { error: 'SMS rate deck not found' },\n        { status: 404 }\n      );\n    }\n\n    // Check if it's the default deck\n    if (existingDeck.isDefault) {\n      return NextResponse.json(\n        { error: 'Cannot delete the default rate deck' },\n        { status: 400 }\n      );\n    }\n\n    // Check if it has assigned users (optional safety check)\n    if (existingDeck.assignedUsers > 0) {\n      return NextResponse.json(\n        { error: 'Cannot delete rate deck with assigned users. Please reassign users first.' },\n        { status: 400 }\n      );\n    }\n\n    // Remove the rate deck\n    await SmsRateDeck.findByIdAndDelete(id);\n    \n    return NextResponse.json({ \n      success: true,\n      message: 'SMS rate deck deleted successfully' \n    });\n  } catch (error) {\n    console.error('Error deleting SMS rate deck:', error);\n    return NextResponse.json(\n      { error: 'Failed to delete SMS rate deck' },\n      { status: 500 }\n    );\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/rates/sms/decks/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[957,960],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[957,960],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":32,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1079,1082],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1079,1082],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":68,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2109,2112],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2109,2112],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":175,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":175,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5119,5122],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5119,5122],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getCurrentUser } from '@/lib/authService';\nimport SmsRateDeck from '@/models/SmsRateDeck';\nimport RateDeckAssignment from '@/models/RateDeckAssignment';\nimport { connectToDatabase } from '@/lib/db';\nimport mongoose from 'mongoose';\n\nexport async function GET(request: NextRequest) {\n  try {\n    // Verify the user is authenticated\n    const user = await getCurrentUser();\n    \n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { searchParams } = new URL(request.url);\n    const offset = parseInt(searchParams.get('offset') || '0');\n    const limit = parseInt(searchParams.get('limit') || '50');\n    const name = searchParams.get('name') || '';\n    const isActive = searchParams.get('isActive');\n    const isDefault = searchParams.get('isDefault');\n\n    // Connect to the database\n    await connectToDatabase();\n\n    let rateDecks: any[] = [];\n    let total = 0;\n\n    if (user.role === 'admin') {\n      // Admin can see all rate decks\n      const query: any = {};\n      \n      if (name) {\n        query.name = { $regex: name, $options: 'i' };\n      }\n      \n      if (isActive && isActive !== 'all') {\n        query.isActive = isActive === 'true';\n      }\n      \n      if (isDefault && isDefault !== 'all') {\n        query.isDefault = isDefault === 'true';\n      }\n\n      // Get total count for pagination\n      total = await SmsRateDeck.countDocuments(query);\n\n      // Fetch rate decks with pagination\n      rateDecks = await SmsRateDeck.find(query)\n        .sort({ createdAt: -1 })\n        .skip(offset)\n        .limit(limit)\n        .lean();\n    } else {\n      // Regular users can only see their assigned rate decks\n      const assignments = await RateDeckAssignment\n        .find({\n          userId: new mongoose.Types.ObjectId(user.id),\n          rateDeckType: 'sms',\n          isActive: true,\n        })\n        .lean();\n\n      const assignedRateDeckIds = assignments.map(assignment => assignment.rateDeckId);\n\n      if (assignedRateDeckIds.length > 0) {\n        const query: any = {\n          _id: { $in: assignedRateDeckIds }\n        };\n        \n        if (name) {\n          query.name = { $regex: name, $options: 'i' };\n        }\n        \n        if (isActive && isActive !== 'all') {\n          query.isActive = isActive === 'true';\n        }\n        \n        if (isDefault && isDefault !== 'all') {\n          query.isDefault = isDefault === 'true';\n        }\n\n        // Get total count for pagination\n        total = await SmsRateDeck.countDocuments(query);\n\n        // Fetch rate decks with pagination\n        rateDecks = await SmsRateDeck.find(query)\n          .sort({ createdAt: -1 })\n          .skip(offset)\n          .limit(limit)\n          .lean();\n      }\n    }\n\n    // Transform the data to match frontend structure\n    const transformedRateDecks = rateDecks.map(deck => ({\n      id: deck._id.toString(),\n      name: deck.name,\n      description: deck.description,\n      currency: deck.currency,\n      isActive: deck.isActive,\n      isDefault: deck.isDefault,\n      rateCount: deck.rateCount,\n      assignedUsers: deck.assignedUsers,\n      createdBy: deck.createdBy,\n      createdAt: deck.createdAt.toISOString(),\n      updatedAt: deck.updatedAt.toISOString(),\n    }));\n\n    return NextResponse.json({\n      rateDecks: transformedRateDecks,\n      total\n    });\n  } catch (error) {\n    console.error('Error fetching SMS rate decks:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch SMS rate decks' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    // Verify the user is authenticated and is an admin\n    const user = await getCurrentUser();\n    \n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n    \n    if (user.role !== 'admin') {\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n    }\n\n    const body = await request.json();\n    \n    // Validate the request body\n    const { name, description, currency, isActive, isDefault } = body;\n    \n    if (!name || !currency) {\n      return NextResponse.json(\n        { error: 'Name and currency are required' },\n        { status: 400 }\n      );\n    }\n\n    // Connect to the database\n    await connectToDatabase();\n\n    // Check if a rate deck with this name already exists\n    const existingDeck = await SmsRateDeck.findOne({ name });\n    if (existingDeck) {\n      return NextResponse.json(\n        { error: 'A rate deck with this name already exists' },\n        { status: 400 }\n      );\n    }\n\n    // Create new SMS rate deck\n    const newRateDeck = await SmsRateDeck.create({\n      name,\n      description: description || '',\n      currency: currency.toUpperCase(),\n      isActive: isActive !== undefined ? isActive : true,\n      isDefault: isDefault || false,\n      rateCount: 0,\n      assignedUsers: 0,\n      createdBy: user.name || user.email,\n    });\n\n    // Transform the response to match frontend structure\n    const transformedRateDeck = {\n      id: (newRateDeck._id as any).toString(),\n      name: newRateDeck.name,\n      description: newRateDeck.description,\n      currency: newRateDeck.currency,\n      isActive: newRateDeck.isActive,\n      isDefault: newRateDeck.isDefault,\n      rateCount: newRateDeck.rateCount,\n      assignedUsers: newRateDeck.assignedUsers,\n      createdBy: newRateDeck.createdBy,\n      createdAt: newRateDeck.createdAt.toISOString(),\n      updatedAt: newRateDeck.updatedAt.toISOString(),\n    };\n    \n    return NextResponse.json(transformedRateDeck, { status: 201 });\n  } catch (error) {\n    console.error('Error creating SMS rate deck:', error);\n    return NextResponse.json(\n      { error: 'Failed to create SMS rate deck' },\n      { status: 500 }\n    );\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/rates/sms/user-rates/route.ts","messages":[{"ruleId":"prefer-const","severity":2,"message":"'rateDeckFilter' is never reassigned. Use 'const' instead.","line":58,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":58,"endColumn":28,"fix":{"range":[1902,1973],"text":"const rateDeckFilter: any = { rateDeckId: { $in: assignedRateDeckIds } };"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":58,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1922,1925],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1922,1925],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":65,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2190,2193],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2190,2193],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":113,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":113,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3512,3515],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3512,3515],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getCurrentUser } from '@/lib/authService';\nimport { connectToDatabase } from '@/lib/db';\nimport RateDeckAssignment from '@/models/RateDeckAssignment';\nimport SmsRateDeck from '@/models/SmsRateDeck';\nimport SmsRate from '@/models/SmsRate';\nimport mongoose from 'mongoose';\n\n// GET - Get SMS rates for the current user from their assigned rate decks\nexport async function GET(request: NextRequest) {\n  try {\n    // Verify the user is authenticated\n    const user = await getCurrentUser();\n    \n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { searchParams } = new URL(request.url);\n    const offset = parseInt(searchParams.get('offset') || '0');\n    const limit = parseInt(searchParams.get('limit') || '50');\n    const prefix = searchParams.get('prefix') || '';\n    const country = searchParams.get('country') || '';\n    const type = searchParams.get('type');\n    const rateDeckId = searchParams.get('rateDeckId');\n    const minRate = searchParams.get('minRate');\n    const maxRate = searchParams.get('maxRate');\n\n    // Connect to the database\n    await connectToDatabase();\n\n    // Get user's assigned SMS rate decks\n    const assignments = await RateDeckAssignment\n      .find({\n        userId: new mongoose.Types.ObjectId(user.id),\n        rateDeckType: 'sms',\n        isActive: true,\n      })\n      .lean();\n\n    if (assignments.length === 0) {\n      return NextResponse.json({\n        rates: [],\n        total: 0,\n        rateDecks: [],\n      });\n    }\n\n    const assignedRateDeckIds = assignments.map(assignment => assignment.rateDeckId);\n\n    // Get rate deck information for the filter dropdown\n    const rateDecks = await SmsRateDeck\n      .find({ _id: { $in: assignedRateDeckIds } })\n      .select('name currency')\n      .lean();\n\n    // Build query for rates\n    let rateDeckFilter: any = { rateDeckId: { $in: assignedRateDeckIds } };\n    \n    // If specific rate deck is requested, filter to that one\n    if (rateDeckId && rateDeckId !== 'all') {\n      rateDeckFilter.rateDeckId = new mongoose.Types.ObjectId(rateDeckId);\n    }\n\n    const rateQuery: any = rateDeckFilter;\n    \n    if (prefix) {\n      rateQuery.prefix = { $regex: prefix, $options: 'i' };\n    }\n    \n    if (country) {\n      rateQuery.country = { $regex: country, $options: 'i' };\n    }\n    \n    if (type && type !== 'all') {\n      rateQuery.type = type;\n    }\n    \n    if (minRate) {\n      rateQuery.rate = { ...rateQuery.rate, $gte: parseFloat(minRate) };\n    }\n    \n    if (maxRate) {\n      rateQuery.rate = { ...rateQuery.rate, $lte: parseFloat(maxRate) };\n    }\n\n    // Get total count for pagination\n    const total = await SmsRate.countDocuments(rateQuery);\n\n    // Fetch rates with pagination\n    const rates = await SmsRate\n      .find(rateQuery)\n      .sort({ prefix: 1, country: 1 })\n      .skip(offset)\n      .limit(limit)\n      .lean();\n\n    // Create a map of rate deck info for quick lookup\n    const rateDeckMap = new Map();\n    for (const deck of rateDecks) {\n      rateDeckMap.set(deck._id.toString(), deck);\n    }\n\n    // Transform the rates to include rate deck information\n    const transformedRates = rates.map(rate => {\n      const rateDeck = rateDeckMap.get(rate.rateDeckId.toString());\n      return {\n        id: rate._id.toString(),\n        prefix: rate.prefix,\n        country: rate.country,\n        description: rate.description,\n        rate: rate.rate,\n        type: (rate as any).type,\n        effectiveDate: rate.effectiveDate?.toISOString() || null,\n        rateDeckId: rate.rateDeckId.toString(),\n        rateDeckName: rateDeck?.name || 'Unknown Rate Deck',\n        currency: rateDeck?.currency || 'USD',\n      };\n    });\n\n    // Transform rate decks for the response\n    const transformedRateDecks = rateDecks.map(deck => ({\n      id: deck._id.toString(),\n      name: deck.name,\n      currency: deck.currency,\n    }));\n\n    return NextResponse.json({\n      rates: transformedRates,\n      total,\n      rateDecks: transformedRateDecks,\n    });\n  } catch (error) {\n    console.error('Error fetching user SMS rates:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch your SMS rates' },\n      { status: 500 }\n    );\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/settings/branding/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/settings/branding/upload/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/settings/low-balance/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/settings/scheduler/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/settings/sippy-api/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/settings/smtp/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/settings/smtp/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/settings/smtp/test/route.ts","messages":[{"ruleId":"prefer-const","severity":2,"message":"'accountId' is never reassigned. Use 'const' instead.","line":19,"column":11,"nodeType":"Identifier","messageId":"useConst","endLine":19,"endColumn":20},{"ruleId":"prefer-const","severity":2,"message":"'testEmail' is never reassigned. Use 'const' instead.","line":19,"column":22,"nodeType":"Identifier","messageId":"useConst","endLine":19,"endColumn":31}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getCurrentUser } from '@/lib/authService';\nimport connectToDatabase from '@/lib/db';\nimport SmtpSettings from '@/models/SmtpSettings';\nimport { SmtpTestResult } from '@/types/smtp';\nimport nodemailer from 'nodemailer';\nimport juice from 'juice';\nimport mongoose from 'mongoose';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const currentUser = await getCurrentUser();\n    \n    if (!currentUser || currentUser.role !== 'admin') {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const body = await request.json();\n    let { accountId, testEmail, host, port, secure, username, password, fromEmail, fromName } = body;\n\n    await connectToDatabase();\n\n    let smtpAccount = null;\n\n    // If accountId is provided, use that specific account\n    if (accountId) {\n      if (!mongoose.Types.ObjectId.isValid(accountId)) {\n        return NextResponse.json({\n          success: false,\n          message: 'SMTP test failed',\n          error: 'Invalid account ID'\n        });\n      }\n\n      smtpAccount = await SmtpSettings.findById(accountId).select('+password');\n      if (!smtpAccount) {\n        return NextResponse.json({\n          success: false,\n          message: 'SMTP test failed',\n          error: 'SMTP account not found'\n        });\n      }\n\n      // Use account settings\n      host = smtpAccount.host;\n      port = smtpAccount.port;\n      secure = smtpAccount.secure;\n      username = smtpAccount.username;\n      password = smtpAccount.password;\n      fromEmail = smtpAccount.fromEmail;\n      fromName = smtpAccount.fromName;\n    } else {\n      // Legacy mode: if no accountId provided, try to get stored settings for backward compatibility\n      if (!password && host) {\n        try {\n          const existingSettings = await SmtpSettings.findOne({ host }).select('+password');\n          if (existingSettings) {\n            password = existingSettings.password;\n            username = username || existingSettings.username;\n            fromEmail = fromEmail || existingSettings.fromEmail;\n            fromName = fromName || existingSettings.fromName;\n            port = port || existingSettings.port;\n            secure = secure !== undefined ? secure : existingSettings.secure;\n          }\n        } catch (dbError) {\n          console.error('Error fetching stored SMTP settings:', dbError);\n        }\n      }\n    }\n\n    // Validate required fields\n    if (!host || !port || !fromEmail || !testEmail) {\n      const missingFields = [];\n      if (!host) missingFields.push('host');\n      if (!port) missingFields.push('port');\n      if (!fromEmail) missingFields.push('fromEmail');\n      if (!testEmail) missingFields.push('testEmail');\n      \n      return NextResponse.json({\n        success: false,\n        message: 'SMTP test failed',\n        error: `Missing required fields: ${missingFields.join(', ')}`\n      });\n    }\n\n    // Validate email formats\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(fromEmail)) {\n      return NextResponse.json({\n        success: false,\n        message: 'SMTP test failed',\n        error: `From email format is invalid: ${fromEmail}`\n      });\n    }\n\n    if (!emailRegex.test(testEmail)) {\n      return NextResponse.json({\n        success: false,\n        message: 'SMTP test failed',\n        error: `Test email format is invalid: ${testEmail}`\n      });\n    }\n\n    // Validate port range\n    const portNum = parseInt(port);\n    if (isNaN(portNum) || portNum < 1 || portNum > 65535) {\n      return NextResponse.json({\n        success: false,\n        message: 'SMTP test failed',\n        error: `Port must be a number between 1 and 65535. Received: ${port}`\n      });\n    }\n\n    // Validate known providers that require authentication\n    const knownProviders: Record<string, { defaultPort: number; requiresAuth: boolean }> = {\n      'smtp.gmail.com': { defaultPort: 587, requiresAuth: true },\n      'smtp-mail.outlook.com': { defaultPort: 587, requiresAuth: true },\n      'smtp.office365.com': { defaultPort: 587, requiresAuth: true },\n      'smtp.yahoo.com': { defaultPort: 587, requiresAuth: true },\n      'smtp.mail.yahoo.com': { defaultPort: 587, requiresAuth: true },\n      'smtp.sendgrid.net': { defaultPort: 587, requiresAuth: true },\n      'smtp.mailgun.org': { defaultPort: 587, requiresAuth: true }\n    };\n\n    const provider = knownProviders[host.toLowerCase()];\n    if (provider && provider.requiresAuth && (!username || !password)) {\n      return NextResponse.json({\n        success: false,\n        message: 'SMTP test failed',\n        error: `${host} requires authentication. Please provide username and password.`\n      });\n    }\n\n    try {\n      // Test actual SMTP connection and send email\n      await sendTestEmail(host, portNum, secure, username, password, fromEmail, fromName, testEmail, smtpAccount?.name);\n      \n      const result: SmtpTestResult = {\n        success: true,\n        message: `✅ SMTP test successful! Test email sent from ${fromEmail} to ${testEmail}${smtpAccount ? ` using ${smtpAccount.name} (${smtpAccount.category})` : ''}`\n      };\n      return NextResponse.json(result);\n      \n    } catch (connectionError) {\n      console.error('SMTP connection test failed:', connectionError);\n      const result: SmtpTestResult = {\n        success: false,\n        message: 'SMTP connection test failed',\n        error: connectionError instanceof Error ? connectionError.message : 'Connection failed'\n      };\n      return NextResponse.json(result);\n    }\n  } catch (error) {\n    console.error('Error testing SMTP:', error);\n    return NextResponse.json({ \n      success: false,\n      message: 'SMTP test failed',\n      error: `Internal server error: ${error instanceof Error ? error.message : 'Unknown error'}`\n    }, { status: 500 });\n  }\n}\n\n// Send actual test email using nodemailer\nasync function sendTestEmail(\n  host: string, \n  port: number, \n  secure: boolean, \n  username?: string, \n  password?: string,\n  fromEmail?: string,\n  fromName?: string,\n  testEmail?: string,\n  accountName?: string\n): Promise<{ messageId: string }> {\n  \n  // Create nodemailer transporter\n  const transporter = nodemailer.createTransport({\n    host: host,\n    port: port,\n    secure: secure,\n    auth: username && password ? {\n      user: username,\n      pass: password,\n    } : undefined,\n    connectionTimeout: 10000,\n    socketTimeout: 10000,\n    tls: {\n      rejectUnauthorized: false\n    }\n  });\n\n  // Verify connection\n  await transporter.verify();\n\n  // Send test email\n  const mailOptions = {\n    from: fromName ? `\"${fromName}\" <${fromEmail}>` : fromEmail,\n    to: testEmail,\n    subject: `SMTP Configuration Test - ${accountName || 'Sippy Dashboard'}`,\n    html: createTestEmailTemplate(host, port, secure, fromEmail || '', testEmail || ''),\n    text: `\nSMTP Test Successful!\n\nThis is a test email from your Sippy Dashboard SMTP configuration.\n\nConfiguration Details:\n- Account: ${accountName || 'Default SMTP'}\n- SMTP Host: ${host}\n- Port: ${port}  \n- Security: ${secure ? 'SSL/TLS Enabled' : 'No SSL/TLS'}\n- From: ${fromEmail}\n- Test sent to: ${testEmail}\n- Timestamp: ${new Date().toISOString()}\n\nIf you received this email, your SMTP configuration is working correctly!\n    `\n  };\n\n  const info = await transporter.sendMail(mailOptions);\n  return { messageId: info.messageId };\n}\n\n// Professional SMTP test email template with CSS inlining using juice\nfunction createTestEmailTemplate(\n  host: string,\n  port: number,\n  secure: boolean,\n  fromEmail: string,\n  testEmail: string\n): string {\n  const rawHtml = `\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <title>SMTP Test - Sippy Dashboard</title>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <style>\n    /* ---------- Mobile tweaks ---------- */\n    @media (max-width:600px) {\n      .stack-column,\n      .stack-column td {\n        display: block !important;\n        width: 100% !important;\n      }\n      .px-sm-0 {\n        padding-left: 0 !important;\n        padding-right: 0 !important;\n      }\n    }\n  </style>\n</head>\n\n<body\n  style=\"margin:0;padding:0;-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%;background:#f8f9fa;font-family:Arial,Helvetica,sans-serif\">\n  <!-- Hidden pre-header -->\n  <div style=\"display:none;font-size:1px;line-height:1px;max-height:0;max-width:0;opacity:0;overflow:hidden;\">\n    SMTP configuration test successful for Sippy Dashboard\n  </div>\n\n  <!-- Outer wrapper -->\n  <table role=\"presentation\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\"\n    style=\"border-collapse:collapse;mso-table-lspace:0;mso-table-rspace:0;\">\n    <tr>\n      <td align=\"center\" style=\"padding:16px 8px;\">\n        <!-- Card -->\n        <table role=\"presentation\" cellpadding=\"0\" cellspacing=\"0\" width=\"600\"\n          style=\"width:100%;max-width:600px;border-collapse:collapse;background:#ffffff;border:1px solid #e2e8f0;border-radius:8px;\">\n          <!-- Header -->\n          <tr>\n            <td align=\"center\" style=\"padding:16px 12px;\">\n              <span style=\"font-size:20px;font-weight:700;color:#2d3748;\">Sippy Communications</span>\n            </td>\n          </tr>\n\n          <!-- Success banner -->\n          <tr>\n            <td align=\"center\" style=\"padding:0 12px;\">\n              <table role=\"presentation\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\"\n                style=\"border-collapse:collapse;background:#10b981;border-radius:8px;\">\n                <tr>\n                  <td align=\"center\" style=\"padding:16px;\">\n                    <h1 style=\"margin:0;color:#ffffff;font-size:18px;font-weight:700;line-height:1.3;\">🎉 SMTP Test Successful!</h1>\n                    <p style=\"margin:4px 0 0;color:#ffffff;opacity:.9;font-size:13px;\">Your email configuration is working correctly</p>\n                  </td>\n                </tr>\n              </table>\n            </td>\n          </tr>\n\n          <!-- Body -->\n          <tr>\n            <td style=\"padding:16px 12px;\">\n              <h2 style=\"margin:0 0 12px 0;font-size:16px;color:#2d3748;\">Congratulations!</h2>\n              <p style=\"margin:0 0 16px 0;font-size:14px;line-height:1.4;color:#4a5568;\">This test email confirms that your SMTP configuration is working correctly. Your Sippy Dashboard can now send email notifications successfully.</p>\n\n              <!-- Configuration details -->\n              <table role=\"presentation\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\"\n                style=\"border-collapse:collapse;background:#f7fafc;border-radius:6px;margin-bottom:16px;\">\n                <tr>\n                  <td style=\"padding:12px;\">\n                    <h3 style=\"margin:0 0 12px 0;font-size:14px;font-weight:600;color:#2d3748;\">Configuration Details:</h3>\n                    <table role=\"presentation\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\"\n                      style=\"border-collapse:collapse;\">\n                      <tr>\n                        <td width=\"50%\" style=\"padding:4px 0;font-size:13px;\">\n                          <strong style=\"color:#2d3748;\">SMTP Host:</strong> <span style=\"color:#4a5568;\">${host}</span>\n                        </td>\n                        <td width=\"50%\" style=\"padding:4px 0;font-size:13px;\">\n                          <strong style=\"color:#2d3748;\">Port:</strong> <span style=\"color:#4a5568;\">${port}</span>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td width=\"50%\" style=\"padding:4px 0;font-size:13px;\">\n                          <strong style=\"color:#2d3748;\">Security:</strong> <span style=\"color:#4a5568;\">${secure ? 'SSL/TLS Enabled' : 'No SSL/TLS'}</span>\n                        </td>\n                        <td width=\"50%\" style=\"padding:4px 0;font-size:13px;\">\n                          <strong style=\"color:#2d3748;\">From:</strong> <span style=\"color:#4a5568;\">${fromEmail}</span>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td width=\"50%\" style=\"padding:4px 0;font-size:13px;\">\n                          <strong style=\"color:#2d3748;\">Test sent to:</strong> <span style=\"color:#4a5568;\">${testEmail}</span>\n                        </td>\n                        <td width=\"50%\" style=\"padding:4px 0;font-size:13px;\">\n                          <strong style=\"color:#2d3748;\">Timestamp:</strong> <span style=\"color:#4a5568;\">${new Date().toLocaleString()}</span>\n                        </td>\n                      </tr>\n                    </table>\n                  </td>\n                </tr>\n              </table>\n\n              <!-- Next steps -->\n              <table role=\"presentation\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\"\n                style=\"border-collapse:collapse;background:#ecfdf5;border:1px solid #bbf7d0;border-radius:6px;margin-bottom:16px;\">\n                <tr>\n                  <td style=\"padding:12px;\">\n                    <h4 style=\"margin:0 0 8px 0;font-size:14px;font-weight:600;color:#065f46;\">✅ What's next?</h4>\n                    <ul style=\"margin:0;padding-left:20px;color:#047857;font-size:13px;line-height:1.4;\">\n                      <li>Your SMTP configuration has been saved</li>\n                      <li>Low balance notifications will now be sent automatically</li>\n                      <li>You can configure notification thresholds in the dashboard</li>\n                      <li>Test notifications can be sent anytime from the admin panel</li>\n                    </ul>\n                  </td>\n                </tr>\n              </table>\n\n              <!-- CTA -->\n              <table role=\"presentation\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\" style=\"border-collapse:collapse;\">\n                <tr>\n                  <td align=\"center\" bgcolor=\"#10b981\" style=\"border-radius:20px;mso-padding-alt:0;\">\n                    <a href=\"#\" style=\"display:block;padding:12px 24px;font-size:14px;font-weight:700;color:#ffffff;text-decoration:none;border-radius:20px;\">Access Dashboard</a>\n                  </td>\n                </tr>\n              </table>\n\n              <!-- Help -->\n              <p style=\"margin:16px 0 0;font-size:12px;line-height:1.3;text-align:center;color:#4a5568;\">Need help? <a href=\"#\" style=\"color:#10b981;text-decoration:none;\">Contact Support</a> or visit our <a href=\"#\" style=\"color:#10b981;text-decoration:none;\">Documentation</a></p>\n            </td>\n          </tr>\n\n          <!-- Footer -->\n          <tr>\n            <td align=\"center\" style=\"padding:16px 12px;font-size:11px;color:#a0aec0;\">\n              <p style=\"margin:0 0 8px;\">\n                <a href=\"#\" style=\"color:#4299e1;text-decoration:none;margin:0 6px;\">Support</a> •\n                <a href=\"#\" style=\"color:#4299e1;text-decoration:none;margin:0 6px;\">Dashboard</a> •\n                <a href=\"#\" style=\"color:#4299e1;text-decoration:none;margin:0 6px;\">Documentation</a>\n              </p>\n              <p style=\"margin:2px 0;\">© 2024 Sippy&nbsp;Communications. All rights reserved.</p>\n              <p style=\"margin:2px 0;\">This is an automated SMTP configuration test email.</p>\n            </td>\n          </tr>\n        </table>\n        <!-- /Card -->\n      </td>\n    </tr>\n  </table>\n</body>\n\n</html>`;\n\n  // Use juice to inline CSS while preserving media queries\n  const inlinedHtml = juice(rawHtml, {\n    removeStyleTags: false,   // keeps the <style> block for the media query\n    applyStyleTags: true,     // applies styles from <style> tags to elements\n    preserveMediaQueries: true, // preserves @media queries in style tag\n    webResources: {\n      relativeTo: process.cwd()\n    }\n  });\n\n  return inlinedHtml;\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/sippy/account/[id]/balance/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/sippy/account/[id]/calls/active/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/sippy/account/[id]/calls/stats/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/sippy/account/[id]/cdrs/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/sippy/account/[id]/payments/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/sippy/account/[id]/rates/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/sippy/account/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/sippy/accounts/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/sippy/calls/[id]/disconnect/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/sippy/calls/account/[id]/disconnect/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/sippy/payments/all/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/sippy/test-connection/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/tickets/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/tickets/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/tickets/upload/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/user/change-password/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/user/notification-permission-requested/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'NextRequest' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":21}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { connectToDatabase } from '@/lib/db';\nimport UserModel from '@/models/User';\nimport { getCurrentUser } from '@/lib/authService';\n\nexport async function POST() {\n  try {\n    const user = await getCurrentUser();\n    \n    if (!user?.id) {\n      return NextResponse.json({ error: 'Authentication required' }, { status: 401 });\n    }\n\n    await connectToDatabase();\n\n    // Update user to mark that we've asked for notification permission\n    await UserModel.findByIdAndUpdate(\n      user.id,\n      { \n        notificationPermissionRequested: true,\n        notificationPermissionRequestedAt: new Date()\n      },\n      { new: true }\n    );\n\n    return NextResponse.json({ \n      success: true, \n      message: 'Notification permission request status updated' \n    });\n  } catch (error) {\n    console.error('Error updating notification permission request status:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function GET() {\n  try {\n    const user = await getCurrentUser();\n    \n    if (!user?.id) {\n      return NextResponse.json({ error: 'Authentication required' }, { status: 401 });\n    }\n\n    await connectToDatabase();\n\n    // Get user's notification permission request status\n    const userData = await UserModel.findById(user.id).select('notificationPermissionRequested notificationPermissionRequestedAt');\n\n    return NextResponse.json({ \n      hasBeenAsked: userData?.notificationPermissionRequested || false,\n      askedAt: userData?.notificationPermissionRequestedAt || null\n    });\n  } catch (error) {\n    console.error('Error getting notification permission request status:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\n// Development only - reset notification permission request status\nexport async function DELETE() {\n  // Only allow in development\n  if (process.env.NODE_ENV !== 'development') {\n    return NextResponse.json({ error: 'Not allowed in production' }, { status: 403 });\n  }\n\n  try {\n    const user = await getCurrentUser();\n    \n    if (!user?.id) {\n      return NextResponse.json({ error: 'Authentication required' }, { status: 401 });\n    }\n\n    await connectToDatabase();\n\n    // Reset notification permission request status\n    await UserModel.findByIdAndUpdate(\n      user.id,\n      { \n        $unset: {\n          notificationPermissionRequested: 1,\n          notificationPermissionRequestedAt: 1\n        }\n      },\n      { new: true }\n    );\n\n    return NextResponse.json({ \n      success: true, \n      message: 'Notification permission request status reset' \n    });\n  } catch (error) {\n    console.error('Error resetting notification permission request status:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/user/notification-settings/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/user/onboarding/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/users/[id]/activate/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/users/[id]/assignments/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/users/[id]/notification-settings/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/users/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/users/assigned-numbers/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/users/impersonate/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/users/return-to-admin/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'NextRequest' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":21}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { setAuthCookie } from '@/lib/authService';\nimport jwt from 'jsonwebtoken';\nimport { cookies } from 'next/headers';\n\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';\nconst JWT_EXPIRES_IN = '7d';\nconst COOKIE_NAME = 'auth_token';\n\n// POST handler to return to the admin account\nexport async function POST() {\n  try {\n    // Get current token\n    const cookieStore = await cookies();\n    const token = cookieStore.get(COOKIE_NAME)?.value;\n    \n    if (!token) {\n      return NextResponse.json({ error: 'Not authenticated' }, { status: 401 });\n    }\n    \n    // Verify and decode the token\n    const decoded = jwt.verify(token, JWT_SECRET) as { \n      userId: string;\n      originalUserId?: string;\n      isImpersonating?: boolean;\n    };\n    \n    // Check if this is an impersonation session\n    if (!decoded.isImpersonating || !decoded.originalUserId) {\n      return NextResponse.json({ error: 'Not in impersonation mode' }, { status: 400 });\n    }\n    \n    // Create a new token for the original admin\n    const adminToken = jwt.sign({ \n      userId: decoded.originalUserId \n    }, JWT_SECRET, {\n      expiresIn: JWT_EXPIRES_IN,\n    });\n    \n    // Set the auth cookie with the admin token\n    await setAuthCookie(adminToken);\n    \n    // Return success response\n    return NextResponse.json({\n      success: true,\n      message: 'Returned to admin account',\n    });\n  } catch (error) {\n    console.error('Error returning to admin account:', error);\n    return NextResponse.json({ error: 'Failed to return to admin account' }, { status: 500 });\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/users/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/api/users/stats/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'NextRequest' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":21}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getCurrentUser } from '@/lib/authService';\nimport { connectToDatabase } from '@/lib/db';\nimport User from '@/models/User';\n\nexport async function GET() {\n  try {\n    // Check if user is authenticated and is admin\n    const user = await getCurrentUser();\n    \n    if (!user || user.role !== 'admin') {\n      return NextResponse.json(\n        { error: 'Unauthorized. Admin access required.' },\n        { status: 403 }\n      );\n    }\n\n    await connectToDatabase();\n\n    // Get current date and 30 days ago\n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n\n    // Aggregate user statistics\n    const [totalUsers, adminUsers, clientUsers, recentUsers] = await Promise.all([\n      User.countDocuments(),\n      User.countDocuments({ role: 'admin' }),\n      User.countDocuments({ role: 'client' }),\n      User.countDocuments({ createdAt: { $gte: thirtyDaysAgo } })\n    ]);\n\n    const stats = {\n      total: totalUsers,\n      admins: adminUsers,\n      clients: clientUsers,\n      recentlyCreated: recentUsers\n    };\n\n    return NextResponse.json(stats);\n  } catch (error) {\n    console.error('Error fetching user stats:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch user statistics' },\n      { status: 500 }\n    );\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/calls/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/cdrs/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/client/calls/active/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/client/calls/cdrs/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/dashboard/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/dashboard/simple-page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/debug/cdr-test/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":21,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[858,861],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[858,861],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":619,"column":29,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[21612,21690],"text":"\n                    Format: &apos;%H:%M:%S.000 GMT %a %b %d %Y'\n                  "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[21612,21690],"text":"\n                    Format: &lsquo;%H:%M:%S.000 GMT %a %b %d %Y'\n                  "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[21612,21690],"text":"\n                    Format: &#39;%H:%M:%S.000 GMT %a %b %d %Y'\n                  "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[21612,21690],"text":"\n                    Format: &rsquo;%H:%M:%S.000 GMT %a %b %d %Y'\n                  "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":619,"column":58,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[21612,21690],"text":"\n                    Format: '%H:%M:%S.000 GMT %a %b %d %Y&apos;\n                  "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[21612,21690],"text":"\n                    Format: '%H:%M:%S.000 GMT %a %b %d %Y&lsquo;\n                  "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[21612,21690],"text":"\n                    Format: '%H:%M:%S.000 GMT %a %b %d %Y&#39;\n                  "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[21612,21690],"text":"\n                    Format: '%H:%M:%S.000 GMT %a %b %d %Y&rsquo;\n                  "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":869,"column":42,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[31501,31529],"text":"Start with &quot;Test Last Hour\":"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[31501,31529],"text":"Start with &ldquo;Test Last Hour\":"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[31501,31529],"text":"Start with &#34;Test Last Hour\":"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[31501,31529],"text":"Start with &rdquo;Test Last Hour\":"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":869,"column":57,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[31501,31529],"text":"Start with \"Test Last Hour&quot;:"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[31501,31529],"text":"Start with \"Test Last Hour&ldquo;:"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[31501,31529],"text":"Start with \"Test Last Hour&#34;:"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[31501,31529],"text":"Start with \"Test Last Hour&rdquo;:"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":900,"column":53,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[33329,33403],"text":" &apos;%H:%M:%S.000 GMT %a %b %d %Y' (e.g., '09:57:29.000 GMT Wed Nov 18 2009')"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[33329,33403],"text":" &lsquo;%H:%M:%S.000 GMT %a %b %d %Y' (e.g., '09:57:29.000 GMT Wed Nov 18 2009')"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[33329,33403],"text":" &#39;%H:%M:%S.000 GMT %a %b %d %Y' (e.g., '09:57:29.000 GMT Wed Nov 18 2009')"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[33329,33403],"text":" &rsquo;%H:%M:%S.000 GMT %a %b %d %Y' (e.g., '09:57:29.000 GMT Wed Nov 18 2009')"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":900,"column":82,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[33329,33403],"text":" '%H:%M:%S.000 GMT %a %b %d %Y&apos; (e.g., '09:57:29.000 GMT Wed Nov 18 2009')"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[33329,33403],"text":" '%H:%M:%S.000 GMT %a %b %d %Y&lsquo; (e.g., '09:57:29.000 GMT Wed Nov 18 2009')"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[33329,33403],"text":" '%H:%M:%S.000 GMT %a %b %d %Y&#39; (e.g., '09:57:29.000 GMT Wed Nov 18 2009')"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[33329,33403],"text":" '%H:%M:%S.000 GMT %a %b %d %Y&rsquo; (e.g., '09:57:29.000 GMT Wed Nov 18 2009')"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":900,"column":91,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[33329,33403],"text":" '%H:%M:%S.000 GMT %a %b %d %Y' (e.g., &apos;09:57:29.000 GMT Wed Nov 18 2009')"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[33329,33403],"text":" '%H:%M:%S.000 GMT %a %b %d %Y' (e.g., &lsquo;09:57:29.000 GMT Wed Nov 18 2009')"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[33329,33403],"text":" '%H:%M:%S.000 GMT %a %b %d %Y' (e.g., &#39;09:57:29.000 GMT Wed Nov 18 2009')"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[33329,33403],"text":" '%H:%M:%S.000 GMT %a %b %d %Y' (e.g., &rsquo;09:57:29.000 GMT Wed Nov 18 2009')"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":900,"column":124,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[33329,33403],"text":" '%H:%M:%S.000 GMT %a %b %d %Y' (e.g., '09:57:29.000 GMT Wed Nov 18 2009&apos;)"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[33329,33403],"text":" '%H:%M:%S.000 GMT %a %b %d %Y' (e.g., '09:57:29.000 GMT Wed Nov 18 2009&lsquo;)"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[33329,33403],"text":" '%H:%M:%S.000 GMT %a %b %d %Y' (e.g., '09:57:29.000 GMT Wed Nov 18 2009&#39;)"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[33329,33403],"text":" '%H:%M:%S.000 GMT %a %b %d %Y' (e.g., '09:57:29.000 GMT Wed Nov 18 2009&rsquo;)"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":901,"column":54,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[33461,33503],"text":" &apos;non_zero_and_errors' (since version 2.2)"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[33461,33503],"text":" &lsquo;non_zero_and_errors' (since version 2.2)"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[33461,33503],"text":" &#39;non_zero_and_errors' (since version 2.2)"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[33461,33503],"text":" &rsquo;non_zero_and_errors' (since version 2.2)"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":901,"column":74,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[33461,33503],"text":" 'non_zero_and_errors&apos; (since version 2.2)"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[33461,33503],"text":" 'non_zero_and_errors&lsquo; (since version 2.2)"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[33461,33503],"text":" 'non_zero_and_errors&#39; (since version 2.2)"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[33461,33503],"text":" 'non_zero_and_errors&rsquo; (since version 2.2)"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\nimport { MainLayout } from '@/components/layout/MainLayout';\nimport { PageLayout } from '@/components/layout/PageLayout';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Badge } from '@/components/ui/badge';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Loader2, Play, Database, AlertCircle, CheckCircle, Clock, FileText } from 'lucide-react';\nimport { toast } from 'sonner';\n\ninterface TestResult {\n  test: string;\n  success: boolean;\n  cdrCount?: number;\n  error?: string;\n  details?: any;\n  duration?: number;\n  rawResponse?: string;\n}\n\ninterface CdrTestParams {\n  i_account: string;\n  offset?: string;\n  limit?: string;\n  start_date?: string;\n  end_date?: string;\n  cli?: string;\n  cld?: string;\n  i_cdr?: string;\n  type?: string;\n}\n\nexport default function CdrTestPage() {\n  const [params, setParams] = useState<CdrTestParams>({\n    i_account: '3',\n    limit: '10',\n    offset: '0',\n    type: 'non_zero_and_errors'\n  });\n  const [isRunning, setIsRunning] = useState(false);\n  const [testResult, setTestResult] = useState<TestResult | null>(null);\n  const [rawLogs, setRawLogs] = useState('');\n\n  const addLog = (message: string) => {\n    const timestamp = new Date().toLocaleTimeString();\n    const logEntry = `[${timestamp}] ${message}`;\n    setRawLogs(prev => prev + logEntry + '\\n');\n    console.log(logEntry);\n  };\n\n  const formatSippyDate = (dateString: string): string => {\n    if (!dateString) return '';\n    \n    const date = new Date(dateString);\n    \n    // Format: '%H:%M:%S.000 GMT %a %b %d %Y' \n    // Example: '09:57:29.000 GMT Wed Nov 18 2009'\n    const hours = date.getUTCHours().toString().padStart(2, '0');\n    const minutes = date.getUTCMinutes().toString().padStart(2, '0');\n    const seconds = date.getUTCSeconds().toString().padStart(2, '0');\n    \n    const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n    const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    \n    const dayName = dayNames[date.getUTCDay()];\n    const monthName = monthNames[date.getUTCMonth()];\n    const day = date.getUTCDate().toString().padStart(2, '0');\n    const year = date.getUTCFullYear();\n    \n    return `${hours}:${minutes}:${seconds}.000 GMT ${dayName} ${monthName} ${day} ${year}`;\n  };\n\n  const runTest = async () => {\n    if (!params.i_account) {\n      toast.error('Account ID is required');\n      return;\n    }\n\n    setIsRunning(true);\n    setTestResult(null);\n    setRawLogs('');\n    \n    addLog('🚀 Starting CDR API test...');\n    addLog(`📋 Test Parameters:`);\n    addLog(`   Account ID: ${params.i_account}`);\n    addLog(`   Type: ${params.type || 'default'}`);\n    addLog(`   Limit: ${params.limit || 'default'}`);\n    addLog(`   Offset: ${params.offset || 'default'}`);\n    \n    if (params.start_date) {\n      const sippyStartDate = formatSippyDate(params.start_date);\n      addLog(`   Start Date: ${params.start_date} → ${sippyStartDate}`);\n    }\n    if (params.end_date) {\n      const sippyEndDate = formatSippyDate(params.end_date);\n      addLog(`   End Date: ${params.end_date} → ${sippyEndDate}`);\n    }\n    if (params.cli) addLog(`   CLI: ${params.cli}`);\n    if (params.cld) addLog(`   CLD: ${params.cld}`);\n    if (params.i_cdr) addLog(`   CDR ID: ${params.i_cdr}`);\n    \n    const startTime = Date.now();\n    \n    try {\n      // Build query parameters\n      const queryParams = new URLSearchParams();\n      \n      // Required parameters\n      queryParams.set('limit', params.limit || '10');\n      queryParams.set('offset', params.offset || '0');\n      \n      // Optional parameters\n      if (params.type) queryParams.set('type', params.type);\n      if (params.start_date) queryParams.set('start_date', params.start_date);\n      if (params.end_date) queryParams.set('end_date', params.end_date);\n      if (params.cli) queryParams.set('cli', params.cli);\n      if (params.cld) queryParams.set('cld', params.cld);\n      if (params.i_cdr) queryParams.set('i_cdr', params.i_cdr);\n      \n      const url = `/api/debug/cdr-test`;\n      addLog(`📡 API URL: ${url}`);\n      \n      // Prepare request body with all parameters\n          const requestBody = {\n      i_account: params.i_account,\n      limit: params.limit || '10',\n      offset: params.offset || '0',\n      mode: 'full', // Use full parsing for debug test page to see all fields\n      ...(params.type && { type: params.type }),\n      ...(params.start_date && { start_date: params.start_date }),\n      ...(params.end_date && { end_date: params.end_date }),\n      ...(params.cli && { cli: params.cli }),\n      ...(params.cld && { cld: params.cld }),\n      ...(params.i_cdr && { i_cdr: params.i_cdr })\n    };\n      \n      addLog(`📋 Request body: ${JSON.stringify(requestBody, null, 2)}`);\n      \n      // Make the API call with timeout (matching backend)\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 35000); // 35 second timeout (5s buffer over backend 30s)\n      \n      addLog('⏳ Making API request...');\n      \n      const response = await fetch(url, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(requestBody),\n        signal: controller.signal,\n      });\n      \n      clearTimeout(timeoutId);\n      const duration = Date.now() - startTime;\n      \n      addLog(`📊 Response received in ${duration}ms`);\n      addLog(`📊 Status: ${response.status} ${response.statusText}`);\n      \n      if (!response.ok) {\n        const errorText = await response.text();\n        addLog(`❌ Error response: ${errorText}`);\n        \n        setTestResult({\n          test: 'CDR API Test',\n          success: false,\n          error: `HTTP ${response.status}: ${errorText}`,\n          duration\n        });\n        \n        toast.error(`API Error: ${response.status}`);\n        return;\n      }\n      \n      const data = await response.json();\n      \n      if (!data.success) {\n        addLog(`❌ API Error: ${data.error || 'API request failed'}`);\n        if (data.errorType) {\n          addLog(`🔍 Error Type: ${data.errorType}`);\n        }\n        if (data.debugInfo?.suggestion) {\n          addLog(`💡 Suggestion: ${data.debugInfo.suggestion}`);\n        }\n        throw new Error(data.error || 'API request failed');\n      }\n      \n      const cdrCount = data.count || 0;\n      \n      addLog(`✅ Success: ${cdrCount} CDRs returned`);\n      addLog(`📊 Request duration: ${data.requestDuration || 0}ms`);\n      addLog(`📊 Raw response length: ${data.rawResponseLength || 0} characters`);\n      \n      if (data.debugInfo) {\n        addLog(`🔧 Debug Info: Timeout=${data.debugInfo.timeoutUsed}, HasDateRange=${data.debugInfo.hasDateRange}`);\n      }\n      \n      if (cdrCount > 0 && data.cdrs && data.cdrs.length > 0) {\n        addLog(`📋 Sample CDR fields: ${Object.keys(data.cdrs[0]).slice(0, 10).join(', ')}`);\n        if (data.cdrs[0].connect_time) {\n          addLog(`📅 Sample connect_time: ${data.cdrs[0].connect_time}`);\n        }\n        if (data.cdrs[0].cost) {\n          addLog(`💰 Sample cost: ${data.cdrs[0].cost}`);\n        }\n        if (data.cdrs[0].cli) {\n          addLog(`📞 Sample CLI: ${data.cdrs[0].cli}`);\n        }\n        if (data.cdrs[0].cld) {\n          addLog(`📞 Sample CLD: ${data.cdrs[0].cld}`);\n        }\n      } else {\n        addLog('ℹ️ No CDRs found for the specified criteria');\n        if (!params.start_date && !params.end_date) {\n          addLog('💡 Note: Without date range, Sippy API only returns CDRs from the last hour');\n        }\n      }\n      \n      setTestResult({\n        test: 'CDR API Test',\n        success: true,\n        cdrCount,\n        details: data,\n        duration,\n        rawResponse: JSON.stringify(data, null, 2)\n      });\n      \n      if (cdrCount > 0) {\n        toast.success(`Found ${cdrCount} CDRs!`);\n      } else {\n        toast.warning('No CDRs found');\n      }\n      \n    } catch (error) {\n      const duration = Date.now() - startTime;\n      let errorMessage = 'Unknown error';\n      \n      if (error instanceof Error) {\n        if (error.name === 'AbortError') {\n          errorMessage = 'Request timed out after 60 seconds';\n        } else {\n          errorMessage = error.message;\n        }\n      }\n      \n      addLog(`❌ Exception: ${errorMessage}`);\n      \n      setTestResult({\n        test: 'CDR API Test',\n        success: false,\n        error: errorMessage,\n        duration\n      });\n      \n      toast.error(`Test failed: ${errorMessage}`);\n    } finally {\n      setIsRunning(false);\n    }\n  };\n\n  const runQuickTests = async () => {\n    setIsRunning(true);\n    setRawLogs('');\n    \n    addLog('🧪 Running quick test suite...');\n    \n    const quickTests = [\n      {\n        name: 'Last hour (no dates)',\n        params: { ...params, start_date: '', end_date: '', limit: '5' }\n      },\n      {\n        name: 'Today with type=all',\n        params: { \n          ...params, \n          start_date: new Date().toISOString().split('T')[0] + 'T00:00:00.000Z',\n          end_date: new Date().toISOString().split('T')[0] + 'T23:59:59.000Z',\n          type: 'all',\n          limit: '10'\n        }\n      },\n      {\n        name: 'Last 7 days',\n        params: { \n          ...params, \n          start_date: new Date(Date.now() - 7*24*60*60*1000).toISOString(),\n          end_date: new Date().toISOString(),\n          type: 'all',\n          limit: '20'\n        }\n      }\n    ];\n    \n    for (const test of quickTests) {\n      addLog(`\\n🧪 Running: ${test.name}`);\n      \n      // Temporarily set params for this test\n      const originalParams = { ...params };\n      setParams(test.params);\n      \n             try {\n         await new Promise(resolve => setTimeout(resolve, 1000)); // Brief delay\n         // Run the test logic here (simplified version of runTest)\n         \n         const requestBody = {\n           i_account: test.params.i_account,\n           limit: test.params.limit || '10',\n           offset: test.params.offset || '0',\n           mode: 'full', // Use full parsing for debug test page to see all fields\n           ...(test.params.type && { type: test.params.type }),\n           ...(test.params.start_date && { start_date: test.params.start_date }),\n           ...(test.params.end_date && { end_date: test.params.end_date })\n         };\n         \n         const url = `/api/debug/cdr-test`;\n         \n         const response = await fetch(url, {\n           method: 'POST',\n           headers: { 'Content-Type': 'application/json' },\n           body: JSON.stringify(requestBody),\n         });\n         \n         if (response.ok) {\n           const data = await response.json();\n           if (data.success) {\n             const count = data.count || 0;\n             addLog(`   ✅ ${test.name}: ${count} CDRs`);\n           } else {\n             addLog(`   ❌ ${test.name}: ${data.error || 'Unknown error'}`);\n           }\n         } else {\n           addLog(`   ❌ ${test.name}: HTTP ${response.status}`);\n         }\n        \n      } catch (error) {\n        addLog(`   ❌ ${test.name}: ${error instanceof Error ? error.message : 'Error'}`);\n      }\n      \n      // Restore original params\n      setParams(originalParams);\n    }\n    \n    addLog('\\n🏁 Quick tests completed');\n    setIsRunning(false);\n  };\n\n  const runDiagnosticTests = async () => {\n    setIsRunning(true);\n    setRawLogs('');\n    \n    addLog('🧪 Running diagnostic test suite for account-specific issues...');\n    addLog(`🎯 Testing account ${params.i_account} to identify timeout causes`);\n    \n    const diagnosticTests = [\n      {\n        name: 'No date range (last hour only)',\n        params: { ...params, start_date: '', end_date: '', limit: '5', type: 'all' },\n        description: 'Tests if date range is causing the issue'\n      },\n      {\n        name: 'All CDR types',\n        params: { ...params, type: 'all', limit: '5' },\n        description: 'Tests if CDR type filtering is causing the issue'\n      },\n      {\n        name: 'Non-zero errors only',\n        params: { ...params, type: 'non_zero_and_errors', limit: '5' },\n        description: 'Tests default CDR type with small limit'\n      },\n      {\n        name: 'Progressive limit test (10)',\n        params: { ...params, limit: '10' },\n        description: 'Tests slightly larger limit'\n      },\n      {\n        name: 'Progressive limit test (25)',\n        params: { ...params, limit: '25' },\n        description: 'Tests medium limit to find breaking point'\n      }\n    ];\n    \n    for (let i = 0; i < diagnosticTests.length; i++) {\n      const test = diagnosticTests[i];\n      addLog(`\\n🧪 Test ${i + 1}/${diagnosticTests.length}: ${test.name}`);\n      addLog(`   📝 ${test.description}`);\n      \n      try {\n        await new Promise(resolve => setTimeout(resolve, 1000)); // Brief delay\n        \n        const requestBody = {\n          i_account: test.params.i_account,\n          limit: test.params.limit || '10',\n          offset: test.params.offset || '0',\n          mode: 'full', // Use full parsing for debug test page to see all fields\n          ...(test.params.type && { type: test.params.type }),\n          ...(test.params.start_date && { start_date: test.params.start_date }),\n          ...(test.params.end_date && { end_date: test.params.end_date })\n        };\n        \n        addLog(`   📋 Request: ${JSON.stringify(requestBody)}`);\n        \n        const startTime = Date.now();\n        const controller = new AbortController();\n        const timeoutId = setTimeout(() => controller.abort(), 65000); // 65 second timeout\n        \n        const response = await fetch('/api/debug/cdr-test', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(requestBody),\n          signal: controller.signal,\n        });\n        \n        clearTimeout(timeoutId);\n        const duration = Date.now() - startTime;\n        \n        if (response.ok) {\n          const data = await response.json();\n          if (data.success) {\n            const count = data.count || 0;\n            addLog(`   ✅ SUCCESS: ${count} CDRs in ${duration}ms`);\n            if (data.debugInfo) {\n              addLog(`   🔧 Debug: ${JSON.stringify(data.debugInfo)}`);\n            }\n          } else {\n            addLog(`   ❌ API ERROR: ${data.error || 'Unknown error'}`);\n            if (data.errorType) {\n              addLog(`   🔍 Error type: ${data.errorType}`);\n            }\n          }\n        } else {\n          addLog(`   ❌ HTTP ERROR: ${response.status} ${response.statusText}`);\n        }\n        \n      } catch (error) {\n        if (error instanceof Error && error.name === 'AbortError') {\n          addLog(`   ⏰ TIMEOUT: Test timed out after 65 seconds`);\n        } else {\n          addLog(`   ❌ EXCEPTION: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n      }\n    }\n    \n    addLog('\\n🏁 Diagnostic tests completed');\n    addLog('\\n💡 Analysis suggestions:');\n    addLog('   - If \"No date range\" works but date ranges fail → Date range issue');\n    addLog('   - If small limits work but larger limits fail → Data volume issue');\n    addLog('   - If all tests fail → Account-specific configuration issue');\n    addLog('   - Compare results with working account 27');\n    \n    setIsRunning(false);\n  };\n\n  const runComparisonTest = async () => {\n    setIsRunning(true);\n    setRawLogs('');\n    \n    addLog('🔍 Running Account Comparison Test');\n    addLog('🎯 Comparing Account 3 (problematic) vs Account 27 (working)');\n    addLog('📋 Using identical parameters to isolate the issue\\n');\n    \n    const testParams = {\n      limit: '25',\n      offset: '0',\n      type: 'non_zero_and_errors',\n      start_date: params.start_date || '2025-05-27T05:41',\n      end_date: params.end_date || '2025-05-27T20:41'\n    };\n    \n    const accounts = [\n      { id: '27', name: 'Account 27 (Working)' },\n      { id: '3', name: 'Account 3 (Problematic)' }\n    ];\n    \n    for (const account of accounts) {\n      addLog(`\\n🧪 Testing ${account.name}`);\n      \n      const requestBody = {\n        i_account: account.id,\n        mode: 'full', // Use full parsing for debug test page to see all fields\n        ...testParams\n      };\n      \n      addLog(`   📋 Request: ${JSON.stringify(requestBody)}`);\n      \n      try {\n        const startTime = Date.now();\n        const controller = new AbortController();\n        const timeoutId = setTimeout(() => controller.abort(), 65000); // 65 second timeout\n        \n        const response = await fetch('/api/debug/cdr-test', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(requestBody),\n          signal: controller.signal,\n        });\n        \n        clearTimeout(timeoutId);\n        const duration = Date.now() - startTime;\n        \n        if (response.ok) {\n          const data = await response.json();\n          if (data.success) {\n            const count = data.count || 0;\n            addLog(`   ✅ SUCCESS: ${count} CDRs in ${duration}ms`);\n            addLog(`   📊 Response size: ${data.rawResponseLength || 0} characters`);\n            if (data.debugInfo) {\n              addLog(`   🔧 Debug: ${JSON.stringify(data.debugInfo)}`);\n            }\n          } else {\n            addLog(`   ❌ API ERROR: ${data.error || 'Unknown error'}`);\n            if (data.errorType) {\n              addLog(`   🔍 Error type: ${data.errorType}`);\n            }\n          }\n        } else {\n          addLog(`   ❌ HTTP ERROR: ${response.status} ${response.statusText}`);\n        }\n        \n      } catch (error) {\n        if (error instanceof Error && error.name === 'AbortError') {\n          addLog(`   ⏰ TIMEOUT: Request timed out after 65 seconds`);\n        } else {\n          addLog(`   ❌ EXCEPTION: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n      }\n      \n      // Small delay between tests\n      await new Promise(resolve => setTimeout(resolve, 2000));\n    }\n    \n    addLog('\\n🏁 Comparison test completed');\n    addLog('\\n💡 Analysis:');\n    addLog('   - If Account 27 works but Account 3 fails with identical params:');\n    addLog('     → Account-specific data or configuration issue');\n    addLog('     → Possible causes: CDR data complexity, account permissions, or Sippy server load');\n    addLog('   - If both accounts have similar performance:');\n    addLog('     → Issue might be environmental or timing-related');\n    \n    setIsRunning(false);\n  };\n\n  const clearLogs = () => {\n    setRawLogs('');\n  };\n\n  return (\n    <MainLayout>\n      <PageLayout\n        title=\"CDR API Test\"\n        description=\"Test CDR fetching with Sippy API parameters according to official documentation\"\n        breadcrumbs={[\n          { label: 'Dashboard', href: '/dashboard' },\n          { label: 'Debug', href: '/debug' },\n          { label: 'CDR Test' }\n        ]}\n      >\n        <div className=\"space-y-6\">\n          {/* Test Parameters */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Database className=\"h-5 w-5\" />\n                CDR API Parameters\n              </CardTitle>\n              <CardDescription>\n                Configure parameters according to Sippy API documentation for getAccountCDRs\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {/* Required Parameters */}\n                <div>\n                  <Label htmlFor=\"i_account\">Account ID (required)</Label>\n                  <Input\n                    id=\"i_account\"\n                    value={params.i_account}\n                    onChange={(e) => setParams(prev => ({ ...prev, i_account: e.target.value }))}\n                    placeholder=\"e.g., 3\"\n                    type=\"number\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"limit\">Limit</Label>\n                  <Input\n                    id=\"limit\"\n                    value={params.limit || ''}\n                    onChange={(e) => setParams(prev => ({ ...prev, limit: e.target.value }))}\n                    placeholder=\"e.g., 10\"\n                    type=\"number\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"offset\">Offset</Label>\n                  <Input\n                    id=\"offset\"\n                    value={params.offset || ''}\n                    onChange={(e) => setParams(prev => ({ ...prev, offset: e.target.value }))}\n                    placeholder=\"e.g., 0\"\n                    type=\"number\"\n                  />\n                </div>\n\n                {/* Date Parameters */}\n                <div>\n                  <Label htmlFor=\"start_date\">Start Date</Label>\n                  <Input\n                    id=\"start_date\"\n                    value={params.start_date || ''}\n                    onChange={(e) => setParams(prev => ({ ...prev, start_date: e.target.value }))}\n                    placeholder=\"YYYY-MM-DDTHH:mm:ss.sssZ\"\n                    type=\"datetime-local\"\n                  />\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    Format: '%H:%M:%S.000 GMT %a %b %d %Y'\n                  </p>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"end_date\">End Date</Label>\n                  <Input\n                    id=\"end_date\"\n                    value={params.end_date || ''}\n                    onChange={(e) => setParams(prev => ({ ...prev, end_date: e.target.value }))}\n                    placeholder=\"YYYY-MM-DDTHH:mm:ss.sssZ\"\n                    type=\"datetime-local\"\n                  />\n                </div>\n\n                {/* Type Parameter */}\n                <div>\n                  <Label htmlFor=\"type\">CDR Type</Label>\n                  <Select value={params.type || ''} onValueChange={(value) => setParams(prev => ({ ...prev, type: value }))}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select type\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"non_zero_and_errors\">non_zero_and_errors (default)</SelectItem>\n                      <SelectItem value=\"non_zero\">non_zero</SelectItem>\n                      <SelectItem value=\"all\">all</SelectItem>\n                      <SelectItem value=\"complete\">complete</SelectItem>\n                      <SelectItem value=\"incomplete\">incomplete</SelectItem>\n                      <SelectItem value=\"errors\">errors</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {/* Optional Filter Parameters */}\n                <div>\n                  <Label htmlFor=\"cli\">CLI Filter</Label>\n                  <Input\n                    id=\"cli\"\n                    value={params.cli || ''}\n                    onChange={(e) => setParams(prev => ({ ...prev, cli: e.target.value }))}\n                    placeholder=\"e.g., 1234567890\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"cld\">CLD Filter</Label>\n                  <Input\n                    id=\"cld\"\n                    value={params.cld || ''}\n                    onChange={(e) => setParams(prev => ({ ...prev, cld: e.target.value }))}\n                    placeholder=\"e.g., 0987654321\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"i_cdr\">Specific CDR ID</Label>\n                  <Input\n                    id=\"i_cdr\"\n                    value={params.i_cdr || ''}\n                    onChange={(e) => setParams(prev => ({ ...prev, i_cdr: e.target.value }))}\n                    placeholder=\"e.g., 12345\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"flex gap-2 pt-4\">\n                <Button \n                  onClick={runTest}\n                  disabled={isRunning || !params.i_account}\n                  className=\"flex items-center gap-2\"\n                >\n                  {isRunning ? (\n                    <Loader2 className=\"h-4 w-4 animate-spin\" />\n                  ) : (\n                    <Play className=\"h-4 w-4\" />\n                  )}\n                  Run Test\n                </Button>\n                \n                <Button \n                  onClick={runQuickTests}\n                  disabled={isRunning || !params.i_account}\n                  variant=\"outline\"\n                  className=\"flex items-center gap-2\"\n                >\n                  {isRunning ? (\n                    <Loader2 className=\"h-4 w-4 animate-spin\" />\n                  ) : (\n                    <Clock className=\"h-4 w-4\" />\n                  )}\n                  Quick Tests\n                </Button>\n\n                <Button \n                  onClick={runDiagnosticTests}\n                  disabled={isRunning || !params.i_account}\n                  variant=\"secondary\"\n                  className=\"flex items-center gap-2\"\n                >\n                  {isRunning ? (\n                    <Loader2 className=\"h-4 w-4 animate-spin\" />\n                  ) : (\n                    <Database className=\"h-4 w-4\" />\n                  )}\n                  Diagnostic Tests\n                </Button>\n\n                <Button \n                  onClick={runComparisonTest}\n                  disabled={isRunning}\n                  variant=\"outline\"\n                  className=\"flex items-center gap-2\"\n                >\n                  {isRunning ? (\n                    <Loader2 className=\"h-4 w-4 animate-spin\" />\n                  ) : (\n                    <AlertCircle className=\"h-4 w-4\" />\n                  )}\n                  Compare Accounts\n                </Button>\n\n                <Button \n                  onClick={() => {\n                    // Test account 3 without date ranges\n                    setParams(prev => ({ ...prev, start_date: '', end_date: '', limit: '50' }));\n                    setTimeout(runTest, 100);\n                  }}\n                  disabled={isRunning || !params.i_account}\n                  variant=\"secondary\"\n                  className=\"flex items-center gap-2\"\n                >\n                  {isRunning ? (\n                    <Loader2 className=\"h-4 w-4 animate-spin\" />\n                  ) : (\n                    <Clock className=\"h-4 w-4\" />\n                  )}\n                  Test Last Hour\n                </Button>\n                \n                <Button \n                  onClick={clearLogs}\n                  variant=\"ghost\"\n                  className=\"flex items-center gap-2\"\n                >\n                  <FileText className=\"h-4 w-4\" />\n                  Clear Logs\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Test Result */}\n          {testResult && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  {testResult.success ? (\n                    <CheckCircle className=\"h-5 w-5 text-green-600\" />\n                  ) : (\n                    <AlertCircle className=\"h-5 w-5 text-red-600\" />\n                  )}\n                  Test Result\n                </CardTitle>\n                <CardDescription>\n                  {testResult.success ? 'Test completed successfully' : 'Test failed'}\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center gap-4\">\n                    <Badge variant={testResult.success ? \"default\" : \"destructive\"}>\n                      {testResult.success ? 'Success' : 'Failed'}\n                    </Badge>\n                    {testResult.duration && (\n                      <Badge variant=\"outline\">\n                        {testResult.duration}ms\n                      </Badge>\n                    )}\n                    {testResult.cdrCount !== undefined && (\n                      <Badge variant={testResult.cdrCount > 0 ? \"default\" : \"secondary\"}>\n                        {testResult.cdrCount} CDRs\n                      </Badge>\n                    )}\n                  </div>\n                  \n                  {testResult.error && (\n                    <div className=\"p-3 bg-red-50 border border-red-200 rounded text-red-700\">\n                      <strong>Error:</strong> {testResult.error}\n                    </div>\n                  )}\n                  \n                  {testResult.success && testResult.cdrCount === 0 && (\n                    <div className=\"p-3 bg-yellow-50 border border-yellow-200 rounded text-yellow-700\">\n                      <strong>No CDRs found.</strong> This could be normal if:\n                      <ul className=\"list-disc list-inside mt-2\">\n                        <li>No calls were made in the specified time period</li>\n                        <li>No date range specified (only last hour is returned)</li>\n                        <li>Filters are too restrictive</li>\n                      </ul>\n                    </div>\n                  )}\n                  \n                  {testResult.rawResponse && (\n                    <details className=\"mt-4\">\n                      <summary className=\"cursor-pointer font-medium flex items-center gap-2\">\n                        <FileText className=\"h-4 w-4\" />\n                        Raw Response Data\n                      </summary>\n                      <pre className=\"mt-2 p-3 bg-gray-50 border rounded text-xs overflow-auto max-h-64\">\n                        {testResult.rawResponse}\n                      </pre>\n                    </details>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Raw Logs */}\n          {rawLogs && (\n            <Card>\n              <CardHeader>\n                <CardTitle>Test Logs</CardTitle>\n                <CardDescription>\n                  Detailed logging output from the test\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Textarea\n                  value={rawLogs}\n                  readOnly\n                  className=\"font-mono text-sm h-64\"\n                  placeholder=\"Test logs will appear here...\"\n                />\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Testing Strategy */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Testing Strategy</CardTitle>\n              <CardDescription>\n                Recommended approach for testing CDR API functionality\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <h4 className=\"font-medium\">Step-by-Step Testing:</h4>\n                <ol className=\"list-decimal list-inside text-sm text-muted-foreground space-y-1\">\n                  <li><strong>Start with \"Test Last Hour\":</strong> This tests basic connectivity without date ranges</li>\n                  <li><strong>Try small date ranges:</strong> Start with 1-hour ranges, then expand gradually</li>\n                  <li><strong>Monitor timeout patterns:</strong> 30-second timeout matches Active Calls behavior</li>\n                  <li><strong>Check account data:</strong> Ensure the account has CDRs in the specified time range</li>\n                </ol>\n              </div>\n              \n              <div>\n                <h4 className=\"font-medium\">Common Issues:</h4>\n                <ul className=\"list-disc list-inside text-sm text-muted-foreground space-y-1\">\n                  <li><strong>Timeouts with date ranges:</strong> Large date ranges may contain too much data</li>\n                  <li><strong>No CDRs found:</strong> Account may not have calls in the specified period</li>\n                  <li><strong>Network issues:</strong> Check Sippy API endpoint and credentials</li>\n                </ul>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* API Documentation Reference */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Sippy API Documentation</CardTitle>\n              <CardDescription>\n                Reference information from the official Sippy API documentation\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <h4 className=\"font-medium\">Important Notes:</h4>\n                <ul className=\"list-disc list-inside text-sm text-muted-foreground space-y-1\">\n                  <li><strong>Since version 2.2:</strong> Returns only CDRs for the last hour if dates not specified exactly</li>\n                  <li><strong>Date format:</strong> '%H:%M:%S.000 GMT %a %b %d %Y' (e.g., '09:57:29.000 GMT Wed Nov 18 2009')</li>\n                  <li><strong>Default type:</strong> 'non_zero_and_errors' (since version 2.2)</li>\n                  <li><strong>Authentication:</strong> Uses digest authentication like active calls</li>\n                  <li><strong>Timeout:</strong> 30 seconds (matching Active Calls and CDR Reports)</li>\n                </ul>\n              </div>\n              \n              <div>\n                <h4 className=\"font-medium\">CDR Types:</h4>\n                <ul className=\"list-disc list-inside text-sm text-muted-foreground space-y-1\">\n                  <li><strong>non_zero_and_errors:</strong> Non-zero duration and error CDRs (default)</li>\n                  <li><strong>non_zero:</strong> Only non-zero duration CDRs</li>\n                  <li><strong>all:</strong> All CDRs</li>\n                  <li><strong>complete:</strong> Only completed calls</li>\n                  <li><strong>incomplete:</strong> Only incomplete calls</li>\n                  <li><strong>errors:</strong> Only error CDRs</li>\n                </ul>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </PageLayout>\n    </MainLayout>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/forgot-password/page.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":145,"column":56,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[4774,4882],"text":"\n            No worries! Enter your email address and we&apos;ll send you password reset instructions.\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[4774,4882],"text":"\n            No worries! Enter your email address and we&lsquo;ll send you password reset instructions.\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[4774,4882],"text":"\n            No worries! Enter your email address and we&#39;ll send you password reset instructions.\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[4774,4882],"text":"\n            No worries! Enter your email address and we&rsquo;ll send you password reset instructions.\n          "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":227,"column":16,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[8510,8545],"text":"\n            Don&apos;t have an account?"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[8510,8545],"text":"\n            Don&lsquo;t have an account?"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[8510,8545],"text":"\n            Don&#39;t have an account?"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[8510,8545],"text":"\n            Don&rsquo;t have an account?"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useForm } from 'react-hook-form';\nimport { z } from 'zod';\nimport { motion } from 'framer-motion';\nimport { Mail, ArrowLeft, Loader2 } from 'lucide-react';\nimport Link from 'next/link';\nimport { useRouter } from 'next/navigation';\nimport { SimpleLoadingScreen } from '@/components/SimpleLoadingScreen';\nimport { useBranding } from '@/lib/BrandingContext';\n\nimport { Button } from '@/components/ui/button';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\n\n// Form validation schema\nconst formSchema = z.object({\n  email: z.string().email({ message: 'Please enter a valid email address' }),\n});\n\nexport default function ForgotPasswordPage() {\n  const { isLoading } = useBranding();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [showErrorDialog, setShowErrorDialog] = useState(false);\n  const [errorContent, setErrorContent] = useState({\n    title: '',\n    message: '',\n    description: ''\n  });\n  \n  const router = useRouter();\n\n  // Form definition - moved to top to ensure hooks are called in same order\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      email: '',\n    },\n  });\n\n  // Show simple loading screen until branding is ready\n  if (isLoading) {\n    return <SimpleLoadingScreen />;\n  }\n\n  // Form submission handler\n  async function onSubmit(values: z.infer<typeof formSchema>) {\n    setIsSubmitting(true);\n    \n    try {\n      const response = await fetch('/api/auth/forgot-password', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email: values.email }),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        // Handle specific error cases\n        switch (data.code) {\n          case 'MISSING_EMAIL':\n            setErrorContent({\n              title: 'Missing Email',\n              message: 'Email address is required',\n              description: 'Please enter your email address to receive password reset instructions.'\n            });\n            break;\n          case 'INVALID_EMAIL_FORMAT':\n            setErrorContent({\n              title: 'Invalid Email Format',\n              message: 'Please enter a valid email address',\n              description: 'The email address format appears to be incorrect. Please check and try again.'\n            });\n            form.setError('email', {\n              type: 'manual',\n              message: 'Please enter a valid email address'\n            });\n            break;\n          default:\n            setErrorContent({\n              title: 'Request Failed',\n              message: data.message || 'Failed to send password reset email',\n              description: 'Please try again. If the problem persists, contact support.'\n            });\n            break;\n        }\n        setShowErrorDialog(true);\n      } else {\n        // Success\n        const email = values.email;\n        form.reset();\n        router.push(`/forgot-password/sent?email=${encodeURIComponent(email)}`);\n      }\n    } catch (error) {\n      console.error('Forgot password error:', error);\n      setErrorContent({\n        title: 'Network Error',\n        message: 'Unable to send password reset request',\n        description: 'Please check your internet connection and try again.'\n      });\n      setShowErrorDialog(true);\n    } finally {\n      setIsSubmitting(false);\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 dark:from-gray-900 dark:via-gray-800 dark:to-slate-900 flex items-center justify-center px-4\">\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.5 }}\n        className=\"w-full max-w-md\"\n      >\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <motion.div\n            initial={{ scale: 0 }}\n            animate={{ scale: 1 }}\n            transition={{ delay: 0.2, type: \"spring\", stiffness: 200 }}\n            className=\"inline-flex items-center justify-center w-16 h-16 bg-gradient-to-r from-[var(--brand-primary)] to-[var(--brand-primary)]/80 rounded-full mb-4\"\n          >\n            <Mail className=\"w-8 h-8 text-white\" />\n          </motion.div>\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-gray-100 mb-2\">Forgot Password?</h1>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            No worries! Enter your email address and we'll send you password reset instructions.\n          </p>\n        </div>\n\n        {/* Main Form Card */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.3, duration: 0.5 }}\n          className=\"bg-white dark:bg-gray-800 rounded-2xl shadow-xl border border-gray-100 dark:border-gray-700 p-8\"\n        >\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              {/* Email Field */}\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormControl>\n                      <div className=\"relative group\">\n                        <div className=\"absolute inset-y-0 left-0 flex items-center pl-4 pointer-events-none\">\n                          <Mail className=\"h-5 w-5 text-gray-400 dark:text-gray-500 group-focus-within:text-[var(--brand-primary)] transition-colors duration-200\" />\n                        </div>\n                        <Input\n                          type=\"email\"\n                          placeholder=\"Enter your email address\"\n                          className=\"pl-12 h-12 bg-gray-50 dark:bg-gray-700/50 border-gray-200 dark:border-gray-600 focus:bg-white dark:focus:bg-gray-700 focus:border-[var(--brand-primary)] focus:ring-4 focus:ring-[var(--brand-primary)]/10 rounded-xl transition-all duration-200 placeholder:text-gray-400 dark:placeholder:text-gray-500 hover:border-gray-300 dark:hover:border-gray-500\"\n                          {...field}\n                        />\n                      </div>\n                    </FormControl>\n                    <FormMessage className=\"text-red-500 dark:text-red-400 text-sm\" />\n                  </FormItem>\n                )}\n              />\n\n              {/* Submit Button */}\n              <motion.div\n                whileHover={{ scale: 1.01 }}\n                whileTap={{ scale: 0.99 }}\n              >\n                <Button\n                  type=\"submit\"\n                  disabled={isSubmitting}\n                  className=\"w-full h-12 bg-[var(--brand-primary)] hover:bg-[var(--brand-primary)]/90 text-white font-semibold rounded-xl transition-all duration-300 shadow-lg hover:shadow-xl disabled:opacity-50 disabled:cursor-not-allowed group transform hover:-translate-y-0.5 border-0\"\n                >\n                  {isSubmitting ? (\n                    <>\n                      <Loader2 className=\"w-5 h-5 animate-spin mr-2\" />\n                      Sending Instructions...\n                    </>\n                  ) : (\n                    <>\n                      Send Reset Instructions\n                    </>\n                  )}\n                </Button>\n              </motion.div>\n            </form>\n          </Form>\n\n          {/* Back to Login Link */}\n          <div className=\"mt-6 text-center\">\n            <Link \n              href=\"/login\"\n              className=\"inline-flex items-center text-sm text-[var(--brand-primary)] dark:text-blue-400 hover:text-[var(--brand-primary)]/80 dark:hover:text-blue-300 transition-colors duration-200 font-medium\"\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Login\n            </Link>\n          </div>\n        </motion.div>\n\n        {/* Additional Help */}\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ delay: 0.5, duration: 0.5 }}\n          className=\"mt-6 text-center\"\n        >\n          <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n            Don't have an account?{' '}\n            <Link \n              href=\"/register\" \n              className=\"text-[var(--brand-primary)] dark:text-blue-400 hover:text-[var(--brand-primary)]/80 dark:hover:text-blue-300 font-semibold transition-colors duration-200\"\n            >\n              Sign up for free\n            </Link>\n          </p>\n        </motion.div>\n      </motion.div>\n\n      {/* Error Dialog */}\n      <Dialog open={showErrorDialog} onOpenChange={setShowErrorDialog}>\n        <DialogContent className=\"sm:max-w-[425px]\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2 text-red-600\">\n              <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clipRule=\"evenodd\" />\n              </svg>\n              {errorContent.title}\n            </DialogTitle>\n            <DialogDescription className=\"space-y-2\">\n              <span className=\"font-medium text-gray-900 dark:text-gray-100 block\">{errorContent.message}</span>\n              <span className=\"text-gray-600 dark:text-gray-400 block\">{errorContent.description}</span>\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"flex justify-end gap-2 pt-4\">\n            <Button \n              onClick={() => setShowErrorDialog(false)}\n              className=\"bg-[var(--brand-primary)] hover:bg-[var(--brand-primary)]/90\"\n            >\n              Try Again\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/forgot-password/sent/page.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":104,"column":15,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[3441,3507],"text":"\n            We&apos;ve sent password reset instructions to:\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[3441,3507],"text":"\n            We&lsquo;ve sent password reset instructions to:\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[3441,3507],"text":"\n            We&#39;ve sent password reset instructions to:\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[3441,3507],"text":"\n            We&rsquo;ve sent password reset instructions to:\n          "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":212,"column":16,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[8041,8076],"text":"\n            Don&apos;t have an account?"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[8041,8076],"text":"\n            Don&lsquo;t have an account?"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[8041,8076],"text":"\n            Don&#39;t have an account?"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[8041,8076],"text":"\n            Don&rsquo;t have an account?"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { Mail, ArrowLeft, Loader2, CheckCircle, RefreshCw, Edit } from 'lucide-react';\nimport Link from 'next/link';\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport { SimpleLoadingScreen } from '@/components/SimpleLoadingScreen';\nimport { useBranding } from '@/lib/BrandingContext';\n\nimport { Button } from '@/components/ui/button';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\n\nexport default function InstructionsSentPage() {\n  const { isLoading } = useBranding();\n  const [isResending, setIsResending] = useState(false);\n  const [showErrorDialog, setShowErrorDialog] = useState(false);\n  const [showSuccessDialog, setShowSuccessDialog] = useState(false);\n  const [errorContent, setErrorContent] = useState({\n    title: '',\n    message: '',\n    description: ''\n  });\n  \n  const router = useRouter();\n  const searchParams = useSearchParams();\n  const email = searchParams.get('email');\n\n  // Show simple loading screen until branding is ready\n  if (isLoading) {\n    return <SimpleLoadingScreen />;\n  }\n\n  // If no email parameter, redirect back to forgot password\n  if (!email) {\n    router.push('/forgot-password');\n    return <SimpleLoadingScreen />;\n  }\n\n  // Handle resend instructions\n  const handleResend = async () => {\n    setIsResending(true);\n    \n    try {\n      const response = await fetch('/api/auth/forgot-password', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email }),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        setErrorContent({\n          title: 'Resend Failed',\n          message: data.message || 'Failed to resend password reset email',\n          description: 'Please try again. If the problem persists, contact support.'\n        });\n        setShowErrorDialog(true);\n      } else {\n        setShowSuccessDialog(true);\n      }\n    } catch (error) {\n      console.error('Resend password error:', error);\n      setErrorContent({\n        title: 'Network Error',\n        message: 'Unable to resend password reset request',\n        description: 'Please check your internet connection and try again.'\n      });\n      setShowErrorDialog(true);\n    } finally {\n      setIsResending(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 dark:from-gray-900 dark:via-gray-800 dark:to-slate-900 flex items-center justify-center px-4\">\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.5 }}\n        className=\"w-full max-w-md\"\n      >\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <motion.div\n            initial={{ scale: 0 }}\n            animate={{ scale: 1 }}\n            transition={{ delay: 0.2, type: \"spring\", stiffness: 200 }}\n            className=\"inline-flex items-center justify-center w-20 h-20 bg-gradient-to-r from-green-500 to-green-600 rounded-full mb-6\"\n          >\n            <CheckCircle className=\"w-10 h-10 text-white\" />\n          </motion.div>\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-gray-100 mb-3\">Check Your Email!</h1>\n          <p className=\"text-gray-600 dark:text-gray-400 mb-2\">\n            We've sent password reset instructions to:\n          </p>\n          <p className=\"text-lg font-semibold text-[var(--brand-primary)] dark:text-blue-400 mb-4\">\n            {email}\n          </p>\n          <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n            Please check your email inbox (and spam folder) for the reset link.\n            The link will expire in <strong>24 hours</strong> for security.\n          </p>\n        </div>\n\n        {/* Main Action Card */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.3, duration: 0.5 }}\n          className=\"bg-white dark:bg-gray-800 rounded-2xl shadow-xl border border-gray-100 dark:border-gray-700 p-8 space-y-4\"\n        >\n          {/* Resend Button */}\n          <motion.div\n            whileHover={{ scale: 1.01 }}\n            whileTap={{ scale: 0.99 }}\n          >\n            <Button\n              onClick={handleResend}\n              disabled={isResending}\n              className=\"w-full h-12 bg-[var(--brand-primary)] hover:bg-[var(--brand-primary)]/90 text-white font-semibold rounded-xl transition-all duration-300 shadow-lg hover:shadow-xl disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              {isResending ? (\n                <>\n                  <Loader2 className=\"w-5 h-5 animate-spin mr-2\" />\n                  Resending...\n                </>\n              ) : (\n                <>\n                  <RefreshCw className=\"w-5 h-5 mr-2\" />\n                  Resend Instructions\n                </>\n              )}\n            </Button>\n          </motion.div>\n\n          {/* Change Email Button */}\n          <motion.div\n            whileHover={{ scale: 1.01 }}\n            whileTap={{ scale: 0.99 }}\n          >\n            <Button\n              onClick={() => router.push('/forgot-password')}\n              variant=\"outline\"\n              className=\"w-full h-12 border-2 border-gray-200 dark:border-gray-600 hover:border-[var(--brand-primary)] dark:hover:border-blue-400 hover:bg-[var(--brand-primary)]/5 dark:hover:bg-blue-500/10 text-gray-700 dark:text-gray-300 hover:text-[var(--brand-primary)] dark:hover:text-blue-400 font-semibold rounded-xl transition-all duration-300\"\n            >\n              <Edit className=\"w-5 h-5 mr-2\" />\n              Change Email Address\n            </Button>\n          </motion.div>\n\n          {/* Divider */}\n          <div className=\"relative py-2\">\n            <div className=\"absolute inset-0 flex items-center\">\n              <div className=\"w-full border-t border-gray-200 dark:border-gray-700\"></div>\n            </div>\n            <div className=\"relative flex justify-center text-sm\">\n              <span className=\"px-3 bg-white dark:bg-gray-800 text-gray-500 dark:text-gray-400\">or</span>\n            </div>\n          </div>\n\n          {/* Back to Login */}\n          <Link href=\"/login\">\n            <Button\n              variant=\"ghost\"\n              className=\"w-full h-12 text-gray-600 dark:text-gray-400 hover:text-[var(--brand-primary)] dark:hover:text-blue-400 hover:bg-[var(--brand-primary)]/5 dark:hover:bg-blue-500/10 font-medium rounded-xl transition-all duration-300\"\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Login\n            </Button>\n          </Link>\n        </motion.div>\n\n        {/* Help Text */}\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ delay: 0.5, duration: 0.5 }}\n          className=\"mt-8 text-center\"\n        >\n          <div className=\"bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-xl p-4\">\n            <h3 className=\"font-semibold text-blue-900 dark:text-blue-100 mb-2 flex items-center justify-center\">\n              <Mail className=\"w-4 h-4 mr-2\" />\n              Email Not Received?\n            </h3>\n            <ul className=\"text-sm text-blue-800 dark:text-blue-200 space-y-1 text-left\">\n              <li>• Check your spam/junk folder</li>\n              <li>• Ensure {email} is correct</li>\n              <li>• Wait a few minutes for delivery</li>\n              <li>• Contact support if issues persist</li>\n            </ul>\n          </div>\n        </motion.div>\n\n        {/* Additional Help */}\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ delay: 0.6, duration: 0.5 }}\n          className=\"mt-6 text-center\"\n        >\n          <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n            Don't have an account?{' '}\n            <Link \n              href=\"/register\" \n              className=\"text-[var(--brand-primary)] dark:text-blue-400 hover:text-[var(--brand-primary)]/80 dark:hover:text-blue-300 font-semibold transition-colors duration-200\"\n            >\n              Sign up for free\n            </Link>\n          </p>\n        </motion.div>\n      </motion.div>\n\n      {/* Success Dialog */}\n      <Dialog open={showSuccessDialog} onOpenChange={setShowSuccessDialog}>\n        <DialogContent className=\"sm:max-w-[425px]\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2 text-green-600\">\n              <CheckCircle className=\"w-5 h-5\" />\n              Instructions Resent!\n            </DialogTitle>\n            <DialogDescription className=\"space-y-2\">\n              <span className=\"font-medium text-gray-900 dark:text-gray-100 block\">Password reset instructions have been resent successfully.</span>\n              <span className=\"text-gray-600 dark:text-gray-400 block\">\n                Please check your email inbox again for the new reset link.\n              </span>\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"flex justify-end gap-2 pt-4\">\n            <Button \n              onClick={() => setShowSuccessDialog(false)}\n              className=\"bg-[var(--brand-primary)] hover:bg-[var(--brand-primary)]/90\"\n            >\n              Got it\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Error Dialog */}\n      <Dialog open={showErrorDialog} onOpenChange={setShowErrorDialog}>\n        <DialogContent className=\"sm:max-w-[425px]\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2 text-red-600\">\n              <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clipRule=\"evenodd\" />\n              </svg>\n              {errorContent.title}\n            </DialogTitle>\n            <DialogDescription className=\"space-y-2\">\n              <span className=\"font-medium text-gray-900 dark:text-gray-100 block\">{errorContent.message}</span>\n              <span className=\"text-gray-600 dark:text-gray-400 block\">{errorContent.description}</span>\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"flex justify-end gap-2 pt-4\">\n            <Button \n              onClick={() => setShowErrorDialog(false)}\n              className=\"bg-[var(--brand-primary)] hover:bg-[var(--brand-primary)]/90\"\n            >\n              Try Again\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/login/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/payments/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/rates/numbers/decks/[id]/rates/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/rates/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/rates/sms/decks/[id]/rates/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/register/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/reset-password/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/services/numbers/buy/page.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchAvailableNumbers'. Either include it or remove the dependency array.","line":119,"column":6,"nodeType":"ArrayExpression","endLine":119,"endColumn":83,"suggestions":[{"desc":"Update the dependencies array to be: [currentPage, searchTerm, countryFilter, numberTypeFilter, sortBy, sortOrder, fetchAvailableNumbers]","fix":{"range":[3869,3946],"text":"[currentPage, searchTerm, countryFilter, numberTypeFilter, sortBy, sortOrder, fetchAvailableNumbers]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { MainLayout } from '@/components/layout/MainLayout';\nimport { PageLayout } from '@/components/layout/PageLayout';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Label } from '@/components/ui/label';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { \n  Hash,\n  Search,\n  X,\n  Loader2,\n  ShoppingCart,\n  CheckCircle,\n  Calendar,\n  DollarSign,\n  ChevronLeft,\n  ChevronRight,\n  AlertCircle,\n  Package,\n  Trash2,\n  Check,\n  AlertTriangle\n} from 'lucide-react';\nimport { toast } from 'sonner';\nimport { formatDate, formatCurrency, maskPhoneNumber } from '@/lib/utils';\nimport { PhoneNumber } from '@/types/phoneNumber';\nimport { Textarea } from '@/components/ui/textarea';\n\ninterface AvailableNumbersResponse {\n  phoneNumbers: PhoneNumber[];\n  total: number;\n  page: number;\n  limit: number;\n  totalPages: number;\n  filters: {\n    countries: string[];\n    numberTypes: string[];\n  };\n}\n\ninterface BulkPurchaseResult {\n  successful: Array<{\n    phoneNumberId: string;\n    number: string;\n    country: string;\n    numberType: string;\n    monthlyRate: number;\n    setupFee: number;\n    currency: string;\n    billingCycle: string;\n    rateDeckName?: string;\n  }>;\n  failed: Array<{\n    phoneNumberId: string;\n    error: string;\n    number: string;\n  }>;\n  summary: {\n    total: number;\n    successful: number;\n    failed: number;\n    totalCost: number;\n    totalSetupFees: number;\n  };\n}\n\nexport default function BuyNumbersPage() {\n  const [phoneNumbers, setPhoneNumbers] = useState<PhoneNumber[]>([]);\n  const [filters, setFilters] = useState({\n    countries: [] as string[],\n    numberTypes: [] as string[],\n  });\n  const [isLoading, setIsLoading] = useState(true);\n  const [total, setTotal] = useState(0);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(1);\n  \n  // Selection states for bulk operations\n  const [selectedNumbers, setSelectedNumbers] = useState<Set<string>>(new Set());\n  const [isSelectAll, setIsSelectAll] = useState(false);\n  \n  // Modal states\n  const [showPurchaseModal, setShowPurchaseModal] = useState(false);\n  const [showBulkPurchaseModal, setShowBulkPurchaseModal] = useState(false);\n  const [showBulkResultModal, setShowBulkResultModal] = useState(false);\n  const [showBackorderModal, setShowBackorderModal] = useState(false);\n  const [selectedNumber, setSelectedNumber] = useState<PhoneNumber | null>(null);\n  const [isPurchasing, setIsPurchasing] = useState(false);\n  const [isBulkPurchasing, setIsBulkPurchasing] = useState(false);\n  const [isSubmittingBackorder, setIsSubmittingBackorder] = useState(false);\n  const [bulkPurchaseResult, setBulkPurchaseResult] = useState<BulkPurchaseResult | null>(null);\n  \n  // Filter and search states\n  const [searchTerm, setSearchTerm] = useState('');\n  const [countryFilter, setCountryFilter] = useState<string>('all');\n  const [numberTypeFilter, setNumberTypeFilter] = useState<string>('all');\n  const [sortBy, setSortBy] = useState('monthlyRate');\n  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('asc');\n\n  // Backorder form state\n  const [backorderForm, setBackorderForm] = useState({\n    reason: '',\n    businessJustification: '',\n    priority: 'medium' as 'low' | 'medium' | 'high' | 'urgent'\n  });\n\n  const limit = 12;\n\n  useEffect(() => {\n    fetchAvailableNumbers();\n  }, [currentPage, searchTerm, countryFilter, numberTypeFilter, sortBy, sortOrder]);\n\n  // Reset selections when phone numbers change\n  useEffect(() => {\n    setSelectedNumbers(new Set());\n    setIsSelectAll(false);\n  }, [phoneNumbers]);\n\n  const fetchAvailableNumbers = async () => {\n    try {\n      setIsLoading(true);\n      const params = new URLSearchParams({\n        page: currentPage.toString(),\n        limit: limit.toString(),\n        sortBy,\n        sortOrder,\n      });\n      \n      if (searchTerm) params.append('search', searchTerm);\n      if (countryFilter !== 'all') params.append('country', countryFilter);\n      if (numberTypeFilter !== 'all') params.append('numberType', numberTypeFilter);\n\n      const response = await fetch(`/api/phone-numbers/available?${params}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch available numbers');\n      }\n      \n      const data: AvailableNumbersResponse = await response.json();\n      console.log('API Response data:', data);\n      console.log('Phone numbers:', data.phoneNumbers?.map(p => ({ \n        number: p.number, \n        monthlyRate: p.monthlyRate, \n        setupFee: p.setupFee \n      })));\n      \n      setPhoneNumbers(data.phoneNumbers || []);\n      setTotal(data.total || 0);\n      setCurrentPage(data.page || 1);\n      setTotalPages(data.totalPages || 1);\n      setFilters(data.filters || { countries: [], numberTypes: [] });\n    } catch (error) {\n      console.error('Error fetching available numbers:', error);\n      toast.error('Failed to load available numbers');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSinglePurchase = async () => {\n    if (!selectedNumber) return;\n\n    try {\n      setIsPurchasing(true);\n      const response = await fetch('/api/phone-numbers/purchase', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          phoneNumberId: selectedNumber._id,\n        }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to purchase number');\n      }\n\n      toast.success(`Phone number ${selectedNumber.number} purchased successfully!`);\n      setShowPurchaseModal(false);\n      setSelectedNumber(null);\n      fetchAvailableNumbers(); // Refresh the list\n    } catch (error) {\n      console.error('Error purchasing number:', error);\n      toast.error(error instanceof Error ? error.message : 'Failed to purchase number');\n    } finally {\n      setIsPurchasing(false);\n    }\n  };\n\n  const handleBulkPurchase = async () => {\n    if (selectedNumbers.size === 0) return;\n\n    try {\n      setIsBulkPurchasing(true);\n      const phoneNumberIds = Array.from(selectedNumbers);\n      \n      const response = await fetch('/api/phone-numbers/purchase/bulk', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          phoneNumberIds,\n        }),\n      });\n\n      const result: BulkPurchaseResult = await response.json();\n      \n      setBulkPurchaseResult(result);\n      setShowBulkPurchaseModal(false);\n      setShowBulkResultModal(true);\n      \n      // Clear selections\n      setSelectedNumbers(new Set());\n      setIsSelectAll(false);\n      \n      // Refresh the list after bulk purchase\n      fetchAvailableNumbers();\n      \n    } catch (error) {\n      console.error('Error bulk purchasing numbers:', error);\n      toast.error('Failed to purchase numbers');\n    } finally {\n      setIsBulkPurchasing(false);\n    }\n  };\n\n  const handleBackorderRequest = async () => {\n    if (!selectedNumber) return;\n\n    try {\n      setIsSubmittingBackorder(true);\n      const response = await fetch('/api/backorder-requests', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          phoneNumberId: selectedNumber._id,\n          reason: backorderForm.reason,\n          businessJustification: backorderForm.businessJustification,\n          priority: backorderForm.priority,\n        }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to submit backorder request');\n      }\n\n      const result = await response.json();\n      toast.success(`Backorder request submitted successfully! Request ID: ${result.request.requestNumber}`);\n      setShowBackorderModal(false);\n      setSelectedNumber(null);\n      setBackorderForm({\n        reason: '',\n        businessJustification: '',\n        priority: 'medium'\n      });\n    } catch (error) {\n      console.error('Error submitting backorder request:', error);\n      toast.error(error instanceof Error ? error.message : 'Failed to submit backorder request');\n    } finally {\n      setIsSubmittingBackorder(false);\n    }\n  };\n\n  const handleSelectNumber = (numberId: string, checked: boolean) => {\n    // Find the number to check if it's backorder-only\n    const number = phoneNumbers.find(n => n._id === numberId);\n    if (number?.backorderOnly) {\n      toast.warning('Backorder-only numbers cannot be selected for bulk purchase. Please submit individual backorder requests.');\n      return;\n    }\n    \n    const newSelected = new Set(selectedNumbers);\n    if (checked) {\n      if (newSelected.size >= 20) {\n        toast.warning('You can only select up to 20 numbers for bulk purchase.');\n        return;\n      }\n      newSelected.add(numberId);\n    } else {\n      newSelected.delete(numberId);\n    }\n    setSelectedNumbers(newSelected);\n    \n    // Update select all state\n    const availableForBulk = phoneNumbers.filter(n => !n.backorderOnly);\n    setIsSelectAll(newSelected.size === availableForBulk.length && availableForBulk.length > 0);\n  };\n\n  const handleSelectAll = (checked: boolean) => {\n    if (checked) {\n      // Only select numbers that are not backorder-only\n      const availableForBulk = phoneNumbers.filter(n => !n.backorderOnly);\n      const limitedSelection = availableForBulk.slice(0, 20);\n      const allIds = new Set(limitedSelection.map(number => number._id));\n      setSelectedNumbers(allIds);\n      setIsSelectAll(limitedSelection.length === availableForBulk.length);\n      \n      if (availableForBulk.length > 20) {\n        toast.info(`Selected first 20 of ${availableForBulk.length} available numbers.`);\n      }\n    } else {\n      setSelectedNumbers(new Set());\n      setIsSelectAll(false);\n    }\n  };\n\n  const getSelectedNumbers = () => {\n    return phoneNumbers.filter(n => selectedNumbers.has(n._id));\n  };\n\n  const getTotalCost = () => {\n    const selected = getSelectedNumbers();\n    const monthlyTotal = selected.reduce((sum, n) => sum + (n.monthlyRate || 0), 0);\n    const setupTotal = selected.reduce((sum, n) => sum + (n.setupFee || 0), 0);\n    return { monthlyTotal, setupTotal };\n  };\n\n  const changePage = (page: number) => {\n    setCurrentPage(page);\n  };\n\n  const clearFilters = () => {\n    setSearchTerm('');\n    setCountryFilter('all');\n    setNumberTypeFilter('all');\n    setSortBy('monthlyRate');\n    setSortOrder('asc');\n    setCurrentPage(1);\n  };\n\n  return (\n    <MainLayout>\n      <PageLayout\n        title=\"Buy Phone Numbers\"\n        description=\"Purchase available numbers directly or submit backorder requests for numbers requiring approval\"\n        breadcrumbs={[\n          { label: 'Dashboard', href: '/dashboard' },\n          { label: 'Services', href: '/services' },\n          { label: 'Numbers', href: '/services/numbers' },\n          { label: 'Buy Numbers' }\n        ]}\n      >\n        {/* Filters */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-lg\">Search & Filters</CardTitle>\n              {phoneNumbers.length > 0 && (\n                <div className=\"flex items-center gap-2\">\n                  <Checkbox\n                    id=\"select-all\"\n                    checked={isSelectAll}\n                    onCheckedChange={handleSelectAll}\n                    className=\"mr-2\"\n                  />\n                  <Label htmlFor=\"select-all\" className=\"text-sm font-medium\">\n                    Select All Direct Purchase ({Math.min(phoneNumbers.filter(n => !n.backorderOnly).length, 20)}{phoneNumbers.filter(n => !n.backorderOnly).length > 20 ? ' of ' + phoneNumbers.filter(n => !n.backorderOnly).length : ''}) - Max 20\n                  </Label>\n                </div>\n              )}\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-4\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n                <Input\n                  type=\"text\"\n                  placeholder=\"Search numbers...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n              \n              <Select value={countryFilter} onValueChange={setCountryFilter}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"All Countries\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Countries</SelectItem>\n                  {filters.countries.map((country) => (\n                    <SelectItem key={country} value={country}>{country}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n\n              <Select value={numberTypeFilter} onValueChange={setNumberTypeFilter}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"All Types\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Types</SelectItem>\n                  {filters.numberTypes.map((type) => (\n                    <SelectItem key={type} value={type}>{type}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n\n              <Select value={`${sortBy}_${sortOrder}`} onValueChange={(value) => {\n                const [field, order] = value.split('_');\n                setSortBy(field);\n                setSortOrder(order as 'asc' | 'desc');\n              }}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Sort by\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"monthlyRate_asc\">Price: Low to High</SelectItem>\n                  <SelectItem value=\"monthlyRate_desc\">Price: High to Low</SelectItem>\n                  <SelectItem value=\"country_asc\">Country A-Z</SelectItem>\n                  <SelectItem value=\"country_desc\">Country Z-A</SelectItem>\n                  <SelectItem value=\"number_asc\">Number A-Z</SelectItem>\n                  <SelectItem value=\"number_desc\">Number Z-A</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            {(searchTerm || countryFilter !== 'all' || numberTypeFilter !== 'all' || sortBy !== 'monthlyRate' || sortOrder !== 'asc') && (\n              <Button variant=\"ghost\" onClick={clearFilters} className=\"mt-2\">\n                <X className=\"h-4 w-4 mr-2\" />\n                Clear Filters\n              </Button>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Stats */}\n        <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4\">\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"text-2xl font-bold text-blue-600\">{total}</div>\n              <p className=\"text-xs text-muted-foreground\">Total Numbers</p>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"text-2xl font-bold text-green-600\">\n                {phoneNumbers.filter(n => !n.backorderOnly).length}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">Direct Purchase</p>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"text-2xl font-bold text-orange-600\">\n                {phoneNumbers.filter(n => n.backorderOnly).length}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">Backorder Only</p>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"text-2xl font-bold\">{filters.countries.length}</div>\n              <p className=\"text-xs text-muted-foreground\">Countries</p>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"text-2xl font-bold\">\n                {phoneNumbers.length > 0 ? formatCurrency(Math.min(...phoneNumbers.map(n => n.monthlyRate || 0)), phoneNumbers[0]?.currency || 'USD') : '-'}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">Starting From</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Available Numbers Grid */}\n        {isLoading ? (\n          <div className=\"flex items-center justify-center py-12\">\n            <Loader2 className=\"h-8 w-8 animate-spin\" />\n          </div>\n        ) : phoneNumbers.length === 0 ? (\n          <Card>\n            <CardContent className=\"py-12\">\n              <div className=\"text-center\">\n                <Hash className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold mb-2\">No numbers available</h3>\n                <p className=\"text-muted-foreground\">\n                  {searchTerm || countryFilter !== 'all' || numberTypeFilter !== 'all' \n                    ? 'Try adjusting your filters to see more results.'\n                    : 'No phone numbers are currently available for purchase.'\n                  }\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        ) : (\n          <>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n              {phoneNumbers.map((number) => (\n                <Card key={number._id} className={`hover:shadow-lg transition-shadow ${selectedNumbers.has(number._id) ? 'ring-2 ring-green-500 bg-green-50/50' : ''}`}>\n                  <CardHeader className=\"pb-3\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <Checkbox\n                        checked={selectedNumbers.has(number._id)}\n                        onCheckedChange={(checked) => handleSelectNumber(number._id, !!checked)}\n                        className=\"data-[state=checked]:bg-green-600 data-[state=checked]:border-green-600\"\n                        disabled={number.backorderOnly}\n                      />\n                      <CardTitle className=\"text-lg font-mono flex-1 min-w-0\">{maskPhoneNumber(number.number)}</CardTitle>\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between mb-2\">\n                      <div className=\"text-sm text-muted-foreground\">\n                        {number.country} • {number.numberType}\n                      </div>\n                      {number.backorderOnly ? (\n                        <Badge variant=\"outline\" className=\"text-orange-600 border-orange-200 text-xs whitespace-nowrap\">\n                          Backorder\n                        </Badge>\n                      ) : (\n                        <Badge variant=\"outline\" className=\"text-green-600 border-green-200 text-xs whitespace-nowrap\">\n                          Available\n                        </Badge>\n                      )}\n                    </div>\n                    \n                    <CardDescription className=\"text-xs text-muted-foreground\">\n                      {number.backorderOnly \n                        ? 'Requires admin approval for purchase'\n                        : 'Full number shown after purchase'\n                      }\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                      <div>\n                        <Label className=\"text-xs text-muted-foreground\">Monthly Rate</Label>\n                        <p className=\"font-medium text-lg text-green-600\">\n                          {formatCurrency(number.monthlyRate || 0, number.currency)}\n                        </p>\n                      </div>\n                      <div>\n                        <Label className=\"text-xs text-muted-foreground\">Setup Fee</Label>\n                        <p className=\"font-medium\">\n                          {number.setupFee ? formatCurrency(number.setupFee, number.currency) : 'Free'}\n                        </p>\n                      </div>\n                    </div>\n\n                    {number.capabilities && number.capabilities.length > 0 && (\n                      <div>\n                        <Label className=\"text-xs text-muted-foreground\">Capabilities</Label>\n                        <div className=\"flex flex-wrap gap-1 mt-1\">\n                          {number.capabilities.map((capability) => (\n                            <Badge key={capability} variant=\"secondary\" className=\"text-xs\">\n                              {capability}\n                            </Badge>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n\n                    {number.backorderOnly ? (\n                      <Button\n                        onClick={() => {\n                          setSelectedNumber(number);\n                          setShowBackorderModal(true);\n                        }}\n                        className=\"w-full bg-orange-600 hover:bg-orange-700\"\n                      >\n                        <Calendar className=\"h-4 w-4 mr-2\" />\n                        Request Backorder\n                      </Button>\n                    ) : (\n                      <Button\n                        onClick={() => {\n                          setSelectedNumber(number);\n                          setShowPurchaseModal(true);\n                        }}\n                        className=\"w-full bg-green-600 hover:bg-green-700\"\n                        disabled={selectedNumbers.has(number._id)}\n                      >\n                        <ShoppingCart className=\"h-4 w-4 mr-2\" />\n                        {selectedNumbers.has(number._id) ? 'Selected for Bulk' : 'Purchase Number'}\n                      </Button>\n                    )}\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n\n            {/* Pagination */}\n            {totalPages > 1 && (\n              <div className=\"flex items-center justify-between mt-6\">\n                <p className=\"text-sm text-muted-foreground\">\n                  Showing {((currentPage - 1) * limit) + 1} to {Math.min(currentPage * limit, total)} of {total} results\n                </p>\n                <div className=\"flex space-x-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => changePage(currentPage - 1)}\n                    disabled={currentPage <= 1}\n                  >\n                    <ChevronLeft className=\"h-4 w-4\" />\n                    Previous\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => changePage(currentPage + 1)}\n                    disabled={currentPage >= totalPages}\n                  >\n                    Next\n                    <ChevronRight className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            )}\n          </>\n        )}\n\n        {/* Floating Bulk Actions Panel */}\n        {selectedNumbers.size > 0 && (\n          <div className=\"fixed bottom-6 left-1/2 transform -translate-x-1/2 z-50\">\n            <Card className=\"shadow-xl border-2 border-green-200 bg-green-50\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center gap-4\">\n                  <div className=\"flex items-center gap-2\">\n                    <Package className=\"h-5 w-5 text-green-600\" />\n                    <span className=\"font-medium text-green-800\">\n                      {selectedNumbers.size} number{selectedNumbers.size > 1 ? 's' : ''} selected\n                    </span>\n                  </div>\n                  \n                  <div className=\"flex items-center gap-2 text-sm text-green-700\">\n                    <DollarSign className=\"h-4 w-4\" />\n                    <span>\n                      Monthly: {formatCurrency(getTotalCost().monthlyTotal, phoneNumbers[0]?.currency || 'USD')}\n                      {getTotalCost().setupTotal > 0 && (\n                        <> + Setup: {formatCurrency(getTotalCost().setupTotal, phoneNumbers[0]?.currency || 'USD')}</>\n                      )}\n                    </span>\n                  </div>\n\n                  <div className=\"flex gap-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => {\n                        setSelectedNumbers(new Set());\n                        setIsSelectAll(false);\n                      }}\n                      className=\"border-green-300 text-green-700 hover:bg-green-100\"\n                    >\n                      <Trash2 className=\"h-4 w-4 mr-1\" />\n                      Clear\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      onClick={() => setShowBulkPurchaseModal(true)}\n                      className=\"bg-green-600 hover:bg-green-700\"\n                    >\n                      <Package className=\"h-4 w-4 mr-1\" />\n                      Purchase {selectedNumbers.size} Number{selectedNumbers.size > 1 ? 's' : ''}\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* Purchase Confirmation Modal */}\n        <Dialog open={showPurchaseModal} onOpenChange={setShowPurchaseModal}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Purchase Phone Number</DialogTitle>\n              <DialogDescription>\n                Confirm your purchase of {maskPhoneNumber(selectedNumber?.number || '')}\n              </DialogDescription>\n            </DialogHeader>\n            {selectedNumber && (\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <Label>Phone Number</Label>\n                    <p className=\"font-mono text-lg\">{maskPhoneNumber(selectedNumber.number)}</p>\n                    <p className=\"text-xs text-muted-foreground\">Full number provided after purchase</p>\n                  </div>\n                  <div>\n                    <Label>Country</Label>\n                    <p>{selectedNumber.country}</p>\n                  </div>\n                  <div>\n                    <Label>Type</Label>\n                    <p>{selectedNumber.numberType}</p>\n                  </div>\n                  <div>\n                    <Label>Monthly Rate</Label>\n                    <p className=\"font-semibold text-green-600\">\n                      {formatCurrency(selectedNumber.monthlyRate || 0, selectedNumber.currency)}\n                    </p>\n                  </div>\n                  <div>\n                    <Label>Setup Fee</Label>\n                    <p className=\"font-semibold\">\n                      {selectedNumber.setupFee && selectedNumber.setupFee > 0 \n                        ? formatCurrency(selectedNumber.setupFee, selectedNumber.currency)\n                        : 'Free'\n                      }\n                    </p>\n                  </div>\n                </div>\n\n                <Alert>\n                  <Calendar className=\"h-4 w-4\" />\n                  <AlertDescription>\n                    <strong>Billing starts today:</strong> Your first billing cycle will begin today ({formatDate(new Date())}) and billing will occur {selectedNumber.billingCycle === 'yearly' ? 'yearly' : 'monthly'}.\n                  </AlertDescription>\n                </Alert>\n\n                <Alert>\n                  <AlertCircle className=\"h-4 w-4\" />\n                  <AlertDescription>\n                    By purchasing this number, you agree to the monthly charges and billing terms. You can cancel anytime through your number management page.\n                  </AlertDescription>\n                </Alert>\n              </div>\n            )}\n            \n            <div className=\"flex justify-end space-x-3 pt-4\">\n              <Button variant=\"outline\" onClick={() => setShowPurchaseModal(false)}>\n                Cancel\n              </Button>\n              <Button\n                onClick={handleSinglePurchase}\n                disabled={isPurchasing}\n                className=\"bg-green-600 hover:bg-green-700\"\n              >\n                {isPurchasing ? (\n                  <>\n                    <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                    Purchasing...\n                  </>\n                ) : (\n                  <>\n                    <CheckCircle className=\"h-4 w-4 mr-2\" />\n                    Confirm Purchase\n                  </>\n                )}\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* Bulk Purchase Confirmation Modal */}\n        <Dialog open={showBulkPurchaseModal} onOpenChange={setShowBulkPurchaseModal}>\n          <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center gap-2\">\n                <Package className=\"h-5 w-5 text-green-600\" />\n                Bulk Purchase Confirmation\n              </DialogTitle>\n              <DialogDescription>\n                Review your bulk purchase of {selectedNumbers.size} phone number{selectedNumbers.size > 1 ? 's' : ''}\n              </DialogDescription>\n            </DialogHeader>\n            \n            <div className=\"space-y-6\">\n              {/* Summary */}\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 p-4 bg-green-50 rounded-lg\">\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-green-600\">{selectedNumbers.size}</div>\n                  <div className=\"text-sm text-muted-foreground\">Numbers</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-green-600\">\n                    {formatCurrency(getTotalCost().monthlyTotal, phoneNumbers[0]?.currency || 'USD')}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Monthly Total</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-green-600\">\n                    {formatCurrency(getTotalCost().setupTotal, phoneNumbers[0]?.currency || 'USD')}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Setup Fees</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-green-600\">\n                    {formatCurrency(getTotalCost().monthlyTotal + getTotalCost().setupTotal, phoneNumbers[0]?.currency || 'USD')}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">First Bill Total</div>\n                </div>\n              </div>\n\n              {/* Selected Numbers List */}\n              <div>\n                <h3 className=\"font-semibold mb-3\">Selected Numbers</h3>\n                <div className=\"max-h-60 overflow-y-auto border rounded-lg\">\n                  <div className=\"grid gap-2 p-4\">\n                    {getSelectedNumbers().map((number) => (\n                      <div key={number._id} className=\"flex items-center justify-between p-3 bg-muted/50 rounded\">\n                        <div className=\"flex-1\">\n                          <div className=\"font-mono font-medium\">{maskPhoneNumber(number.number)}</div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            {number.country} • {number.numberType}\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <div className=\"font-medium text-green-600\">\n                            {formatCurrency(number.monthlyRate || 0, number.currency)}/mo\n                          </div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            {number.setupFee && number.setupFee > 0 \n                              ? `+${formatCurrency(number.setupFee, number.currency)} setup`\n                              : 'Free setup'\n                            }\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n\n              {/* Important Notes */}\n              <Alert>\n                <Calendar className=\"h-4 w-4\" />\n                <AlertDescription>\n                  <strong>Billing Information:</strong>\n                  <ul className=\"list-disc list-inside mt-2 space-y-1 text-sm\">\n                    <li>Billing starts today ({formatDate(new Date())}) for all purchased numbers</li>\n                    <li>Monthly charges will be billed on the same date each month</li>\n                    <li>Setup fees (if any) are one-time charges</li>\n                    <li>You can manage or cancel these numbers anytime from your dashboard</li>\n                  </ul>\n                </AlertDescription>\n              </Alert>\n\n              <Alert>\n                <AlertCircle className=\"h-4 w-4\" />\n                <AlertDescription>\n                  <strong>Bulk Purchase Process:</strong> Numbers will be processed individually. \n                  If some purchases fail, you&apos;ll receive a detailed report showing which numbers \n                  were successfully purchased and which failed with reasons.\n                </AlertDescription>\n              </Alert>\n            </div>\n            \n            <div className=\"flex justify-end space-x-3 pt-4\">\n              <Button variant=\"outline\" onClick={() => setShowBulkPurchaseModal(false)}>\n                Cancel\n              </Button>\n              <Button\n                onClick={handleBulkPurchase}\n                disabled={isBulkPurchasing}\n                className=\"bg-green-600 hover:bg-green-700\"\n              >\n                {isBulkPurchasing ? (\n                  <>\n                    <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                    Processing...\n                  </>\n                ) : (\n                  <>\n                    <CheckCircle className=\"h-4 w-4 mr-2\" />\n                    Confirm Bulk Purchase\n                  </>\n                )}\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* Bulk Purchase Results Modal */}\n        <Dialog open={showBulkResultModal} onOpenChange={setShowBulkResultModal}>\n          <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center gap-2\">\n                {bulkPurchaseResult?.summary.failed === 0 ? (\n                  <CheckCircle className=\"h-5 w-5 text-green-600\" />\n                ) : bulkPurchaseResult?.summary.successful === 0 ? (\n                  <AlertTriangle className=\"h-5 w-5 text-red-600\" />\n                ) : (\n                  <AlertCircle className=\"h-5 w-5 text-yellow-600\" />\n                )}\n                Bulk Purchase Results\n              </DialogTitle>\n              <DialogDescription>\n                {bulkPurchaseResult?.summary.failed === 0 \n                  ? `All ${bulkPurchaseResult.summary.successful} phone numbers purchased successfully!`\n                  : bulkPurchaseResult?.summary.successful === 0\n                  ? `All ${bulkPurchaseResult.summary.failed} purchases failed.`\n                  : `${bulkPurchaseResult?.summary.successful} successful, ${bulkPurchaseResult?.summary.failed} failed.`\n                }\n              </DialogDescription>\n            </DialogHeader>\n            \n            {bulkPurchaseResult && (\n              <div className=\"space-y-6\">\n                {/* Summary Stats */}\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 p-4 bg-muted/50 rounded-lg\">\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold\">{bulkPurchaseResult.summary.total}</div>\n                    <div className=\"text-sm text-muted-foreground\">Total Attempted</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-green-600\">{bulkPurchaseResult.summary.successful}</div>\n                    <div className=\"text-sm text-muted-foreground\">Successful</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-red-600\">{bulkPurchaseResult.summary.failed}</div>\n                    <div className=\"text-sm text-muted-foreground\">Failed</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-green-600\">\n                      {formatCurrency(\n                        bulkPurchaseResult.summary.totalCost + bulkPurchaseResult.summary.totalSetupFees, \n                        bulkPurchaseResult.successful[0]?.currency || 'USD'\n                      )}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">Total Cost</div>\n                  </div>\n                </div>\n\n                {/* Successful Purchases */}\n                {bulkPurchaseResult.successful.length > 0 && (\n                  <div>\n                    <h3 className=\"font-semibold text-green-600 mb-3 flex items-center gap-2\">\n                      <Check className=\"h-4 w-4\" />\n                      Successful Purchases ({bulkPurchaseResult.successful.length})\n                    </h3>\n                    <div className=\"max-h-40 overflow-y-auto border rounded-lg\">\n                      <div className=\"divide-y\">\n                        {bulkPurchaseResult.successful.map((result) => (\n                          <div key={result.phoneNumberId} className=\"p-3 flex items-center justify-between\">\n                            <div>\n                              <div className=\"font-mono font-medium\">{result.number}</div>\n                              <div className=\"text-sm text-muted-foreground\">\n                                {result.country} • {result.numberType}\n                              </div>\n                            </div>\n                            <div className=\"text-right\">\n                              <div className=\"font-medium text-green-600\">\n                                {formatCurrency(result.monthlyRate, result.currency)}/mo\n                              </div>\n                              <div className=\"text-sm text-muted-foreground\">\n                                {result.setupFee && result.setupFee > 0 \n                                  ? `+${formatCurrency(result.setupFee, result.currency)} setup`\n                                  : 'Free setup'\n                                }\n                              </div>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {/* Failed Purchases */}\n                {bulkPurchaseResult.failed.length > 0 && (\n                  <div>\n                    <h3 className=\"font-semibold text-red-600 mb-3 flex items-center gap-2\">\n                      <AlertTriangle className=\"h-4 w-4\" />\n                      Failed Purchases ({bulkPurchaseResult.failed.length})\n                    </h3>\n                    <div className=\"max-h-40 overflow-y-auto border rounded-lg\">\n                      <div className=\"divide-y\">\n                        {bulkPurchaseResult.failed.map((result, index) => (\n                          <div key={`${result.phoneNumberId}-${index}`} className=\"p-3\">\n                            <div className=\"flex items-center justify-between\">\n                              <div className=\"font-mono font-medium\">{result.number}</div>\n                              <Badge variant=\"destructive\">Failed</Badge>\n                            </div>\n                            <div className=\"text-sm text-red-600 mt-1\">{result.error}</div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {/* Next Steps */}\n                {bulkPurchaseResult.successful.length > 0 && (\n                  <Alert>\n                    <CheckCircle className=\"h-4 w-4\" />\n                    <AlertDescription>\n                      <strong>Next Steps:</strong> Your purchased numbers are now active and can be managed \n                      from your <a href=\"/services/numbers\" className=\"text-green-600 hover:underline\">Numbers Dashboard</a>. \n                      Billing records have been created and will appear in your billing section.\n                    </AlertDescription>\n                  </Alert>\n                )}\n              </div>\n            )}\n            \n            <div className=\"flex justify-end space-x-3 pt-4\">\n              <Button \n                variant=\"outline\" \n                onClick={() => setShowBulkResultModal(false)}\n              >\n                Close\n              </Button>\n              {bulkPurchaseResult?.successful.length && bulkPurchaseResult.successful.length > 0 && (\n                <Button \n                  onClick={() => window.location.href = '/services/numbers'}\n                  className=\"bg-green-600 hover:bg-green-700\"\n                >\n                  View My Numbers\n                </Button>\n              )}\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* Backorder Request Modal */}\n        <Dialog open={showBackorderModal} onOpenChange={setShowBackorderModal}>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Submit Backorder Request</DialogTitle>\n              <DialogDescription>\n                Request admin approval to purchase {selectedNumber?.number}\n              </DialogDescription>\n            </DialogHeader>\n            \n            {selectedNumber && (\n              <div className=\"space-y-6\">\n                {/* Number Details */}\n                <div className=\"p-4 bg-muted/50 rounded-lg\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label className=\"text-xs text-muted-foreground\">Phone Number</Label>\n                      <p className=\"font-mono font-medium\">{selectedNumber.number}</p>\n                    </div>\n                    <div>\n                      <Label className=\"text-xs text-muted-foreground\">Monthly Rate</Label>\n                      <p className=\"font-medium text-green-600\">\n                        {formatCurrency(selectedNumber.monthlyRate || 0, selectedNumber.currency)}\n                      </p>\n                    </div>\n                    <div>\n                      <Label className=\"text-xs text-muted-foreground\">Country & Type</Label>\n                      <p>{selectedNumber.country} • {selectedNumber.numberType}</p>\n                    </div>\n                    <div>\n                      <Label className=\"text-xs text-muted-foreground\">Setup Fee</Label>\n                      <p>{selectedNumber.setupFee ? formatCurrency(selectedNumber.setupFee, selectedNumber.currency) : 'Free'}</p>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Request Form */}\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"priority\">Priority Level</Label>\n                    <Select value={backorderForm.priority} onValueChange={(value: 'low' | 'medium' | 'high' | 'urgent') => setBackorderForm({...backorderForm, priority: value})}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"low\">Low - No rush</SelectItem>\n                        <SelectItem value=\"medium\">Medium - Standard processing</SelectItem>\n                        <SelectItem value=\"high\">High - Priority processing</SelectItem>\n                        <SelectItem value=\"urgent\">Urgent - Immediate attention</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"reason\">Reason for Request</Label>\n                    <Input\n                      id=\"reason\"\n                      value={backorderForm.reason}\n                      onChange={(e) => setBackorderForm({...backorderForm, reason: e.target.value})}\n                      placeholder=\"Brief reason for requesting this number...\"\n                      maxLength={200}\n                    />\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      {backorderForm.reason.length}/200 characters\n                    </p>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"businessJustification\">Business Justification</Label>\n                    <Textarea\n                      id=\"businessJustification\"\n                      value={backorderForm.businessJustification}\n                      onChange={(e) => setBackorderForm({...backorderForm, businessJustification: e.target.value})}\n                      placeholder=\"Provide detailed business justification for why you need this specific number...\"\n                      rows={4}\n                      maxLength={1000}\n                    />\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      {backorderForm.businessJustification.length}/1000 characters\n                    </p>\n                  </div>\n                </div>\n\n                {/* Important Information */}\n                <Alert>\n                  <AlertCircle className=\"h-4 w-4\" />\n                  <AlertDescription>\n                    <strong>Backorder Process:</strong>\n                    <ul className=\"list-disc list-inside mt-2 space-y-1 text-sm\">\n                      <li>Your request will be reviewed by our admin team</li>\n                      <li>You&apos;ll receive email notifications about status updates</li>\n                      <li>If approved, the number will be automatically assigned to your account</li>\n                      <li>Billing will start only after approval and assignment</li>\n                    </ul>\n                  </AlertDescription>\n                </Alert>\n              </div>\n            )}\n            \n            <div className=\"flex justify-end space-x-3 pt-4\">\n              <Button variant=\"outline\" onClick={() => setShowBackorderModal(false)}>\n                Cancel\n              </Button>\n              <Button\n                onClick={handleBackorderRequest}\n                disabled={isSubmittingBackorder || !backorderForm.reason.trim() || !backorderForm.businessJustification.trim()}\n                className=\"bg-orange-600 hover:bg-orange-700\"\n              >\n                {isSubmittingBackorder ? (\n                  <>\n                    <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                    Submitting...\n                  </>\n                ) : (\n                  <>\n                    <Calendar className=\"h-4 w-4 mr-2\" />\n                    Submit Request\n                  </>\n                )}\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </PageLayout>\n    </MainLayout>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/services/numbers/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":394,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":394,"endColumn":19},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":1360,"column":62,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[66149,66345],"text":"\n                        Technical connection parameters haven&apos;t been configured for this number yet. \n                        Contact our support team for setup assistance.\n                      "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[66149,66345],"text":"\n                        Technical connection parameters haven&lsquo;t been configured for this number yet. \n                        Contact our support team for setup assistance.\n                      "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[66149,66345],"text":"\n                        Technical connection parameters haven&#39;t been configured for this number yet. \n                        Contact our support team for setup assistance.\n                      "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[66149,66345],"text":"\n                        Technical connection parameters haven&rsquo;t been configured for this number yet. \n                        Contact our support team for setup assistance.\n                      "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { MainLayout } from '@/components/layout/MainLayout';\nimport { PageLayout } from '@/components/layout/PageLayout';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Label } from '@/components/ui/label';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { \n  Hash,\n  Search,\n  X,\n  Loader2,\n  AlertCircle,\n  UserX,\n  ShoppingCart,\n  CheckCircle,\n  Phone,\n  Copy,\n  MessageSquare,\n  FileText,\n  Terminal,\n  BookOpen,\n  HelpCircle,\n  AlertTriangle,\n  Globe,\n  Key\n} from 'lucide-react';\nimport { toast } from 'sonner';\nimport { formatDate, formatCurrency } from '@/lib/utils';\nimport { \n  PhoneNumber, \n  PhoneNumberRequest, \n  CreatePhoneNumberRequestForm, \n  RequestPriority \n} from '@/types/phoneNumber';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\n\n// Interface for backorder requests\ninterface BackorderRequest {\n  _id: string;\n  requestNumber: string;\n  userId: {\n    _id: string;\n    name: string;\n    email: string;\n  };\n  phoneNumberId: string; // Just the ID\n  phoneNumber?: { // The populated phone number data\n    _id: string;\n    number: string;\n    country: string;\n    countryCode: string;\n    numberType: string;\n    provider: string;\n    monthlyRate: number;\n    setupFee?: number;\n    currency: string;\n    capabilities: string[];\n  };\n  reason: string;\n  businessJustification: string;\n  priority: 'low' | 'medium' | 'high' | 'urgent';\n  status: 'pending' | 'approved' | 'rejected';\n  reviewNotes?: string;\n  processingNotes?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\n// Combined interface for displaying both types of requests\ninterface CombinedRequest {\n  _id: string;\n  requestNumber: string;\n  requestType: 'cancel' | 'modify' | 'backorder';\n  phoneNumber?: {\n    _id: string;\n    number: string;\n    country: string;\n    countryCode: string;\n    numberType: string;\n    provider: string;\n    monthlyRate: number;\n    setupFee?: number;\n    currency: string;\n    capabilities: string[];\n  };\n  reason?: string;\n  description?: string;\n  businessJustification?: string;\n  priority: 'low' | 'medium' | 'high' | 'urgent';\n  status: 'pending' | 'approved' | 'rejected' | 'completed' | 'cancelled';\n  reviewNotes?: string;\n  processingNotes?: string;\n  scheduledDate?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport default function PhoneNumbersPage() {\n  const [phoneNumbers, setPhoneNumbers] = useState<PhoneNumber[]>([]);\n  const [requests, setRequests] = useState<CombinedRequest[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [activeTab, setActiveTab] = useState('numbers');\n  \n  // Modal states\n  const [showDetailsModal, setShowDetailsModal] = useState(false);\n  const [showCancelModal, setShowCancelModal] = useState(false);\n  const [showRequestDetailsModal, setShowRequestDetailsModal] = useState(false);\n  const [selectedNumber, setSelectedNumber] = useState<PhoneNumber | null>(null);\n  const [selectedRequest, setSelectedRequest] = useState<CombinedRequest | null>(null);\n  \n  // Copy button states\n  const [copiedStates, setCopiedStates] = useState<Record<string, boolean>>({});\n  \n  // Filter and search states\n  const [searchTerm, setSearchTerm] = useState('');\n  const [statusFilter, setStatusFilter] = useState<string>('all');\n  \n  // Form states\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [cancelForm, setCancelForm] = useState<CreatePhoneNumberRequestForm>({\n    phoneNumberId: '',\n    requestType: 'cancel',\n    reason: '',\n    description: '',\n    priority: 'medium' as RequestPriority,\n    scheduledDate: undefined\n  });\n\n  const router = useRouter();\n\n  useEffect(() => {\n    fetchPhoneNumbers();\n    fetchRequests();\n  }, [activeTab]);\n\n  const fetchPhoneNumbers = async () => {\n    try {\n      setIsLoading(true);\n      const response = await fetch('/api/phone-numbers');\n      if (!response.ok) {\n        throw new Error('Failed to fetch phone numbers');\n      }\n      const data = await response.json();\n      setPhoneNumbers(data.phoneNumbers || []);\n    } catch (error) {\n      console.error('Error fetching phone numbers:', error);\n      setPhoneNumbers([]);\n      toast.error('Failed to load phone numbers');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const fetchRequests = async () => {\n    try {\n      // Fetch both regular requests and backorder requests in parallel\n      const [regularRequestsResponse, backorderRequestsResponse] = await Promise.all([\n        fetch('/api/phone-numbers/requests'),\n        fetch('/api/backorder-requests')\n      ]);\n\n      const combinedRequests: CombinedRequest[] = [];\n\n      // Process regular phone number requests\n      if (regularRequestsResponse.ok) {\n        const regularData = await regularRequestsResponse.json();\n        const regularRequests = (regularData.requests || []).map((req: PhoneNumberRequest) => ({\n          _id: req._id,\n          requestNumber: req.requestNumber,\n          requestType: req.requestType,\n          phoneNumber: req.phoneNumber,\n          reason: req.reason,\n          description: req.description,\n          priority: req.priority,\n          status: req.status,\n          reviewNotes: req.reviewNotes,\n          scheduledDate: req.scheduledDate,\n          createdAt: req.createdAt,\n          updatedAt: req.updatedAt\n        }));\n        combinedRequests.push(...regularRequests);\n      }\n\n      // Process backorder requests\n      if (backorderRequestsResponse.ok) {\n        const backorderData = await backorderRequestsResponse.json();\n        const backorderRequests = (backorderData.requests || []).map((req: BackorderRequest) => {\n          return {\n            _id: req._id,\n            requestNumber: req.requestNumber,\n            requestType: 'backorder' as const,\n            phoneNumber: req.phoneNumber ? {\n              _id: req.phoneNumber._id,\n              number: req.phoneNumber.number,\n              country: req.phoneNumber.country,\n              countryCode: req.phoneNumber.countryCode,\n              numberType: req.phoneNumber.numberType,\n              provider: req.phoneNumber.provider,\n              monthlyRate: req.phoneNumber.monthlyRate,\n              setupFee: req.phoneNumber.setupFee,\n              currency: req.phoneNumber.currency,\n              capabilities: req.phoneNumber.capabilities\n            } : undefined,\n            reason: req.reason,\n            businessJustification: req.businessJustification,\n            priority: req.priority,\n            status: req.status,\n            reviewNotes: req.reviewNotes,\n            processingNotes: req.processingNotes,\n            createdAt: req.createdAt,\n            updatedAt: req.updatedAt\n          };\n        });\n        combinedRequests.push(...backorderRequests);\n      }\n\n      // Sort combined requests by creation date (newest first)\n      combinedRequests.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n      \n      setRequests(combinedRequests);\n    } catch (error) {\n      console.error('Error fetching requests:', error);\n      toast.error('Failed to load requests');\n    }\n  };\n\n  const handleCancelRequest = async () => {\n    if (!selectedNumber) return;\n\n    try {\n      setIsSubmitting(true);\n      const response = await fetch('/api/phone-numbers/requests', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          ...cancelForm,\n          phoneNumberId: selectedNumber._id,\n          requestType: 'cancel'\n        }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to submit cancel request');\n      }\n\n      const data = await response.json();\n      toast.success(`Cancel request submitted. Request ID: ${data.requestNumber}`);\n      setShowCancelModal(false);\n      setCancelForm({\n        phoneNumberId: '',\n        requestType: 'cancel',\n        reason: '',\n        description: '',\n        priority: 'medium' as RequestPriority,\n        scheduledDate: undefined\n      });\n      setSelectedNumber(null);\n      fetchRequests();\n    } catch (error) {\n      console.error('Error submitting cancel request:', error);\n      toast.error(error instanceof Error ? error.message : 'Failed to submit cancel request');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleWithdrawRequest = async (requestId: string, requestNumber: string) => {\n    try {\n      const response = await fetch(`/api/phone-numbers/requests?requestId=${requestId}`, {\n        method: 'DELETE',\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to withdraw request');\n      }\n\n      toast.success(`Your number will be kept! Cancellation request ${requestNumber} has been withdrawn.`);\n      fetchRequests(); // Refresh requests list\n    } catch (error) {\n      console.error('Error withdrawing request:', error);\n      toast.error(error instanceof Error ? error.message : 'Failed to withdraw request');\n    }\n  };\n\n  const filteredNumbers = phoneNumbers.filter(number => {\n    const matchesSearch = !searchTerm || \n      number.number.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      number.country.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesStatus = statusFilter === 'all' || getPhoneNumberDisplayStatus(number) === statusFilter;\n    \n    return matchesSearch && matchesStatus;\n  });\n\n  const getBadgeVariant = (status: string) => {\n    switch (status) {\n      case 'active': return 'default';\n      case 'assigned': return 'default';\n      case 'suspended': return 'destructive';\n      case 'pending_cancellation': return 'secondary';\n      default: return 'outline';\n    }\n  };\n\n  const getPhoneNumberDisplayStatus = (number: PhoneNumber) => {\n    // Check if there's a pending or approved cancellation request\n    const hasPendingCancellation = requests.some(req => \n      req.phoneNumber?.number === number.number && \n      req.requestType === 'cancel' &&\n      (req.status === 'pending' || req.status === 'approved')\n    );\n    \n    if (hasPendingCancellation) {\n      return 'pending_cancellation';\n    }\n    \n    return number.status;\n  };\n\n  const getDisplayStatusText = (status: string) => {\n    switch (status) {\n      case 'pending_cancellation': return 'Pending Cancellation';\n      case 'assigned': return 'Active';\n      default: return status.replace('_', ' ');\n    }\n  };\n\n  const getReasonDisplayText = (reason: string) => {\n    switch (reason) {\n      case 'no_longer_needed': return 'No longer needed';\n      case 'cost_reduction': return 'Cost reduction';\n      case 'service_issues': return 'Service issues';\n      case 'business_closure': return 'Business closure';\n      case 'other': return 'Other';\n      default: return reason;\n    }\n  };\n\n  const getRequestBadgeVariant = (status: string) => {\n    switch (status) {\n      case 'pending': return 'outline';\n      case 'approved': return 'default';\n      case 'rejected': return 'destructive';\n      case 'completed': return 'secondary';\n      case 'cancelled': return 'outline';\n      default: return 'outline';\n    }\n  };\n\n  const getPriorityBadgeVariant = (priority: string) => {\n    switch (priority) {\n      case 'low': return 'outline';\n      case 'medium': return 'default';\n      case 'high': return 'destructive';\n      case 'urgent': return 'destructive';\n      default: return 'outline';\n    }\n  };\n\n  const getOrdinalSuffix = (day: number) => {\n    if (day >= 11 && day <= 13) {\n      return 'th';\n    }\n    switch (day % 10) {\n      case 1: return 'st';\n      case 2: return 'nd';\n      case 3: return 'rd';\n      default: return 'th';\n    }\n  };\n\n  const handleCopyToClipboard = async (text: string, key: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      setCopiedStates(prev => ({ ...prev, [key]: true }));\n      toast.success('Copied to clipboard');\n      \n      // Reset the copied state after 2 seconds\n      setTimeout(() => {\n        setCopiedStates(prev => ({ ...prev, [key]: false }));\n      }, 2000);\n    } catch (error) {\n      toast.error('Failed to copy to clipboard');\n    }\n  };\n\n  return (\n    <MainLayout>\n      <PageLayout\n        title=\"Phone Numbers\"\n        description=\"Manage your assigned phone numbers and service requests\"\n        breadcrumbs={[\n          { label: 'Dashboard', href: '/dashboard' },\n          { label: 'Services', href: '/services' },\n          { label: 'Numbers' }\n        ]}\n        headerActions={\n          <Button \n            onClick={() => router.push('/services/numbers/buy')}\n            className=\"bg-green-600 hover:bg-green-700\"\n          >\n            <ShoppingCart className=\"h-4 w-4 mr-2\" />\n            Buy Numbers\n          </Button>\n        }\n      >\n        {/* Content */}\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"numbers\">My Numbers ({phoneNumbers.length})</TabsTrigger>\n            <TabsTrigger value=\"requests\">Requests ({requests.length})</TabsTrigger>\n          </TabsList>\n\n          {/* Phone Numbers Tab */}\n          <TabsContent value=\"numbers\" className=\"space-y-6\">\n            {/* Filters */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Filters</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex flex-col sm:flex-row gap-4\">\n                  <div className=\"relative flex-1\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n                    <Input\n                      type=\"text\"\n                      placeholder=\"Search numbers or country...\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      className=\"pl-10\"\n                    />\n                  </div>\n                  <Select value={statusFilter} onValueChange={setStatusFilter}>\n                    <SelectTrigger className=\"w-full sm:w-48\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Statuses</SelectItem>\n                      <SelectItem value=\"assigned\">Active</SelectItem>\n                      <SelectItem value=\"pending_cancellation\">Pending Cancellation</SelectItem>\n                      <SelectItem value=\"suspended\">Suspended</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  {(searchTerm || statusFilter !== 'all') && (\n                    <Button\n                      variant=\"ghost\"\n                      onClick={() => {\n                        setSearchTerm('');\n                        setStatusFilter('all');\n                      }}\n                      className=\"px-3\"\n                    >\n                      <X className=\"h-4 w-4\" />\n                    </Button>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Phone Numbers Grid */}\n            {isLoading ? (\n              <div className=\"flex items-center justify-center py-12\">\n                <Loader2 className=\"h-8 w-8 animate-spin\" />\n              </div>\n            ) : filteredNumbers.length === 0 ? (\n              <Card>\n                <CardContent className=\"py-12\">\n                  <div className=\"text-center\">\n                    <Hash className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-semibold mb-2\">No phone numbers found</h3>\n                    <p className=\"text-muted-foreground\">\n                      {searchTerm || statusFilter !== 'all' \n                        ? 'Try adjusting your filters to see more results.'\n                        : 'You don&apos;t have any phone numbers assigned yet.'\n                      }\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {filteredNumbers.map((number) => (\n                  <Card key={number._id} className=\"hover:shadow-lg transition-shadow\">\n                    <CardHeader className=\"pb-3\">\n                      <div className=\"flex items-center justify-between\">\n                        <CardTitle className=\"text-lg font-mono\">{number.number}</CardTitle>\n                        <Badge variant={getBadgeVariant(getPhoneNumberDisplayStatus(number))}>\n                          {getDisplayStatusText(getPhoneNumberDisplayStatus(number))}\n                        </Badge>\n                      </div>\n                      <CardDescription>\n                        {number.country} • {number.numberType}\n                      </CardDescription>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                        <div>\n                          <Label className=\"text-xs text-muted-foreground\">Monthly Rate</Label>\n                          <p className=\"font-medium\">\n                            {number.monthlyRate ? formatCurrency(number.monthlyRate, number.currency) : 'Free'}\n                          </p>\n                        </div>\n                        <div>\n                          <Label className=\"text-xs text-muted-foreground\">Next Billing</Label>\n                          <p className=\"font-medium\">\n                            {number.nextBillingDate ? formatDate(number.nextBillingDate) : 'N/A'}\n                          </p>\n                        </div>\n                      </div>\n\n                      {number.capabilities && number.capabilities.length > 0 && (\n                        <div>\n                          <Label className=\"text-xs text-muted-foreground\">Capabilities</Label>\n                          <div className=\"flex flex-wrap gap-1 mt-1\">\n                            {number.capabilities.map((capability) => (\n                              <Badge key={capability} variant=\"outline\" className=\"text-xs\">\n                                {capability}\n                              </Badge>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n\n                      <div className=\"flex space-x-2 pt-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => {\n                            setSelectedNumber(number);\n                            setShowDetailsModal(true);\n                          }}\n                          className=\"flex-1\"\n                        >\n                          View Details\n                        </Button>\n                        {(getPhoneNumberDisplayStatus(number) === 'assigned') && (\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => {\n                              setSelectedNumber(number);\n                              setShowCancelModal(true);\n                            }}\n                            className=\"text-red-600 hover:text-red-700\"\n                            disabled={requests.some(req => \n                              req.phoneNumber?.number === number.number && \n                              (req.status === 'pending' || req.status === 'approved')\n                            )}\n                            title={requests.some(req => \n                              req.phoneNumber?.number === number.number && \n                              (req.status === 'pending' || req.status === 'approved')\n                            ) ? 'Request already pending' : 'Request cancellation'}\n                          >\n                            <UserX className=\"h-4 w-4\" />\n                          </Button>\n                        )}\n                      </div>\n\n                      {/* Show pending request info */}\n                      {(() => {\n                        const pendingRequest = requests.find(req => \n                          req.phoneNumber?.number === number.number && \n                          req.requestType === 'cancel' &&\n                          (req.status === 'pending' || req.status === 'approved')\n                        );\n                        \n                        if (pendingRequest) {\n                          return (\n                            <div className=\"mt-3 p-2 bg-muted/50 rounded-lg border-l-2 border-orange-400\">\n                              <div className=\"flex items-center justify-between\">\n                                <div className=\"flex items-center space-x-2\">\n                                  <div className=\"w-2 h-2 bg-orange-400 rounded-full animate-pulse\"></div>\n                                  <p className=\"text-xs text-muted-foreground\">\n                                    Cancellation request #{pendingRequest.requestNumber} is {pendingRequest.status}\n                                  </p>\n                                </div>\n                                {pendingRequest.status === 'pending' && (\n                                  <Button\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    onClick={() => handleWithdrawRequest(pendingRequest._id, pendingRequest.requestNumber)}\n                                    className=\"text-xs h-6 px-2 text-blue-600 hover:text-blue-700\"\n                                    title=\"Cancel the cancellation request and keep your number\"\n                                  >\n                                    Keep Number\n                                  </Button>\n                                )}\n                              </div>\n                              {pendingRequest.scheduledDate && (\n                                <p className=\"text-xs text-muted-foreground mt-1\">\n                                  Scheduled: {formatDate(pendingRequest.scheduledDate)}\n                                </p>\n                              )}\n                            </div>\n                          );\n                        }\n                        return null;\n                      })()}\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </TabsContent>\n\n          {/* Requests Tab */}\n          <TabsContent value=\"requests\" className=\"space-y-6\">\n            {requests.length === 0 ? (\n              <Card>\n                <CardContent className=\"py-12\">\n                  <div className=\"text-center\">\n                    <AlertCircle className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-semibold mb-2\">No requests found</h3>\n                    <p className=\"text-muted-foreground\">\n                      You haven&apos;t submitted any service requests yet.\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n            ) : (\n              <Card>\n                <CardHeader>\n                  <CardTitle>Service Requests</CardTitle>\n                  <CardDescription>\n                    View and manage your phone number service requests\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Request ID</TableHead>\n                        <TableHead>Type</TableHead>\n                        <TableHead>Phone Number</TableHead>\n                        <TableHead>Status</TableHead>\n                        <TableHead>Priority</TableHead>\n                        <TableHead>Submitted</TableHead>\n                        <TableHead className=\"text-right\">Actions</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {requests.map((request) => (\n                        <TableRow key={request._id}>\n                          <TableCell className=\"font-mono text-sm\">\n                            {request.requestNumber}\n                          </TableCell>\n                          <TableCell>\n                            <Badge \n                              variant={request.requestType === 'backorder' ? 'outline' : 'secondary'}\n                              className={\n                                request.requestType === 'backorder' \n                                  ? 'text-orange-600 border-orange-200' \n                                  : request.requestType === 'cancel'\n                                  ? 'text-red-600 border-red-200'\n                                  : 'text-blue-600 border-blue-200'\n                              }\n                            >\n                              {request.requestType === 'backorder' ? 'Purchase' : \n                               request.requestType === 'cancel' ? 'Cancel' : \n                               'Modify'}\n                            </Badge>\n                          </TableCell>\n                          <TableCell className=\"font-mono\">\n                            {request.phoneNumber?.number || 'N/A'}\n                          </TableCell>\n                          <TableCell>\n                            <Badge variant={getRequestBadgeVariant(request.status)}>\n                              {request.status}\n                            </Badge>\n                          </TableCell>\n                          <TableCell>\n                            <Badge variant={getPriorityBadgeVariant(request.priority)}>\n                              {request.priority}\n                            </Badge>\n                          </TableCell>\n                          <TableCell className=\"text-sm text-muted-foreground\">\n                            {formatDate(request.createdAt)}\n                          </TableCell>\n                          <TableCell className=\"text-right\">\n                            <div className=\"flex justify-end gap-2\">\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => {\n                                  setSelectedRequest(request);\n                                  setShowRequestDetailsModal(true);\n                                }}\n                              >\n                                View Details\n                              </Button>\n                              {request.status === 'pending' && request.requestType === 'cancel' && (\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  onClick={() => handleWithdrawRequest(request._id, request.requestNumber)}\n                                  className=\"text-blue-600 hover:text-blue-700\"\n                                >\n                                  Keep Number\n                                </Button>\n                              )}\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </CardContent>\n              </Card>\n            )}\n          </TabsContent>\n        </Tabs>\n\n        {/* Request Details Modal */}\n        <Dialog open={showRequestDetailsModal} onOpenChange={setShowRequestDetailsModal}>\n          <DialogContent className=\"max-w-3xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center gap-2\">\n                Request Details\n                {selectedRequest && (\n                  <Badge \n                    variant={selectedRequest.requestType === 'backorder' ? 'outline' : 'secondary'}\n                    className={\n                      selectedRequest.requestType === 'backorder' \n                        ? 'text-orange-600 border-orange-200' \n                        : selectedRequest.requestType === 'cancel'\n                        ? 'text-red-600 border-red-200'\n                        : 'text-blue-600 border-blue-200'\n                    }\n                  >\n                    {selectedRequest.requestType === 'backorder' ? 'Purchase Request' : \n                     selectedRequest.requestType === 'cancel' ? 'Cancellation Request' : \n                     'Modification Request'}\n                  </Badge>\n                )}\n              </DialogTitle>\n              <DialogDescription>\n                {selectedRequest?.requestType === 'backorder' \n                  ? 'Your request to purchase a backorder-only phone number'\n                  : selectedRequest?.requestType === 'cancel'\n                  ? 'Your request to cancel a phone number'\n                  : 'Your request to modify a phone number'\n                }\n              </DialogDescription>\n            </DialogHeader>\n\n            {selectedRequest && (\n              <div className=\"space-y-6\">\n                {/* Request Overview */}\n                <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4 p-4 bg-muted/50 rounded-lg\">\n                  <div>\n                    <Label className=\"text-xs text-muted-foreground\">Request ID</Label>\n                    <p className=\"font-mono font-medium\">{selectedRequest.requestNumber}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-xs text-muted-foreground\">Status</Label>\n                    <Badge variant={getRequestBadgeVariant(selectedRequest.status)} className=\"mt-1\">\n                      {selectedRequest.status}\n                    </Badge>\n                  </div>\n                  <div>\n                    <Label className=\"text-xs text-muted-foreground\">Priority</Label>\n                    <Badge variant={getPriorityBadgeVariant(selectedRequest.priority)} className=\"mt-1\">\n                      {selectedRequest.priority}\n                    </Badge>\n                  </div>\n                  <div>\n                    <Label className=\"text-xs text-muted-foreground\">Submitted</Label>\n                    <p className=\"text-sm\">{formatDate(selectedRequest.createdAt)}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-xs text-muted-foreground\">Last Updated</Label>\n                    <p className=\"text-sm\">{formatDate(selectedRequest.updatedAt)}</p>\n                  </div>\n                  {selectedRequest.scheduledDate && (\n                    <div>\n                      <Label className=\"text-xs text-muted-foreground\">Scheduled Date</Label>\n                      <p className=\"text-sm\">{formatDate(selectedRequest.scheduledDate)}</p>\n                    </div>\n                  )}\n                </div>\n\n                {/* Phone Number Details */}\n                {selectedRequest.phoneNumber && (\n                  <div>\n                    <h4 className=\"font-semibold mb-3\">Phone Number Information</h4>\n                    <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4 p-4 border rounded-lg\">\n                      <div>\n                        <Label className=\"text-xs text-muted-foreground\">Number</Label>\n                        <p className=\"font-mono font-medium text-lg\">{selectedRequest.phoneNumber.number}</p>\n                      </div>\n                      <div>\n                        <Label className=\"text-xs text-muted-foreground\">Country</Label>\n                        <p>{selectedRequest.phoneNumber.country} (+{selectedRequest.phoneNumber.countryCode})</p>\n                      </div>\n                      <div>\n                        <Label className=\"text-xs text-muted-foreground\">Type</Label>\n                        <p>{selectedRequest.phoneNumber.numberType}</p>\n                      </div>\n                      <div>\n                        <Label className=\"text-xs text-muted-foreground\">Provider</Label>\n                        <p>{selectedRequest.phoneNumber.provider}</p>\n                      </div>\n                      <div>\n                        <Label className=\"text-xs text-muted-foreground\">Monthly Rate</Label>\n                        <p className=\"font-medium\">\n                          {formatCurrency(selectedRequest.phoneNumber.monthlyRate, selectedRequest.phoneNumber.currency)}\n                        </p>\n                      </div>\n                      {selectedRequest.phoneNumber.setupFee && (\n                        <div>\n                          <Label className=\"text-xs text-muted-foreground\">Setup Fee</Label>\n                          <p className=\"font-medium\">\n                            {formatCurrency(selectedRequest.phoneNumber.setupFee, selectedRequest.phoneNumber.currency)}\n                          </p>\n                        </div>\n                      )}\n                      {selectedRequest.phoneNumber.capabilities && selectedRequest.phoneNumber.capabilities.length > 0 && (\n                        <div className=\"col-span-full\">\n                          <Label className=\"text-xs text-muted-foreground\">Capabilities</Label>\n                          <div className=\"flex flex-wrap gap-1 mt-1\">\n                            {selectedRequest.phoneNumber.capabilities.map((capability) => (\n                              <Badge key={capability} variant=\"outline\" className=\"text-xs\">\n                                {capability}\n                              </Badge>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                )}\n\n                {/* Request Details */}\n                <div>\n                  <h4 className=\"font-semibold mb-3\">Request Information</h4>\n                  <div className=\"space-y-4\">\n                    {selectedRequest.reason && (\n                      <div>\n                        <Label className=\"text-sm font-medium\">Reason</Label>\n                        <p className=\"text-sm mt-1 p-3 bg-muted/50 rounded\">\n                          {getReasonDisplayText(selectedRequest.reason)}\n                        </p>\n                      </div>\n                    )}\n\n                    {selectedRequest.requestType === 'backorder' && selectedRequest.businessJustification && (\n                      <div>\n                        <Label className=\"text-sm font-medium\">Business Justification</Label>\n                        <p className=\"text-sm mt-1 p-3 bg-muted/50 rounded whitespace-pre-wrap\">\n                          {selectedRequest.businessJustification}\n                        </p>\n                      </div>\n                    )}\n\n                    {selectedRequest.description && (\n                      <div>\n                        <Label className=\"text-sm font-medium\">Description</Label>\n                        <p className=\"text-sm mt-1 p-3 bg-muted/50 rounded whitespace-pre-wrap\">\n                          {selectedRequest.description}\n                        </p>\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                {/* Admin/Review Notes */}\n                {(selectedRequest.reviewNotes || selectedRequest.processingNotes) && (\n                  <div>\n                    <h4 className=\"font-semibold mb-3\">Admin Response</h4>\n                    <Alert>\n                      <AlertCircle className=\"h-4 w-4\" />\n                      <AlertDescription className=\"whitespace-pre-wrap\">\n                        {selectedRequest.reviewNotes || selectedRequest.processingNotes}\n                      </AlertDescription>\n                    </Alert>\n                  </div>\n                )}\n\n                {/* Actions */}\n                {selectedRequest.status === 'pending' && selectedRequest.requestType === 'cancel' && (\n                  <div className=\"flex justify-end pt-4 border-t\">\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => {\n                        handleWithdrawRequest(selectedRequest._id, selectedRequest.requestNumber);\n                        setShowRequestDetailsModal(false);\n                      }}\n                      className=\"text-blue-600 hover:text-blue-700\"\n                    >\n                      Keep My Number\n                    </Button>\n                  </div>\n                )}\n\n                {/* Status Timeline for Backorder Requests */}\n                {selectedRequest.requestType === 'backorder' && (\n                  <div>\n                    <h4 className=\"font-semibold mb-3\">What Happens Next?</h4>\n                    <div className=\"space-y-3 text-sm\">\n                      <div className={`flex items-center gap-3 p-3 rounded-lg ${\n                        selectedRequest.status === 'pending' ? 'bg-orange-50 border border-orange-200' : 'bg-muted/50'\n                      }`}>\n                        <div className={`w-2 h-2 rounded-full ${\n                          selectedRequest.status === 'pending' ? 'bg-orange-500 animate-pulse' : 'bg-muted-foreground'\n                        }`}></div>\n                        <div>\n                          <p className=\"font-medium\">Under Review</p>\n                          <p className=\"text-muted-foreground\">\n                            Admin team is reviewing your backorder request and business justification\n                          </p>\n                        </div>\n                      </div>\n                      \n                      <div className={`flex items-center gap-3 p-3 rounded-lg ${\n                        selectedRequest.status === 'approved' ? 'bg-green-50 border border-green-200' : 'bg-muted/50'\n                      }`}>\n                        <div className={`w-2 h-2 rounded-full ${\n                          selectedRequest.status === 'approved' ? 'bg-green-500' : 'bg-muted-foreground'\n                        }`}></div>\n                        <div>\n                          <p className=\"font-medium\">Assignment & Billing</p>\n                          <p className=\"text-muted-foreground\">\n                            Number will be assigned to your account and billing will begin\n                          </p>\n                        </div>\n                      </div>\n\n                      {selectedRequest.status === 'rejected' && (\n                        <div className=\"flex items-center gap-3 p-3 rounded-lg bg-red-50 border border-red-200\">\n                          <div className=\"w-2 h-2 rounded-full bg-red-500\"></div>\n                          <div>\n                            <p className=\"font-medium\">Request Rejected</p>\n                            <p className=\"text-muted-foreground\">\n                              See admin notes above for the reason and next steps\n                            </p>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                )}\n              </div>\n            )}\n          </DialogContent>\n        </Dialog>\n\n        {/* Phone Number Details Modal */}\n        <Dialog open={showDetailsModal} onOpenChange={setShowDetailsModal}>\n          <DialogContent className=\"sm:max-w-4xl max-w-4xl max-h-[90vh] flex flex-col\">\n            <DialogHeader className=\"pb-4 border-b flex-shrink-0\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <DialogTitle className=\"text-2xl font-bold flex items-center gap-3\">\n                    <div className=\"p-2 bg-primary/10 rounded-lg\">\n                      <Phone className=\"h-6 w-6 text-primary\" />\n                    </div>\n                    Phone Number Details\n                  </DialogTitle>\n                  <DialogDescription className=\"text-base mt-2\">\n                    Complete technical and billing information for {selectedNumber?.number}\n                  </DialogDescription>\n                </div>\n                {selectedNumber && (\n                  <div className=\"flex items-center space-x-3\">\n                    <Badge variant={getBadgeVariant(getPhoneNumberDisplayStatus(selectedNumber))} className=\"px-3 py-1.5 text-sm font-medium\">\n                      {getDisplayStatusText(getPhoneNumberDisplayStatus(selectedNumber))}\n                    </Badge>\n                    {selectedNumber.backorderOnly && (\n                      <Badge variant=\"outline\" className=\"text-orange-600 border-orange-200 px-3 py-1.5\">\n                        Backorder Only\n                      </Badge>\n                    )}\n                  </div>\n                )}\n              </div>\n            </DialogHeader>\n            \n            {selectedNumber && (\n              <div className=\"flex-1 overflow-y-auto space-y-6 pr-2 py-2\">\n                {/* Scroll indicator */}\n                <div className=\"text-center text-xs text-muted-foreground mb-2\">\n                  📋 Scroll down to see Technical Configuration section\n                </div>\n\n                {/* Header Information */}\n                <div className=\"bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-950/50 dark:to-indigo-950/50 rounded-xl p-6 border border-blue-200/50\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <h3 className=\"text-xl font-semibold text-blue-900 dark:text-blue-100\">Number Information</h3>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleCopyToClipboard(selectedNumber.number, 'number')}\n                      className=\"text-xs\"\n                    >\n                      {copiedStates.number ? (\n                        <>\n                          <CheckCircle className=\"h-3 w-3 mr-1 text-green-600\" />\n                          Copied!\n                        </>\n                      ) : (\n                        <>\n                          <Copy className=\"h-3 w-3 mr-1\" />\n                          Copy Number\n                        </>\n                      )}\n                    </Button>\n                  </div>\n                  <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-6\">\n                    <div>\n                      <Label className=\"text-blue-700 dark:text-blue-300 text-xs font-medium uppercase tracking-wide\">Phone Number</Label>\n                      <p className=\"font-mono text-xl font-bold text-blue-900 dark:text-blue-100 mt-1\">{selectedNumber.number}</p>\n                    </div>\n                    <div>\n                      <Label className=\"text-blue-700 dark:text-blue-300 text-xs font-medium uppercase tracking-wide\">Country</Label>\n                      <p className=\"text-sm font-medium text-blue-800 dark:text-blue-200 mt-1\">\n                        {selectedNumber.country} (+{selectedNumber.countryCode})\n                      </p>\n                    </div>\n                    <div>\n                      <Label className=\"text-blue-700 dark:text-blue-300 text-xs font-medium uppercase tracking-wide\">Type</Label>\n                      <p className=\"text-sm font-medium text-blue-800 dark:text-blue-200 mt-1\">{selectedNumber.numberType}</p>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Billing Information */}\n                <div className=\"bg-gradient-to-r from-green-50 to-emerald-50 dark:from-green-950/50 dark:to-emerald-950/50 rounded-xl p-6 border border-green-200/50\">\n                  <h3 className=\"text-xl font-semibold text-green-900 dark:text-green-100 mb-4\">Billing & Costs</h3>\n                  <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-6\">\n                    <div>\n                      <Label className=\"text-green-700 dark:text-green-300 text-xs font-medium uppercase tracking-wide\">Monthly Rate</Label>\n                      <p className=\"text-lg font-bold text-green-900 dark:text-green-100 mt-1\">\n                        {selectedNumber.monthlyRate ? formatCurrency(selectedNumber.monthlyRate, selectedNumber.currency) : 'Free'}\n                      </p>\n                    </div>\n                    <div>\n                      <Label className=\"text-green-700 dark:text-green-300 text-xs font-medium uppercase tracking-wide\">Setup Fee</Label>\n                      <p className=\"text-lg font-bold text-green-900 dark:text-green-100 mt-1\">\n                        {selectedNumber.setupFee ? formatCurrency(selectedNumber.setupFee, selectedNumber.currency) : 'Free'}\n                      </p>\n                    </div>\n                    <div>\n                      <Label className=\"text-green-700 dark:text-green-300 text-xs font-medium uppercase tracking-wide\">Billing Cycle</Label>\n                      <p className=\"text-sm font-medium text-green-800 dark:text-green-200 mt-1 capitalize\">{selectedNumber.billingCycle}</p>\n                    </div>\n                    <div>\n                      <Label className=\"text-green-700 dark:text-green-300 text-xs font-medium uppercase tracking-wide\">Next Billing</Label>\n                      <p className=\"text-sm font-medium text-green-800 dark:text-green-200 mt-1\">\n                        {selectedNumber.nextBillingDate ? formatDate(selectedNumber.nextBillingDate) : 'N/A'}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Assignment Information */}\n                <div className=\"bg-gradient-to-r from-purple-50 to-violet-50 dark:from-purple-950/50 dark:to-violet-950/50 rounded-xl p-6 border border-purple-200/50\">\n                  <h3 className=\"text-xl font-semibold text-purple-900 dark:text-purple-100 mb-4\">Assignment Details</h3>\n                  <div className=\"grid grid-cols-2 lg:grid-cols-3 gap-6\">\n                    <div>\n                      <Label className=\"text-purple-700 dark:text-purple-300 text-xs font-medium uppercase tracking-wide\">Assigned Date</Label>\n                      <p className=\"text-sm font-medium text-purple-800 dark:text-purple-200 mt-1\">\n                        {selectedNumber.assignedAt ? formatDate(selectedNumber.assignedAt) : 'Not assigned'}\n                      </p>\n                    </div>\n                    <div>\n                      <Label className=\"text-purple-700 dark:text-purple-300 text-xs font-medium uppercase tracking-wide\">Billing Day</Label>\n                      <p className=\"text-sm font-medium text-purple-800 dark:text-purple-200 mt-1\">\n                        {selectedNumber.billingDayOfMonth ? `${selectedNumber.billingDayOfMonth}${getOrdinalSuffix(selectedNumber.billingDayOfMonth)} of month` : 'N/A'}\n                      </p>\n                    </div>\n                    <div>\n                      <Label className=\"text-purple-700 dark:text-purple-300 text-xs font-medium uppercase tracking-wide\">Region</Label>\n                      <p className=\"text-sm font-medium text-purple-800 dark:text-purple-200 mt-1\">\n                        {selectedNumber.region || 'Not specified'}\n                      </p>\n                    </div>\n                  </div>\n                  {selectedNumber.timeZone && (\n                    <div className=\"mt-4\">\n                      <Label className=\"text-purple-700 dark:text-purple-300 text-xs font-medium uppercase tracking-wide\">Time Zone</Label>\n                      <p className=\"text-sm font-medium text-purple-800 dark:text-purple-200 mt-1\">{selectedNumber.timeZone}</p>\n                    </div>\n                  )}\n                </div>\n\n                {/* Capabilities */}\n                {selectedNumber.capabilities && selectedNumber.capabilities.length > 0 && (\n                  <div className=\"bg-gradient-to-r from-amber-50 to-orange-50 dark:from-amber-950/50 dark:to-orange-950/50 rounded-xl p-6 border border-amber-200/50\">\n                    <h3 className=\"text-xl font-semibold text-amber-900 dark:text-amber-100 mb-4\">Service Capabilities</h3>\n                    <div className=\"flex flex-wrap gap-3\">\n                      {selectedNumber.capabilities.map((capability) => (\n                        <Badge \n                          key={capability} \n                          variant=\"secondary\" \n                          className=\"px-4 py-2 text-sm font-medium bg-amber-100 text-amber-800 border-amber-300 dark:bg-amber-900 dark:text-amber-100\"\n                        >\n                          <div className=\"flex items-center gap-2\">\n                            {capability === 'voice' && <Phone className=\"h-4 w-4\" />}\n                            {capability === 'sms' && <MessageSquare className=\"h-4 w-4\" />}\n                            {capability === 'fax' && <FileText className=\"h-4 w-4\" />}\n                            <span className=\"capitalize\">{capability}</span>\n                          </div>\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                {/* Technical Connection Parameters - Enhanced Section */}\n                <div className=\"bg-gradient-to-r from-slate-50 to-gray-50 dark:from-slate-950/50 dark:to-gray-950/50 rounded-xl p-6 border-2 border-blue-300 border-dashed\">\n                  <div className=\"flex items-center justify-between mb-6\">\n                    <h3 className=\"text-xl font-semibold text-slate-900 dark:text-slate-100 flex items-center gap-2\">\n                      <Terminal className=\"h-5 w-5\" />\n                      🔧 Technical Configuration\n                    </h3>\n                    {selectedNumber.connectionType && (\n                      <Badge variant=\"outline\" className=\"text-slate-700 border-slate-300 dark:text-slate-300\">\n                        {selectedNumber.connectionType === 'ip_routing' ? 'IP Routing' : 'Credential-Based'}\n                      </Badge>\n                    )}\n                  </div>\n                  \n                  {selectedNumber.connectionType ? (\n                    <div className=\"space-y-6\">\n                      {/* Connection Method Overview */}\n                      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                        <div>\n                          <Label className=\"text-slate-700 dark:text-slate-300 text-xs font-medium uppercase tracking-wide\">Connection Method</Label>\n                          <div className=\"mt-2 p-4 bg-white dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700\">\n                            <div className=\"flex items-center gap-3\">\n                              <div className={`p-2 rounded-lg ${selectedNumber.connectionType === 'ip_routing' ? 'bg-blue-100 text-blue-700' : 'bg-green-100 text-green-700'}`}>\n                                {selectedNumber.connectionType === 'ip_routing' ? <Globe className=\"h-4 w-4\" /> : <Key className=\"h-4 w-4\" />}\n                              </div>\n                              <div>\n                                <p className=\"font-medium text-slate-900 dark:text-slate-100\">\n                                  {selectedNumber.connectionType === 'ip_routing' ? 'IP Address Routing' : 'Username/Password Authentication'}\n                                </p>\n                                <p className=\"text-xs text-slate-600 dark:text-slate-400 mt-1\">\n                                  {selectedNumber.connectionType === 'ip_routing' \n                                    ? 'Direct routing based on source IP address' \n                                    : 'Authentication using login credentials'\n                                  }\n                                </p>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                        \n                        <div>\n                          <Label className=\"text-slate-700 dark:text-slate-300 text-xs font-medium uppercase tracking-wide\">Configuration Status</Label>\n                          <div className=\"mt-2 p-4 bg-white dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700\">\n                            <div className=\"flex items-center gap-3\">\n                              <div className=\"p-2 rounded-lg bg-green-100 text-green-700\">\n                                <CheckCircle className=\"h-4 w-4\" />\n                              </div>\n                              <div>\n                                <p className=\"font-medium text-slate-900 dark:text-slate-100\">Configured</p>\n                                <p className=\"text-xs text-slate-600 dark:text-slate-400 mt-1\">Ready for use</p>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                      \n                      {/* Connection Details */}\n                      <div className=\"bg-white dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700 p-6\">\n                        <h4 className=\"font-semibold text-slate-900 dark:text-slate-100 mb-4 flex items-center gap-2\">\n                          <Terminal className=\"h-4 w-4\" />\n                          Connection Parameters\n                        </h4>\n                        \n                        {selectedNumber.connectionType === 'ip_routing' && (\n                          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                            {selectedNumber.ipAddress && (\n                              <div className=\"group\">\n                                <Label className=\"text-slate-700 dark:text-slate-300 text-xs font-medium uppercase tracking-wide\">IP Address</Label>\n                                <div className=\"mt-2 flex items-center gap-2\">\n                                  <code className=\"flex-1 px-3 py-2 bg-slate-100 dark:bg-slate-700 text-slate-900 dark:text-slate-100 rounded border font-mono text-sm\">\n                                    {selectedNumber.ipAddress}\n                                  </code>\n                                  <Button\n                                    variant=\"outline\"\n                                    size=\"sm\"\n                                    onClick={() => handleCopyToClipboard(selectedNumber.ipAddress!, 'ipAddress')}\n                                    className=\"transition-all duration-200\"\n                                    title=\"Copy to clipboard\"\n                                  >\n                                    {copiedStates.ipAddress ? (\n                                      <CheckCircle className=\"h-3 w-3 text-green-600\" />\n                                    ) : (\n                                      <Copy className=\"h-3 w-3\" />\n                                    )}\n                                  </Button>\n                                </div>\n                              </div>\n                            )}\n                            {selectedNumber.port && (\n                              <div className=\"group\">\n                                <Label className=\"text-slate-700 dark:text-slate-300 text-xs font-medium uppercase tracking-wide\">Port</Label>\n                                <div className=\"mt-2 flex items-center gap-2\">\n                                  <code className=\"flex-1 px-3 py-2 bg-slate-100 dark:bg-slate-700 text-slate-900 dark:text-slate-100 rounded border font-mono text-sm\">\n                                    {selectedNumber.port}\n                                  </code>\n                                  <Button\n                                    variant=\"outline\"\n                                    size=\"sm\"\n                                    onClick={() => handleCopyToClipboard(selectedNumber.port!.toString(), 'port')}\n                                    className=\"transition-all duration-200\"\n                                    title=\"Copy to clipboard\"\n                                  >\n                                    {copiedStates.port ? (\n                                      <CheckCircle className=\"h-3 w-3 text-green-600\" />\n                                    ) : (\n                                      <Copy className=\"h-3 w-3\" />\n                                    )}\n                                  </Button>\n                                </div>\n                              </div>\n                            )}\n                          </div>\n                        )}\n                        \n                        {selectedNumber.connectionType === 'credentials' && (\n                          <div className=\"space-y-6\">\n                            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                              {selectedNumber.login && (\n                                <div className=\"group\">\n                                  <Label className=\"text-slate-700 dark:text-slate-300 text-xs font-medium uppercase tracking-wide\">Username</Label>\n                                  <div className=\"mt-2 flex items-center gap-2\">\n                                    <code className=\"flex-1 px-3 py-2 bg-slate-100 dark:bg-slate-700 text-slate-900 dark:text-slate-100 rounded border font-mono text-sm\">\n                                      {selectedNumber.login}\n                                    </code>\n                                    <Button\n                                      variant=\"outline\"\n                                      size=\"sm\"\n                                      onClick={() => handleCopyToClipboard(selectedNumber.login!, 'login')}\n                                      className=\"transition-all duration-200\"\n                                      title=\"Copy to clipboard\"\n                                    >\n                                      {copiedStates.login ? (\n                                        <CheckCircle className=\"h-3 w-3 text-green-600\" />\n                                      ) : (\n                                        <Copy className=\"h-3 w-3\" />\n                                      )}\n                                    </Button>\n                                  </div>\n                                </div>\n                              )}\n                              {selectedNumber.password && (\n                                <div className=\"group\">\n                                  <Label className=\"text-slate-700 dark:text-slate-300 text-xs font-medium uppercase tracking-wide\">Password</Label>\n                                  <div className=\"mt-2 flex items-center gap-2\">\n                                    <code className=\"flex-1 px-3 py-2 bg-slate-100 dark:bg-slate-700 text-slate-900 dark:text-slate-100 rounded border font-mono text-sm\">\n                                      ••••••••\n                                    </code>\n                                    <Button\n                                      variant=\"outline\"\n                                      size=\"sm\"\n                                      onClick={() => handleCopyToClipboard(selectedNumber.password!, 'password')}\n                                      className=\"transition-all duration-200\"\n                                      title=\"Copy password to clipboard\"\n                                    >\n                                      {copiedStates.password ? (\n                                        <CheckCircle className=\"h-3 w-3 text-green-600\" />\n                                      ) : (\n                                        <Copy className=\"h-3 w-3\" />\n                                      )}\n                                    </Button>\n                                  </div>\n                                </div>\n                              )}\n                            </div>\n                            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                              {selectedNumber.domain && (\n                                <div className=\"group\">\n                                  <Label className=\"text-slate-700 dark:text-slate-300 text-xs font-medium uppercase tracking-wide\">Server/Domain</Label>\n                                  <div className=\"mt-2 flex items-center gap-2\">\n                                    <code className=\"flex-1 px-3 py-2 bg-slate-100 dark:bg-slate-700 text-slate-900 dark:text-slate-100 rounded border font-mono text-sm\">\n                                      {selectedNumber.domain}\n                                    </code>\n                                    <Button\n                                      variant=\"outline\"\n                                      size=\"sm\"\n                                      onClick={() => handleCopyToClipboard(selectedNumber.domain!, 'domain')}\n                                      className=\"transition-all duration-200\"\n                                      title=\"Copy to clipboard\"\n                                    >\n                                      {copiedStates.domain ? (\n                                        <CheckCircle className=\"h-3 w-3 text-green-600\" />\n                                      ) : (\n                                        <Copy className=\"h-3 w-3\" />\n                                      )}\n                                    </Button>\n                                  </div>\n                                </div>\n                              )}\n                              {selectedNumber.credentialsPort && (\n                                <div className=\"group\">\n                                  <Label className=\"text-slate-700 dark:text-slate-300 text-xs font-medium uppercase tracking-wide\">Port</Label>\n                                  <div className=\"mt-2 flex items-center gap-2\">\n                                    <code className=\"flex-1 px-3 py-2 bg-slate-100 dark:bg-slate-700 text-slate-900 dark:text-slate-100 rounded border font-mono text-sm\">\n                                      {selectedNumber.credentialsPort}\n                                    </code>\n                                    <Button\n                                      variant=\"outline\"\n                                      size=\"sm\"\n                                      onClick={() => handleCopyToClipboard(selectedNumber.credentialsPort!.toString(), 'credentialsPort')}\n                                      className=\"transition-all duration-200\"\n                                      title=\"Copy to clipboard\"\n                                    >\n                                      {copiedStates.credentialsPort ? (\n                                        <CheckCircle className=\"h-3 w-3 text-green-600\" />\n                                      ) : (\n                                        <Copy className=\"h-3 w-3\" />\n                                      )}\n                                    </Button>\n                                  </div>\n                                </div>\n                              )}\n                            </div>\n                          </div>\n                        )}\n                        \n                        {/* Quick Setup Guide */}\n                        <div className=\"mt-6 p-4 bg-blue-50 dark:bg-blue-950/50 rounded-lg border border-blue-200 dark:border-blue-800\">\n                          <div className=\"flex items-start gap-3\">\n                            <BookOpen className=\"h-5 w-5 text-blue-600 mt-0.5\" />\n                            <div>\n                              <p className=\"font-medium text-blue-900 dark:text-blue-100 text-sm\">Setup Instructions</p>\n                              <p className=\"text-xs text-blue-700 dark:text-blue-300 mt-1\">\n                                {selectedNumber.connectionType === 'ip_routing' \n                                  ? `Configure your PBX to route calls from ${selectedNumber.ipAddress}:${selectedNumber.port || '5060'} for this number.`\n                                  : `Use the username \"${selectedNumber.login}\" with the provided password to authenticate with ${selectedNumber.domain}:${selectedNumber.credentialsPort || '5060'}.`\n                                }\n                              </p>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"p-8 text-center\">\n                      <div className=\"mx-auto w-16 h-16 bg-yellow-100 dark:bg-yellow-900/50 rounded-full flex items-center justify-center mb-4\">\n                        <AlertTriangle className=\"h-8 w-8 text-yellow-600\" />\n                      </div>\n                      <h4 className=\"text-lg font-semibold text-slate-900 dark:text-slate-100 mb-2\">Configuration Pending</h4>\n                      <p className=\"text-slate-600 dark:text-slate-400 mb-6 max-w-md mx-auto\">\n                        Technical connection parameters haven't been configured for this number yet. \n                        Contact our support team for setup assistance.\n                      </p>\n                      <Button variant=\"outline\" className=\"gap-2\">\n                        <HelpCircle className=\"h-4 w-4\" />\n                        Contact Support\n                      </Button>\n                    </div>\n                  )}\n                </div>\n\n                {/* Description */}\n                {selectedNumber.description && (\n                  <div className=\"bg-gradient-to-r from-teal-50 to-cyan-50 dark:from-teal-950/50 dark:to-cyan-950/50 rounded-xl p-6 border border-teal-200/50\">\n                    <h3 className=\"text-xl font-semibold text-teal-900 dark:text-teal-100 mb-3\">Description</h3>\n                    <p className=\"text-teal-800 dark:text-teal-200 leading-relaxed\">{selectedNumber.description}</p>\n                  </div>\n                )}\n              </div>\n            )}\n            \n            <div className=\"border-t pt-4 mt-6\">\n              <div className=\"flex justify-end\">\n                <Button variant=\"outline\" onClick={() => setShowDetailsModal(false)} className=\"px-6\">\n                  Close\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* Cancel Request Modal */}\n        <Dialog open={showCancelModal} onOpenChange={setShowCancelModal}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Request Cancellation</DialogTitle>\n              <DialogDescription>\n                Submit a cancellation request for {selectedNumber?.number}\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"reason\">Reason *</Label>\n                <Select value={cancelForm.reason} onValueChange={(value) => setCancelForm({ ...cancelForm, reason: value })}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select a reason\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"no_longer_needed\">No longer needed</SelectItem>\n                    <SelectItem value=\"cost_reduction\">Cost reduction</SelectItem>\n                    <SelectItem value=\"service_issues\">Service issues</SelectItem>\n                    <SelectItem value=\"business_closure\">Business closure</SelectItem>\n                    <SelectItem value=\"other\">Other</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"priority\">Priority</Label>\n                <Select value={cancelForm.priority} onValueChange={(value: RequestPriority) => setCancelForm({ ...cancelForm, priority: value })}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"low\">Low</SelectItem>\n                    <SelectItem value=\"medium\">Medium</SelectItem>\n                    <SelectItem value=\"high\">High</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"scheduledDate\">Preferred Cancellation Date</Label>\n                <Input\n                  id=\"scheduledDate\"\n                  type=\"date\"\n                  value={cancelForm.scheduledDate || ''}\n                  onChange={(e) => setCancelForm({ ...cancelForm, scheduledDate: e.target.value || undefined })}\n                  min={new Date().toISOString().split('T')[0]}\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"description\">Additional Details</Label>\n                <Textarea\n                  id=\"description\"\n                  value={cancelForm.description}\n                  onChange={(e) => setCancelForm({ ...cancelForm, description: e.target.value })}\n                  placeholder=\"Please provide any additional details about your cancellation request...\"\n                  rows={4}\n                />\n              </div>\n            </div>\n            \n            <div className=\"flex justify-end space-x-3 pt-4\">\n              <Button variant=\"outline\" onClick={() => setShowCancelModal(false)}>\n                Cancel\n              </Button>\n              <Button\n                onClick={handleCancelRequest}\n                disabled={isSubmitting || !cancelForm.reason}\n              >\n                {isSubmitting ? (\n                  <>\n                    <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                    Submitting...\n                  </>\n                ) : (\n                  'Submit Request'\n                )}\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </PageLayout>\n    </MainLayout>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/settings/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/support/tickets/[id]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/support/tickets/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/test-notifications/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/test-page/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/test-toasts/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/app/users/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/AppInitializer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/SimpleLoadingScreen.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/ThemeSettingsWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/account/AccountDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/account/UserProfileDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/admin/AdminTicketDetail.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":206,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":206,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5780,5783],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5780,5783],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":1822,"column":75,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[85008,85129],"text":"\n                    Internal notes are only visible to admin users and won&apos;t be sent to the customer.\n                  "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[85008,85129],"text":"\n                    Internal notes are only visible to admin users and won&lsquo;t be sent to the customer.\n                  "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[85008,85129],"text":"\n                    Internal notes are only visible to admin users and won&#39;t be sent to the customer.\n                  "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[85008,85129],"text":"\n                    Internal notes are only visible to admin users and won&rsquo;t be sent to the customer.\n                  "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect } from 'react';\n\nimport { useAdminTickets } from '@/hooks/useAdminTickets';\nimport { useBranding } from '@/hooks/useBranding';\nimport { \n  SERVICE_LABELS, \n  PRIORITY_LABELS, \n  STATUS_LABELS,\n  PRIORITY_COLORS,\n  STATUS_COLORS,\n  TicketStatus,\n  TicketPriority,\n  TicketAttachment\n} from '@/types/ticket';\nimport { Button } from '@/components/ui/button';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog';\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from '@/components/ui/alert-dialog';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { \n  MessageCircle, \n  Paperclip, \n  Download, \n  Clock,\n  User,\n  FileText,\n  Image as ImageIcon,\n  Upload,\n  X,\n  Star,\n  UserCheck,\n  Settings,\n  Trash2,\n  Archive,\n  AlertTriangle,\n  Eye,\n  EyeOff,\n  Shield,\n  Users,\n  Send,\n  Loader2,\n  AlertCircle,\n  CheckCircle2,\n  Timer,\n  CircleDot,\n  Crown,\n  MessageSquare,\n  Sparkles,\n  Zap\n} from 'lucide-react';\nimport { CannedResponsePicker } from './CannedResponsePicker';\nimport type { CannedResponse } from '@/hooks/useCannedResponses';\nimport WysiwygEditor from '@/components/ui/WysiwygEditor';\nimport AttachmentPreview from '@/components/ui/AttachmentPreview';\n\ninterface AdminTicketDetailProps {\n  ticketId: string;\n}\n\nexport function AdminTicketDetail({ ticketId }: AdminTicketDetailProps) {\n  const { \n    ticket, \n    loading, \n    error, \n    fetchTicket, \n    uploadFiles,\n    clearError,\n    admins,\n    assignTicket,\n    updateTicketStatus,\n    updateTicketPriority,\n    addReply,\n    deleteTicket\n  } = useAdminTickets();\n\n  const { colors } = useBranding();\n\n  const [replyContent, setReplyContent] = useState('');\n  const [internalNoteContent, setInternalNoteContent] = useState('');\n  const [isSubmittingReply, setIsSubmittingReply] = useState(false);\n  const [isSubmittingNote, setIsSubmittingNote] = useState(false);\n  const [replyAttachments, setReplyAttachments] = useState<TicketAttachment[]>([]);\n  const [uploadingFiles, setUploadingFiles] = useState(false);\n  const [previewAttachment, setPreviewAttachment] = useState<TicketAttachment | null>(null);\n  const [showPreview, setShowPreview] = useState(false);\n\n  useEffect(() => {\n    if (ticketId) {\n      fetchTicket(ticketId);\n    }\n  }, [ticketId, fetchTicket]);\n\n  // Admin controls\n  const [assignDialogOpen, setAssignDialogOpen] = useState(false);\n  const [statusDialogOpen, setStatusDialogOpen] = useState(false);\n  const [priorityDialogOpen, setPriorityDialogOpen] = useState(false);\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n\n  const [adminActions, setAdminActions] = useState({\n    assignTo: '',\n    newStatus: '' as TicketStatus | '',\n    newPriority: '' as TicketPriority | '',\n    actionNote: '',\n  });\n\n  const [showInternalNotes, setShowInternalNotes] = useState(true);\n  const [processingAction, setProcessingAction] = useState(false);\n\n  // Canned Response Picker state\n  const [showCannedPicker, setShowCannedPicker] = useState(false);\n  const [cannedPickerPosition, setCannedPickerPosition] = useState({ top: 0, left: 0 });\n  const [cannedSearchQuery, setCannedSearchQuery] = useState('');\n\n  useEffect(() => {\n    if (ticketId) {\n      fetchTicket(ticketId);\n    }\n  }, [ticketId, fetchTicket]);\n\n  const formatDate = (date: Date | string) => {\n    return new Date(date).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n    });\n  };\n\n  const getTimeAgo = (date: Date | string) => {\n    const now = new Date();\n    const past = new Date(date);\n    const diffInMinutes = Math.floor((now.getTime() - past.getTime()) / (1000 * 60));\n\n    if (diffInMinutes < 1) return 'Just now';\n    if (diffInMinutes < 60) return `${diffInMinutes}m ago`;\n    if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)}h ago`;\n    return `${Math.floor(diffInMinutes / 1440)}d ago`;\n  };\n\n  // Helper function to extract plain text from HTML content\n  const getPlainTextFromHtml = (html: string): string => {\n    if (typeof window !== 'undefined') {\n      const tempDiv = document.createElement('div');\n      tempDiv.innerHTML = html;\n      return tempDiv.textContent || tempDiv.innerText || '';\n    }\n    // Fallback for server-side rendering\n    return html.replace(/<[^>]*>/g, '').trim();\n  };\n\n  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = event.target.files;\n    if (!files || files.length === 0) return;\n\n    setUploadingFiles(true);\n    clearError();\n\n    try {\n      const uploadedFiles = await uploadFiles(files);\n      setReplyAttachments(prev => [...prev, ...uploadedFiles]);\n    } catch (err) {\n      console.error('File upload error:', err);\n    } finally {\n      setUploadingFiles(false);\n      event.target.value = '';\n    }\n  };\n\n  const removeAttachment = (index: number) => {\n    setReplyAttachments(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const handlePreviewAttachment = (attachment: any) => {\n    setPreviewAttachment(attachment);\n    setShowPreview(true);\n  };\n\n  const handleClosePreview = () => {\n    setShowPreview(false);\n    setPreviewAttachment(null);\n  };\n\n  const handleSubmitReply = async (isInternal: boolean = false) => {\n    const content = isInternal ? internalNoteContent : replyContent;\n    if (!content.trim()) return;\n\n    const setSubmitting = isInternal ? setIsSubmittingNote : setIsSubmittingReply;\n    setSubmitting(true);\n    clearError();\n\n    const success = await addReply(ticketId, {\n      content,\n      attachments: isInternal ? [] : replyAttachments,\n      isInternal,\n    });\n\n    if (success) {\n      if (isInternal) {\n        setInternalNoteContent('');\n      } else {\n        setReplyContent('');\n        setReplyAttachments([]);\n      }\n    }\n\n    setSubmitting(false);\n  };\n\n  const handleAssignTicket = async () => {\n    if (!adminActions.assignTo) return;\n    \n    setProcessingAction(true);\n    \n    const success = await assignTicket(ticketId, {\n      assignTo: adminActions.assignTo,\n      internalNote: adminActions.actionNote,\n    });\n\n    if (success) {\n      setAssignDialogOpen(false);\n      setAdminActions(prev => ({ ...prev, assignTo: '', actionNote: '' }));\n    }\n    \n    setProcessingAction(false);\n  };\n\n  const handleStatusUpdate = async () => {\n    if (!adminActions.newStatus) return;\n    \n    setProcessingAction(true);\n    \n    const success = await updateTicketStatus(ticketId, {\n      status: adminActions.newStatus,\n      internalNote: adminActions.actionNote,\n    });\n\n    if (success) {\n      setStatusDialogOpen(false);\n      setAdminActions(prev => ({ ...prev, newStatus: '', actionNote: '' }));\n    }\n    \n    setProcessingAction(false);\n  };\n\n  const handlePriorityUpdate = async () => {\n    if (!adminActions.newPriority) return;\n    \n    setProcessingAction(true);\n    \n    const success = await updateTicketPriority(ticketId, {\n      priority: adminActions.newPriority,\n      internalNote: adminActions.actionNote,\n    });\n\n    if (success) {\n      setPriorityDialogOpen(false);\n      setAdminActions(prev => ({ ...prev, newPriority: '', actionNote: '' }));\n    }\n    \n    setProcessingAction(false);\n  };\n\n  const handleDeleteTicket = async () => {\n    setProcessingAction(true);\n    \n    try {\n      const success = await deleteTicket(ticketId);\n      \n      if (success) {\n        // Show success message briefly before redirect\n        console.log('Ticket deleted successfully');\n        \n        // Redirect to support tickets list after successful deletion\n        window.location.href = '/admin/tickets';\n      } else {\n        // Error should be handled by the hook and displayed via the error state\n        console.error('Failed to delete ticket');\n      }\n    } catch (err) {\n      console.error('Error during ticket deletion:', err);\n    } finally {\n      setProcessingAction(false);\n    }\n  };\n\n  // Canned Response Handlers - Updated for WysiwygEditor\n  const handleEditorKeyDown = (event: React.KeyboardEvent<HTMLElement>, isInternal: boolean = false) => {\n    if (showCannedPicker && event.key === 'Escape') {\n      event.preventDefault();\n      setShowCannedPicker(false);\n      return;\n    }\n\n    // Check for \"/\" trigger\n    if (event.key === '/') {\n      // Get the current editor content\n      const currentValue = isInternal ? internalNoteContent : replyContent;\n      \n      // Simple check - if the content is empty or ends with whitespace, show picker\n      const plainText = getPlainTextFromHtml(currentValue);\n      if (plainText === '' || plainText.endsWith(' ') || plainText.endsWith('\\n')) {\n        // Position picker below the editor\n        const editorElement = event.target.closest('.ProseMirror');\n        if (editorElement) {\n          const rect = editorElement.getBoundingClientRect();\n          const position = {\n            top: rect.bottom + window.scrollY + 5,\n            left: rect.left + window.scrollX\n          };\n          \n          setCannedPickerPosition(position);\n          setCannedSearchQuery('');\n          setShowCannedPicker(true);\n        }\n      }\n    }\n  };\n\n  const handleEditorChange = (value: string, isInternal: boolean = false) => {\n    if (isInternal) {\n      setInternalNoteContent(value);\n    } else {\n      setReplyContent(value);\n    }\n\n    // Check for canned response trigger in the new content\n    const plainText = getPlainTextFromHtml(value);\n    const lastSlashIndex = plainText.lastIndexOf('/');\n    \n    if (lastSlashIndex !== -1) {\n      const afterSlash = plainText.substring(lastSlashIndex + 1);\n      \n      // Only show picker if \"/\" is at start or after whitespace and no spaces after\n      const charBeforeSlash = lastSlashIndex > 0 ? plainText[lastSlashIndex - 1] : ' ';\n      const isValidTrigger = charBeforeSlash === ' ' || charBeforeSlash === '\\n' || lastSlashIndex === 0;\n      \n      if (isValidTrigger && !afterSlash.includes(' ') && afterSlash.length <= 20) {\n        setCannedSearchQuery(afterSlash);\n        if (!showCannedPicker) {\n          // Position picker if not already shown\n          const editorElements = document.querySelectorAll('.ProseMirror');\n          const editorElement = isInternal ? editorElements[1] : editorElements[0]; // Assume first is reply, second is internal\n          \n          if (editorElement) {\n            const rect = editorElement.getBoundingClientRect();\n            const position = {\n              top: rect.bottom + window.scrollY + 5,\n              left: rect.left + window.scrollX\n            };\n            setCannedPickerPosition(position);\n            setShowCannedPicker(true);\n          }\n        }\n      } else {\n        setShowCannedPicker(false);\n      }\n    } else {\n      setShowCannedPicker(false);\n    }\n  };\n\n  const handleCannedResponseSelect = (response: CannedResponse) => {\n    // Determine which editor is currently active\n    const isInternal = showCannedPicker && document.activeElement?.closest('#internal-note-content');\n    \n    const currentValue = isInternal ? internalNoteContent : replyContent;\n    const plainText = getPlainTextFromHtml(currentValue);\n    const lastSlashIndex = plainText.lastIndexOf('/');\n    \n    if (lastSlashIndex !== -1) {\n      // Replace from the slash to the end with the canned response\n      const beforeSlash = plainText.substring(0, lastSlashIndex);\n      const newPlainText = beforeSlash + response.content;\n      \n      // Convert back to HTML (simple approach - just wrap in <p> tags for paragraphs)\n      const newHtmlContent = newPlainText\n        .split('\\n\\n')\n        .map(paragraph => paragraph.trim() ? `<p>${paragraph.replace(/\\n/g, '<br>')}</p>` : '')\n        .join('');\n      \n      if (isInternal) {\n        setInternalNoteContent(newHtmlContent);\n      } else {\n        setReplyContent(newHtmlContent);\n      }\n    }\n    \n    setShowCannedPicker(false);\n  };\n\n  const getStatusIcon = (status: TicketStatus) => {\n    switch (status) {\n      case 'open':\n        return <AlertCircle className=\"h-4 w-4\" />;\n      case 'in_progress':\n        return <CircleDot className=\"h-4 w-4\" />;\n      case 'waiting_admin':\n        return <Timer className=\"h-4 w-4\" />;\n      case 'resolved':\n        return <CheckCircle2 className=\"h-4 w-4\" />;\n      case 'closed':\n        return <Archive className=\"h-4 w-4\" />;\n      default:\n        return <AlertCircle className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getPriorityIcon = (priority: TicketPriority) => {\n    switch (priority) {\n      case 'urgent':\n        return <Zap className=\"h-4 w-4 text-red-500\" />;\n      case 'high':\n        return <AlertTriangle className=\"h-4 w-4 text-orange-500\" />;\n      case 'medium':\n        return <CheckCircle2 className=\"h-4 w-4 text-blue-500\" />;\n      case 'low':\n        return <CheckCircle2 className=\"h-4 w-4 text-green-500\" />;\n      default:\n        return <CheckCircle2 className=\"h-4 w-4 text-blue-500\" />;\n    }\n  };\n\n  const getFileIcon = (mimeType: string) => {\n    if (mimeType.startsWith('image/')) {\n      return <ImageIcon className=\"h-4 w-4\" />;\n    }\n    return <FileText className=\"h-4 w-4\" />;\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const getUserInitials = (email: string, name?: string, firstName?: string, lastName?: string) => {\n    if (name) {\n      const nameParts = name.split(' ');\n      if (nameParts.length >= 2) {\n        return `${nameParts[0][0]}${nameParts[nameParts.length - 1][0]}`.toUpperCase();\n      }\n      return name[0].toUpperCase();\n    }\n    if (firstName && lastName) {\n      return `${firstName[0]}${lastName[0]}`.toUpperCase();\n    }\n    if (firstName) {\n      return firstName[0].toUpperCase();\n    }\n    return email[0].toUpperCase();\n  };\n\n  const formatAssignedUser = (assignedTo: string | { _id: string; email: string; name?: string; firstName?: string; lastName?: string; role?: string; }) => {\n    if (typeof assignedTo === 'string') {\n      return assignedTo; // Just the ID string\n    }\n    \n    // If it's an object with user details\n    const { name, firstName, lastName, email, role } = assignedTo;\n    \n    // Prefer the name field first, then firstName/lastName combo, then friendly fallback\n    if (name && name.trim()) {\n      return name.trim();\n    }\n    if (firstName && lastName) {\n      return `${firstName} ${lastName}`;\n    }\n    if (firstName && firstName.trim()) {\n      return firstName.trim();\n    }\n    if (lastName && lastName.trim()) {\n      return lastName.trim();\n    }\n    \n    // Instead of showing email, show a role-based name\n    if (role === 'admin') {\n      return 'Support Agent';\n    }\n    \n    // Extract first part of email as friendly name\n    const emailPart = email.split('@')[0];\n    return emailPart.charAt(0).toUpperCase() + emailPart.slice(1);\n  };\n\n  const getFullCountryName = (countryCode: string) => {\n    const countryNames: { [key: string]: string } = {\n      'US': 'United States',\n      'CA': 'Canada',\n      'GB': 'United Kingdom',\n      'FR': 'France',\n      'DE': 'Germany',\n      'IT': 'Italy',\n      'ES': 'Spain',\n      'NL': 'Netherlands',\n      'BE': 'Belgium',\n      'CH': 'Switzerland',\n      'AT': 'Austria',\n      'SE': 'Sweden',\n      'NO': 'Norway',\n      'DK': 'Denmark',\n      'FI': 'Finland',\n      'PL': 'Poland',\n      'CZ': 'Czech Republic',\n      'HU': 'Hungary',\n      'RO': 'Romania',\n      'BG': 'Bulgaria',\n      'HR': 'Croatia',\n      'SI': 'Slovenia',\n      'SK': 'Slovakia',\n      'LT': 'Lithuania',\n      'LV': 'Latvia',\n      'EE': 'Estonia',\n      'IE': 'Ireland',\n      'PT': 'Portugal',\n      'GR': 'Greece',\n      'CY': 'Cyprus',\n      'MT': 'Malta',\n      'LU': 'Luxembourg',\n      'AU': 'Australia',\n      'NZ': 'New Zealand',\n      'JP': 'Japan',\n      'KR': 'South Korea',\n      'CN': 'China',\n      'IN': 'India',\n      'BR': 'Brazil',\n      'MX': 'Mexico',\n      'AR': 'Argentina',\n      'CL': 'Chile',\n      'CO': 'Colombia',\n      'PE': 'Peru',\n      'VE': 'Venezuela',\n      'ZA': 'South Africa',\n      'NG': 'Nigeria',\n      'EG': 'Egypt',\n      'KE': 'Kenya',\n      'MA': 'Morocco',\n      'TN': 'Tunisia',\n      'DZ': 'Algeria',\n      'LY': 'Libya',\n      'SD': 'Sudan',\n      'ET': 'Ethiopia',\n      'UG': 'Uganda',\n      'TZ': 'Tanzania',\n      'RW': 'Rwanda',\n      'GH': 'Ghana',\n      'CI': 'Ivory Coast',\n      'SN': 'Senegal',\n      'ML': 'Mali',\n      'BF': 'Burkina Faso',\n      'NE': 'Niger',\n      'TD': 'Chad',\n      'CM': 'Cameroon',\n      'GA': 'Gabon',\n      'CG': 'Congo',\n      'CD': 'Democratic Republic of Congo',\n      'CF': 'Central African Republic',\n      'AO': 'Angola',\n      'ZM': 'Zambia',\n      'ZW': 'Zimbabwe',\n      'BW': 'Botswana',\n      'NA': 'Namibia',\n      'SZ': 'Eswatini',\n      'LS': 'Lesotho',\n      'MG': 'Madagascar',\n      'MU': 'Mauritius',\n      'SC': 'Seychelles',\n      'MZ': 'Mozambique',\n      'MW': 'Malawi',\n      'TR': 'Turkey',\n      'RU': 'Russia',\n      'UA': 'Ukraine',\n      'BY': 'Belarus',\n      'MD': 'Moldova',\n      'GE': 'Georgia',\n      'AM': 'Armenia',\n      'AZ': 'Azerbaijan',\n      'KZ': 'Kazakhstan',\n      'UZ': 'Uzbekistan',\n      'TM': 'Turkmenistan',\n      'KG': 'Kyrgyzstan',\n      'TJ': 'Tajikistan',\n      'AF': 'Afghanistan',\n      'PK': 'Pakistan',\n      'BD': 'Bangladesh',\n      'LK': 'Sri Lanka',\n      'MV': 'Maldives',\n      'NP': 'Nepal',\n      'BT': 'Bhutan',\n      'MM': 'Myanmar',\n      'TH': 'Thailand',\n      'LA': 'Laos',\n      'KH': 'Cambodia',\n      'VN': 'Vietnam',\n      'MY': 'Malaysia',\n      'SG': 'Singapore',\n      'BN': 'Brunei',\n      'ID': 'Indonesia',\n      'PH': 'Philippines',\n      'TL': 'East Timor',\n      'PG': 'Papua New Guinea',\n      'FJ': 'Fiji',\n      'SB': 'Solomon Islands',\n      'VU': 'Vanuatu',\n      'NC': 'New Caledonia',\n      'PF': 'French Polynesia',\n      'WS': 'Samoa',\n      'TO': 'Tonga',\n      'TV': 'Tuvalu',\n      'NR': 'Nauru',\n      'KI': 'Kiribati',\n      'MH': 'Marshall Islands',\n      'FM': 'Micronesia',\n      'PW': 'Palau',\n      'IL': 'Israel',\n      'JO': 'Jordan',\n      'LB': 'Lebanon',\n      'SY': 'Syria',\n      'IQ': 'Iraq',\n      'IR': 'Iran',\n      'SA': 'Saudi Arabia',\n      'AE': 'United Arab Emirates',\n      'QA': 'Qatar',\n      'BH': 'Bahrain',\n      'KW': 'Kuwait',\n      'OM': 'Oman',\n      'YE': 'Yemen'\n    };\n    \n    return countryNames[countryCode.toUpperCase()] || countryCode;\n  };\n\n  if (loading && !ticket) {\n    return (\n      <div className=\"space-y-8\">\n        <Card className=\"border-0 bg-card/50 backdrop-blur-sm rounded-2xl\">\n          <CardContent className=\"p-12 text-center\">\n            <div className=\"flex flex-col items-center space-y-6\">\n              <div className=\"relative mx-auto w-20 h-20\">\n                {/* Outer ring */}\n                <div className=\"absolute inset-0 w-20 h-20 border-4 border-slate-200 dark:border-slate-700 rounded-full\"></div>\n                {/* Inner spinning ring with gradient - using primary brand color for admin */}\n                <div \n                  className=\"absolute inset-0 w-20 h-20 border-4 border-transparent rounded-full animate-spin\"\n                  style={{ \n                    borderTopColor: colors.primary,\n                    borderRightColor: `${colors.primary}CC`,\n                    borderBottomColor: `${colors.primary}99`\n                  }}\n                ></div>\n                {/* Center dot */}\n                <div className=\"absolute inset-0 flex items-center justify-center\">\n                  <div \n                    className=\"w-3 h-3 rounded-full animate-pulse\"\n                    style={{ backgroundColor: colors.primary }}\n                  ></div>\n                </div>\n              </div>\n              <div className=\"space-y-3 max-w-sm mx-auto\">\n                <p className=\"text-lg font-semibold text-slate-900 dark:text-slate-100\">Loading ticket details...</p>\n                <p className=\"text-sm text-slate-500 dark:text-slate-400 leading-relaxed\">Processing admin data and permissions</p>\n                {/* Progress indicator */}\n                <div className=\"w-32 h-1 bg-slate-200 dark:bg-slate-700 rounded-full mx-auto overflow-hidden\">\n                  <div \n                    className=\"h-full rounded-full animate-pulse\"\n                    style={{ background: `linear-gradient(to right, ${colors.primary}, ${colors.primary}CC)` }}\n                  ></div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (!ticket) {\n    return (\n      <Alert variant=\"destructive\" className=\"border-0 bg-destructive/5 dark:bg-destructive/10\">\n        <AlertCircle className=\"h-4 w-4\" />\n        <AlertDescription>\n          Ticket not found or you don&apos;t have permission to view it.\n        </AlertDescription>\n      </Alert>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-white dark:bg-slate-900 dark:rounded-2xl\">\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        \n        {/* Header */}\n        <div className=\"mb-6\">\n          <div className=\"flex items-center gap-2 mb-2\">\n            <div \n              className=\"inline-flex items-center gap-2 px-3 py-1.5 rounded-full text-sm font-medium\"\n              style={{ \n                backgroundColor: `${colors.primary}20`, \n                color: colors.primary \n              }}\n            >\n              <Crown className=\"h-4 w-4\" />\n              Admin View\n            </div>\n          </div>\n          <h1 className=\"text-2xl md:text-3xl font-bold text-slate-900 dark:text-slate-100 mb-2\">\n            {ticket.title}\n          </h1>\n          <p className=\"text-slate-600 dark:text-slate-400\">\n            Ticket #{ticket.ticketNumber} • Created {formatDate(ticket.createdAt)}\n          </p>\n        </div>\n\n        {/* Enhanced Error Message */}\n        {error && (\n          <div className=\"mb-6 bg-red-50 dark:bg-red-950/20 border border-red-200 dark:border-red-800/50 rounded-2xl p-4\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-8 h-8 bg-red-100 dark:bg-red-900/50 rounded-full flex items-center justify-center\">\n                <AlertCircle className=\"w-4 h-4 text-red-600 dark:text-red-400\" />\n              </div>\n              <div>\n                <h4 className=\"font-medium text-red-900 dark:text-red-100\">Error</h4>\n                <p className=\"text-sm text-red-700 dark:text-red-200\">{error}</p>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Enhanced Admin Controls Bar */}\n        <Card className=\"mb-6 bg-white/80 dark:bg-slate-900/80 backdrop-blur-sm shadow-lg rounded-2xl border border-slate-200/60 dark:border-slate-700/60\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex flex-col lg:flex-row items-center justify-between gap-4\">\n              <div className=\"flex items-center gap-4\">\n                <div className=\"p-3 bg-purple-100 dark:bg-purple-900/50 rounded-xl\">\n                  <Crown className=\"h-6 w-6 text-purple-600 dark:text-purple-400\" />\n                </div>\n                <div>\n                  <h3 className=\"text-lg font-semibold text-slate-900 dark:text-slate-100\">Admin Controls</h3>\n                  <p className=\"text-sm text-slate-600 dark:text-slate-400\">Manage ticket status, assignment, and priority</p>\n                </div>\n              </div>\n\n              <div className=\"flex flex-wrap gap-3\">\n                {/* Enhanced Assign Dialog */}\n                <Dialog open={assignDialogOpen} onOpenChange={setAssignDialogOpen}>\n                  <DialogTrigger asChild>\n                    <Button variant=\"outline\" size=\"sm\" className=\"border-slate-200 dark:border-slate-700 bg-white/60 dark:bg-slate-800/60 hover:bg-white dark:hover:bg-slate-800\">\n                      <UserCheck className=\"h-4 w-4 mr-2\" />\n                      {ticket.assignedTo ? 'Reassign' : 'Assign'}\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent \n                    className=\"bg-white/95 dark:bg-slate-900/95 backdrop-blur-sm border border-slate-200/60 dark:border-slate-700/60\"\n                    onOpenAutoFocus={() => {\n                      console.log('Assign dialog opened');\n                      console.log('Admin data:', admins);\n                      console.log('Current adminActions:', adminActions);\n                    }}\n                  >\n                    <DialogHeader>\n                      <DialogTitle className=\"flex items-center gap-3\">\n                        <div className=\"p-2 bg-purple-100 dark:bg-purple-900/50 rounded-lg\">\n                          <UserCheck className=\"h-5 w-5 text-purple-600 dark:text-purple-400\" />\n                        </div>\n                        {ticket.assignedTo ? 'Reassign Ticket' : 'Assign Ticket'}\n                      </DialogTitle>\n                      <DialogDescription>\n                        {ticket.assignedTo \n                          ? `Currently assigned to ${formatAssignedUser(ticket.assignedTo)}`\n                          : 'Assign this ticket to an admin user for handling.'\n                        }\n                      </DialogDescription>\n                    </DialogHeader>\n                    <div className=\"space-y-6\">\n                      <div className=\"space-y-3\">\n                        <Label className=\"text-base font-medium\">Assign To</Label>\n                        <Select\n                          value={adminActions.assignTo}\n                          onValueChange={(value) => {\n                            console.log('Selected admin value:', value);\n                            setAdminActions(prev => ({ ...prev, assignTo: value }));\n                          }}\n                        >\n                          <SelectTrigger className=\"h-12 border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-800\">\n                            <SelectValue placeholder=\"Select admin...\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {admins?.map((admin, adminIndex) => {\n                              const adminValue = admin.id || admin.email;\n                              if (!adminValue) return null; // Skip if no valid identifier\n                              \n                              return (\n                                <SelectItem \n                                  key={admin.id || `admin-${adminIndex}`} \n                                  value={adminValue}\n                                >\n                                  <div className=\"flex items-center gap-2\">\n                                    <Shield className=\"h-4 w-4 text-purple-600\" />\n                                    {admin.firstName || admin.email} {admin.lastName || ''}\n                                  </div>\n                                </SelectItem>\n                              );\n                            })}\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      <div className=\"space-y-3\">\n                        <Label className=\"text-base font-medium\">Internal Note <span className=\"text-slate-500\">(Optional)</span></Label>\n                        <Textarea\n                          value={adminActions.actionNote}\n                          onChange={(e) => setAdminActions(prev => ({ ...prev, actionNote: e.target.value }))}\n                          placeholder=\"Add internal note about the assignment...\"\n                          rows={3}\n                          className=\"border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-800\"\n                        />\n                      </div>\n                    </div>\n                    <DialogFooter className=\"gap-3\">\n                      <Button variant=\"outline\" onClick={() => setAssignDialogOpen(false)}>\n                        Cancel\n                      </Button>\n                      <Button \n                        onClick={handleAssignTicket} \n                        disabled={!adminActions.assignTo || processingAction}\n                        className=\"min-w-[120px] bg-purple-600 hover:bg-purple-700\"\n                      >\n                        {processingAction ? (\n                          <div className=\"flex items-center gap-2\">\n                            <Loader2 className=\"h-4 w-4 animate-spin\" />\n                            Assigning...\n                          </div>\n                        ) : (\n                          <div className=\"flex items-center gap-2\">\n                            <UserCheck className=\"h-4 w-4\" />\n                            Assign Ticket\n                          </div>\n                        )}\n                      </Button>\n                    </DialogFooter>\n                  </DialogContent>\n                </Dialog>\n\n                {/* Enhanced Status Update Dialog */}\n                <Dialog open={statusDialogOpen} onOpenChange={setStatusDialogOpen}>\n                  <DialogTrigger asChild>\n                    <Button variant=\"outline\" size=\"sm\" className=\"border-slate-200 dark:border-slate-700 bg-white/60 dark:bg-slate-800/60 hover:bg-white dark:hover:bg-slate-800\">\n                      <Settings className=\"h-4 w-4 mr-2\" />\n                      Update Status\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent className=\"bg-white/95 dark:bg-slate-900/95 backdrop-blur-sm border border-slate-200/60 dark:border-slate-700/60\">\n                    <DialogHeader>\n                      <DialogTitle className=\"flex items-center gap-3\">\n                        <div className=\"p-2 bg-blue-100 dark:bg-blue-900/50 rounded-lg\">\n                          <Settings className=\"h-5 w-5 text-blue-600 dark:text-blue-400\" />\n                        </div>\n                        Update Ticket Status\n                      </DialogTitle>\n                      <DialogDescription>\n                        Current status: {STATUS_LABELS[ticket.status]}\n                      </DialogDescription>\n                    </DialogHeader>\n                    <div className=\"space-y-6\">\n                      <div className=\"p-3 bg-slate-50 dark:bg-slate-800/50 rounded-lg border border-slate-200 dark:border-slate-700\">\n                        <div className=\"flex items-center gap-2\">\n                          <span className=\"text-sm font-medium text-slate-600 dark:text-slate-400\">Current Status:</span>\n                          <Badge className={`${STATUS_COLORS[ticket.status]}`}>\n                            {STATUS_LABELS[ticket.status]}\n                          </Badge>\n                        </div>\n                      </div>\n                      <div className=\"space-y-3\">\n                        <Label className=\"text-base font-medium\">New Status</Label>\n                        <Select\n                          value={adminActions.newStatus}\n                          onValueChange={(value) => setAdminActions(prev => ({ ...prev, newStatus: value as TicketStatus }))}\n                        >\n                          <SelectTrigger className=\"h-12 border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-800\">\n                            <SelectValue placeholder=\"Select status...\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {Object.entries(STATUS_LABELS).map(([value, label]) => (\n                              <SelectItem key={value} value={value}>\n                                <div className=\"flex items-center gap-2\">\n                                  {getStatusIcon(value as TicketStatus)}\n                                  {label}\n                                </div>\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      <div className=\"space-y-3\">\n                        <Label className=\"text-base font-medium\">Internal Note <span className=\"text-slate-500\">(Optional)</span></Label>\n                        <Textarea\n                          value={adminActions.actionNote}\n                          onChange={(e) => setAdminActions(prev => ({ ...prev, actionNote: e.target.value }))}\n                          placeholder=\"Add internal note about the status change...\"\n                          rows={3}\n                          className=\"border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-800\"\n                        />\n                      </div>\n                    </div>\n                    <DialogFooter className=\"gap-3\">\n                      <Button variant=\"outline\" onClick={() => setStatusDialogOpen(false)}>\n                        Cancel\n                      </Button>\n                      <Button \n                        onClick={handleStatusUpdate} \n                        disabled={!adminActions.newStatus || processingAction}\n                        className=\"min-w-[120px] bg-blue-600 hover:bg-blue-700\"\n                      >\n                        {processingAction ? (\n                          <div className=\"flex items-center gap-2\">\n                            <Loader2 className=\"h-4 w-4 animate-spin\" />\n                            Updating...\n                          </div>\n                        ) : (\n                          <div className=\"flex items-center gap-2\">\n                            <Settings className=\"h-4 w-4\" />\n                            Update Status\n                          </div>\n                        )}\n                      </Button>\n                    </DialogFooter>\n                  </DialogContent>\n                </Dialog>\n\n                {/* Enhanced Priority Update Dialog */}\n                <Dialog open={priorityDialogOpen} onOpenChange={setPriorityDialogOpen}>\n                  <DialogTrigger asChild>\n                    <Button variant=\"outline\" size=\"sm\" className=\"border-slate-200 dark:border-slate-700 bg-white/60 dark:bg-slate-800/60 hover:bg-white dark:hover:bg-slate-800\">\n                      <AlertTriangle className=\"h-4 w-4 mr-2\" />\n                      Set Priority\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent className=\"bg-white/95 dark:bg-slate-900/95 backdrop-blur-sm border border-slate-200/60 dark:border-slate-700/60\">\n                    <DialogHeader>\n                      <DialogTitle className=\"flex items-center gap-3\">\n                        <div className=\"p-2 bg-orange-100 dark:bg-orange-900/50 rounded-lg\">\n                          <AlertTriangle className=\"h-5 w-5 text-orange-600 dark:text-orange-400\" />\n                        </div>\n                        Update Ticket Priority\n                      </DialogTitle>\n                      <DialogDescription>\n                        Current priority: {PRIORITY_LABELS[ticket.priority]}\n                      </DialogDescription>\n                    </DialogHeader>\n                    <div className=\"space-y-6\">\n                      <div className=\"p-3 bg-slate-50 dark:bg-slate-800/50 rounded-lg border border-slate-200 dark:border-slate-700\">\n                        <div className=\"flex items-center gap-2\">\n                          <span className=\"text-sm font-medium text-slate-600 dark:text-slate-400\">Current Priority:</span>\n                          <Badge className={`${PRIORITY_COLORS[ticket.priority]}`}>\n                            {PRIORITY_LABELS[ticket.priority]}\n                          </Badge>\n                        </div>\n                      </div>\n                      <div className=\"space-y-3\">\n                        <Label className=\"text-base font-medium\">New Priority</Label>\n                        <Select\n                          value={adminActions.newPriority}\n                          onValueChange={(value) => setAdminActions(prev => ({ ...prev, newPriority: value as TicketPriority }))}\n                        >\n                          <SelectTrigger className=\"h-12 border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-800\">\n                            <SelectValue placeholder=\"Select priority...\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {Object.entries(PRIORITY_LABELS).map(([value, label]) => (\n                              <SelectItem key={value} value={value}>\n                                <div className=\"flex items-center gap-2\">\n                                  {getPriorityIcon(value as TicketPriority)}\n                                  {label}\n                                </div>\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      <div className=\"space-y-3\">\n                        <Label className=\"text-base font-medium\">Internal Note <span className=\"text-slate-500\">(Optional)</span></Label>\n                        <Textarea\n                          value={adminActions.actionNote}\n                          onChange={(e) => setAdminActions(prev => ({ ...prev, actionNote: e.target.value }))}\n                          placeholder=\"Add internal note about the priority change...\"\n                          rows={3}\n                          className=\"border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-800\"\n                        />\n                      </div>\n                    </div>\n                    <DialogFooter className=\"gap-3\">\n                      <Button variant=\"outline\" onClick={() => setPriorityDialogOpen(false)}>\n                        Cancel\n                      </Button>\n                      <Button \n                        onClick={handlePriorityUpdate} \n                        disabled={!adminActions.newPriority || processingAction}\n                        className=\"min-w-[120px] bg-orange-600 hover:bg-orange-700\"\n                      >\n                        {processingAction ? (\n                          <div className=\"flex items-center gap-2\">\n                            <Loader2 className=\"h-4 w-4 animate-spin\" />\n                            Updating...\n                          </div>\n                        ) : (\n                          <div className=\"flex items-center gap-2\">\n                            <AlertTriangle className=\"h-4 w-4\" />\n                            Update Priority\n                          </div>\n                        )}\n                      </Button>\n                    </DialogFooter>\n                  </DialogContent>\n                </Dialog>\n\n                {/* Enhanced Delete Dialog */}\n                <AlertDialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>\n                  <AlertDialogTrigger asChild>\n                    <Button variant=\"destructive\" size=\"sm\" className=\"bg-red-600 hover:bg-red-700\">\n                      <Trash2 className=\"h-4 w-4 mr-2\" />\n                      Delete\n                    </Button>\n                  </AlertDialogTrigger>\n                  <AlertDialogContent className=\"bg-white/95 dark:bg-slate-900/95 backdrop-blur-sm border border-slate-200/60 dark:border-slate-700/60\">\n                    <AlertDialogHeader>\n                      <AlertDialogTitle className=\"flex items-center gap-3\">\n                        <div className=\"p-2 bg-red-100 dark:bg-red-900/50 rounded-lg\">\n                          <Trash2 className=\"h-5 w-5 text-red-600 dark:text-red-400\" />\n                        </div>\n                        Delete Ticket\n                      </AlertDialogTitle>\n                      <AlertDialogDescription>\n                        Are you sure you want to delete this ticket? This action cannot be undone and will permanently remove all ticket data, replies, and attachments.\n                      </AlertDialogDescription>\n                    </AlertDialogHeader>\n                    <AlertDialogFooter className=\"gap-3\">\n                      <AlertDialogCancel>Cancel</AlertDialogCancel>\n                      <AlertDialogAction \n                        onClick={handleDeleteTicket}\n                        className=\"bg-red-600 hover:bg-red-700\"\n                      >\n                        {processingAction ? (\n                          <div className=\"flex items-center gap-2\">\n                            <Loader2 className=\"h-4 w-4 animate-spin\" />\n                            Deleting...\n                          </div>\n                        ) : (\n                          <div className=\"flex items-center gap-2\">\n                            <Trash2 className=\"h-4 w-4\" />\n                            Delete Ticket\n                          </div>\n                        )}\n                      </AlertDialogAction>\n                    </AlertDialogFooter>\n                  </AlertDialogContent>\n                </AlertDialog>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Enhanced Quick Info Cards for Admin */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\n          {/* Status Card */}\n          <Card className=\"bg-white/80 dark:bg-slate-900/80 backdrop-blur-sm shadow-lg rounded-2xl border border-slate-200/60 dark:border-slate-700/60\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-3\">\n                <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${\n                  STATUS_COLORS[ticket.status]?.includes('green') ? 'bg-green-100 dark:bg-green-900/50' :\n                  STATUS_COLORS[ticket.status]?.includes('blue') ? 'bg-blue-100 dark:bg-blue-900/50' :\n                  STATUS_COLORS[ticket.status]?.includes('yellow') ? 'bg-yellow-100 dark:bg-yellow-900/50' :\n                  STATUS_COLORS[ticket.status]?.includes('red') ? 'bg-red-100 dark:bg-red-900/50' :\n                  STATUS_COLORS[ticket.status]?.includes('purple') ? 'bg-purple-100 dark:bg-purple-900/50' :\n                  STATUS_COLORS[ticket.status]?.includes('orange') ? 'bg-orange-100 dark:bg-orange-900/50' :\n                  'bg-slate-100 dark:bg-slate-800'\n                }`}>\n                  {getStatusIcon(ticket.status)}\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"text-sm font-medium text-slate-600 dark:text-slate-400\">Status</p>\n                  <p className=\"font-semibold text-slate-900 dark:text-slate-100\">{STATUS_LABELS[ticket.status]}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Response Time & Activity Card */}\n          <Card className=\"bg-white/80 dark:bg-slate-900/80 backdrop-blur-sm shadow-lg rounded-2xl border border-slate-200/60 dark:border-slate-700/60\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-3\">\n                <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${\n                  ticket.replies.length > 0 ? 'bg-blue-100 dark:bg-blue-900/50' : 'bg-slate-100 dark:bg-slate-800'\n                }`}>\n                  <Clock className=\"h-5 w-5 text-blue-600 dark:text-blue-400\" />\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"text-sm font-medium text-slate-600 dark:text-slate-400\">Activity</p>\n                  <p className=\"font-semibold text-slate-900 dark:text-slate-100\">\n                    {getTimeAgo(ticket.updatedAt)}\n                  </p>\n                  <p className=\"text-xs text-slate-500 dark:text-slate-400\">\n                    {ticket.replies.length} replies\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Priority & Escalation Card */}\n          <Card className=\"bg-white/80 dark:bg-slate-900/80 backdrop-blur-sm shadow-lg rounded-2xl border border-slate-200/60 dark:border-slate-700/60\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-3\">\n                <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${\n                  ticket.priority === 'urgent' ? 'bg-red-100 dark:bg-red-900/50' :\n                  ticket.priority === 'high' ? 'bg-orange-100 dark:bg-orange-900/50' :\n                  ticket.priority === 'medium' ? 'bg-yellow-100 dark:bg-yellow-900/50' :\n                  'bg-green-100 dark:bg-green-900/50'\n                }`}>\n                  {ticket.priority === 'urgent' ? (\n                    <Zap className=\"h-5 w-5 text-red-600 dark:text-red-400\" />\n                  ) : (\n                    <AlertTriangle className=\"h-5 w-5 text-orange-600 dark:text-orange-400\" />\n                  )}\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"text-sm font-medium text-slate-600 dark:text-slate-400\">Priority</p>\n                  <p className=\"font-semibold text-slate-900 dark:text-slate-100\">{PRIORITY_LABELS[ticket.priority]}</p>\n                  <p className=\"text-xs text-slate-500 dark:text-slate-400\">\n                    {ticket.priority === 'urgent' ? 'Requires immediate attention' :\n                     ticket.priority === 'high' ? 'Escalated priority' :\n                     ticket.priority === 'medium' ? 'Standard priority' : 'Low priority'\n                    }\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Customer & Satisfaction Card */}\n          <Card className=\"bg-white/80 dark:bg-slate-900/80 backdrop-blur-sm shadow-lg rounded-2xl border border-slate-200/60 dark:border-slate-700/60\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-10 h-10 rounded-lg flex items-center justify-center bg-purple-100 dark:bg-purple-900/50\">\n                  {ticket.customerSatisfactionRating ? (\n                    <Star className=\"h-5 w-5 text-purple-600 dark:text-purple-400 fill-current\" />\n                  ) : (\n                    <User className=\"h-5 w-5 text-purple-600 dark:text-purple-400\" />\n                  )}\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"text-sm font-medium text-slate-600 dark:text-slate-400\">Customer</p>\n                  <p className=\"font-semibold text-slate-900 dark:text-slate-100 truncate\">\n                    {ticket.user?.name || \n                     (ticket.user?.firstName && ticket.user?.lastName ? `${ticket.user.firstName} ${ticket.user.lastName}` : null) ||\n                     ticket.user?.firstName || ticket.user?.lastName || \n                     ticket.user?.email || ticket.userEmail || 'Unknown Customer'\n                    }\n                  </p>\n                  <p className=\"text-xs text-slate-500 dark:text-slate-400\">\n                    {ticket.user?.company || 'Individual customer'}\n                    {ticket.customerSatisfactionRating && ` • ${ticket.customerSatisfactionRating}/5 rating`}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Content Grid */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          \n          {/* Left Column - Main Details */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            \n            {/* Service Information Card - Enhanced to always show */}\n            <Card className=\"bg-white/80 dark:bg-slate-900/80 backdrop-blur-sm shadow-lg rounded-2xl border border-slate-200/60 dark:border-slate-700/60\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-base flex items-center gap-2\">\n                  <div className=\"w-8 h-8 rounded-lg flex items-center justify-center bg-green-100 dark:bg-green-900/50\">\n                    <Sparkles className=\"h-4 w-4 text-green-600 dark:text-green-400\" />\n                  </div>\n                  Service Information\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                \n                {/* Service & Country Info */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2\">\n                    <Settings className=\"h-4 w-4 text-green-600 dark:text-green-400\" />\n                    <h4 className=\"font-medium text-slate-900 dark:text-slate-100\">Service Details</h4>\n                  </div>\n                  <div className=\"p-3 bg-slate-50 dark:bg-slate-800/50 rounded-lg border border-slate-200 dark:border-slate-700\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3 text-sm\">\n                      <div>\n                        <span className=\"text-xs font-medium text-slate-600 dark:text-slate-400\">Service Type:</span>\n                        <p className=\"font-medium text-slate-900 dark:text-slate-100\">{SERVICE_LABELS[ticket.service]}</p>\n                      </div>\n                      {ticket.country && (\n                        <div>\n                          <span className=\"text-xs font-medium text-slate-600 dark:text-slate-400\">Target Country:</span>\n                          <p className=\"font-medium text-slate-900 dark:text-slate-100\">{getFullCountryName(ticket.country)}</p>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n                \n                {/* Call Examples */}\n                {ticket.outboundCallData?.examples && ticket.outboundCallData.examples.length > 0 && (\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center gap-2\">\n                      <MessageCircle className=\"h-4 w-4 text-blue-600 dark:text-blue-400\" />\n                      <h4 className=\"font-medium text-slate-900 dark:text-slate-100\">Call Examples</h4>\n                    </div>\n                    <div className=\"space-y-2\">\n                      {ticket.outboundCallData.examples.map((example, index) => (\n                        <div key={index} className=\"p-3 bg-slate-50 dark:bg-slate-800/50 rounded-lg border border-slate-200 dark:border-slate-700\">\n                          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-3 text-sm\">\n                            <div>\n                              <span className=\"text-xs font-medium text-slate-600 dark:text-slate-400\">Number:</span>\n                              <p className=\"font-mono text-slate-900 dark:text-slate-100\">{example.number}</p>\n                            </div>\n                            <div>\n                              <span className=\"text-xs font-medium text-slate-600 dark:text-slate-400\">Call Date:</span>\n                              <p className=\"text-slate-900 dark:text-slate-100\">{formatDate(example.callDate)}</p>\n                            </div>\n                            {example.description && (\n                              <div>\n                                <span className=\"text-xs font-medium text-slate-600 dark:text-slate-400\">Description:</span>\n                                <p className=\"text-slate-900 dark:text-slate-100\">{example.description}</p>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                {/* Assigned Numbers */}\n                {ticket.assignedNumbers && ticket.assignedNumbers.length > 0 && (\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center gap-2\">\n                      <Sparkles className=\"h-4 w-4 text-green-600 dark:text-green-400\" />\n                      <h4 className=\"font-medium text-slate-900 dark:text-slate-100\">Assigned Numbers</h4>\n                    </div>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n                      {ticket.assignedNumbers.map((assignedNumber, index) => (\n                        <div key={index} className=\"p-3 bg-slate-50 dark:bg-slate-800/50 rounded-lg border border-slate-200 dark:border-slate-700\">\n                          <div className=\"space-y-1\">\n                            <p className=\"font-mono font-semibold text-slate-900 dark:text-slate-100\">{assignedNumber.number}</p>\n                            {assignedNumber.description && (\n                              <p className=\"text-xs text-slate-600 dark:text-slate-400\">{assignedNumber.description}</p>\n                            )}\n                            {assignedNumber.type && (\n                              <Badge variant=\"outline\" className=\"text-xs\">{assignedNumber.type}</Badge>\n                            )}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Description Card */}\n            <Card className=\"bg-white/80 dark:bg-slate-900/80 backdrop-blur-sm shadow-lg rounded-2xl border border-slate-200/60 dark:border-slate-700/60\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-base flex items-center gap-2\">\n                  <div className=\"w-8 h-8 rounded-lg flex items-center justify-center bg-blue-100 dark:bg-blue-900/50\">\n                    <FileText className=\"h-4 w-4 text-blue-600 dark:text-blue-400\" />\n                  </div>\n                  Description\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"bg-slate-50 dark:bg-slate-800/50 rounded-xl p-4 border border-slate-200 dark:border-slate-700\">\n                  <p className=\"text-slate-700 dark:text-slate-300 whitespace-pre-wrap leading-relaxed\">{ticket.description}</p>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Enhanced Original Attachments */}\n            {ticket.attachments && ticket.attachments.length > 0 && (\n              <Card className=\"bg-white/80 dark:bg-slate-900/80 backdrop-blur-sm shadow-lg rounded-2xl border border-slate-200/60 dark:border-slate-700/60\">\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-base flex items-center gap-2\">\n                    <div className=\"w-8 h-8 rounded-lg flex items-center justify-center bg-purple-100 dark:bg-purple-900/50\">\n                      <Paperclip className=\"h-4 w-4 text-purple-600 dark:text-purple-400\" />\n                    </div>\n                    Attachments ({ticket.attachments.length})\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n                    {ticket.attachments.map((attachment, index) => (\n                      <div key={index} className=\"flex items-center justify-between p-3 bg-slate-50 dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700 hover:bg-slate-100 dark:hover:bg-slate-700/50 transition-colors\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"p-2 bg-white dark:bg-slate-700 rounded-lg shadow-sm\">\n                            {getFileIcon(attachment.mimeType)}\n                          </div>\n                          <div className=\"min-w-0\">\n                            <p className=\"text-sm font-medium text-slate-900 dark:text-slate-100 truncate\">{attachment.originalName}</p>\n                            <p className=\"text-xs text-slate-500 dark:text-slate-400\">{formatFileSize(attachment.size)}</p>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\"\n                            onClick={() => handlePreviewAttachment(attachment)}\n                            title=\"Preview\"\n                          >\n                            <Eye className=\"h-4 w-4\" />\n                          </Button>\n                          <Button variant=\"ghost\" size=\"sm\" asChild>\n                            <a\n                              href={attachment.url || `/uploads/tickets/${attachment.filename}`}\n                              download={attachment.originalName}\n                              target=\"_blank\"\n                              rel=\"noopener noreferrer\"\n                              className=\"text-slate-600 hover:text-blue-600 dark:text-slate-400 dark:hover:text-blue-400\"\n                            >\n                              <Download className=\"h-4 w-4\" />\n                            </a>\n                          </Button>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n\n          {/* Right Sidebar */}\n          <div className=\"space-y-4 dark:rounded-2xl\">\n            \n            {/* Ticket Details Card */}\n            <Card className=\"bg-white/80 dark:bg-slate-900/80 backdrop-blur-sm shadow-lg rounded-2xl border border-slate-200/60 dark:border-slate-700/60\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-base flex items-center gap-2\">\n                  <div className=\"w-8 h-8 rounded-lg flex items-center justify-center bg-slate-100 dark:bg-slate-800\">\n                    <FileText className=\"h-4 w-4 text-slate-600 dark:text-slate-400\" />\n                  </div>\n                  Details\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {/* Customer Information */}\n                <div>\n                  <h4 className=\"text-sm font-medium text-slate-900 dark:text-slate-100 mb-2\">Customer Information</h4>\n                  <div className=\"space-y-2\">\n                    <div>\n                      <span className=\"text-xs font-medium text-slate-600 dark:text-slate-400\">Name</span>\n                      <p className=\"font-medium text-slate-900 dark:text-slate-100\">\n                        {ticket.user?.name || \n                         (ticket.user?.firstName && ticket.user?.lastName ? `${ticket.user.firstName} ${ticket.user.lastName}` : null) ||\n                         ticket.user?.firstName || ticket.user?.lastName || \n                         ticket.user?.email || ticket.userEmail || 'Unknown Customer'\n                        }\n                      </p>\n                    </div>\n                    <div>\n                      <span className=\"text-xs font-medium text-slate-600 dark:text-slate-400\">Email</span>\n                      <p className=\"font-medium text-slate-900 dark:text-slate-100\">{ticket.user?.email || ticket.userEmail}</p>\n                    </div>\n                    {ticket.user?.phone && (\n                      <div>\n                        <span className=\"text-xs font-medium text-slate-600 dark:text-slate-400\">Phone</span>\n                        <p className=\"font-medium text-slate-900 dark:text-slate-100\">{ticket.user.phone}</p>\n                      </div>\n                    )}\n                    {ticket.user?.company && (\n                      <div>\n                        <span className=\"text-xs font-medium text-slate-600 dark:text-slate-400\">Company</span>\n                        <p className=\"font-medium text-slate-900 dark:text-slate-100\">{ticket.user.company}</p>\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                {/* Ticket Metadata */}\n                <div className=\"space-y-3\">\n                  {ticket.estimatedResolutionTime && (\n                    <div>\n                      <span className=\"text-xs font-medium text-slate-600 dark:text-slate-400\">Estimated Resolution</span>\n                      <p className=\"font-medium text-amber-600 dark:text-amber-400\">{formatDate(ticket.estimatedResolutionTime)}</p>\n                    </div>\n                  )}\n\n                  <div>\n                    <span className=\"text-xs font-medium text-slate-600 dark:text-slate-400\">Resolved Date</span>\n                    {ticket.resolvedAt ? (\n                      <p className=\"font-medium text-green-600 dark:text-green-400\">{formatDate(ticket.resolvedAt)}</p>\n                    ) : (\n                      <p className=\"font-medium text-slate-500 dark:text-slate-400\">Not yet resolved</p>\n                    )}\n                  </div>\n\n                  <div>\n                    <span className=\"text-xs font-medium text-slate-600 dark:text-slate-400\">Customer Rating</span>\n                    {ticket.customerSatisfactionRating ? (\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"flex items-center gap-1\">\n                          <Star className=\"h-4 w-4 text-amber-500 fill-current\" />\n                          <p className=\"font-medium text-amber-600 dark:text-amber-400\">{ticket.customerSatisfactionRating}/5</p>\n                        </div>\n                      </div>\n                    ) : (\n                      <p className=\"font-medium text-slate-500 dark:text-slate-400\">Not yet rated</p>\n                    )}\n                  </div>\n\n                  <div>\n                    <span className=\"text-xs font-medium text-slate-600 dark:text-slate-400\">Assigned To</span>\n                    {ticket.assignedTo ? (\n                      <div className=\"flex items-center gap-2\">\n                        <UserCheck className=\"h-4 w-4 text-green-600 dark:text-green-400\" />\n                        <p className=\"font-medium text-green-600 dark:text-green-400\">\n                          {formatAssignedUser(ticket.assignedTo)}\n                        </p>\n                      </div>\n                    ) : (\n                      <div className=\"flex items-center gap-2\">\n                        <Users className=\"h-4 w-4 text-orange-600 dark:text-orange-400\" />\n                        <p className=\"font-medium text-orange-600 dark:text-orange-400\">Unassigned</p>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Tags Card */}\n            {ticket.tags && ticket.tags.length > 0 && (\n              <Card className=\"bg-white/80 dark:bg-slate-900/80 backdrop-blur-sm shadow-lg rounded-2xl border border-slate-200/60 dark:border-slate-700/60\">\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-base flex items-center gap-2\">\n                    <div className=\"w-8 h-8 rounded-lg flex items-center justify-center bg-blue-100 dark:bg-blue-900/50\">\n                      <Sparkles className=\"h-4 w-4 text-blue-600 dark:text-blue-400\" />\n                    </div>\n                    Tags\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {ticket.tags.map((tag, index) => (\n                      <Badge key={index} className=\"bg-blue-100 dark:bg-blue-900/50 text-blue-800 dark:text-blue-200 px-2 py-1 text-xs font-medium border-0 rounded-md\">\n                        {tag}\n                      </Badge>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Internal Notes (Admin Only) */}\n            {ticket.internalNotes && (\n              <Card className=\"bg-purple-50/80 dark:bg-purple-950/20 backdrop-blur-sm shadow-lg rounded-2xl border border-purple-200 dark:border-purple-800/50\">\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-base flex items-center gap-2\">\n                    <div className=\"w-8 h-8 rounded-lg flex items-center justify-center bg-purple-100 dark:bg-purple-900/50\">\n                      <FileText className=\"h-4 w-4 text-purple-600 dark:text-purple-400\" />\n                    </div>\n                    Internal Notes\n                    <Badge variant=\"secondary\" className=\"text-xs\">Admin Only</Badge>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"bg-purple-100/50 dark:bg-purple-950/30 rounded-lg p-3 border border-purple-200 dark:border-purple-700/50\">\n                    <p className=\"text-purple-900 dark:text-purple-100 whitespace-pre-wrap text-sm leading-relaxed\">{ticket.internalNotes}</p>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </div>\n\n        {/* Conversation Section - Full Width */}\n        <div className=\"mt-8 space-y-6 dark:rounded-2xl\">\n          \n          {/* Conversation */}\n          <Card className=\"bg-white/80 dark:bg-slate-900/80 backdrop-blur-sm shadow-lg rounded-2xl border border-slate-200/60 dark:border-slate-700/60\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"text-base flex items-center gap-2\">\n                  <div className=\"w-8 h-8 rounded-lg flex items-center justify-center bg-blue-100 dark:bg-blue-900/50\">\n                    <MessageSquare className=\"h-4 w-4 text-blue-600 dark:text-blue-400\" />\n                  </div>\n                  <div>\n                    <span>Conversation & Internal Notes</span>\n                    <span className=\"text-sm font-normal text-slate-500 dark:text-slate-400 ml-2\">\n                      ({ticket.replies.length} total)\n                    </span>\n                  </div>\n                </CardTitle>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setShowInternalNotes(!showInternalNotes)}\n                  className=\"border-0 bg-slate-50 dark:bg-slate-800 hover:bg-slate-100 dark:hover:bg-slate-700\"\n                >\n                  {showInternalNotes ? <EyeOff className=\"h-4 w-4 mr-2\" /> : <Eye className=\"h-4 w-4 mr-2\" />}\n                  {showInternalNotes ? 'Hide' : 'Show'} Internal Notes\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {ticket.replies.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <div className=\"p-3 bg-slate-100 dark:bg-slate-800 rounded-full w-12 h-12 mx-auto mb-3 flex items-center justify-center\">\n                      <MessageCircle className=\"h-6 w-6 text-slate-400\" />\n                    </div>\n                    <p className=\"font-medium text-slate-600 dark:text-slate-400 mb-1\">No messages yet</p>\n                    <p className=\"text-sm text-slate-500 dark:text-slate-500\">Customer replies and internal notes will appear here</p>\n                  </div>\n                ) : (\n                  ticket.replies\n                    .filter(reply => showInternalNotes || !reply.isInternal)\n                    .map((reply, index) => (\n                      <div key={index} className=\"flex gap-3\">\n                        <Avatar className=\"h-8 w-8 border-2 border-slate-200 dark:border-slate-700 shadow-sm\">\n                          <AvatarFallback className={`text-xs font-medium ${\n                            reply.isInternal\n                              ? 'bg-orange-100 text-orange-700 dark:bg-orange-900/30 dark:text-orange-300'\n                              : reply.authorType === 'admin' \n                                ? 'bg-blue-100 dark:bg-blue-900/50 text-blue-600 dark:text-blue-400' \n                                : 'bg-slate-100 dark:bg-slate-800 text-slate-600 dark:text-slate-400'\n                          }`}>\n                            {reply.author \n                              ? getUserInitials(reply.author.email, reply.author.name, reply.author.firstName, reply.author.lastName)\n                              : reply.authorType === 'admin' ? 'S' : 'C'\n                            }\n                          </AvatarFallback>\n                        </Avatar>\n                        <div className=\"flex-1 space-y-2\">\n                          <div className=\"flex items-center gap-2 text-sm\">\n                            <span className=\"font-medium text-slate-900 dark:text-slate-100\">\n                              {reply.author \n                                ? reply.author.name || (reply.author.firstName && reply.author.lastName ? `${reply.author.firstName} ${reply.author.lastName}` : reply.author.firstName || reply.author.lastName) || reply.author.email\n                                : reply.authorType === 'admin' ? 'Support Team' : 'Customer'\n                              }\n                            </span>\n                            <Badge variant=\"outline\" className={`text-xs ${\n                              reply.isInternal\n                                ? 'bg-orange-100 text-orange-700 border-orange-200 dark:bg-orange-900/30 dark:text-orange-300 dark:border-orange-800'\n                                : reply.authorType === 'admin' \n                                  ? 'bg-blue-50 dark:bg-blue-950/20 text-blue-600 dark:text-blue-400 border-blue-200 dark:border-blue-800' \n                                  : 'bg-slate-50 dark:bg-slate-800 text-slate-600 dark:text-slate-400'\n                            }`}>\n                              {reply.isInternal ? 'Internal Note' : reply.authorType === 'admin' ? 'Support' : 'Customer'}\n                            </Badge>\n                            <span className=\"text-slate-500 dark:text-slate-500\">\n                              {formatDate(reply.createdAt)}\n                            </span>\n                          </div>\n                          <div className={`rounded-lg p-3 shadow-sm transition-colors hover:shadow-md ${\n                            reply.isInternal\n                              ? 'bg-orange-50/80 dark:bg-orange-950/20 border border-orange-200/50 dark:border-orange-800/50'\n                              : reply.authorType === 'admin' \n                                ? 'bg-blue-50/80 dark:bg-blue-950/20 border border-blue-200/50 dark:border-blue-800/50' \n                                : 'bg-slate-50 dark:bg-slate-800/50 border border-slate-200 dark:border-slate-700'\n                          }`}>\n                            <div \n                              className=\"text-slate-800 dark:text-slate-200 text-sm leading-relaxed prose prose-sm max-w-none prose-slate dark:prose-invert\"\n                              dangerouslySetInnerHTML={{ __html: reply.content }}\n                            />\n                            \n                            {/* Reply Attachments */}\n                            {reply.attachments && reply.attachments.length > 0 && (\n                              <div className=\"mt-3 space-y-2\">\n                                <div className=\"flex items-center gap-2\">\n                                  <Paperclip className=\"h-3 w-3 text-slate-500\" />\n                                  <span className=\"text-xs text-slate-500\">Attachments</span>\n                                </div>\n                                {reply.attachments.map((attachment, attachIndex) => (\n                                  <div\n                                    key={attachIndex}\n                                    className=\"flex items-center justify-between p-2 bg-white dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700 hover:bg-slate-50 dark:hover:bg-slate-700/50 transition-colors\"\n                                  >\n                                    <div className=\"flex items-center space-x-2\">\n                                      <div className=\"p-1 bg-slate-100 dark:bg-slate-700 rounded\">\n                                        {getFileIcon(attachment.mimeType)}\n                                      </div>\n                                      <div>\n                                        <p className=\"text-xs font-medium text-slate-900 dark:text-slate-100\">\n                                          {attachment.originalName}\n                                        </p>\n                                        <p className=\"text-xs text-slate-500\">\n                                          {formatFileSize(attachment.size)}\n                                        </p>\n                                      </div>\n                                    </div>\n                                    <div className=\"flex items-center gap-2\">\n                                      <Button \n                                        variant=\"ghost\" \n                                        size=\"sm\"\n                                        onClick={() => handlePreviewAttachment(attachment)}\n                                        title=\"Preview\"\n                                      >\n                                        <Eye className=\"h-4 w-4\" />\n                                      </Button>\n                                      <Button variant=\"ghost\" size=\"sm\" asChild>\n                                        <a\n                                          href={attachment.url || `/uploads/tickets/${attachment.filename}`}\n                                          download={attachment.originalName}\n                                          target=\"_blank\"\n                                          rel=\"noopener noreferrer\"\n                                          className=\"text-slate-600 hover:text-blue-600 dark:text-slate-400 dark:hover:text-blue-400\"\n                                        >\n                                          <Download className=\"h-4 w-4\" />\n                                        </a>\n                                      </Button>\n                                    </div>\n                                  </div>\n                                ))}\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    ))\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Enhanced Admin Reply Forms */}\n          <Tabs defaultValue=\"reply\" className=\"space-y-6 dark:rounded-2xl\">\n            <TabsList className=\"grid w-full grid-cols-2 bg-slate-100 dark:bg-slate-800\">\n              <TabsTrigger value=\"reply\" className=\"flex items-center gap-2\">\n                <Send className=\"h-4 w-4\" />\n                Customer Reply\n              </TabsTrigger>\n              <TabsTrigger value=\"internal\" className=\"flex items-center gap-2\">\n                <Shield className=\"h-4 w-4\" />\n                Internal Note\n              </TabsTrigger>\n            </TabsList>\n\n            {/* Enhanced Customer Reply Tab */}\n            <TabsContent value=\"reply\">\n              <Card className=\"bg-white/80 dark:bg-slate-900/80 backdrop-blur-sm shadow-lg rounded-2xl border border-slate-200/60 dark:border-slate-700/60\">\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-base flex items-center gap-2\">\n                    <div className=\"w-8 h-8 rounded-lg flex items-center justify-center bg-green-100 dark:bg-green-900/50\">\n                      <Send className=\"h-4 w-4 text-green-600 dark:text-green-400\" />\n                    </div>\n                    Reply to Customer\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-6\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"reply-content\" className=\"text-sm font-medium text-slate-700 dark:text-slate-300\">\n                        Your Response\n                      </Label>\n                      <WysiwygEditor\n                        id=\"reply-content\"\n                        value={replyContent}\n                        onChange={(value) => handleEditorChange(value, false)}\n                        onKeyDown={(event) => handleEditorKeyDown(event, false)}\n                        placeholder=\"Type your response to the customer here... (Type '/' for canned responses)\"\n                        minHeight=\"120px\"\n                        toolbar=\"standard\"\n                        className=\"border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-800 focus:ring-2 focus:ring-blue-500/20 focus:border-blue-500 dark:focus:border-blue-400 rounded-xl transition-all duration-200\"\n                      />\n                    </div>\n\n                    {/* Enhanced File Upload for Customer Reply */}\n                    <div className=\"space-y-4\">\n                      <Label className=\"text-sm font-medium text-slate-700 dark:text-slate-300\">Attachments</Label>\n                      <div className=\"border-2 border-dashed border-slate-300 dark:border-slate-600 rounded-xl p-8 text-center bg-slate-50 dark:bg-slate-800/50 hover:border-blue-400 hover:bg-blue-50 dark:hover:bg-blue-950/20 transition-all duration-300 cursor-pointer\">\n                        <div className=\"space-y-4\">\n                          <div className=\"mx-auto w-12 h-12 bg-slate-200 dark:bg-slate-700 rounded-full flex items-center justify-center\">\n                            <Upload className=\"h-6 w-6 text-slate-500\" />\n                          </div>\n                          <div className=\"space-y-1\">\n                            <label htmlFor=\"reply-file-upload\" className=\"cursor-pointer\">\n                              <p className=\"text-base font-medium text-slate-700 dark:text-slate-300\">\n                                Click to upload files\n                              </p>\n                              <input\n                                id=\"reply-file-upload\"\n                                type=\"file\"\n                                multiple\n                                accept=\"image/*,.pdf,.doc,.docx,.txt,.xls,.xlsx\"\n                                className=\"sr-only\"\n                                onChange={handleFileUpload}\n                                disabled={uploadingFiles}\n                              />\n                            </label>\n                            <p className=\"text-sm text-slate-500\">\n                              Screenshots, documents, logs • PNG, JPG, PDF, DOC, TXT • Up to 10MB each\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n\n                      {uploadingFiles && (\n                        <div className=\"flex items-center justify-center gap-3 p-4 bg-blue-50 dark:bg-blue-950/20 rounded-xl\">\n                          <Loader2 className=\"h-5 w-5 animate-spin text-blue-600\" />\n                          <span className=\"text-sm font-medium text-blue-700 dark:text-blue-300\">Uploading files...</span>\n                        </div>\n                      )}\n\n                      {/* Enhanced Reply Attachment List */}\n                      {replyAttachments.length > 0 && (\n                        <div className=\"space-y-3\">\n                          <div className=\"flex items-center gap-2\">\n                            <Paperclip className=\"h-4 w-4 text-blue-600\" />\n                            <span className=\"text-sm font-medium text-slate-700 dark:text-slate-300\">Attached Files ({replyAttachments.length})</span>\n                          </div>\n                          <div className=\"space-y-2\">\n                            {replyAttachments.map((attachment, index) => (\n                              <div\n                                key={index}\n                                className=\"flex items-center justify-between p-3 bg-slate-50 dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700\"\n                              >\n                                <div className=\"flex items-center space-x-3\">\n                                  <div className=\"p-2 bg-white dark:bg-slate-700 rounded-lg shadow-sm\">\n                                    {getFileIcon(attachment.mimeType)}\n                                  </div>\n                                  <div className=\"min-w-0 flex-1\">\n                                    <p className=\"text-sm font-medium text-slate-800 dark:text-slate-200 truncate\">\n                                      {attachment.originalName}\n                                    </p>\n                                    <p className=\"text-xs text-slate-500\">\n                                      {formatFileSize(attachment.size)}\n                                    </p>\n                                  </div>\n                                </div>\n                                <Button\n                                  type=\"button\"\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  onClick={() => removeAttachment(index)}\n                                  className=\"text-red-500 hover:text-red-700 hover:bg-red-50 dark:hover:bg-red-950/20\"\n                                >\n                                  <X className=\"h-4 w-4\" />\n                                </Button>\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n                    </div>\n\n                    {/* Submit Button */}\n                    <div className=\"flex justify-end\">\n                      <Button\n                        onClick={() => handleSubmitReply(false)}\n                        disabled={!getPlainTextFromHtml(replyContent).trim() || isSubmittingReply || uploadingFiles}\n                        className=\"bg-blue-600 hover:bg-blue-700 text-white shadow-md hover:shadow-lg transition-all duration-200 px-6\"\n                      >\n                        {isSubmittingReply || uploadingFiles ? (\n                          <div className=\"flex items-center gap-2\">\n                            <div className=\"w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin\"></div>\n                            <span>Sending...</span>\n                          </div>\n                        ) : (\n                          <div className=\"flex items-center gap-2\">\n                            <Send className=\"h-4 w-4\" />\n                            <span>Send Reply</span>\n                          </div>\n                        )}\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Enhanced Internal Note Tab */}\n            <TabsContent value=\"internal\">\n              <Card className=\"bg-white/80 dark:bg-slate-900/80 backdrop-blur-sm shadow-lg rounded-2xl border border-slate-200/60 dark:border-slate-700/60\">\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-base flex items-center gap-2\">\n                    <div className=\"w-8 h-8 rounded-lg flex items-center justify-center bg-orange-100 dark:bg-orange-900/30\">\n                      <Shield className=\"h-4 w-4 text-orange-600 dark:text-orange-400\" />\n                    </div>\n                    Add Internal Note\n                  </CardTitle>\n                  <p className=\"text-sm text-slate-600 dark:text-slate-400\">\n                    Internal notes are only visible to admin users and won't be sent to the customer.\n                  </p>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-6\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"internal-note-content\" className=\"text-sm font-medium text-slate-700 dark:text-slate-300\">\n                        Internal Note\n                      </Label>\n                      <WysiwygEditor\n                        id=\"internal-note-content\"\n                        value={internalNoteContent}\n                        onChange={(value) => handleEditorChange(value, true)}\n                        onKeyDown={(event) => handleEditorKeyDown(event, true)}\n                        placeholder=\"Add an internal note for your team... (Type '/' for canned responses)\"\n                        minHeight=\"100px\"\n                        toolbar=\"basic\"\n                        className=\"border-orange-200 dark:border-orange-700 bg-orange-50/50 dark:bg-orange-950/20 focus:ring-2 focus:ring-orange-500/20 focus:border-orange-500 dark:focus:border-orange-400 rounded-xl transition-all duration-200\"\n                      />\n                    </div>\n\n                    <div className=\"flex justify-end\">\n                      <Button\n                        onClick={() => handleSubmitReply(true)}\n                        disabled={!getPlainTextFromHtml(internalNoteContent).trim() || isSubmittingNote}\n                        className=\"bg-orange-600 hover:bg-orange-700 text-white shadow-md hover:shadow-lg transition-all duration-200 px-6\"\n                      >\n                        {isSubmittingNote ? (\n                          <div className=\"flex items-center gap-2\">\n                            <div className=\"w-4 h-4 border-2 border-orange-600/30 border-t-orange-600 rounded-full animate-spin\"></div>\n                            <span>Adding...</span>\n                          </div>\n                        ) : (\n                          <div className=\"flex items-center gap-2\">\n                            <Shield className=\"h-4 w-4\" />\n                            <span>Add Note</span>\n                          </div>\n                        )}\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n\n      {/* Canned Response Picker */}\n      <CannedResponsePicker\n        isOpen={showCannedPicker}\n        onSelect={handleCannedResponseSelect}\n        onClose={() => setShowCannedPicker(false)}\n        position={cannedPickerPosition}\n        searchQuery={cannedSearchQuery}\n        ticketService={ticket?.service}\n      />\n\n      {/* Attachment Preview Modal */}\n      {previewAttachment && (\n        <AttachmentPreview\n          attachment={previewAttachment}\n          isOpen={showPreview}\n          onClose={handleClosePreview}\n        />\n      )}\n    </div>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/admin/AdminTicketManagement.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":116,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":116,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2581,2584],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2581,2584],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport Link from 'next/link';\nimport { useAdminTickets } from '@/hooks/useAdminTickets';\nimport { \n  TicketFilters, \n  SERVICE_LABELS, \n  PRIORITY_LABELS, \n  STATUS_LABELS,\n  PRIORITY_COLORS,\n  STATUS_COLORS,\n  TicketPriority,\n  TicketStatus\n} from '@/types/ticket';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { \n  Select, \n  SelectContent, \n  SelectItem, \n  SelectTrigger, \n  SelectValue \n} from '@/components/ui/select';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog';\n\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { \n  Search, \n  Filter, \n  RefreshCw, \n  MessageCircle,\n  Clock,\n  User,\n  UserCheck,\n  Users,\n  BarChart3,\n  Loader2,\n  Shield,\n  TrendingUp,\n  Activity,\n  Timer,\n  CircleDot,\n  AlertCircle,\n  CheckCircle2,\n  Sparkles,\n  Crown\n} from 'lucide-react';\n\ninterface AdminTicketFilters extends TicketFilters {\n  assignedTo?: string;\n  customerEmail?: string;\n  userId?: string;\n  dateRange?: string;\n}\n\nexport function AdminTicketManagement() {\n  const { \n    tickets, \n    loading, \n    error, \n    pagination, \n    stats,\n    admins,\n    users,\n    fetchTickets, \n    bulkUpdateTickets,\n    clearError \n  } = useAdminTickets();\n\n  const [filters, setFilters] = useState<AdminTicketFilters>({\n    page: 1,\n    limit: 10,\n    search: '',\n    status: undefined,\n    service: undefined,\n    priority: undefined,\n    assignedTo: undefined,\n    customerEmail: '',\n    userId: '',\n    dateRange: 'all',\n  });\n\n  const [showFilters, setShowFilters] = useState(false);\n  const [selectedTickets, setSelectedTickets] = useState<Set<string>>(new Set());\n\n  // Bulk operation states\n  const [bulkAssignDialogOpen, setBulkAssignDialogOpen] = useState(false);\n\n  const [bulkOperationValues, setBulkOperationValues] = useState({\n    assignTo: '',\n    status: '' as TicketStatus | '',\n    priority: '' as TicketPriority | '',\n    internalNote: '',\n  });\n\n  const [processingBulk, setProcessingBulk] = useState(false);\n\n  useEffect(() => {\n    fetchTickets(filters);\n  }, [fetchTickets, filters]);\n\n  const handleFilterChange = (key: keyof AdminTicketFilters, value: any) => {\n    setFilters(prev => ({\n      ...prev,\n      [key]: value,\n      page: 1, // Reset to first page when filtering\n    }));\n  };\n\n  const handleSearch = (searchTerm: string) => {\n    setFilters(prev => ({\n      ...prev,\n      search: searchTerm,\n      page: 1,\n    }));\n  };\n\n  const handlePageChange = (newPage: number) => {\n    setFilters(prev => ({\n      ...prev,\n      page: newPage,\n    }));\n  };\n\n  const clearFilters = () => {\n    setFilters({\n      page: 1,\n      limit: 10,\n      search: '',\n      status: undefined,\n      service: undefined,\n      priority: undefined,\n      assignedTo: undefined,\n      customerEmail: '',\n      userId: '',\n      dateRange: 'all',\n    });\n    setSelectedTickets(new Set());\n  };\n\n  const handleSelectTicket = (ticketId: string, checked: boolean) => {\n    setSelectedTickets(prev => {\n      const newSet = new Set(prev);\n      if (checked) {\n        newSet.add(ticketId);\n      } else {\n        newSet.delete(ticketId);\n      }\n      return newSet;\n    });\n  };\n\n  const handleSelectAll = () => {\n    if (selectedTickets.size === tickets.length) {\n      setSelectedTickets(new Set());\n    } else {\n      setSelectedTickets(new Set(tickets.map(t => t._id)));\n    }\n  };\n\n  const handleBulkAssign = async () => {\n    if (!bulkOperationValues.assignTo || selectedTickets.size === 0) return;\n    \n    setProcessingBulk(true);\n    \n    const success = await bulkUpdateTickets({\n      ticketIds: Array.from(selectedTickets),\n      action: 'assign',\n      assignTo: bulkOperationValues.assignTo,\n      internalNote: bulkOperationValues.internalNote,\n    });\n\n    if (success) {\n      setBulkAssignDialogOpen(false);\n      setSelectedTickets(new Set());\n      setBulkOperationValues(prev => ({ ...prev, assignTo: '', internalNote: '' }));\n    }\n    \n    setProcessingBulk(false);\n  };\n\n\n\n  const formatDate = (date: Date | string) => {\n    return new Date(date).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n    });\n  };\n\n  const getTimeAgo = (date: Date | string) => {\n    const now = new Date();\n    const past = new Date(date);\n    const diffInMinutes = Math.floor((now.getTime() - past.getTime()) / (1000 * 60));\n\n    if (diffInMinutes < 1) return 'Just now';\n    if (diffInMinutes < 60) return `${diffInMinutes}m ago`;\n    if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)}h ago`;\n    return `${Math.floor(diffInMinutes / 1440)}d ago`;\n  };\n\n  const getStatusIcon = (status: TicketStatus) => {\n    switch (status) {\n      case 'open':\n        return <AlertCircle className=\"h-4 w-4\" />;\n      case 'in_progress':\n        return <CircleDot className=\"h-4 w-4\" />;\n      case 'waiting_admin':\n        return <Timer className=\"h-4 w-4\" />;\n      case 'resolved':\n        return <CheckCircle2 className=\"h-4 w-4\" />;\n      case 'closed':\n        return <CheckCircle2 className=\"h-4 w-4\" />;\n      default:\n        return <AlertCircle className=\"h-4 w-4\" />;\n    }\n  };\n\n\n\n  const formatAssignedUser = (assignedTo: string | { _id: string; email: string; name?: string; firstName?: string; lastName?: string; role?: string; }) => {\n    if (typeof assignedTo === 'string') {\n      // If it's a string and looks like an email, format it nicely as fallback\n      if (assignedTo.includes('@')) {\n        const emailPart = assignedTo.split('@')[0];\n        return emailPart.charAt(0).toUpperCase() + emailPart.slice(1);\n      }\n      return assignedTo; // Just the ID string\n    }\n    \n    // If it's an object with user details\n    const { name, firstName, lastName, email, role } = assignedTo;\n    \n    // Prioritize 'name' field first, then firstName/lastName combo, then friendly fallback\n    if (name && name.trim()) {\n      return name.trim();\n    }\n    if (firstName && lastName) {\n      return `${firstName} ${lastName}`;\n    }\n    if (firstName && firstName.trim()) {\n      return firstName.trim();\n    }\n    if (lastName && lastName.trim()) {\n      return lastName.trim();\n    }\n    \n    // Instead of showing email, show a role-based name\n    if (role === 'admin') {\n      return 'Support Agent';\n    }\n    \n    // Extract first part of email as friendly name\n    if (email) {\n      const emailPart = email.split('@')[0];\n      return emailPart.charAt(0).toUpperCase() + emailPart.slice(1);\n    }\n    \n    return 'Unknown User';\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Enhanced Admin Stats Dashboard */}\n      {stats && (\n        <div className=\"grid grid-cols-2 lg:grid-cols-6 gap-6\">\n          <Card className=\"group relative overflow-hidden border-0 bg-gradient-to-br from-slate-50 via-slate-50 to-slate-100 dark:from-slate-950/50 dark:via-slate-900/30 dark:to-slate-800/20 shadow-lg hover:shadow-2xl hover:scale-[1.02] transition-all duration-300\">\n            <div className=\"absolute inset-0 bg-gradient-to-br from-slate-500/5 to-transparent\" />\n            <div className=\"absolute inset-0 ring-1 ring-inset ring-slate-200/50 dark:ring-slate-700/50 rounded-lg\" />\n            <CardContent className=\"relative p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"p-3 bg-slate-100 dark:bg-slate-900/50 rounded-xl shadow-sm\">\n                  <BarChart3 className=\"h-6 w-6 text-slate-600 dark:text-slate-400\" />\n                </div>\n                <Crown className=\"h-4 w-4 text-slate-400 opacity-60 group-hover:opacity-100 transition-opacity\" />\n              </div>\n              <div className=\"space-y-1\">\n                <p className=\"text-3xl font-bold text-slate-700 dark:text-slate-300\">{stats.total || 0}</p>\n                <p className=\"text-sm font-medium text-slate-600 dark:text-slate-400\">Total Tickets</p>\n                <p className=\"text-xs text-slate-500/70 dark:text-slate-400/70\">All time</p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"group relative overflow-hidden border-0 bg-gradient-to-br from-red-50 via-red-50 to-red-100 dark:from-red-950/50 dark:via-red-900/30 dark:to-red-800/20 shadow-lg hover:shadow-2xl hover:scale-[1.02] transition-all duration-300\">\n            <div className=\"absolute inset-0 bg-gradient-to-br from-red-500/5 to-transparent\" />\n            <div className=\"absolute inset-0 ring-1 ring-inset ring-red-200/50 dark:ring-red-700/50 rounded-lg\" />\n            <CardContent className=\"relative p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"p-3 bg-red-100 dark:bg-red-900/50 rounded-xl shadow-sm\">\n                  <AlertCircle className=\"h-6 w-6 text-red-600 dark:text-red-400\" />\n                </div>\n                <TrendingUp className=\"h-4 w-4 text-red-400 opacity-60 group-hover:opacity-100 transition-opacity\" />\n              </div>\n              <div className=\"space-y-1\">\n                <p className=\"text-3xl font-bold text-red-700 dark:text-red-300\">{stats.open || 0}</p>\n                <p className=\"text-sm font-medium text-red-600 dark:text-red-400\">Open</p>\n                <p className=\"text-xs text-red-500/70 dark:text-red-400/70\">Need attention</p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"group relative overflow-hidden border-0 bg-gradient-to-br from-blue-50 via-blue-50 to-blue-100 dark:from-blue-950/50 dark:via-blue-900/30 dark:to-blue-800/20 shadow-lg hover:shadow-2xl hover:scale-[1.02] transition-all duration-300\">\n            <div className=\"absolute inset-0 bg-gradient-to-br from-blue-500/5 to-transparent\" />\n            <div className=\"absolute inset-0 ring-1 ring-inset ring-blue-200/50 dark:ring-blue-700/50 rounded-lg\" />\n            <CardContent className=\"relative p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"p-3 bg-blue-100 dark:bg-blue-900/50 rounded-xl shadow-sm\">\n                  <CircleDot className=\"h-6 w-6 text-blue-600 dark:text-blue-400\" />\n                </div>\n                <Activity className=\"h-4 w-4 text-blue-400 opacity-60 group-hover:opacity-100 transition-opacity\" />\n              </div>\n              <div className=\"space-y-1\">\n                <p className=\"text-3xl font-bold text-blue-700 dark:text-blue-300\">{stats.in_progress || 0}</p>\n                <p className=\"text-sm font-medium text-blue-600 dark:text-blue-400\">In Progress</p>\n                <p className=\"text-xs text-blue-500/70 dark:text-blue-400/70\">Being worked on</p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"group relative overflow-hidden border-0 bg-gradient-to-br from-amber-50 via-amber-50 to-amber-100 dark:from-amber-950/50 dark:via-amber-900/30 dark:to-amber-800/20 shadow-lg hover:shadow-2xl hover:scale-[1.02] transition-all duration-300\">\n            <div className=\"absolute inset-0 bg-gradient-to-br from-amber-500/5 to-transparent\" />\n            <div className=\"absolute inset-0 ring-1 ring-inset ring-amber-200/50 dark:ring-amber-700/50 rounded-lg\" />\n            <CardContent className=\"relative p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"p-3 bg-amber-100 dark:bg-amber-900/50 rounded-xl shadow-sm\">\n                  <Timer className=\"h-6 w-6 text-amber-600 dark:text-amber-400\" />\n                </div>\n                <Clock className=\"h-4 w-4 text-amber-400 opacity-60 group-hover:opacity-100 transition-opacity\" />\n              </div>\n              <div className=\"space-y-1\">\n                <p className=\"text-3xl font-bold text-amber-700 dark:text-amber-300\">{stats.waiting_admin || 0}</p>\n                <p className=\"text-sm font-medium text-amber-600 dark:text-amber-400\">Waiting Response</p>\n                <p className=\"text-xs text-amber-500/70 dark:text-amber-400/70\">Pending admin</p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"group relative overflow-hidden border-0 bg-gradient-to-br from-emerald-50 via-emerald-50 to-emerald-100 dark:from-emerald-950/50 dark:via-emerald-900/30 dark:to-emerald-800/20 shadow-lg hover:shadow-2xl hover:scale-[1.02] transition-all duration-300\">\n            <div className=\"absolute inset-0 bg-gradient-to-br from-emerald-500/5 to-transparent\" />\n            <div className=\"absolute inset-0 ring-1 ring-inset ring-emerald-200/50 dark:ring-emerald-700/50 rounded-lg\" />\n            <CardContent className=\"relative p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"p-3 bg-emerald-100 dark:bg-emerald-900/50 rounded-xl shadow-sm\">\n                  <CheckCircle2 className=\"h-6 w-6 text-emerald-600 dark:text-emerald-400\" />\n                </div>\n                <BarChart3 className=\"h-4 w-4 text-emerald-400 opacity-60 group-hover:opacity-100 transition-opacity\" />\n              </div>\n              <div className=\"space-y-1\">\n                <p className=\"text-3xl font-bold text-emerald-700 dark:text-emerald-300\">{stats.resolved || 0}</p>\n                <p className=\"text-sm font-medium text-emerald-600 dark:text-emerald-400\">Resolved</p>\n                <p className=\"text-xs text-emerald-500/70 dark:text-emerald-400/70\">Successfully closed</p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"group relative overflow-hidden border-0 bg-gradient-to-br from-purple-50 via-purple-50 to-purple-100 dark:from-purple-950/50 dark:via-purple-900/30 dark:to-purple-800/20 shadow-lg hover:shadow-2xl hover:scale-[1.02] transition-all duration-300\">\n            <div className=\"absolute inset-0 bg-gradient-to-br from-purple-500/5 to-transparent\" />\n            <div className=\"absolute inset-0 ring-1 ring-inset ring-purple-200/50 dark:ring-purple-700/50 rounded-lg\" />\n            <CardContent className=\"relative p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"p-3 bg-purple-100 dark:bg-purple-900/50 rounded-xl shadow-sm\">\n                  <Users className=\"h-6 w-6 text-purple-600 dark:text-purple-400\" />\n                </div>\n                <Shield className=\"h-4 w-4 text-purple-400 opacity-60 group-hover:opacity-100 transition-opacity\" />\n              </div>\n              <div className=\"space-y-1\">\n                <p className=\"text-3xl font-bold text-purple-700 dark:text-purple-300\">{stats.unassigned || 0}</p>\n                <p className=\"text-sm font-medium text-purple-600 dark:text-purple-400\">Unassigned</p>\n                <p className=\"text-xs text-purple-500/70 dark:text-purple-400/70\">Need assignment</p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Enhanced Admin Search and Filters */}\n      <Card className=\"border-0 bg-card/80 backdrop-blur-md shadow-xl ring-1 ring-border/50 hover:shadow-2xl transition-all duration-300\">\n        <CardContent className=\"p-6\">\n          <div className=\"space-y-6\">\n            <div className=\"flex flex-col lg:flex-row gap-4\">\n              {/* Enhanced Search */}\n              <div className=\"flex-1 relative group\">\n                <Search className=\"absolute left-4 top-1/2 transform -translate-y-1/2 text-muted-foreground h-5 w-5 transition-colors group-focus-within:text-primary\" />\n                <Input\n                  placeholder=\"Search by ticket number, title, customer email, or description...\"\n                  value={filters.search || ''}\n                  onChange={(e) => handleSearch(e.target.value)}\n                  className=\"pl-12 h-12 border-0 bg-background/60 backdrop-blur-sm hover:bg-background/80 focus:bg-background transition-all duration-200 text-base\"\n                />\n              </div>\n\n              {/* Action Buttons */}\n              <div className=\"flex gap-3\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setShowFilters(!showFilters)}\n                  className=\"h-12 px-6 border-0 bg-background/60 backdrop-blur-sm hover:bg-background/80 transition-all duration-200\"\n                >\n                  <Filter className=\"h-4 w-4 mr-2\" />\n                  <span className=\"hidden sm:inline\">Advanced Filters</span>\n                  <span className=\"sm:hidden\">Filters</span>\n                </Button>\n\n                <Button\n                  variant=\"outline\"\n                  onClick={() => fetchTickets(filters)}\n                  disabled={loading}\n                  className=\"h-12 px-6 border-0 bg-background/60 backdrop-blur-sm hover:bg-background/80 transition-all duration-200\"\n                >\n                  <RefreshCw className={`h-4 w-4 mr-2 ${loading ? 'animate-spin' : ''}`} />\n                  <span className=\"hidden sm:inline\">Refresh</span>\n                </Button>\n              </div>\n            </div>\n\n            {/* Enhanced Advanced Filters */}\n            {showFilters && (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6 gap-4 p-6 bg-muted/30 dark:bg-muted/20 rounded-xl border border-border/50\">\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium text-muted-foreground\">Status</label>\n                  <Select\n                    value={filters.status || 'all'}\n                    onValueChange={(value) => handleFilterChange('status', value === 'all' ? undefined : value)}\n                  >\n                    <SelectTrigger className=\"h-10 border-0 bg-background/60\">\n                      <SelectValue placeholder=\"All Statuses\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Statuses</SelectItem>\n                      {Object.entries(STATUS_LABELS).map(([value, label]) => (\n                        <SelectItem key={value} value={value}>\n                          <div className=\"flex items-center gap-2\">\n                            {getStatusIcon(value as TicketStatus)}\n                            {label}\n                          </div>\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium text-muted-foreground\">Priority</label>\n                  <Select\n                    value={filters.priority || 'all'}\n                    onValueChange={(value) => handleFilterChange('priority', value === 'all' ? undefined : value)}\n                  >\n                    <SelectTrigger className=\"h-10 border-0 bg-background/60\">\n                      <SelectValue placeholder=\"All Priorities\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Priorities</SelectItem>\n                      {Object.entries(PRIORITY_LABELS).map(([value, label]) => (\n                        <SelectItem key={value} value={value}>\n                          {label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium text-muted-foreground\">Service</label>\n                  <Select\n                    value={filters.service || 'all'}\n                    onValueChange={(value) => handleFilterChange('service', value === 'all' ? undefined : value)}\n                  >\n                    <SelectTrigger className=\"h-10 border-0 bg-background/60\">\n                      <SelectValue placeholder=\"All Services\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Services</SelectItem>\n                      {Object.entries(SERVICE_LABELS).map(([value, label]) => (\n                        <SelectItem key={value} value={value}>\n                          {label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium text-muted-foreground\">Assigned To</label>\n                  <Select\n                    value={filters.assignedTo || 'all'}\n                    onValueChange={(value) => handleFilterChange('assignedTo', value === 'all' ? undefined : value)}\n                  >\n                    <SelectTrigger className=\"h-10 border-0 bg-background/60\">\n                      <SelectValue placeholder=\"All Assignments\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Assignments</SelectItem>\n                      <SelectItem value=\"unassigned\">\n                        <div className=\"flex items-center gap-2\">\n                          <Users className=\"h-4 w-4 text-muted-foreground\" />\n                          Unassigned\n                        </div>\n                      </SelectItem>\n                      {admins?.map((admin) => (\n                        <SelectItem key={admin.id} value={admin.id}>\n                          <div className=\"flex items-center gap-2\">\n                            <Shield className=\"h-4 w-4 text-primary\" />\n                            <div className=\"flex flex-col\">\n                              <span className=\"font-medium\">\n                                {admin.firstName || admin.name || admin.email} {admin.lastName || ''}\n                              </span>\n                              {admin.companyName && (\n                                <span className=\"text-xs text-muted-foreground\">\n                                  {admin.companyName}\n                                </span>\n                              )}\n                            </div>\n                          </div>\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium text-muted-foreground\">Customer Email</label>\n                  <Input\n                    placeholder=\"Filter by customer...\"\n                    value={filters.customerEmail || ''}\n                    onChange={(e) => handleFilterChange('customerEmail', e.target.value)}\n                    className=\"h-10 border-0 bg-background/60\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium text-muted-foreground\">Customer</label>\n                  <Select\n                    value={filters.userId || 'all'}\n                    onValueChange={(value) => handleFilterChange('userId', value === 'all' ? undefined : value)}\n                  >\n                    <SelectTrigger className=\"h-10 border-0 bg-background/60\">\n                      <SelectValue placeholder=\"All Customers\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Customers</SelectItem>\n                      {users?.map((user) => (\n                        <SelectItem key={user.id} value={user.id}>\n                          <div className=\"flex items-center gap-2\">\n                            <User className=\"h-4 w-4 text-primary\" />\n                            <div className=\"flex flex-col\">\n                              <span className=\"font-medium\">\n                                {user.firstName || user.name || user.email} {user.lastName || ''}\n                              </span>\n                              {user.companyName && (\n                                <span className=\"text-xs text-muted-foreground\">\n                                  {user.companyName}\n                                </span>\n                              )}\n                            </div>\n                          </div>\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"flex items-end\">\n                  <Button \n                    variant=\"outline\" \n                    onClick={clearFilters}\n                    className=\"w-full h-10 border-0 bg-background/60 hover:bg-destructive/10 hover:text-destructive transition-all duration-200\"\n                  >\n                    Clear All\n                  </Button>\n                </div>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Enhanced Bulk Operations */}\n      {selectedTickets.size > 0 && (\n        <Card className=\"border-0 bg-gradient-to-r from-primary/5 via-primary/3 to-transparent dark:from-primary/10 dark:via-primary/5 dark:to-transparent shadow-lg\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex flex-col md:flex-row items-center justify-between gap-4\">\n              <div className=\"flex items-center gap-4\">\n                <div className=\"p-3 bg-primary/10 rounded-xl\">\n                  <Shield className=\"h-6 w-6 text-primary\" />\n                </div>\n                <div>\n                  <h3 className=\"text-lg font-semibold text-foreground\">\n                    {selectedTickets.size} ticket{selectedTickets.size === 1 ? '' : 's'} selected\n                  </h3>\n                  <p className=\"text-sm text-muted-foreground\">Choose a bulk action to perform</p>\n                </div>\n              </div>\n\n              <div className=\"flex flex-wrap gap-3\">\n                {/* Bulk Assign Dialog */}\n                <Dialog open={bulkAssignDialogOpen} onOpenChange={setBulkAssignDialogOpen}>\n                  <DialogTrigger asChild>\n                    <Button variant=\"outline\" size=\"sm\" className=\"border-0 bg-background/60 hover:bg-background/80\">\n                      <UserCheck className=\"h-4 w-4 mr-2\" />\n                      Assign\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent className=\"border-0 bg-card/95 backdrop-blur-sm\">\n                    <DialogHeader>\n                      <DialogTitle className=\"flex items-center gap-3\">\n                        <div className=\"p-2 bg-primary/10 rounded-lg\">\n                          <UserCheck className=\"h-5 w-5 text-primary\" />\n                        </div>\n                        Bulk Assign Tickets\n                      </DialogTitle>\n                      <DialogDescription>\n                        Assign {selectedTickets.size} selected ticket{selectedTickets.size === 1 ? '' : 's'} to an admin for handling.\n                      </DialogDescription>\n                    </DialogHeader>\n                    <div className=\"space-y-6\">\n                      <div className=\"space-y-3\">\n                        <Label className=\"text-base font-medium\">Assign To</Label>\n                        <Select\n                          value={bulkOperationValues.assignTo}\n                          onValueChange={(value) => setBulkOperationValues(prev => ({ ...prev, assignTo: value }))}\n                        >\n                          <SelectTrigger className=\"h-12 border-0 bg-background/60\">\n                            <SelectValue placeholder=\"Select admin...\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {admins?.map((admin) => (\n                              <SelectItem key={admin.id} value={admin.id}>\n                                <div className=\"flex items-center gap-2\">\n                                  <Shield className=\"h-4 w-4 text-primary\" />\n                                  {admin.firstName || admin.email} {admin.lastName || ''}\n                                </div>\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      <div className=\"space-y-3\">\n                        <Label className=\"text-base font-medium\">Internal Note <span className=\"text-muted-foreground\">(Optional)</span></Label>\n                        <Textarea\n                          value={bulkOperationValues.internalNote}\n                          onChange={(e) => setBulkOperationValues(prev => ({ ...prev, internalNote: e.target.value }))}\n                          placeholder=\"Add internal note about the assignment...\"\n                          rows={3}\n                          className=\"border-0 bg-background/60\"\n                        />\n                      </div>\n                    </div>\n                    <DialogFooter className=\"gap-3\">\n                      <Button variant=\"outline\" onClick={() => setBulkAssignDialogOpen(false)}>\n                        Cancel\n                      </Button>\n                      <Button \n                        onClick={handleBulkAssign} \n                        disabled={!bulkOperationValues.assignTo || processingBulk}\n                        className=\"min-w-[120px]\"\n                      >\n                        {processingBulk ? (\n                          <div className=\"flex items-center gap-2\">\n                            <Loader2 className=\"h-4 w-4 animate-spin\" />\n                            Assigning...\n                          </div>\n                        ) : (\n                          <div className=\"flex items-center gap-2\">\n                            <UserCheck className=\"h-4 w-4\" />\n                            Assign Tickets\n                          </div>\n                        )}\n                      </Button>\n                    </DialogFooter>\n                  </DialogContent>\n                </Dialog>\n\n                {/* Similar enhanced dialogs for Status Update, Priority Update, and Delete... */}\n                <Button variant=\"outline\" size=\"sm\" onClick={() => setSelectedTickets(new Set())} className=\"border-0 bg-background/60 hover:bg-background/80\">\n                  Clear Selection\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Enhanced Error Message */}\n      {error && (\n        <Alert variant=\"destructive\" className=\"border-0 bg-destructive/5 dark:bg-destructive/10\">\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription className=\"flex items-center justify-between\">\n            <span>{error}</span>\n            <Button variant=\"ghost\" size=\"sm\" onClick={clearError} className=\"ml-4\">\n              Dismiss\n            </Button>\n          </AlertDescription>\n        </Alert>\n      )}\n\n      {/* Enhanced Tickets List */}\n      <div className=\"space-y-4\">\n        {loading && tickets.length === 0 ? (\n          <Card className=\"border-0 bg-card/50 backdrop-blur-sm\">\n            <CardContent className=\"p-12 text-center\">\n              <div className=\"flex flex-col items-center space-y-4\">\n                <div className=\"relative\">\n                  <div className=\"animate-spin rounded-full h-12 w-12 border-2 border-primary/30\"></div>\n                  <div className=\"animate-spin rounded-full h-12 w-12 border-2 border-t-primary absolute inset-0\"></div>\n                </div>\n                <div className=\"space-y-2\">\n                  <p className=\"text-lg font-medium\">Loading tickets...</p>\n                  <p className=\"text-sm text-muted-foreground\">Processing admin data</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ) : tickets.length === 0 ? (\n          <Card className=\"border-0 bg-gradient-to-br from-card/50 to-muted/20 backdrop-blur-sm\">\n            <CardContent className=\"p-12 text-center\">\n              <div className=\"flex flex-col items-center space-y-6\">\n                <div className=\"p-4 bg-primary/10 rounded-full\">\n                  <Sparkles className=\"h-8 w-8 text-primary\" />\n                </div>\n                <div className=\"space-y-2\">\n                  <h3 className=\"text-xl font-semibold\">No tickets found</h3>\n                  <p className=\"text-muted-foreground max-w-md\">\n                    {filters.search || filters.status || filters.service || filters.priority || filters.assignedTo || filters.customerEmail\n                      ? \"Try adjusting your filters or search terms to find what you're looking for.\"\n                      : \"No support tickets have been created yet. They will appear here when users submit requests.\"\n                    }\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ) : (\n          <>\n            {/* Enhanced Ticket Entries */}\n            <div className=\"border rounded-lg overflow-hidden\">\n              <div className=\"overflow-x-auto\">\n                {/* Table Header */}\n                <div className=\"bg-muted/50 px-4 py-3 border-b flex items-center gap-4 text-sm font-medium text-muted-foreground min-w-[1180px]\">\n                  <div className=\"w-[60px] flex-shrink-0 flex items-center\">\n                    <Checkbox\n                      checked={tickets.length > 0 && selectedTickets.size === tickets.length}\n                      onCheckedChange={handleSelectAll}\n                      className=\"border-2\"\n                    />\n                  </div>\n                  <div className=\"w-[80px] flex-shrink-0\">Ticket #</div>\n                  <div className=\"w-[260px] flex-shrink-0\">Title & Customer</div>\n                  <div className=\"w-[100px] flex-shrink-0\">Service</div>\n                  <div className=\"w-[80px] flex-shrink-0\">Priority</div>\n                  <div className=\"w-[120px] flex-shrink-0\">Status</div>\n                  <div className=\"w-[150px] flex-shrink-0\">Assigned To</div>\n                  <div className=\"w-[70px] flex-shrink-0 text-center\">Replies</div>\n                  <div className=\"w-[80px] flex-shrink-0\">Created</div>\n                </div>\n\n                {/* Table Rows */}\n                {tickets.map((ticket, index) => (\n                  <div key={ticket._id} className={`px-4 py-3 flex items-center gap-4 hover:bg-muted/30 transition-colors group min-w-[1180px] ${index !== tickets.length - 1 ? 'border-b' : ''}`}>\n                    {/* Selection Checkbox */}\n                    <div className=\"w-[60px] flex-shrink-0\">\n                      <Checkbox\n                        checked={selectedTickets.has(ticket._id)}\n                        onCheckedChange={(checked) => handleSelectTicket(ticket._id, checked)}\n                        className=\"border-2\"\n                      />\n                    </div>\n\n                    {/* Ticket Number */}\n                    <div className=\"w-[80px] flex-shrink-0\">\n                      <Link href={`/support/tickets/${ticket._id}`} className=\"font-mono text-xs text-muted-foreground hover:text-primary transition-colors\">\n                        #{ticket.ticketNumber}\n                      </Link>\n                    </div>\n\n                    {/* Title & Customer */}\n                    <div className=\"w-[260px] flex-shrink-0\">\n                      <Link href={`/support/tickets/${ticket._id}`} className=\"block space-y-1 group-hover:text-primary transition-colors\">\n                        <div className=\"font-medium text-sm truncate\" title={ticket.title}>\n                          {ticket.title}\n                        </div>\n                        <div className=\"text-xs text-muted-foreground truncate\">\n                          <User className=\"h-3 w-3 inline mr-1\" />\n                          <span title={`${ticket.user?.firstName || ticket.user?.name || ticket.user?.email} ${ticket.user?.lastName || ''} - ${ticket.userOnboarding?.companyName || 'No company'}`}>\n                            {ticket.user?.firstName || ticket.user?.name || ticket.user?.email} {ticket.user?.lastName || ''}\n                            {ticket.userOnboarding?.companyName && (\n                              <span className=\"text-muted-foreground/80\"> • {ticket.userOnboarding.companyName}</span>\n                            )}\n                          </span>\n                        </div>\n                      </Link>\n                    </div>\n\n                    {/* Service */}\n                    <div className=\"w-[100px] flex-shrink-0\">\n                      <Badge variant=\"outline\" className=\"text-xs whitespace-nowrap\">\n                        {SERVICE_LABELS[ticket.service]}\n                      </Badge>\n                    </div>\n\n                    {/* Priority */}\n                    <div className=\"w-[80px] flex-shrink-0\">\n                      <Badge className={`${PRIORITY_COLORS[ticket.priority]} text-xs whitespace-nowrap`}>\n                        {PRIORITY_LABELS[ticket.priority]}\n                      </Badge>\n                    </div>\n\n                    {/* Status */}\n                    <div className=\"w-[120px] flex-shrink-0\">\n                      <Badge className={`${STATUS_COLORS[ticket.status]} text-xs flex items-center justify-center gap-1 whitespace-nowrap`}>\n                        {getStatusIcon(ticket.status)}\n                        {STATUS_LABELS[ticket.status]}\n                      </Badge>\n                    </div>\n\n                    {/* Assigned To */}\n                    <div className=\"w-[150px] flex-shrink-0\">\n                      {ticket.assignedTo ? (\n                        <div className=\"flex items-center gap-1 text-xs\">\n                          <UserCheck className=\"h-3 w-3 text-green-600\" />\n                          <span className=\"truncate\" title={formatAssignedUser(ticket.assignedTo)}>\n                            {formatAssignedUser(ticket.assignedTo)}\n                          </span>\n                        </div>\n                      ) : (\n                        <span className=\"text-xs text-muted-foreground\">Unassigned</span>\n                      )}\n                    </div>\n\n                    {/* Replies */}\n                    <div className=\"w-[70px] flex-shrink-0 text-center\">\n                      {ticket.replies.length > 0 ? (\n                        <div className=\"flex items-center justify-center gap-1\">\n                          <MessageCircle className=\"h-3 w-3 text-muted-foreground\" />\n                          <span className=\"text-xs font-medium\">{ticket.replies.length}</span>\n                        </div>\n                      ) : (\n                        <span className=\"text-xs text-muted-foreground\">0</span>\n                      )}\n                    </div>\n\n                    {/* Created Date */}\n                    <div className=\"w-[80px] flex-shrink-0\">\n                      <div className=\"text-xs text-muted-foreground\" title={formatDate(ticket.createdAt)}>\n                        {getTimeAgo(ticket.createdAt)}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </>\n        )}\n      </div>\n\n      {/* Enhanced Pagination */}\n      {pagination && pagination.totalPages > 1 && (\n        <div className=\"flex flex-col sm:flex-row items-center justify-between gap-4 p-6 bg-card/30 dark:bg-card/20 rounded-xl border border-border/50\">\n          <p className=\"text-sm text-muted-foreground\">\n            Showing <span className=\"font-medium text-foreground\">{((pagination.page - 1) * pagination.limit) + 1}</span> to{' '}\n            <span className=\"font-medium text-foreground\">{Math.min(pagination.page * pagination.limit, pagination.total)}</span> of{' '}\n            <span className=\"font-medium text-foreground\">{pagination.total}</span> results\n          </p>\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => handlePageChange(pagination.page - 1)}\n              disabled={pagination.page <= 1}\n              className=\"border-0 bg-background/60 hover:bg-background/80\"\n            >\n              Previous\n            </Button>\n            <div className=\"flex items-center gap-2 px-3 py-1 bg-background/60 rounded-md border border-border/50\">\n              <span className=\"text-sm font-medium\">\n                Page {pagination.page} of {pagination.totalPages}\n              </span>\n            </div>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => handlePageChange(pagination.page + 1)}\n              disabled={pagination.page >= pagination.totalPages}\n              className=\"border-0 bg-background/60 hover:bg-background/80\"\n            >\n              Next\n            </Button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/admin/CannedResponsePicker.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadSavedPreferences'. Either include it or remove the dependency array.","line":109,"column":6,"nodeType":"ArrayExpression","endLine":109,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [isOpen, loadSavedPreferences]","fix":{"range":[3141,3149],"text":"[isOpen, loadSavedPreferences]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'handleSelect'. Either include it or remove the dependency array.","line":218,"column":6,"nodeType":"ArrayExpression","endLine":218,"endColumn":57,"suggestions":[{"desc":"Update the dependencies array to be: [isOpen, filteredResponses, selectedIndex, onClose, handleSelect]","fix":{"range":[6574,6625],"text":"[isOpen, filteredResponses, selectedIndex, onClose, handleSelect]"}}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":384,"column":47,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[12482,12483],"text":"&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[12482,12483],"text":"&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[12482,12483],"text":"&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[12482,12483],"text":"&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":384,"column":61,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[12496,12497],"text":"&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[12496,12497],"text":"&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[12496,12497],"text":"&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[12496,12497],"text":"&rdquo;"},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  MessageSquare, \n  Search, \n  ArrowUp, \n  ArrowDown, \n  CornerDownLeft,\n  Clock,\n  Tag,\n  GripHorizontal,\n  Filter,\n  X,\n  RotateCcw\n} from 'lucide-react';\nimport { useCannedResponses, CannedResponse } from '@/hooks/useCannedResponses';\n\ninterface CannedResponsePickerProps {\n  isOpen: boolean;\n  onSelect: (response: CannedResponse) => void;\n  onClose: () => void;\n  position: { top: number; left: number };\n  searchQuery?: string;\n  ticketService?: string;\n}\n\nexport function CannedResponsePicker({\n  isOpen,\n  onSelect,\n  onClose,\n  position,\n  searchQuery = '',\n  ticketService\n}: CannedResponsePickerProps) {\n  const { responses, loading, fetchResponses, incrementUsage } = useCannedResponses();\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const [filteredResponses, setFilteredResponses] = useState<CannedResponse[]>([]);\n  const containerRef = useRef<HTMLDivElement>(null);\n  \n  // Default values\n  const defaultDimensions = { width: 640, height: 384 };\n\n  // Load saved preferences from localStorage\n  const loadSavedPreferences = () => {\n    if (typeof window === 'undefined') return { dimensions: defaultDimensions, position };\n    \n    try {\n      const savedDimensions = localStorage.getItem('cannedResponsePicker_dimensions');\n      const savedPosition = localStorage.getItem('cannedResponsePicker_position');\n      \n      return {\n        dimensions: savedDimensions ? JSON.parse(savedDimensions) : defaultDimensions,\n        position: savedPosition ? JSON.parse(savedPosition) : position\n      };\n    } catch {\n      return {\n        dimensions: defaultDimensions,\n        position: position\n      };\n    }\n  };\n\n\n\n  // Separate save functions for better control\n  const savePosition = useCallback((position: { top: number; left: number }) => {\n    if (typeof window === 'undefined') return;\n    try {\n      localStorage.setItem('cannedResponsePicker_position', JSON.stringify(position));\n    } catch {\n      // Silent fail for localStorage errors\n    }\n  }, []);\n\n  const saveDimensions = useCallback((dims: { width: number; height: number }) => {\n    if (typeof window === 'undefined') return;\n    try {\n      localStorage.setItem('cannedResponsePicker_dimensions', JSON.stringify(dims));\n    } catch {\n      // No need to warn here\n    }\n  }, []);\n\n  // Reset to default position and size\n  const resetToDefaults = () => {\n    setCurrentPosition(position);\n    setDimensions(defaultDimensions);\n    \n    // Clear saved preferences\n    if (typeof window !== 'undefined') {\n      try {\n        localStorage.removeItem('cannedResponsePicker_dimensions');\n        localStorage.removeItem('cannedResponsePicker_position');\n      } catch {\n        // No need to warn here\n      }\n    }\n  };\n\n  // Initialize position on mount - saved position takes precedence over prop\n  useEffect(() => {\n    if (isOpen) {\n      const savedPrefs = loadSavedPreferences();\n      setCurrentPosition(savedPrefs.position);\n      setDimensions(savedPrefs.dimensions);\n    }\n  }, [isOpen]);\n\n  // Drag state\n  const [currentPosition, setCurrentPosition] = useState(position);\n  const [isDragging, setIsDragging] = useState(false);\n  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });\n\n  // Resize state\n  const [dimensions, setDimensions] = useState(defaultDimensions);\n  const [isResizing, setIsResizing] = useState(false);\n  const [resizeStart, setResizeStart] = useState({ x: 0, y: 0, width: 0, height: 0 });\n\n  // Debounced save refs\n  const positionSaveTimeout = useRef<NodeJS.Timeout | null>(null);\n  const dimensionsSaveTimeout = useRef<NodeJS.Timeout | null>(null);\n\n  // Filter state\n  const [filters, setFilters] = useState({\n    category: '',\n    service: '',\n    sortBy: 'usage' // 'usage', 'alphabetical', 'recent'\n  });\n  const [showFilters, setShowFilters] = useState(false);\n\n  // Fetch responses when opened\n  useEffect(() => {\n    if (isOpen) {\n      fetchResponses({ service: ticketService });\n    }\n  }, [isOpen, fetchResponses, ticketService]);\n\n  // Filter responses based on search query and filters\n  useEffect(() => {\n    let filtered = responses;\n    \n    // Apply search query filter\n    if (searchQuery.trim()) {\n      const query = searchQuery.toLowerCase();\n      filtered = filtered.filter(response => \n        response.title.toLowerCase().includes(query) ||\n        response.content.toLowerCase().includes(query) ||\n        response.category.toLowerCase().includes(query) ||\n        response.keywords?.some(keyword => keyword.toLowerCase().includes(query))\n      );\n    }\n    \n    // Apply category filter\n    if (filters.category) {\n      filtered = filtered.filter(response => response.category === filters.category);\n    }\n    \n    // Apply service filter (in addition to the automatic ticket service filtering)\n    if (filters.service) {\n      filtered = filtered.filter(response => \n        response.services?.includes(filters.service) || response.services?.length === 0\n      );\n    }\n    \n    // Apply sorting\n    switch (filters.sortBy) {\n      case 'alphabetical':\n        filtered.sort((a, b) => a.title.localeCompare(b.title));\n        break;\n      case 'recent':\n        filtered.sort((a, b) => new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime());\n        break;\n      case 'usage':\n      default:\n        filtered.sort((a, b) => b.usageCount - a.usageCount);\n        break;\n    }\n    \n    setFilteredResponses(filtered);\n    setSelectedIndex(0);\n  }, [responses, searchQuery, filters]);\n\n  // Handle keyboard navigation\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (!isOpen) return;\n\n      switch (e.key) {\n        case 'ArrowUp':\n          e.preventDefault();\n          setSelectedIndex(prev => \n            prev > 0 ? prev - 1 : filteredResponses.length - 1\n          );\n          break;\n        case 'ArrowDown':\n          e.preventDefault();\n          setSelectedIndex(prev => \n            prev < filteredResponses.length - 1 ? prev + 1 : 0\n          );\n          break;\n        case 'Enter':\n          e.preventDefault();\n          if (filteredResponses[selectedIndex]) {\n            handleSelect(filteredResponses[selectedIndex]);\n          }\n          break;\n        case 'Escape':\n          e.preventDefault();\n          onClose();\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [isOpen, filteredResponses, selectedIndex, onClose]);\n\n  const handleSelect = async (response: CannedResponse) => {\n    await incrementUsage(response._id);\n    onSelect(response);\n    onClose();\n  };\n\n  // Drag handlers\n  const handleMouseDown = (e: React.MouseEvent) => {\n    if (e.target === e.currentTarget || (e.target as HTMLElement).closest('.drag-handle')) {\n      setIsDragging(true);\n      const rect = containerRef.current?.getBoundingClientRect();\n      if (rect) {\n        setDragOffset({\n          x: e.clientX - rect.left,\n          y: e.clientY - rect.top\n        });\n      }\n    }\n  };\n\n  // Resize handlers\n  const handleResizeMouseDown = (e: React.MouseEvent) => {\n    e.stopPropagation(); // Prevent dragging when resizing\n    setIsResizing(true);\n    setResizeStart({\n      x: e.clientX,\n      y: e.clientY,\n      width: dimensions.width,\n      height: dimensions.height\n    });\n  };\n\n  const handleMouseMove = useCallback((e: MouseEvent) => {\n    if (isDragging) {\n      const newPosition = {\n        top: e.clientY - dragOffset.y,\n        left: e.clientX - dragOffset.x\n      };\n      \n      // Keep within screen bounds\n      const boundedPosition = {\n        top: Math.max(10, Math.min(newPosition.top, window.innerHeight - dimensions.height)),\n        left: Math.max(10, Math.min(newPosition.left, window.innerWidth - dimensions.width))\n      };\n      \n      setCurrentPosition(boundedPosition);\n      \n      // Debounced save during drag\n      if (positionSaveTimeout.current) {\n        clearTimeout(positionSaveTimeout.current);\n      }\n      positionSaveTimeout.current = setTimeout(() => {\n        savePosition(boundedPosition);\n      }, 100);\n    }\n    \n    if (isResizing) {\n      const deltaX = e.clientX - resizeStart.x;\n      const deltaY = e.clientY - resizeStart.y;\n      \n      const newWidth = Math.max(400, Math.min(800, resizeStart.width + deltaX)); // Min 400px, Max 800px\n      const newHeight = Math.max(300, Math.min(600, resizeStart.height + deltaY)); // Min 300px, Max 600px\n      \n      const newDimensions = { width: newWidth, height: newHeight };\n      setDimensions(newDimensions);\n      \n      // Debounced save during resize\n      if (dimensionsSaveTimeout.current) {\n        clearTimeout(dimensionsSaveTimeout.current);\n      }\n      dimensionsSaveTimeout.current = setTimeout(() => {\n        saveDimensions(newDimensions);\n      }, 100);\n    }\n  }, [isDragging, isResizing, dragOffset, resizeStart, dimensions, savePosition, saveDimensions]);\n\n  const handleMouseUp = useCallback(() => {\n    // Clear any pending saves and do final save\n    if (isDragging) {\n      if (positionSaveTimeout.current) {\n        clearTimeout(positionSaveTimeout.current);\n      }\n      // Final save for position\n      savePosition(currentPosition);\n    }\n    \n    if (isResizing) {\n      if (dimensionsSaveTimeout.current) {\n        clearTimeout(dimensionsSaveTimeout.current);\n      }\n      // Final save for dimensions\n      saveDimensions(dimensions);\n    }\n    \n    setIsDragging(false);\n    setIsResizing(false);\n  }, [isDragging, isResizing, currentPosition, dimensions, savePosition, saveDimensions]);\n\n  // Add global mouse event listeners for dragging and resizing\n  useEffect(() => {\n    if (isDragging || isResizing) {\n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n      return () => {\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n      };\n    }\n  }, [isDragging, isResizing, handleMouseMove, handleMouseUp]);\n\n  // Cleanup timeouts on unmount\n  useEffect(() => {\n    return () => {\n      if (positionSaveTimeout.current) {\n        clearTimeout(positionSaveTimeout.current);\n      }\n      if (dimensionsSaveTimeout.current) {\n        clearTimeout(dimensionsSaveTimeout.current);\n      }\n    };\n  }, []);\n\n  if (!isOpen) return null;\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <motion.div\n          ref={containerRef}\n          initial={{ y: 50, scale: 0.95, opacity: 0 }}\n          animate={{ y: 0, scale: 1, opacity: 1 }}\n          exit={{ y: 50, scale: 0.95, opacity: 0 }}\n          transition={{ \n            type: \"spring\", \n            damping: 25, \n            stiffness: 300,\n            duration: 0.3 \n          }}\n          className={`fixed z-50 bg-white dark:bg-slate-900 border border-slate-200 dark:border-slate-700 rounded-lg shadow-xl overflow-hidden ${\n            isDragging ? 'shadow-2xl cursor-grabbing select-none' : isResizing ? 'shadow-2xl select-none' : 'cursor-auto'\n          }`}\n          style={{\n            top: Math.max(10, Math.min(currentPosition.top, window.innerHeight - dimensions.height)),\n            left: Math.max(10, Math.min(currentPosition.left, window.innerWidth - dimensions.width)),\n            width: dimensions.width,\n            height: dimensions.height,\n            userSelect: isDragging || isResizing ? 'none' : 'auto',\n          }}\n          onMouseDown={handleMouseDown}\n        >\n          {/* Header */}\n          <div className={`drag-handle p-3 border-b border-slate-200 dark:border-slate-700 bg-slate-50 dark:bg-slate-800 ${\n            isDragging ? 'cursor-grabbing' : 'cursor-grab'\n          }`}>\n            <div className=\"flex items-center justify-between text-sm text-slate-600 dark:text-slate-400\">\n              <div className=\"flex items-center gap-2\">\n                <GripHorizontal className=\"h-4 w-4 text-slate-400\" />\n                <MessageSquare className=\"h-4 w-4\" />\n                <span>Select a canned response • Drag to move</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                {searchQuery && (\n                  <div className=\"flex items-center gap-1\">\n                    <Search className=\"h-3 w-3\" />\n                    <span className=\"text-xs\">\"{searchQuery}\"</span>\n                  </div>\n                )}\n                <button\n                  onClick={resetToDefaults}\n                  className=\"p-1 rounded hover:bg-slate-200 dark:hover:bg-slate-700 transition-colors\"\n                  title=\"Reset position and size\"\n                >\n                  <RotateCcw className=\"h-4 w-4\" />\n                </button>\n                <button\n                  onClick={() => setShowFilters(!showFilters)}\n                  className={`p-1 rounded hover:bg-slate-200 dark:hover:bg-slate-700 transition-colors ${\n                    showFilters ? 'bg-slate-200 dark:bg-slate-700' : ''\n                  }`}\n                  title=\"Toggle filters\"\n                >\n                  <Filter className=\"h-4 w-4\" />\n                </button>\n              </div>\n            </div>\n          </div>\n\n          {/* Filter Bar */}\n          {showFilters && (\n            <div className=\"p-3 border-b border-slate-200 dark:border-slate-700 bg-slate-25 dark:bg-slate-850\">\n              <div className=\"grid grid-cols-3 gap-3\">\n                {/* Category Filter */}\n                <div>\n                  <label className=\"text-xs font-medium text-slate-600 dark:text-slate-400 mb-1 block\">\n                    Category\n                  </label>\n                  <select\n                    value={filters.category}\n                    onChange={(e) => setFilters(prev => ({ ...prev, category: e.target.value }))}\n                    className=\"w-full text-xs p-2 border border-slate-200 dark:border-slate-700 rounded bg-white dark:bg-slate-800 text-slate-900 dark:text-slate-100\"\n                  >\n                    <option value=\"\">All Categories</option>\n                    {Array.from(new Set(responses.map(r => r.category))).map(category => (\n                      <option key={category} value={category}>{category}</option>\n                    ))}\n                  </select>\n                </div>\n\n                {/* Service Filter */}\n                <div>\n                  <label className=\"text-xs font-medium text-slate-600 dark:text-slate-400 mb-1 block\">\n                    Service\n                  </label>\n                  <select\n                    value={filters.service}\n                    onChange={(e) => setFilters(prev => ({ ...prev, service: e.target.value }))}\n                    className=\"w-full text-xs p-2 border border-slate-200 dark:border-slate-700 rounded bg-white dark:bg-slate-800 text-slate-900 dark:text-slate-100\"\n                  >\n                    <option value=\"\">All Services</option>\n                    <option value=\"outbound_calls\">Outbound Calls</option>\n                    <option value=\"inbound_calls\">Inbound Calls</option>\n                    <option value=\"did_numbers\">DID Numbers</option>\n                    <option value=\"sms\">SMS</option>\n                    <option value=\"emailing\">Emailing</option>\n                    <option value=\"whatsapp_business\">WhatsApp Business</option>\n                    <option value=\"billing\">Billing</option>\n                    <option value=\"technical\">Technical</option>\n                    <option value=\"other\">Other</option>\n                  </select>\n                </div>\n\n                {/* Sort Filter */}\n                <div>\n                  <label className=\"text-xs font-medium text-slate-600 dark:text-slate-400 mb-1 block\">\n                    Sort By\n                  </label>\n                  <select\n                    value={filters.sortBy}\n                    onChange={(e) => setFilters(prev => ({ ...prev, sortBy: e.target.value }))}\n                    className=\"w-full text-xs p-2 border border-slate-200 dark:border-slate-700 rounded bg-white dark:bg-slate-800 text-slate-900 dark:text-slate-100\"\n                  >\n                    <option value=\"usage\">Most Used</option>\n                    <option value=\"alphabetical\">Alphabetical</option>\n                    <option value=\"recent\">Recently Updated</option>\n                  </select>\n                </div>\n              </div>\n\n              {/* Clear Filters */}\n              {(filters.category || filters.service || filters.sortBy !== 'usage') && (\n                <div className=\"mt-3 pt-3 border-t border-slate-200 dark:border-slate-700\">\n                  <button\n                    onClick={() => setFilters({ category: '', service: '', sortBy: 'usage' })}\n                    className=\"text-xs text-slate-500 hover:text-slate-700 dark:hover:text-slate-300 flex items-center gap-1\"\n                  >\n                    <X className=\"h-3 w-3\" />\n                    Clear filters\n                  </button>\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Loading */}\n          {loading && (\n            <div className=\"p-4 text-center\">\n              <div className=\"animate-spin h-6 w-6 border-2 border-slate-300 border-t-slate-600 rounded-full mx-auto\"></div>\n              <p className=\"text-sm text-slate-500 mt-2\">Loading responses...</p>\n            </div>\n          )}\n\n          {/* No results */}\n          {!loading && filteredResponses.length === 0 && (\n            <div className=\"p-6 text-center\">\n              <MessageSquare className=\"h-12 w-12 text-slate-400 mx-auto mb-3\" />\n              <p className=\"text-sm text-slate-500 mb-2\">\n                {searchQuery ? 'No responses match your search' : 'No canned responses found'}\n              </p>\n              {searchQuery && (\n                <p className=\"text-xs text-slate-400\">\n                  Try searching for different keywords or clear your search\n                </p>\n              )}\n            </div>\n          )}\n\n          {/* Response List */}\n          {!loading && filteredResponses.length > 0 && (\n            <div \n              className=\"overflow-y-auto\"\n              style={{ \n                height: dimensions.height - (showFilters ? 180 : 120) // Account for header, footer, and optional filter bar\n              }}\n            >\n              {filteredResponses.map((response, index) => (\n                <div\n                  key={response._id}\n                  className={`p-4 cursor-pointer border-b border-slate-100 dark:border-slate-800 transition-colors ${\n                    index === selectedIndex\n                      ? 'bg-blue-50 dark:bg-blue-950/20 border-blue-200 dark:border-blue-800'\n                      : 'hover:bg-slate-50 dark:hover:bg-slate-800'\n                  }`}\n                  onClick={() => handleSelect(response)}\n                >\n                  <div className=\"flex items-start justify-between gap-4\">\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-center gap-3 mb-2\">\n                        <h4 className=\"font-medium text-base text-slate-900 dark:text-slate-100 truncate\">\n                          {response.title}\n                        </h4>\n                        <div className=\"flex items-center gap-2\">\n                          <Tag className=\"h-3 w-3 text-slate-400\" />\n                          <span className=\"text-xs text-slate-500 bg-slate-100 dark:bg-slate-700 px-2 py-1 rounded\">\n                            {response.category}\n                          </span>\n                        </div>\n                      </div>\n                      <p className=\"text-sm text-slate-600 dark:text-slate-400 line-clamp-3 mb-3\">\n                        {response.content.length > 150 \n                          ? `${response.content.substring(0, 150)}...`\n                          : response.content\n                        }\n                      </p>\n                      <div className=\"flex items-center gap-4 text-xs text-slate-500\">\n                        <div className=\"flex items-center gap-1\">\n                          <Clock className=\"h-3 w-3\" />\n                          <span>Used {response.usageCount} times</span>\n                        </div>\n                        {response.keywords && response.keywords.length > 0 && (\n                          <div className=\"flex items-center gap-1\">\n                            <span>•</span>\n                            <span>{response.keywords.slice(0, 3).join(', ')}</span>\n                            {response.keywords.length > 3 && <span>...</span>}\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                    {index === selectedIndex && (\n                      <div className=\"flex items-center gap-1 text-blue-600 dark:text-blue-400\">\n                        <CornerDownLeft className=\"h-4 w-4\" />\n                      </div>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n\n          {/* Enhanced Footer */}\n          {(loading || filteredResponses.length > 0) && (\n            <div className=\"absolute bottom-0 left-0 right-0 border-t border-slate-200 dark:border-slate-700 bg-slate-50 dark:bg-slate-800/50 px-4 py-3 pr-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-4 text-xs text-slate-600 dark:text-slate-400\">\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"flex items-center gap-1\">\n                      <ArrowUp className=\"h-3 w-3\" />\n                      <ArrowDown className=\"h-3 w-3\" />\n                    </div>\n                    <span>Navigate</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <CornerDownLeft className=\"h-3 w-3\" />\n                    <span>Select</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"px-1.5 py-0.5 bg-slate-200 dark:bg-slate-700 rounded text-xs font-medium\">Esc</span>\n                    <span>Close</span>\n                  </div>\n                </div>\n                <div className=\"text-xs text-slate-500 dark:text-slate-400\">\n                  {loading ? 'Loading...' : (\n                    <>\n                      {filteredResponses.length} of {responses.length} responses\n                      {(filters.category || filters.service || searchQuery) && (\n                        <span className=\"ml-2 text-blue-600 dark:text-blue-400\">\n                          • Filtered\n                        </span>\n                      )}\n                    </>\n                  )}\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Resize Handle */}\n          <div\n            className={`absolute bottom-0 right-0 w-4 h-4 ${\n              isResizing ? 'cursor-nw-resize' : 'cursor-nw-resize hover:bg-slate-200 dark:hover:bg-slate-700'\n            } transition-colors`}\n            onMouseDown={handleResizeMouseDown}\n            style={{\n              background: `linear-gradient(-45deg, transparent 30%, ${isResizing ? '#3b82f6' : '#cbd5e1'} 30%, ${isResizing ? '#3b82f6' : '#cbd5e1'} 35%, transparent 35%, transparent 65%, ${isResizing ? '#3b82f6' : '#cbd5e1'} 65%, ${isResizing ? '#3b82f6' : '#cbd5e1'} 70%, transparent 70%)`\n            }}\n          />\n        </motion.div>\n      )}\n    </AnimatePresence>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/admin/CustomerNotificationManager.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An empty interface declaration allows any non-nullish value, including literals like `0` and `\"\"`.\n- If that's what you want, disable this lint rule with an inline comment or configure the 'allowInterfaces' rule option.\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.","line":40,"column":11,"nodeType":"Identifier","messageId":"noEmptyInterface","endLine":40,"endColumn":43,"suggestions":[{"messageId":"replaceEmptyInterface","data":{"replacement":"object"},"fix":{"range":[1357,1441],"text":"type CustomerNotificationManagerProps = object"},"desc":"Replace empty interface with `object`."},{"messageId":"replaceEmptyInterface","data":{"replacement":"unknown"},"fix":{"range":[1357,1441],"text":"type CustomerNotificationManagerProps = unknown"},"desc":"Replace empty interface with `unknown`."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","line":118,"column":6,"nodeType":"ArrayExpression","endLine":118,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchData]","fix":{"range":[3807,3809],"text":"[fetchData]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'availableUsers.length'. Either include it or remove the dependency array.","line":191,"column":6,"nodeType":"ArrayExpression","endLine":191,"endColumn":43,"suggestions":[{"desc":"Update the dependencies array to be: [availableUsers.length, instantMessageForm.targetUsers.type]","fix":{"range":[6268,6305],"text":"[availableUsers.length, instantMessageForm.targetUsers.type]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '@/components/ui/alert-dialog';\nimport { \n  Plus, \n  Edit, \n  Trash2, \n  Send, \n  Calendar, \n  Mail, \n  MessageSquare, \n  Smartphone,\n  Eye,\n  Play,\n  Pause,\n  BarChart3,\n  Search,\n  RefreshCw\n} from 'lucide-react';\nimport { toast } from 'sonner';\nimport { \n  CustomerNotificationTemplate, \n  ScheduledCustomerNotification, \n  CustomerNotificationType,\n  DeliveryChannel,\n  NotificationPriority,\n  ScheduleStatus\n} from '@/types/notifications';\n\ninterface CustomerNotificationManagerProps {\n  // Component has no props currently\n}\n\nexport function CustomerNotificationManager({}: CustomerNotificationManagerProps) {\n  const [templates, setTemplates] = useState<CustomerNotificationTemplate[]>([]);\n  const [scheduledNotifications, setScheduledNotifications] = useState<ScheduledCustomerNotification[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [activeTab, setActiveTab] = useState('templates');\n  \n  // Template form state\n  const [isTemplateDialogOpen, setIsTemplateDialogOpen] = useState(false);\n  const [editingTemplate, setEditingTemplate] = useState<CustomerNotificationTemplate | null>(null);\n  const [templateForm, setTemplateForm] = useState({\n    name: '',\n    type: 'service_update' as CustomerNotificationType,\n    subject: '',\n    content: {\n      html: '',\n      text: '',\n      pushTitle: '',\n      pushBody: '',\n      smsContent: ''\n    },\n    channels: ['email'] as DeliveryChannel[],\n    priority: 'medium' as NotificationPriority,\n    category: 'general',\n    isActive: true\n  });\n\n  // Scheduled notification form state\n  const [isScheduleDialogOpen, setIsScheduleDialogOpen] = useState(false);\n  const [scheduleForm, setScheduleForm] = useState({\n    name: '',\n    description: '',\n    templateId: '',\n    schedule: {\n      type: 'immediate' as 'immediate' | 'scheduled' | 'recurring',\n      scheduledAt: '',\n      timezone: 'UTC'\n    },\n    targetUsers: {\n      type: 'all' as 'all' | 'role' | 'specific' | 'filter'\n    },\n    channels: ['email'] as DeliveryChannel[]\n  });\n\n  // Filters\n  const [templateFilter, setTemplateFilter] = useState({\n    search: '',\n    type: '',\n    category: '',\n    isActive: ''\n  });\n\n  const [notificationFilter, setNotificationFilter] = useState({\n    search: '',\n    status: '',\n    templateId: ''\n  });\n\n  // Instant messaging state\n  const [instantMessageForm, setInstantMessageForm] = useState({\n    title: '',\n    message: '',\n    targetUsers: {\n      type: 'all' as 'all' | 'specific',\n      userIds: [] as string[]\n    },\n    priority: 'medium' as NotificationPriority,\n    channels: ['push', 'in_app'] as DeliveryChannel[]\n  });\n  const [isSendingInstant, setIsSendingInstant] = useState(false);\n  const [availableUsers, setAvailableUsers] = useState<Array<{ id: string; name: string; email: string }>>([]);\n  const [loadingUsers, setLoadingUsers] = useState(false);\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    setIsLoading(true);\n    try {\n      await Promise.all([\n        fetchTemplates(),\n        fetchScheduledNotifications()\n      ]);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      toast.error('Failed to load data');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const fetchTemplates = async () => {\n    try {\n      const params = new URLSearchParams();\n      if (templateFilter.isActive) params.append('isActive', templateFilter.isActive);\n      if (templateFilter.type) params.append('type', templateFilter.type);\n      if (templateFilter.category) params.append('category', templateFilter.category);\n\n      const response = await fetch(`/api/customer-notifications/templates?${params}`);\n      if (!response.ok) throw new Error('Failed to fetch templates');\n      \n      const data = await response.json();\n      setTemplates(data.templates || []);\n    } catch (error) {\n      console.error('Error fetching templates:', error);\n      toast.error('Failed to load templates');\n    }\n  };\n\n  const fetchScheduledNotifications = async () => {\n    try {\n      const params = new URLSearchParams();\n      if (notificationFilter.status) params.append('status', notificationFilter.status);\n      if (notificationFilter.templateId) params.append('templateId', notificationFilter.templateId);\n\n      const response = await fetch(`/api/customer-notifications/scheduled?${params}`);\n      if (!response.ok) throw new Error('Failed to fetch scheduled notifications');\n      \n      const data = await response.json();\n      setScheduledNotifications(data.notifications || []);\n    } catch (error) {\n      console.error('Error fetching scheduled notifications:', error);\n      toast.error('Failed to load scheduled notifications');\n    }\n  };\n\n  const fetchUsers = async () => {\n    setLoadingUsers(true);\n    try {\n      const response = await fetch('/api/users');\n      if (!response.ok) throw new Error('Failed to fetch users');\n      \n      const data = await response.json();\n      setAvailableUsers(data.users || []);\n    } catch (error) {\n      console.error('Error fetching users:', error);\n      toast.error('Failed to load users');\n    } finally {\n      setLoadingUsers(false);\n    }\n  };\n\n  // Fetch users when \"specific\" is selected\n  useEffect(() => {\n    if (instantMessageForm.targetUsers.type === 'specific' && availableUsers.length === 0) {\n      fetchUsers();\n    }\n  }, [instantMessageForm.targetUsers.type]);\n\n  const handleCreateTemplate = async () => {\n    try {\n      const response = await fetch('/api/customer-notifications/templates', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(templateForm)\n      });\n\n      if (!response.ok) throw new Error('Failed to create template');\n\n      toast.success('Template created successfully');\n      setIsTemplateDialogOpen(false);\n      resetTemplateForm();\n      fetchTemplates();\n    } catch (error) {\n      console.error('Error creating template:', error);\n      toast.error('Failed to create template');\n    }\n  };\n\n  const handleScheduleNotification = async () => {\n    try {\n      const response = await fetch('/api/customer-notifications/scheduled', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(scheduleForm)\n      });\n\n      if (!response.ok) throw new Error('Failed to schedule notification');\n\n      toast.success('Notification scheduled successfully');\n      setIsScheduleDialogOpen(false);\n      resetScheduleForm();\n      fetchScheduledNotifications();\n    } catch (error) {\n      console.error('Error scheduling notification:', error);\n      toast.error('Failed to schedule notification');\n    }\n  };\n\n  const handleSendInstantMessage = async () => {\n    if (!instantMessageForm.title.trim() || !instantMessageForm.message.trim()) {\n      toast.error('Please provide both title and message');\n      return;\n    }\n\n    if (instantMessageForm.targetUsers.type === 'specific' && instantMessageForm.targetUsers.userIds.length === 0) {\n      toast.error('Please select at least one user for specific targeting');\n      return;\n    }\n\n    setIsSendingInstant(true);\n    try {\n      const response = await fetch('/api/customer-notifications/instant', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(instantMessageForm)\n      });\n\n      if (!response.ok) throw new Error('Failed to send instant message');\n\n      const data = await response.json();\n      toast.success(`Message sent successfully to ${data.recipientCount} users`);\n      resetInstantMessageForm();\n    } catch (error) {\n      console.error('Error sending instant message:', error);\n      toast.error('Failed to send instant message');\n    } finally {\n      setIsSendingInstant(false);\n    }\n  };\n\n  const resetTemplateForm = () => {\n    setTemplateForm({\n      name: '',\n      type: 'service_update',\n      subject: '',\n      content: {\n        html: '',\n        text: '',\n        pushTitle: '',\n        pushBody: '',\n        smsContent: ''\n      },\n      channels: ['email'],\n      priority: 'medium',\n      category: 'general',\n      isActive: true\n    });\n    setEditingTemplate(null);\n  };\n\n  const resetScheduleForm = () => {\n    setScheduleForm({\n      name: '',\n      description: '',\n      templateId: '',\n      schedule: {\n        type: 'immediate',\n        scheduledAt: '',\n        timezone: 'UTC'\n      },\n      targetUsers: {\n        type: 'all'\n      },\n      channels: ['email']\n    });\n  };\n\n  const resetInstantMessageForm = () => {\n    setInstantMessageForm({\n      title: '',\n      message: '',\n      targetUsers: {\n        type: 'all',\n        userIds: []\n      },\n      priority: 'medium',\n      channels: ['push', 'in_app']\n    });\n  };\n\n  const getStatusBadge = (status: ScheduleStatus) => {\n    const variants = {\n      draft: 'secondary',\n      scheduled: 'default',\n      sending: 'destructive',\n      sent: 'outline',\n      cancelled: 'secondary',\n      failed: 'destructive'\n    } as const;\n\n    return <Badge variant={variants[status] || 'secondary'}>{status}</Badge>;\n  };\n\n  const getPriorityBadge = (priority: NotificationPriority) => {\n    const variants = {\n      low: 'secondary',\n      medium: 'default',\n      high: 'destructive',\n      urgent: 'destructive'\n    } as const;\n\n    return <Badge variant={variants[priority]}>{priority}</Badge>;\n  };\n\n  const filteredTemplates = templates.filter(template => {\n    if (templateFilter.search && !template.name.toLowerCase().includes(templateFilter.search.toLowerCase())) {\n      return false;\n    }\n    return true;\n  });\n\n  const filteredNotifications = scheduledNotifications.filter(notification => {\n    if (notificationFilter.search && !notification.name.toLowerCase().includes(notificationFilter.search.toLowerCase())) {\n      return false;\n    }\n    return true;\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center p-8\">\n        <RefreshCw className=\"h-8 w-8 animate-spin\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold\">Customer Notifications</h1>\n          <p className=\"text-muted-foreground\">\n            Manage notification templates and schedule customer communications\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button onClick={fetchData} variant=\"outline\" size=\"sm\">\n            <RefreshCw className=\"h-4 w-4 mr-2\" />\n            Refresh\n          </Button>\n        </div>\n      </div>\n\n      {/* Tabs */}\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList>\n          <TabsTrigger value=\"templates\">\n            <MessageSquare className=\"h-4 w-4 mr-2\" />\n            Templates ({templates.length})\n          </TabsTrigger>\n          <TabsTrigger value=\"scheduled\">\n            <Calendar className=\"h-4 w-4 mr-2\" />\n            Scheduled ({scheduledNotifications.length})\n          </TabsTrigger>\n          <TabsTrigger value=\"analytics\">\n            <BarChart3 className=\"h-4 w-4 mr-2\" />\n            Analytics\n          </TabsTrigger>\n          <TabsTrigger value=\"instant\">\n            <Send className=\"h-4 w-4 mr-2\" />\n            Instant Messaging\n          </TabsTrigger>\n        </TabsList>\n\n        {/* Templates Tab */}\n        <TabsContent value=\"templates\" className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"relative\">\n                <Search className=\"h-4 w-4 absolute left-3 top-3 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search templates...\"\n                  value={templateFilter.search}\n                  onChange={(e) => setTemplateFilter(prev => ({ ...prev, search: e.target.value }))}\n                  className=\"pl-10 w-64\"\n                />\n              </div>\n              <Select value={templateFilter.type || 'all'} onValueChange={(value) => setTemplateFilter(prev => ({ ...prev, type: value === 'all' ? '' : value }))}>\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue placeholder=\"Filter by type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Types</SelectItem>\n                  <SelectItem value=\"service_update\">Service Update</SelectItem>\n                  <SelectItem value=\"maintenance_scheduled\">Maintenance</SelectItem>\n                  <SelectItem value=\"feature_announcement\">Feature Announcement</SelectItem>\n                  <SelectItem value=\"billing_reminder\">Billing Reminder</SelectItem>\n                  <SelectItem value=\"promotional_offer\">Promotional Offer</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <Dialog open={isTemplateDialogOpen} onOpenChange={setIsTemplateDialogOpen}>\n              <DialogTrigger asChild>\n                <Button onClick={resetTemplateForm}>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Create Template\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n                <DialogHeader>\n                  <DialogTitle>\n                    {editingTemplate ? 'Edit Template' : 'Create New Template'}\n                  </DialogTitle>\n                  <DialogDescription>\n                    Create a reusable notification template for customer communications.\n                  </DialogDescription>\n                </DialogHeader>\n                <div className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"template-name\">Template Name</Label>\n                      <Input\n                        id=\"template-name\"\n                        value={templateForm.name}\n                        onChange={(e) => setTemplateForm(prev => ({ ...prev, name: e.target.value }))}\n                        placeholder=\"e.g., Monthly Service Update\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"template-type\">Type</Label>\n                      <Select value={templateForm.type} onValueChange={(value: CustomerNotificationType) => setTemplateForm(prev => ({ ...prev, type: value }))}>\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"service_update\">Service Update</SelectItem>\n                          <SelectItem value=\"maintenance_scheduled\">Maintenance Scheduled</SelectItem>\n                          <SelectItem value=\"feature_announcement\">Feature Announcement</SelectItem>\n                          <SelectItem value=\"billing_reminder\">Billing Reminder</SelectItem>\n                          <SelectItem value=\"promotional_offer\">Promotional Offer</SelectItem>\n                          <SelectItem value=\"system_alert\">System Alert</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"template-subject\">Email Subject</Label>\n                    <Input\n                      id=\"template-subject\"\n                      value={templateForm.subject}\n                      onChange={(e) => setTemplateForm(prev => ({ ...prev, subject: e.target.value }))}\n                      placeholder=\"Subject line for email notifications\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"template-html\">HTML Content</Label>\n                    <Textarea\n                      id=\"template-html\"\n                      value={templateForm.content.html}\n                      onChange={(e) => setTemplateForm(prev => ({ \n                        ...prev, \n                        content: { ...prev.content, html: e.target.value }\n                      }))}\n                      placeholder=\"HTML content for email notifications. Use {{variable}} for dynamic content.\"\n                      rows={6}\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"template-text\">Plain Text Content</Label>\n                    <Textarea\n                      id=\"template-text\"\n                      value={templateForm.content.text}\n                      onChange={(e) => setTemplateForm(prev => ({ \n                        ...prev, \n                        content: { ...prev.content, text: e.target.value }\n                      }))}\n                      placeholder=\"Plain text version for email notifications\"\n                      rows={4}\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"template-priority\">Priority</Label>\n                      <Select value={templateForm.priority} onValueChange={(value: NotificationPriority) => setTemplateForm(prev => ({ ...prev, priority: value }))}>\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"low\">Low</SelectItem>\n                          <SelectItem value=\"medium\">Medium</SelectItem>\n                          <SelectItem value=\"high\">High</SelectItem>\n                          <SelectItem value=\"urgent\">Urgent</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div>\n                      <Label htmlFor=\"template-category\">Category</Label>\n                      <Input\n                        id=\"template-category\"\n                        value={templateForm.category}\n                        onChange={(e) => setTemplateForm(prev => ({ ...prev, category: e.target.value }))}\n                        placeholder=\"e.g., marketing, support, billing\"\n                      />\n                    </div>\n                  </div>\n                </div>\n                <DialogFooter>\n                  <Button variant=\"outline\" onClick={() => setIsTemplateDialogOpen(false)}>\n                    Cancel\n                  </Button>\n                  <Button onClick={handleCreateTemplate}>\n                    {editingTemplate ? 'Update Template' : 'Create Template'}\n                  </Button>\n                </DialogFooter>\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          {/* Templates List */}\n          <div className=\"grid gap-4\">\n            {filteredTemplates.map((template) => (\n              <Card key={template.id}>\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <CardTitle className=\"text-lg\">{template.name}</CardTitle>\n                      <CardDescription>\n                        {template.type.replace('_', ' ')} • {template.category}\n                      </CardDescription>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      {getPriorityBadge(template.priority)}\n                      <Badge variant={template.isActive ? 'default' : 'secondary'}>\n                        {template.isActive ? 'Active' : 'Inactive'}\n                      </Badge>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2\">\n                    <p className=\"text-sm text-muted-foreground\">\n                      <strong>Subject:</strong> {template.subject}\n                    </p>\n                    <div className=\"flex items-center gap-2\">\n                      <span className=\"text-sm text-muted-foreground\">Channels:</span>\n                      {template.channels.map((channel) => (\n                        <Badge key={channel} variant=\"outline\" className=\"text-xs\">\n                          {channel === 'email' && <Mail className=\"h-3 w-3 mr-1\" />}\n                          {channel === 'push' && <Smartphone className=\"h-3 w-3 mr-1\" />}\n                          {channel === 'in_app' && <MessageSquare className=\"h-3 w-3 mr-1\" />}\n                          {channel}\n                        </Badge>\n                      ))}\n                    </div>\n                    <div className=\"flex items-center justify-between pt-2\">\n                      <span className=\"text-xs text-muted-foreground\">\n                        Created {new Date(template.createdAt).toLocaleDateString()}\n                      </span>\n                      <div className=\"flex gap-2\">\n                        <Dialog open={isScheduleDialogOpen} onOpenChange={setIsScheduleDialogOpen}>\n                          <DialogTrigger asChild>\n                            <Button \n                              size=\"sm\" \n                              variant=\"outline\"\n                              onClick={() => {\n                                setScheduleForm(prev => ({ ...prev, templateId: template.id }));\n                                resetScheduleForm();\n                              }}\n                            >\n                              <Send className=\"h-4 w-4 mr-1\" />\n                              Schedule\n                            </Button>\n                          </DialogTrigger>\n                          <DialogContent className=\"max-w-2xl\">\n                            <DialogHeader>\n                              <DialogTitle>Schedule Notification</DialogTitle>\n                              <DialogDescription>\n                                Schedule this template to be sent to customers.\n                              </DialogDescription>\n                            </DialogHeader>\n                            <div className=\"space-y-4\">\n                              <div>\n                                <Label htmlFor=\"schedule-name\">Campaign Name</Label>\n                                <Input\n                                  id=\"schedule-name\"\n                                  value={scheduleForm.name}\n                                  onChange={(e) => setScheduleForm(prev => ({ ...prev, name: e.target.value }))}\n                                  placeholder=\"e.g., Monthly Update - January 2024\"\n                                />\n                              </div>\n                              \n                              <div>\n                                <Label htmlFor=\"schedule-description\">Description</Label>\n                                <Textarea\n                                  id=\"schedule-description\"\n                                  value={scheduleForm.description}\n                                  onChange={(e) => setScheduleForm(prev => ({ ...prev, description: e.target.value }))}\n                                  placeholder=\"Optional description for this campaign\"\n                                  rows={2}\n                                />\n                              </div>\n\n                              <div>\n                                <Label>Target Audience</Label>\n                                <Select \n                                  value={scheduleForm.targetUsers.type} \n                                  onValueChange={(value: 'all' | 'specific' | 'filter') => \n                                    setScheduleForm(prev => ({ \n                                      ...prev, \n                                      targetUsers: { ...prev.targetUsers, type: value }\n                                    }))\n                                  }\n                                >\n                                  <SelectTrigger>\n                                    <SelectValue />\n                                  </SelectTrigger>\n                                  <SelectContent>\n                                    <SelectItem value=\"all\">All Users</SelectItem>\n                                    <SelectItem value=\"specific\">Specific Users</SelectItem>\n                                    <SelectItem value=\"filter\">Custom Filter</SelectItem>\n                                  </SelectContent>\n                                </Select>\n                              </div>\n\n                              <div>\n                                <Label>Schedule Type</Label>\n                                <Select \n                                  value={scheduleForm.schedule.type} \n                                  onValueChange={(value: 'immediate' | 'scheduled' | 'recurring') => \n                                    setScheduleForm(prev => ({ \n                                      ...prev, \n                                      schedule: { ...prev.schedule, type: value }\n                                    }))\n                                  }\n                                >\n                                  <SelectTrigger>\n                                    <SelectValue />\n                                  </SelectTrigger>\n                                  <SelectContent>\n                                    <SelectItem value=\"immediate\">Send Immediately</SelectItem>\n                                    <SelectItem value=\"scheduled\">Schedule for Later</SelectItem>\n                                    <SelectItem value=\"recurring\">Recurring</SelectItem>\n                                  </SelectContent>\n                                </Select>\n                              </div>\n\n                              {scheduleForm.schedule.type !== 'immediate' && (\n                                <div>\n                                  <Label htmlFor=\"schedule-date\">Schedule Date & Time</Label>\n                                  <Input\n                                    id=\"schedule-date\"\n                                    type=\"datetime-local\"\n                                    value={scheduleForm.schedule.scheduledAt}\n                                    onChange={(e) => setScheduleForm(prev => ({ \n                                      ...prev, \n                                      schedule: { ...prev.schedule, scheduledAt: e.target.value }\n                                    }))}\n                                  />\n                                </div>\n                              )}\n                            </div>\n                            <DialogFooter>\n                              <Button variant=\"outline\" onClick={() => setIsScheduleDialogOpen(false)}>\n                                Cancel\n                              </Button>\n                              <Button onClick={handleScheduleNotification}>\n                                Schedule Notification\n                              </Button>\n                            </DialogFooter>\n                          </DialogContent>\n                        </Dialog>\n                        <Button size=\"sm\" variant=\"outline\">\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                        <AlertDialog>\n                          <AlertDialogTrigger asChild>\n                            <Button size=\"sm\" variant=\"outline\">\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </AlertDialogTrigger>\n                          <AlertDialogContent>\n                            <AlertDialogHeader>\n                              <AlertDialogTitle>Delete Template</AlertDialogTitle>\n                              <AlertDialogDescription>\n                                Are you sure you want to delete this template? This action cannot be undone.\n                              </AlertDialogDescription>\n                            </AlertDialogHeader>\n                            <AlertDialogFooter>\n                              <AlertDialogCancel>Cancel</AlertDialogCancel>\n                              <AlertDialogAction>Delete</AlertDialogAction>\n                            </AlertDialogFooter>\n                          </AlertDialogContent>\n                        </AlertDialog>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        {/* Scheduled Notifications Tab */}\n        <TabsContent value=\"scheduled\" className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"relative\">\n                <Search className=\"h-4 w-4 absolute left-3 top-3 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search notifications...\"\n                  value={notificationFilter.search}\n                  onChange={(e) => setNotificationFilter(prev => ({ ...prev, search: e.target.value }))}\n                  className=\"pl-10 w-64\"\n                />\n              </div>\n              <Select value={notificationFilter.status || 'all'} onValueChange={(value) => setNotificationFilter(prev => ({ ...prev, status: value === 'all' ? '' : value }))}>\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue placeholder=\"Filter by status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"draft\">Draft</SelectItem>\n                  <SelectItem value=\"scheduled\">Scheduled</SelectItem>\n                  <SelectItem value=\"sending\">Sending</SelectItem>\n                  <SelectItem value=\"sent\">Sent</SelectItem>\n                  <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                  <SelectItem value=\"failed\">Failed</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          {/* Scheduled Notifications List */}\n          <div className=\"grid gap-4\">\n            {filteredNotifications.map((notification) => (\n              <Card key={notification.id}>\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <CardTitle className=\"text-lg\">{notification.name}</CardTitle>\n                      <CardDescription>\n                        {notification.description || 'No description'}\n                      </CardDescription>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      {getStatusBadge(notification.status)}\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2\">\n                    <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                      <div>\n                        <span className=\"text-muted-foreground\">Target:</span> {notification.targetUsers.type}\n                      </div>\n                      <div>\n                        <span className=\"text-muted-foreground\">Recipients:</span> {notification.estimatedRecipients || 0}\n                      </div>\n                      <div>\n                        <span className=\"text-muted-foreground\">Schedule:</span> {notification.schedule.type}\n                      </div>\n                      <div>\n                        <span className=\"text-muted-foreground\">Executions:</span> {notification.executionCount || 0}\n                      </div>\n                    </div>\n                    \n                    {notification.nextExecutionAt && (\n                      <p className=\"text-sm text-muted-foreground\">\n                        <strong>Next execution:</strong> {new Date(notification.nextExecutionAt).toLocaleString()}\n                      </p>\n                    )}\n\n                    <div className=\"flex items-center gap-2\">\n                      <span className=\"text-sm text-muted-foreground\">Channels:</span>\n                      {notification.channels.map((channel) => (\n                        <Badge key={channel} variant=\"outline\" className=\"text-xs\">\n                          {channel === 'email' && <Mail className=\"h-3 w-3 mr-1\" />}\n                          {channel === 'push' && <Smartphone className=\"h-3 w-3 mr-1\" />}\n                          {channel === 'in_app' && <MessageSquare className=\"h-3 w-3 mr-1\" />}\n                          {channel}\n                        </Badge>\n                      ))}\n                    </div>\n\n                    <div className=\"flex items-center justify-between pt-2\">\n                      <span className=\"text-xs text-muted-foreground\">\n                        Created {new Date(notification.createdAt).toLocaleDateString()}\n                      </span>\n                      <div className=\"flex gap-2\">\n                        <Button size=\"sm\" variant=\"outline\">\n                          <Eye className=\"h-4 w-4 mr-1\" />\n                          View\n                        </Button>\n                        {notification.status === 'scheduled' && (\n                          <Button size=\"sm\" variant=\"outline\">\n                            <Pause className=\"h-4 w-4 mr-1\" />\n                            Pause\n                          </Button>\n                        )}\n                        {notification.status === 'draft' && (\n                          <Button size=\"sm\" variant=\"outline\">\n                            <Play className=\"h-4 w-4 mr-1\" />\n                            Activate\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        {/* Analytics Tab */}\n        <TabsContent value=\"analytics\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Notification Analytics</CardTitle>\n              <CardDescription>\n                Performance metrics for your customer notification campaigns\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center py-8 text-muted-foreground\">\n                Analytics dashboard coming soon...\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Instant Messaging Tab */}\n        <TabsContent value=\"instant\" className=\"space-y-4\">\n          <div className=\"grid gap-6 lg:grid-cols-2\">\n            {/* Quick Send Form */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Send className=\"h-5 w-5\" />\n                  Send Instant Message\n                </CardTitle>\n                <CardDescription>\n                  Send immediate notifications to users without creating templates\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"instant-title\">Message Title</Label>\n                  <Input\n                    id=\"instant-title\"\n                    value={instantMessageForm.title}\n                    onChange={(e) => setInstantMessageForm(prev => ({ ...prev, title: e.target.value }))}\n                    placeholder=\"e.g., System Maintenance Alert\"\n                    maxLength={100}\n                  />\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    {instantMessageForm.title.length}/100 characters\n                  </p>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"instant-message\">Message Content</Label>\n                  <Textarea\n                    id=\"instant-message\"\n                    value={instantMessageForm.message}\n                    onChange={(e) => setInstantMessageForm(prev => ({ ...prev, message: e.target.value }))}\n                    placeholder=\"Type your message here...\"\n                    rows={4}\n                    maxLength={500}\n                  />\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    {instantMessageForm.message.length}/500 characters\n                  </p>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label>Target Audience</Label>\n                    <Select \n                      value={instantMessageForm.targetUsers.type} \n                      onValueChange={(value: 'all' | 'specific') => \n                        setInstantMessageForm(prev => ({ \n                          ...prev, \n                          targetUsers: { ...prev.targetUsers, type: value, userIds: [] }\n                        }))\n                      }\n                    >\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Users</SelectItem>\n                        <SelectItem value=\"specific\">Specific Users</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label>Priority</Label>\n                    <Select \n                      value={instantMessageForm.priority} \n                      onValueChange={(value: NotificationPriority) => \n                        setInstantMessageForm(prev => ({ ...prev, priority: value }))\n                      }\n                    >\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"low\">Low</SelectItem>\n                        <SelectItem value=\"medium\">Medium</SelectItem>\n                        <SelectItem value=\"high\">High</SelectItem>\n                        <SelectItem value=\"urgent\">Urgent</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                {/* User Selection for Specific Targeting */}\n                {instantMessageForm.targetUsers.type === 'specific' && (\n                  <div>\n                    <Label>Select Users</Label>\n                    {loadingUsers ? (\n                      <div className=\"flex items-center justify-center p-4 border rounded-lg\">\n                        <RefreshCw className=\"h-4 w-4 animate-spin mr-2\" />\n                        Loading users...\n                      </div>\n                    ) : (\n                      <div className=\"border rounded-lg p-3 max-h-40 overflow-y-auto\">\n                        {availableUsers.length === 0 ? (\n                          <p className=\"text-sm text-muted-foreground\">No users available</p>\n                        ) : (\n                          <div className=\"space-y-2\">\n                            {availableUsers.map((user) => (\n                              <div key={user.id} className=\"flex items-center space-x-2\">\n                                <input\n                                  type=\"checkbox\"\n                                  id={`user-${user.id}`}\n                                  checked={instantMessageForm.targetUsers.userIds.includes(user.id)}\n                                  onChange={(e) => {\n                                    if (e.target.checked) {\n                                      setInstantMessageForm(prev => ({\n                                        ...prev,\n                                        targetUsers: {\n                                          ...prev.targetUsers,\n                                          userIds: [...prev.targetUsers.userIds, user.id]\n                                        }\n                                      }));\n                                    } else {\n                                      setInstantMessageForm(prev => ({\n                                        ...prev,\n                                        targetUsers: {\n                                          ...prev.targetUsers,\n                                          userIds: prev.targetUsers.userIds.filter(id => id !== user.id)\n                                        }\n                                      }));\n                                    }\n                                  }}\n                                  className=\"rounded border-gray-300\"\n                                />\n                                <Label htmlFor={`user-${user.id}`} className=\"text-sm\">\n                                  {user.name || user.email}\n                                  {user.name && <span className=\"text-muted-foreground\"> ({user.email})</span>}\n                                </Label>\n                              </div>\n                            ))}\n                          </div>\n                        )}\n                      </div>\n                    )}\n                    {instantMessageForm.targetUsers.type === 'specific' && instantMessageForm.targetUsers.userIds.length > 0 && (\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        {instantMessageForm.targetUsers.userIds.length} user(s) selected\n                      </p>\n                    )}\n                  </div>\n                )}\n\n                <div>\n                  <Label>Delivery Channels</Label>\n                  <div className=\"flex gap-2 mt-2\">\n                    {(['push', 'in_app', 'email'] as DeliveryChannel[]).map((channel) => (\n                      <div key={channel} className=\"flex items-center space-x-2\">\n                        <input\n                          type=\"checkbox\"\n                          id={`channel-${channel}`}\n                          checked={instantMessageForm.channels.includes(channel)}\n                          onChange={(e) => {\n                            if (e.target.checked) {\n                              setInstantMessageForm(prev => ({\n                                ...prev,\n                                channels: [...prev.channels, channel]\n                              }));\n                            } else {\n                              setInstantMessageForm(prev => ({\n                                ...prev,\n                                channels: prev.channels.filter(c => c !== channel)\n                              }));\n                            }\n                          }}\n                          className=\"rounded border-gray-300\"\n                        />\n                        <Label htmlFor={`channel-${channel}`} className=\"text-sm capitalize\">\n                          {channel === 'in_app' ? 'In-App' : channel}\n                        </Label>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n\n                <Button \n                  onClick={handleSendInstantMessage} \n                  disabled={\n                    isSendingInstant || \n                    !instantMessageForm.title.trim() || \n                    !instantMessageForm.message.trim() ||\n                    (instantMessageForm.targetUsers.type === 'specific' && instantMessageForm.targetUsers.userIds.length === 0)\n                  }\n                  className=\"w-full\"\n                >\n                  {isSendingInstant ? (\n                    <>\n                      <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\n                      Sending...\n                    </>\n                  ) : (\n                    <>\n                      <Send className=\"h-4 w-4 mr-2\" />\n                      Send Message Now\n                    </>\n                  )}\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Quick Templates */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <MessageSquare className=\"h-5 w-5\" />\n                  Quick Templates\n                </CardTitle>\n                <CardDescription>\n                  Pre-defined messages for common scenarios\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                {[\n                  {\n                    title: \"System Maintenance\",\n                    message: \"We will be performing scheduled maintenance on our systems. Services may be temporarily unavailable.\",\n                    priority: \"high\" as NotificationPriority\n                  },\n                  {\n                    title: \"Service Restored\",\n                    message: \"All services have been restored and are now functioning normally. Thank you for your patience.\",\n                    priority: \"medium\" as NotificationPriority\n                  },\n                  {\n                    title: \"Security Alert\",\n                    message: \"We've detected unusual activity on your account. Please review your recent activity and update your password if necessary.\",\n                    priority: \"urgent\" as NotificationPriority\n                  },\n                  {\n                    title: \"New Feature Available\",\n                    message: \"We've released new features to improve your experience. Check them out in your dashboard!\",\n                    priority: \"low\" as NotificationPriority\n                  }\n                ].map((template, index) => (\n                  <div key={index} className=\"p-3 border rounded-lg hover:bg-accent cursor-pointer transition-colors\"\n                       onClick={() => setInstantMessageForm(prev => ({\n                         ...prev,\n                         title: template.title,\n                         message: template.message,\n                         priority: template.priority\n                       }))}>\n                    <div className=\"flex items-center justify-between mb-1\">\n                      <span className=\"font-medium text-sm\">{template.title}</span>\n                      <Badge variant={template.priority === 'urgent' ? 'destructive' : template.priority === 'high' ? 'destructive' : 'default'} className=\"text-xs\">\n                        {template.priority}\n                      </Badge>\n                    </div>\n                    <p className=\"text-xs text-muted-foreground line-clamp-2\">{template.message}</p>\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/admin/KpiMetricsSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/admin/LowBalanceUsersCard.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchLowBalanceUsers'. Either include it or remove the dependency array.","line":78,"column":6,"nodeType":"ArrayExpression","endLine":78,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [fetchLowBalanceUsers, threshold]","fix":{"range":[2241,2252],"text":"[fetchLowBalanceUsers, threshold]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\n// Card components not used since this is embedded in a larger component\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\nimport { Separator } from '@/components/ui/separator';\nimport { \n  AlertTriangle, \n  RefreshCw, \n  DollarSign, \n  User,\n  Mail,\n  ExternalLink,\n  Settings\n} from 'lucide-react';\nimport Link from 'next/link';\nimport { toast } from 'sonner';\n\ninterface LowBalanceUser {\n  id: string;\n  name: string;\n  email: string;\n  sippyAccountId?: string;\n  balance?: number;\n  lastActivity?: string;\n  phone?: string;\n  avatar?: string;\n  companyName?: string;\n}\n\ninterface LowBalanceUsersCardProps {\n  onRefresh?: () => void;\n  threshold?: number; // Balance threshold to consider \"low\"\n  onThresholdChange?: (threshold: number) => void;\n  isEditMode?: boolean;\n}\n\nexport function LowBalanceUsersCard({ \n  onRefresh, \n  threshold = 5.0, // Default threshold of €5.00\n  onThresholdChange,\n  isEditMode = false\n}: LowBalanceUsersCardProps) {\n  const [users, setUsers] = useState<LowBalanceUser[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [localThreshold, setLocalThreshold] = useState(threshold);\n\n  const fetchLowBalanceUsers = async () => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      \n      const response = await fetch(`/api/admin/low-balance-users?threshold=${threshold}`);\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to fetch low balance users');\n      }\n      \n      const data = await response.json();\n      setUsers(data.users || []);\n    } catch (error) {\n      console.error('Error fetching low balance users:', error);\n      setError(error instanceof Error ? error.message : 'Failed to load users');\n      toast.error('Failed to load low balance users');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchLowBalanceUsers();\n  }, [threshold]);\n\n  useEffect(() => {\n    setLocalThreshold(threshold);\n  }, [threshold]);\n\n  const handleRefresh = () => {\n    fetchLowBalanceUsers();\n    onRefresh?.();\n  };\n\n  const handleThresholdChange = (value: string) => {\n    const newThreshold = parseFloat(value);\n    if (!isNaN(newThreshold) && newThreshold >= 0) {\n      setLocalThreshold(newThreshold);\n      onThresholdChange?.(newThreshold);\n    }\n  };\n\n  const formatBalance = (balance: number | undefined) => {\n    if (balance === undefined || balance === null) return '0.0000 €';\n    return `${balance.toFixed(4)} €`;\n  };\n\n  const getBalanceSeverity = (balance: number | undefined) => {\n    if (!balance || balance <= 0) return 'critical';\n    if (balance <= threshold * 0.5) return 'warning';\n    return 'low';\n  };\n\n  const getBalanceBadgeVariant = (severity: string) => {\n    switch (severity) {\n      case 'critical': return 'destructive';\n      case 'warning': return 'secondary';\n      default: return 'outline';\n    }\n  };\n\n  const getInitials = (name: string) => {\n    return name\n      .split(' ')\n      .map(n => n[0])\n      .join('')\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-4 h-4 bg-muted rounded animate-pulse\" />\n            <div className=\"w-32 h-4 bg-muted rounded animate-pulse\" />\n          </div>\n          <div className=\"w-6 h-6 bg-muted rounded animate-pulse\" />\n        </div>\n        {[...Array(3)].map((_, i) => (\n          <div key={i} className=\"flex items-center space-x-3 p-3 border rounded-lg\">\n            <div className=\"w-10 h-10 bg-muted rounded-full animate-pulse\" />\n            <div className=\"flex-1 space-y-2\">\n              <div className=\"w-24 h-4 bg-muted rounded animate-pulse\" />\n              <div className=\"w-32 h-3 bg-muted rounded animate-pulse\" />\n            </div>\n            <div className=\"w-16 h-6 bg-muted rounded animate-pulse\" />\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"text-center py-8\">\n        <AlertTriangle className=\"h-12 w-12 text-red-500 mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold text-red-700 dark:text-red-300 mb-2\">\n          Error Loading Users\n        </h3>\n        <p className=\"text-sm text-muted-foreground mb-4\">{error}</p>\n        <Button onClick={handleRefresh} variant=\"outline\" size=\"sm\">\n          <RefreshCw className=\"h-4 w-4 mr-2\" />\n          Try Again\n        </Button>\n      </div>\n    );\n  }\n\n  if (users.length === 0) {\n    return (\n      <div className=\"space-y-4\">\n        {/* Threshold Settings in Edit Mode */}\n        {isEditMode && (\n          <div className=\"p-3 bg-muted/30 rounded-lg border-2 border-dashed border-primary/20\">\n            <div className=\"flex items-center space-x-2 mb-3\">\n              <Settings className=\"h-4 w-4 text-primary\" />\n              <Label className=\"text-sm font-medium\">Low Balance Threshold</Label>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-sm text-muted-foreground\">€</span>\n              <Input\n                type=\"number\"\n                step=\"0.01\"\n                min=\"0\"\n                max=\"1000\"\n                value={localThreshold}\n                onChange={(e) => handleThresholdChange(e.target.value)}\n                className=\"w-24 h-8\"\n                placeholder=\"5.00\"\n              />\n              <span className=\"text-sm text-muted-foreground\">EUR</span>\n            </div>\n            <p className=\"text-xs text-muted-foreground mt-2\">\n              Users with balance below this amount will be shown as low balance.\n            </p>\n          </div>\n        )}\n        \n        <div className=\"text-center py-8\">\n          <DollarSign className=\"h-12 w-12 text-green-500 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold text-green-700 dark:text-green-300 mb-2\">\n            All Good!\n          </h3>\n          <p className=\"text-sm text-muted-foreground mb-4\">\n            No users have low balance (below {threshold.toFixed(4)} €)\n          </p>\n          <Button onClick={handleRefresh} variant=\"outline\" size=\"sm\">\n            <RefreshCw className=\"h-4 w-4 mr-2\" />\n            Refresh\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Threshold Settings in Edit Mode */}\n      {isEditMode && (\n        <div className=\"p-3 bg-muted/30 rounded-lg border-2 border-dashed border-primary/20\">\n          <div className=\"flex items-center space-x-2 mb-3\">\n            <Settings className=\"h-4 w-4 text-primary\" />\n            <Label className=\"text-sm font-medium\">Low Balance Threshold</Label>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <span className=\"text-sm text-muted-foreground\">€</span>\n            <Input\n              type=\"number\"\n              step=\"0.01\"\n              min=\"0\"\n              max=\"1000\"\n              value={localThreshold}\n              onChange={(e) => handleThresholdChange(e.target.value)}\n              className=\"w-24 h-8\"\n              placeholder=\"5.00\"\n            />\n            <span className=\"text-sm text-muted-foreground\">EUR</span>\n          </div>\n          <p className=\"text-xs text-muted-foreground mt-2\">\n            Users with balance below this amount will be shown as low balance.\n          </p>\n        </div>\n      )}\n\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-2\">\n          <AlertTriangle className=\"h-4 w-4 text-orange-500\" />\n          <span className=\"text-sm font-medium\">\n            {users.length} user{users.length !== 1 ? 's' : ''} with low balance\n          </span>\n          <Badge variant=\"outline\" className=\"text-xs\">\n            Below {threshold.toFixed(4)} €\n          </Badge>\n        </div>\n        <Button\n          onClick={handleRefresh}\n          variant=\"ghost\"\n          size=\"sm\"\n          className=\"h-8 w-8 p-0\"\n        >\n          <RefreshCw className=\"h-4 w-4\" />\n        </Button>\n      </div>\n\n      {/* Users List */}\n      <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n        {users.map((user, index) => {\n          const severity = getBalanceSeverity(user.balance);\n          \n          return (\n            <div key={user.id}>\n              <div className=\"flex items-center space-x-3 p-3 border rounded-lg hover:bg-muted/50 transition-colors\">\n                {/* Avatar */}\n                <Avatar className=\"h-10 w-10\">\n                  <AvatarFallback className=\"text-xs font-medium bg-gradient-to-br from-blue-500 to-purple-600 text-white\">\n                    {getInitials(user.name)}\n                  </AvatarFallback>\n                </Avatar>\n\n                {/* User Info */}\n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"flex items-center space-x-2 min-w-0\">\n                      <h4 className=\"text-sm font-medium truncate\">{user.name}</h4>\n                      {user.companyName && (\n                        <>\n                          <span className=\"text-muted-foreground\">•</span>\n                          <span className=\"text-sm text-muted-foreground truncate\">{user.companyName}</span>\n                        </>\n                      )}\n                    </div>\n                    <Badge \n                      variant={getBalanceBadgeVariant(severity)} \n                      className=\"text-xs font-mono flex-shrink-0\"\n                    >\n                      {formatBalance(user.balance)}\n                    </Badge>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-4 mt-1 text-xs text-muted-foreground\">\n                    <div className=\"flex items-center space-x-1\">\n                      <Mail className=\"h-3 w-3\" />\n                      <span className=\"truncate max-w-32\">{user.email}</span>\n                    </div>\n                    \n                    {user.sippyAccountId && (\n                      <div className=\"flex items-center space-x-1\">\n                        <User className=\"h-3 w-3\" />\n                        <span>ID: {user.sippyAccountId}</span>\n                      </div>\n                    )}\n                  </div>\n\n                  {user.lastActivity && (\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      Last active: {new Date(user.lastActivity).toLocaleDateString()}\n                    </p>\n                  )}\n                </div>\n\n                {/* Actions */}\n                <div className=\"flex items-center space-x-2\">\n                  <Link href={`/admin/users/${user.id}`} passHref>\n                    <Button variant=\"outline\" size=\"sm\" className=\"h-8\">\n                      <ExternalLink className=\"h-3 w-3 mr-1\" />\n                      View\n                    </Button>\n                  </Link>\n                </div>\n              </div>\n              \n              {index < users.length - 1 && <Separator className=\"my-2\" />}\n            </div>\n          );\n        })}\n      </div>\n\n      {/* Summary Footer */}\n      {users.length > 0 && (\n        <div className=\"pt-3 border-t\">\n          <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n            <span>\n              Total affected: {users.length} user{users.length !== 1 ? 's' : ''}\n            </span>\n            <span>\n              Threshold: {threshold.toFixed(4)} €\n            </span>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/admin/NotificationLogs.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchLogs'. Either include it or remove the dependency array.","line":181,"column":6,"nodeType":"ArrayExpression","endLine":181,"endColumn":32,"suggestions":[{"desc":"Update the dependencies array to be: [pagination.page, filters, fetchLogs]","fix":{"range":[5179,5205],"text":"[pagination.page, filters, fetchLogs]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Switch } from '@/components/ui/switch';\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { \n  Loader2, \n  Search, \n  RefreshCw, \n  Mail, \n  CheckCircle, \n  XCircle, \n  Clock, \n  RotateCcw, \n  Send, \n  MailCheck, \n  User, \n  Trash2,\n  TestTube\n} from 'lucide-react';\nimport { toast } from 'sonner';\nimport { NotificationLog, NotificationStats } from '@/models/NotificationLog';\nimport { format } from 'date-fns';\nimport { handleApiError, apiRequest } from '@/lib/apiErrorHandler';\nimport React from 'react';\n\ninterface NotificationLogsResponse {\n  logs: NotificationLog[];\n  stats: NotificationStats;\n  pagination: {\n    page: number;\n    limit: number;\n    total: number;\n    totalPages: number;\n    hasNext: boolean;\n    hasPrev: boolean;\n  };\n}\n\ninterface User {\n  id?: string;\n  _id?: string;\n  name: string;\n  email: string;\n  sippyAccountId?: number;\n  role: string;\n}\n\n// Reusable User Selection Component\nconst UserSelect = ({ \n  value, \n  onValueChange, \n  users, \n  isLoading, \n  categoryPrefix \n}: {\n  value: string;\n  onValueChange: (value: string) => void;\n  users: User[];\n  isLoading: boolean;\n  categoryPrefix: string;\n}) => (\n  <Select value={value} onValueChange={onValueChange}>\n    <SelectTrigger>\n      <SelectValue placeholder=\"Select a user...\" />\n    </SelectTrigger>\n    <SelectContent>\n      {isLoading ? (\n        <div key=\"loading\" className=\"flex items-center justify-center p-2\">\n          <Loader2 className=\"h-4 w-4 animate-spin\" />\n          <span className=\"ml-2\">Loading users...</span>\n        </div>\n      ) : users.length === 0 ? (\n        <div key=\"no-users\" className=\"p-2 text-sm text-muted-foreground\">\n          No users found\n        </div>\n      ) : (\n        users.map((user, index) => {\n          const userId = user.id || user._id || `user-${index}`;\n          const userValue = user.id || user._id || user.email || `user-${index}`;\n          return (\n            <SelectItem key={`${categoryPrefix}-user-${userId}`} value={String(userValue)}>\n              <div className=\"flex items-center space-x-2\">\n                <User className=\"h-4 w-4\" />\n                <span>{user.name} ({user.email})</span>\n                {user.sippyAccountId ? (\n                  <Badge key={`${categoryPrefix}-sippy-${userId}`} variant=\"outline\" className=\"text-xs\">\n                    ID: {user.sippyAccountId}\n                  </Badge>\n                ) : (\n                  <Badge key={`${categoryPrefix}-no-sippy-${userId}`} variant=\"secondary\" className=\"text-xs\">\n                    No Sippy Account\n                  </Badge>\n                )}\n              </div>\n            </SelectItem>\n          );\n        })\n      )}\n    </SelectContent>\n  </Select>\n);\n\nexport function NotificationLogs() {\n  const [logs, setLogs] = useState<NotificationLog[]>([]);\n  const [stats, setStats] = useState<NotificationStats | null>(null);\n  const [pagination, setPagination] = useState({\n    page: 1,\n    limit: 10,\n    total: 0,\n    totalPages: 0,\n    hasNext: false,\n    hasPrev: false\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  const [filters, setFilters] = useState({\n    status: 'all',\n    type: 'all',\n    userId: ''\n  });\n  const [selectedLogs, setSelectedLogs] = useState<Set<string>>(new Set());\n  const [isResending, setIsResending] = useState(false);\n\n  // Delete state\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [deleteConfirmOpen, setDeleteConfirmOpen] = useState(false);\n  const [bulkDeleteConfirmOpen, setBulkDeleteConfirmOpen] = useState(false);\n  const [logToDelete, setLogToDelete] = useState<string | null>(null);\n\n  // Test email state\n  const [isTestDialogOpen, setIsTestDialogOpen] = useState(false);\n  const [users, setUsers] = useState<User[]>([]);\n  const [isLoadingUsers, setIsLoadingUsers] = useState(false);\n  const [testForm, setTestForm] = useState({\n    userId: '',\n    notificationType: 'low_balance',\n    testBalance: '',\n    testThreshold: '',\n    // New fields for different notification categories\n    testCategory: 'balance', // 'balance', 'auth', 'account', 'alerts', 'payment', 'ticket'\n    ticketNotificationType: 'ticket_created',\n    testEmail: '',\n    includeCustomerInTest: false\n  });\n  const [isSendingTest, setIsSendingTest] = useState(false);\n\n  useEffect(() => {\n    fetchLogs();\n  }, [pagination.page, filters]);\n\n  useEffect(() => {\n    if (isTestDialogOpen) {\n      fetchUsers();\n    }\n  }, [isTestDialogOpen]);\n\n  const fetchLogs = async () => {\n    try {\n      setIsLoading(true);\n      const params = new URLSearchParams({\n        page: pagination.page.toString(),\n        limit: pagination.limit.toString(),\n        ...(filters.status && filters.status !== 'all' && { status: filters.status }),\n        ...(filters.type && filters.type !== 'all' && { type: filters.type }),\n        ...(filters.userId && { userId: filters.userId }),\n      });\n\n      const data: NotificationLogsResponse = await apiRequest(`/api/admin/notification-logs?${params}`);\n      setLogs(data.logs);\n      setStats(data.stats);\n      setPagination(data.pagination);\n      setSelectedLogs(new Set()); // Clear selection when logs change\n    } catch (error) {\n      handleApiError(error, 'Failed to load notification logs');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const fetchUsers = async () => {\n    try {\n      setIsLoadingUsers(true);\n      const response = await fetch('/api/admin/users?limit=100');\n      if (response.ok) {\n        const data = await response.json();\n        setUsers(data.users);\n      } else {\n        toast.error('Failed to load users');\n      }\n    } catch (error) {\n      console.error('Error fetching users:', error);\n      toast.error('Failed to load users');\n    } finally {\n      setIsLoadingUsers(false);\n    }\n  };\n\n  const handleSendTestEmail = async () => {\n    if (testForm.testCategory === 'ticket') {\n      // Handle ticket notification test\n      if (!testForm.ticketNotificationType || !testForm.userId) {\n        toast.error('Please select a notification type and user');\n        return;\n      }\n\n      // Get the selected user's email\n      const selectedUser = users.find(user => user.id === testForm.userId);\n      if (!selectedUser) {\n        toast.error('Selected user not found');\n        return;\n      }\n\n      try {\n        setIsSendingTest(true);\n        const response = await fetch('/api/admin/tickets/test-notifications', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            notificationType: testForm.ticketNotificationType,\n            testEmail: selectedUser.email,\n            includeCustomerInTest: testForm.includeCustomerInTest\n          }),\n        });\n\n        if (response.ok) {\n          await response.json();\n          toast.success('Ticket notification test sent successfully');\n          setIsTestDialogOpen(false);\n          resetTestForm();\n          // Refresh logs to show the test email\n          setTimeout(() => {\n            fetchLogs();\n          }, 1000);\n        } else {\n          const error = await response.json();\n          toast.error(error.error || 'Failed to send test notification');\n        }\n      } catch (error) {\n        console.error('Error sending test notification:', error);\n        toast.error('Failed to send test notification');\n      } finally {\n        setIsSendingTest(false);\n      }\n    } else {\n      // Handle general notification test (existing functionality)\n      if (!testForm.userId || !testForm.notificationType) {\n        toast.error('Please select a user and notification type');\n        return;\n      }\n\n      try {\n        setIsSendingTest(true);\n        const response = await fetch('/api/admin/notification-logs/test-send', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            userId: testForm.userId,\n            notificationType: testForm.notificationType,\n            testBalance: testForm.testBalance,\n            testThreshold: testForm.testThreshold\n          }),\n        });\n\n        if (response.ok) {\n          const result = await response.json();\n          toast.success(result.message);\n          setIsTestDialogOpen(false);\n          resetTestForm();\n          // Refresh logs to show the test email\n          setTimeout(() => {\n            fetchLogs();\n          }, 1000);\n        } else {\n          const error = await response.json();\n          toast.error(error.error || 'Failed to send test email');\n        }\n      } catch (error) {\n        console.error('Error sending test email:', error);\n        toast.error('Failed to send test email');\n      } finally {\n        setIsSendingTest(false);\n      }\n    }\n  };\n\n  const resetTestForm = () => {\n    setTestForm({\n      userId: '',\n      notificationType: 'low_balance',\n      testBalance: '',\n      testThreshold: '',\n      testCategory: 'balance',\n      ticketNotificationType: 'ticket_created',\n      testEmail: '',\n      includeCustomerInTest: false\n    });\n  };\n\n  // Helper function to get default notification type for category\n  const getDefaultNotificationType = (category: string) => {\n    switch (category) {\n      case 'balance': return 'low_balance';\n      case 'auth': return 'email_verification';\n      case 'account': return 'account_activation';\n      case 'alerts': return 'high_cost_alert';\n      case 'payment': return 'payment_success_gateway';\n      case 'phone_numbers': return 'backorder_approved';\n      default: return 'low_balance';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'sent':\n        return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\n      case 'failed':\n        return <XCircle className=\"h-4 w-4 text-red-500\" />;\n      case 'pending':\n        return <Clock className=\"h-4 w-4 text-yellow-500\" />;\n      default:\n        return <Mail className=\"h-4 w-4 text-gray-500\" />;\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    const variants: Record<string, 'default' | 'secondary' | 'destructive' | 'outline'> = {\n      sent: 'default',\n      failed: 'destructive',\n      pending: 'secondary'\n    };\n    \n    return (\n      <Badge variant={variants[status] || 'outline'} className=\"capitalize\">\n        {status}\n      </Badge>\n    );\n  };\n\n  const getTypeBadge = (type: string) => {\n    const colors: Record<string, string> = {\n      // Balance notifications\n      low_balance: 'bg-yellow-100 text-yellow-800 border-yellow-200',\n      zero_balance: 'bg-orange-100 text-orange-800 border-orange-200',\n      negative_balance: 'bg-red-100 text-red-800 border-red-200',\n      \n      // Authentication templates\n      email_verification: 'bg-blue-100 text-blue-800 border-blue-200',\n      \n      // Account management templates\n      account_activation: 'bg-green-100 text-green-800 border-green-200',\n      \n      // Alert templates\n      high_cost_alert: 'bg-red-100 text-red-800 border-red-200',\n      low_asr_alert: 'bg-amber-100 text-amber-800 border-amber-200',\n      extreme_usage_alert: 'bg-purple-100 text-purple-800 border-purple-200',\n      \n      // Payment notifications\n      payment_success_gateway: 'bg-emerald-100 text-emerald-800 border-emerald-200',\n      payment_success_admin: 'bg-teal-100 text-teal-800 border-teal-200',\n      \n      // Password reset\n      password_reset: 'bg-indigo-100 text-indigo-800 border-indigo-200',\n      \n      // Ticket notifications\n      ticket_created: 'bg-green-100 text-green-800 border-green-200',\n      ticket_updated: 'bg-blue-100 text-blue-800 border-blue-200',\n      ticket_resolved: 'bg-emerald-100 text-emerald-800 border-emerald-200',\n      ticket_assigned: 'bg-purple-100 text-purple-800 border-purple-200',\n      ticket_replied: 'bg-cyan-100 text-cyan-800 border-cyan-200',\n      \n      // Phone number notifications\n      backorder_approved: 'bg-green-100 text-green-800 border-green-200',\n      backorder_rejected: 'bg-red-100 text-red-800 border-red-200',\n      cancellation_approved: 'bg-orange-100 text-orange-800 border-orange-200',\n      cancellation_rejected: 'bg-red-100 text-red-800 border-red-200',\n      number_purchase_single: 'bg-blue-100 text-blue-800 border-blue-200',\n      number_purchase_bulk: 'bg-indigo-100 text-indigo-800 border-indigo-200',\n      number_assignment: 'bg-purple-100 text-purple-800 border-purple-200',\n      number_unassignment: 'bg-orange-100 text-orange-800 border-orange-200'\n    };\n    \n    const displayNames: Record<string, string> = {\n      low_balance: 'Low Balance',\n      zero_balance: 'Zero Balance',\n      negative_balance: 'Negative Balance',\n      email_verification: 'Email Verification',\n      account_activation: 'Account Activation',\n      high_cost_alert: 'High Cost Alert',\n      low_asr_alert: 'Low ASR Alert',\n      extreme_usage_alert: 'Extreme Usage Alert',\n      payment_success_gateway: 'Payment Success',\n      payment_success_admin: 'Admin Credit',\n      password_reset: 'Password Reset',\n      ticket_created: 'Ticket Created',\n      ticket_updated: 'Ticket Updated',\n      ticket_resolved: 'Ticket Resolved',\n      ticket_assigned: 'Ticket Assigned',\n      ticket_replied: 'Ticket Replied',\n      backorder_approved: 'Backorder Approved',\n      backorder_rejected: 'Backorder Rejected',\n      cancellation_approved: 'Cancellation Approved',\n      cancellation_rejected: 'Cancellation Rejected',\n      number_purchase_single: 'Number Purchase (Single)',\n      number_purchase_bulk: 'Number Purchase (Bulk)',\n      number_assignment: 'Admin Assignment',\n      number_unassignment: 'Admin Unassignment'\n    };\n    \n    return (\n      <Badge variant=\"outline\" className={colors[type] || ''}>\n        {displayNames[type] || type.replace('_', ' ')}\n      </Badge>\n    );\n  };\n\n  // Removed unused getNotificationIcon and getNotificationColor functions\n\n  const handleFilterChange = (key: string, value: string) => {\n    // Convert \"all\" to empty string for API compatibility\n    const filterValue = value === 'all' ? '' : value;\n    setFilters(prev => ({ ...prev, [key]: filterValue }));\n    setPagination(prev => ({ ...prev, page: 1 })); // Reset to first page\n  };\n\n  const clearFilters = () => {\n    setFilters({ status: 'all', type: 'all', userId: '' });\n    setPagination(prev => ({ ...prev, page: 1 }));\n  };\n\n  const changePage = (newPage: number) => {\n    setPagination(prev => ({ ...prev, page: newPage }));\n  };\n\n  const handleManualCheck = async () => {\n    try {\n      setIsLoading(true);\n      const response = await fetch('/api/admin/check-balances', {\n        method: 'POST',\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        toast.success(result.message || 'Balance check completed successfully');\n        // Refresh logs after check\n        setTimeout(() => {\n          fetchLogs();\n        }, 1000);\n      } else {\n        const error = await response.json();\n        toast.error(error.error || 'Failed to check balances');\n      }\n    } catch (error) {\n      console.error('Error triggering balance check:', error);\n      toast.error('Failed to trigger balance check');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleResendSingle = async (logId: string) => {\n    try {\n      setIsResending(true);\n      const response = await fetch('/api/admin/notification-logs/resend', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ logIds: [logId] }),\n      });\n\n      if (response.ok) {\n        await response.json();\n        toast.success('Notification resent successfully');\n        // Refresh logs after resend\n        setTimeout(() => {\n          fetchLogs();\n        }, 1000);\n      } else {\n        const error = await response.json();\n        toast.error(error.error || 'Failed to resend notification');\n      }\n    } catch (error) {\n      console.error('Error resending notification:', error);\n      toast.error('Failed to resend notification');\n    } finally {\n      setIsResending(false);\n    }\n  };\n\n  const handleBulkResend = async () => {\n    if (selectedLogs.size === 0) {\n      toast.error('Please select notifications to resend');\n      return;\n    }\n\n    // Add confirmation for bulk operations\n    if (!confirm(`Are you sure you want to resend ${selectedLogs.size} notification(s)? This will create new notification entries.`)) {\n      return;\n    }\n\n    try {\n      setIsResending(true);\n      const response = await fetch('/api/admin/notification-logs/resend', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ logIds: Array.from(selectedLogs) }),\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        toast.success(result.message || `Resent ${selectedLogs.size} notifications`);\n        setSelectedLogs(new Set()); // Clear selection\n        // Refresh logs after resend\n        setTimeout(() => {\n          fetchLogs();\n        }, 1000);\n      } else {\n        const error = await response.json();\n        toast.error(error.error || 'Failed to resend notifications');\n      }\n    } catch (error) {\n      console.error('Error resending notifications:', error);\n      toast.error('Failed to resend notifications');\n    } finally {\n      setIsResending(false);\n    }\n  };\n\n  const handleSelectAll = (checked: boolean) => {\n    if (checked) {\n      setSelectedLogs(new Set(logs.map(log => log.id)));\n    } else {\n      setSelectedLogs(new Set());\n    }\n  };\n\n  const handleSelectLog = (logId: string, checked: boolean) => {\n    const newSelected = new Set(selectedLogs);\n    if (checked) {\n      newSelected.add(logId);\n    } else {\n      newSelected.delete(logId);\n    }\n    setSelectedLogs(newSelected);\n  };\n\n  const handleDeleteSingle = async (logId: string) => {\n    try {\n      setIsDeleting(true);\n      const response = await fetch('/api/admin/notification-logs', {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ ids: [logId] }),\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        toast.success(result.message);\n        fetchLogs(); // Refresh the logs\n      } else {\n        const error = await response.json();\n        toast.error(error.error || 'Failed to delete notification');\n      }\n    } catch (error) {\n      console.error('Error deleting notification:', error);\n      toast.error('Failed to delete notification');\n    } finally {\n      setIsDeleting(false);\n      setDeleteConfirmOpen(false);\n      setLogToDelete(null);\n    }\n  };\n\n  const handleBulkDelete = async () => {\n    if (selectedLogs.size === 0) {\n      toast.error('No notifications selected');\n      return;\n    }\n\n    try {\n      setIsDeleting(true);\n      const ids = Array.from(selectedLogs);\n      const response = await fetch('/api/admin/notification-logs', {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ ids }),\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        toast.success(result.message);\n        setSelectedLogs(new Set()); // Clear selection\n        fetchLogs(); // Refresh the logs\n      } else {\n        const error = await response.json();\n        toast.error(error.error || 'Failed to delete notifications');\n      }\n    } catch (error) {\n      console.error('Error deleting notifications:', error);\n      toast.error('Failed to delete notifications');\n    } finally {\n      setIsDeleting(false);\n      setBulkDeleteConfirmOpen(false);\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Stats Cards */}\n      {stats && (\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Logs</CardTitle>\n              <Mail className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{pagination.total || 0}</div>\n              {selectedLogs.size > 0 && (\n                <p className=\"text-xs text-muted-foreground\">\n                  {selectedLogs.size} selected\n                </p>\n              )}\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-2\">\n                <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                <div>\n                  <p className=\"text-sm font-medium\">Total Sent</p>\n                  <p className=\"text-2xl font-bold text-green-600\">{stats.totalSent}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-2\">\n                <XCircle className=\"h-4 w-4 text-red-500\" />\n                <div>\n                  <p className=\"text-sm font-medium\">Total Failed</p>\n                  <p className=\"text-2xl font-bold text-red-600\">{stats.totalFailed}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Clock className=\"h-4 w-4 text-yellow-500\" />\n                <div>\n                  <p className=\"text-sm font-medium\">Pending</p>\n                  <p className=\"text-2xl font-bold text-yellow-600\">{stats.totalPending}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Filters and Controls */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Mail className=\"h-5 w-5\" />\n            <span>Notification Logs</span>\n          </CardTitle>\n          <CardDescription>\n            View and filter email notification logs\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-col md:flex-row gap-4 mb-4\">\n            <Select value={filters.status} onValueChange={(value) => handleFilterChange('status', value)}>\n              <SelectTrigger className=\"w-full md:w-40\">\n                <SelectValue placeholder=\"All Statuses\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem key=\"all-statuses\" value=\"all\">All Statuses</SelectItem>\n                <SelectItem key=\"sent\" value=\"sent\">Sent</SelectItem>\n                <SelectItem key=\"failed\" value=\"failed\">Failed</SelectItem>\n                <SelectItem key=\"pending\" value=\"pending\">Pending</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select value={filters.type} onValueChange={(value) => handleFilterChange('type', value)}>\n              <SelectTrigger className=\"w-full md:w-48\">\n                <SelectValue placeholder=\"All Types\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem key=\"all-types\" value=\"all\">All Types</SelectItem>\n                \n                {/* Balance Notifications */}\n                <SelectItem key=\"low_balance_filter\" value=\"low_balance\">Low Balance</SelectItem>\n                <SelectItem key=\"zero_balance_filter\" value=\"zero_balance\">Zero Balance</SelectItem>\n                <SelectItem key=\"negative_balance_filter\" value=\"negative_balance\">Negative Balance</SelectItem>\n                \n                {/* Authentication Templates */}\n                <SelectItem key=\"email_verification_filter\" value=\"email_verification\">Email Verification</SelectItem>\n                \n                {/* Account Management Templates */}\n                <SelectItem key=\"account_activation_filter\" value=\"account_activation\">Account Activation</SelectItem>\n                \n                {/* Alert Templates */}\n                <SelectItem key=\"high_cost_alert_filter\" value=\"high_cost_alert\">High Cost Alert</SelectItem>\n                <SelectItem key=\"low_asr_alert_filter\" value=\"low_asr_alert\">Low ASR Alert</SelectItem>\n                <SelectItem key=\"extreme_usage_alert_filter\" value=\"extreme_usage_alert\">Extreme Usage Alert</SelectItem>\n                \n                {/* Payment Notifications */}\n                <SelectItem key=\"payment_success_gateway_filter\" value=\"payment_success_gateway\">Payment Success</SelectItem>\n                <SelectItem key=\"payment_success_admin_filter\" value=\"payment_success_admin\">Admin Credit</SelectItem>\n                \n                {/* Password Reset */}\n                <SelectItem key=\"password_reset_filter\" value=\"password_reset\">Password Reset</SelectItem>\n                \n                {/* Phone Number Notifications */}\n                <SelectItem key=\"backorder_approved_filter\" value=\"backorder_approved\">Backorder Approved</SelectItem>\n                <SelectItem key=\"backorder_rejected_filter\" value=\"backorder_rejected\">Backorder Rejected</SelectItem>\n                <SelectItem key=\"cancellation_approved_filter\" value=\"cancellation_approved\">Cancellation Approved</SelectItem>\n                <SelectItem key=\"cancellation_rejected_filter\" value=\"cancellation_rejected\">Cancellation Rejected</SelectItem>\n                <SelectItem key=\"number_purchase_single_filter\" value=\"number_purchase_single\">Number Purchase (Single)</SelectItem>\n                <SelectItem key=\"number_purchase_bulk_filter\" value=\"number_purchase_bulk\">Number Purchase (Bulk)</SelectItem>\n                <SelectItem key=\"number_assignment_filter\" value=\"number_assignment\">Admin Assignment</SelectItem>\n                \n                {/* Ticket Notifications */}\n                <SelectItem key=\"ticket_created_filter\" value=\"ticket_created\">Ticket Created</SelectItem>\n                <SelectItem key=\"ticket_updated_filter\" value=\"ticket_updated\">Ticket Updated</SelectItem>\n                <SelectItem key=\"ticket_resolved_filter\" value=\"ticket_resolved\">Ticket Resolved</SelectItem>\n                <SelectItem key=\"ticket_assigned_filter\" value=\"ticket_assigned\">Ticket Assigned</SelectItem>\n                <SelectItem key=\"ticket_replied_filter\" value=\"ticket_replied\">Ticket Replied</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Input\n              placeholder=\"Search by user ID...\"\n              value={filters.userId}\n              onChange={(e) => handleFilterChange('userId', e.target.value)}\n              className=\"w-full md:w-48\"\n            />\n\n            <div className=\"flex space-x-2\">\n              <Button variant=\"outline\" onClick={clearFilters}>\n                Clear\n              </Button>\n              <Button variant=\"outline\" onClick={fetchLogs}>\n                <RefreshCw className=\"h-4 w-4 mr-2\" />\n                Refresh\n              </Button>\n              <Button \n                variant=\"default\" \n                onClick={handleManualCheck}\n                disabled={isLoading}\n              >\n                {isLoading ? (\n                  <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                ) : (\n                  <Search className=\"h-4 w-4 mr-2\" />\n                )}\n                Check Balances\n              </Button>\n              <Dialog open={isTestDialogOpen} onOpenChange={setIsTestDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button variant=\"secondary\">\n                    <MailCheck className=\"h-4 w-4 mr-2\" />\n                    Test Email\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"sm:max-w-[500px]\">\n                  <DialogHeader>\n                    <DialogTitle>Send Test Email Notification</DialogTitle>\n                    <DialogDescription>\n                      Send a test email notification for either general notifications or ticket notifications.\n                    </DialogDescription>\n                  </DialogHeader>\n                  <div className=\"grid gap-4 py-4\">\n                    \n                    {/* Category Selection */}\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"category\">Category</Label>\n                      <Select value={testForm.testCategory} onValueChange={(value) => setTestForm(prev => ({ \n                        ...prev, \n                        testCategory: value,\n                        notificationType: getDefaultNotificationType(value)\n                      }))}>\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem key=\"balance\" value=\"balance\">Balance Notifications</SelectItem>\n                          <SelectItem key=\"auth\" value=\"auth\">Authentication Templates</SelectItem>\n                          <SelectItem key=\"account\" value=\"account\">Account Management Templates</SelectItem>\n                          <SelectItem key=\"alerts\" value=\"alerts\">Alert Templates</SelectItem>\n                          <SelectItem key=\"payment\" value=\"payment\">Payment Notifications</SelectItem>\n                          <SelectItem key=\"phone_numbers\" value=\"phone_numbers\">Phone Number Notifications</SelectItem>\n                          <SelectItem key=\"ticket\" value=\"ticket\">Ticket Notifications</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    {/* Balance Notifications */}\n                    {testForm.testCategory === 'balance' && (\n                      <React.Fragment key=\"balance-section\">\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"user\">User</Label>\n                          <UserSelect\n                            value={testForm.userId}\n                            onValueChange={(value) => setTestForm(prev => ({ ...prev, userId: value }))}\n                            users={users}\n                            isLoading={isLoadingUsers}\n                            categoryPrefix=\"balance\"\n                          />\n                        </div>\n                        \n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"type\">Type</Label>\n                          <Select value={testForm.notificationType} onValueChange={(value) => setTestForm(prev => ({ ...prev, notificationType: value }))}>\n                            <SelectTrigger>\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem key=\"low_balance\" value=\"low_balance\">Low Balance</SelectItem>\n                              <SelectItem key=\"zero_balance\" value=\"zero_balance\">Zero Balance</SelectItem>\n                              <SelectItem key=\"negative_balance\" value=\"negative_balance\">Negative Balance</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n                        \n                        {/* Show balance/threshold fields for balance notifications */}\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"balance\">Test Balance</Label>\n                          <Input\n                            id=\"balance\"\n                            type=\"number\"\n                            step=\"0.01\"\n                            placeholder=\"Optional (auto-generated if empty)\"\n                            value={testForm.testBalance}\n                            onChange={(e) => setTestForm(prev => ({ ...prev, testBalance: e.target.value }))}\n                          />\n                        </div>\n                        \n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"threshold\">Test Threshold</Label>\n                          <Input\n                            id=\"threshold\"\n                            type=\"number\"\n                            step=\"0.01\"\n                            placeholder=\"Optional (auto-generated if empty)\"\n                            value={testForm.testThreshold}\n                            onChange={(e) => setTestForm(prev => ({ ...prev, testThreshold: e.target.value }))}\n                          />\n                        </div>\n                      </React.Fragment>\n                    )}\n\n                    {/* Authentication Templates */}\n                    {testForm.testCategory === 'auth' && (\n                      <React.Fragment key=\"auth-section\">\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"user\">User</Label>\n                          <UserSelect\n                            value={testForm.userId}\n                            onValueChange={(value) => setTestForm(prev => ({ ...prev, userId: value }))}\n                            users={users}\n                            isLoading={isLoadingUsers}\n                            categoryPrefix=\"auth\"\n                          />\n                        </div>\n                        \n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"type\">Type</Label>\n                          <Select value={testForm.notificationType} onValueChange={(value) => setTestForm(prev => ({ ...prev, notificationType: value }))}>\n                            <SelectTrigger>\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem key=\"email_verification\" value=\"email_verification\">Email Verification</SelectItem>\n                              <SelectItem key=\"password_reset\" value=\"password_reset\">Password Reset</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n                      </React.Fragment>\n                    )}\n\n                    {/* Account Management Templates */}\n                    {testForm.testCategory === 'account' && (\n                      <React.Fragment key=\"account-section\">\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"user\">User</Label>\n                          <UserSelect\n                            value={testForm.userId}\n                            onValueChange={(value) => setTestForm(prev => ({ ...prev, userId: value }))}\n                            users={users}\n                            isLoading={isLoadingUsers}\n                            categoryPrefix=\"account\"\n                          />\n                        </div>\n                        \n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"type\">Type</Label>\n                          <Select value={testForm.notificationType} onValueChange={(value) => setTestForm(prev => ({ ...prev, notificationType: value }))}>\n                            <SelectTrigger>\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem key=\"account_activation\" value=\"account_activation\">Account Activation</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n                      </React.Fragment>\n                    )}\n\n                    {/* Alert Templates */}\n                    {testForm.testCategory === 'alerts' && (\n                      <React.Fragment key=\"alerts-section\">\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"user\">User</Label>\n                          <UserSelect\n                            value={testForm.userId}\n                            onValueChange={(value) => setTestForm(prev => ({ ...prev, userId: value }))}\n                            users={users}\n                            isLoading={isLoadingUsers}\n                            categoryPrefix=\"alerts\"\n                          />\n                        </div>\n                        \n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"type\">Type</Label>\n                          <Select value={testForm.notificationType} onValueChange={(value) => setTestForm(prev => ({ ...prev, notificationType: value }))}>\n                            <SelectTrigger>\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem key=\"high_cost_alert\" value=\"high_cost_alert\">High Cost Alert</SelectItem>\n                              <SelectItem key=\"low_asr_alert\" value=\"low_asr_alert\">Low ASR Alert</SelectItem>\n                              <SelectItem key=\"extreme_usage_alert\" value=\"extreme_usage_alert\">Extreme Usage Alert</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n                      </React.Fragment>\n                    )}\n\n                    {/* Payment Notifications */}\n                    {testForm.testCategory === 'payment' && (\n                      <React.Fragment key=\"payment-section\">\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"user\">User</Label>\n                          <UserSelect\n                            value={testForm.userId}\n                            onValueChange={(value) => setTestForm(prev => ({ ...prev, userId: value }))}\n                            users={users}\n                            isLoading={isLoadingUsers}\n                            categoryPrefix=\"payment\"\n                          />\n                        </div>\n                        \n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"type\">Type</Label>\n                          <Select value={testForm.notificationType} onValueChange={(value) => setTestForm(prev => ({ ...prev, notificationType: value }))}>\n                            <SelectTrigger>\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem key=\"payment_success_gateway\" value=\"payment_success_gateway\">Payment Success</SelectItem>\n                              <SelectItem key=\"payment_success_admin\" value=\"payment_success_admin\">Admin Credit</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n                      </React.Fragment>\n                    )}\n\n                    {/* Phone Number Notifications */}\n                    {testForm.testCategory === 'phone_numbers' && (\n                      <React.Fragment key=\"phone-numbers-section\">\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"user\">User</Label>\n                          <UserSelect\n                            value={testForm.userId}\n                            onValueChange={(value) => setTestForm(prev => ({ ...prev, userId: value }))}\n                            users={users}\n                            isLoading={isLoadingUsers}\n                            categoryPrefix=\"phone_numbers\"\n                          />\n                        </div>\n                        \n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"type\">Type</Label>\n                          <Select value={testForm.notificationType} onValueChange={(value) => setTestForm(prev => ({ ...prev, notificationType: value }))}>\n                            <SelectTrigger>\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem key=\"backorder_approved\" value=\"backorder_approved\">Backorder Approved</SelectItem>\n                              <SelectItem key=\"backorder_rejected\" value=\"backorder_rejected\">Backorder Rejected</SelectItem>\n                              <SelectItem key=\"cancellation_approved\" value=\"cancellation_approved\">Cancellation Approved</SelectItem>\n                              <SelectItem key=\"cancellation_rejected\" value=\"cancellation_rejected\">Cancellation Rejected</SelectItem>\n                              <SelectItem key=\"number_purchase_single\" value=\"number_purchase_single\">Number Purchase (Single)</SelectItem>\n                              <SelectItem key=\"number_purchase_bulk\" value=\"number_purchase_bulk\">Number Purchase (Bulk)</SelectItem>\n                              <SelectItem key=\"number_assignment\" value=\"number_assignment\">Admin Assignment</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n\n                        {/* Sample Data Preview */}\n                        <div className=\"bg-muted/30 rounded-lg p-3 border\">\n                          <h4 className=\"text-sm font-medium mb-3 flex items-center gap-2\">\n                            <TestTube className=\"h-4 w-4\" />\n                            Sample Test Data\n                          </h4>\n                          <div className=\"space-y-2 text-sm\">\n                            <div key=\"phone-number\" className=\"flex justify-between\">\n                              <span className=\"text-muted-foreground\">Phone Number:</span>\n                              <span className=\"font-mono\">+1234567890</span>\n                            </div>\n                            <div key=\"country\" className=\"flex justify-between\">\n                              <span className=\"text-muted-foreground\">Country:</span>\n                              <span>United States</span>\n                            </div>\n                            <div key=\"type\" className=\"flex justify-between\">\n                              <span className=\"text-muted-foreground\">Type:</span>\n                              <span>Local</span>\n                            </div>\n                            <div key=\"monthly-rate\" className=\"flex justify-between\">\n                              <span className=\"text-muted-foreground\">Monthly Rate:</span>\n                              <span>€3.50</span>\n                            </div>\n                          </div>\n                        </div>\n                      </React.Fragment>\n                    )}\n\n                    {/* Ticket Notifications */}\n                    {testForm.testCategory === 'ticket' && (\n                      <React.Fragment key=\"ticket-section\">\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"user\">User</Label>\n                          <UserSelect\n                            value={testForm.userId}\n                            onValueChange={(value) => setTestForm(prev => ({ ...prev, userId: value }))}\n                            users={users}\n                            isLoading={isLoadingUsers}\n                            categoryPrefix=\"ticket\"\n                          />\n                        </div>\n\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"type\">Type</Label>\n                          <Select value={testForm.ticketNotificationType} onValueChange={(value) => setTestForm(prev => ({ ...prev, ticketNotificationType: value }))}>\n                            <SelectTrigger>\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem key=\"ticket_created\" value=\"ticket_created\">Ticket Created</SelectItem>\n                              <SelectItem key=\"ticket_updated\" value=\"ticket_updated\">Ticket Updated</SelectItem>\n                              <SelectItem key=\"ticket_resolved\" value=\"ticket_resolved\">Ticket Resolved</SelectItem>\n                              <SelectItem key=\"ticket_assigned\" value=\"ticket_assigned\">Ticket Assigned</SelectItem>\n                              <SelectItem key=\"ticket_replied\" value=\"ticket_replied\">Ticket Replied</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n\n                        <div className=\"space-y-2\">\n                          <Label>Include Customer Template</Label>\n                          <div className=\"flex items-center justify-between p-3 border rounded-lg bg-muted/30\">\n                            <div className=\"space-y-1\">\n                              <div className=\"flex items-center gap-2\">\n                                <User className=\"h-4 w-4 text-muted-foreground\" />\n                                <span className=\"text-sm font-medium\">Customer Email Template</span>\n                              </div>\n                              <p className=\"text-xs text-muted-foreground\">\n                                Also send customer template to selected user (tests both admin & customer views)\n                              </p>\n                            </div>\n                            <Switch\n                              checked={testForm.includeCustomerInTest}\n                              onCheckedChange={(checked) => setTestForm(prev => ({ ...prev, includeCustomerInTest: checked }))}\n                            />\n                          </div>\n                        </div>\n\n                        {/* Sample Data Preview */}\n                        <div className=\"bg-muted/30 rounded-lg p-3 border\">\n                          <h4 className=\"text-sm font-medium mb-3 flex items-center gap-2\">\n                            <TestTube className=\"h-4 w-4\" />\n                            Sample Test Data\n                          </h4>\n                          <div className=\"space-y-2 text-sm\">\n                            <div key=\"ticket\" className=\"flex justify-between\">\n                              <span className=\"text-muted-foreground\">Ticket:</span>\n                              <span className=\"font-mono\">TKT-000001</span>\n                            </div>\n                            <div key=\"customer\" className=\"flex justify-between\">\n                              <span className=\"text-muted-foreground\">Customer:</span>\n                              <span>John Smith (Acme Corp)</span>\n                            </div>\n                            <div key=\"service\" className=\"flex justify-between\">\n                              <span className=\"text-muted-foreground\">Service:</span>\n                              <span>Technical Support</span>\n                            </div>\n                            <div key=\"priority\" className=\"flex justify-between\">\n                              <span className=\"text-muted-foreground\">Priority:</span>\n                              <span>Medium</span>\n                            </div>\n                          </div>\n                        </div>\n                      </React.Fragment>\n                    )}\n                  </div>\n                  <DialogFooter>\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => {\n                        setIsTestDialogOpen(false);\n                        resetTestForm();\n                      }}\n                    >\n                      Cancel\n                    </Button>\n                    <Button\n                      onClick={handleSendTestEmail}\n                      disabled={isSendingTest || \n                        (['balance', 'auth', 'account', 'alerts', 'payment', 'phone_numbers', 'ticket'].includes(testForm.testCategory) && !testForm.userId)\n                      }\n                    >\n                      {isSendingTest ? (\n                        <>\n                          <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                          Sending...\n                        </>\n                      ) : (\n                        <>\n                          <Send className=\"h-4 w-4 mr-2\" />\n                          Send Test Email\n                        </>\n                      )}\n                    </Button>\n                  </DialogFooter>\n                </DialogContent>\n              </Dialog>\n              {selectedLogs.size > 0 && (\n                <Button \n                  variant=\"secondary\" \n                  onClick={handleBulkResend}\n                  disabled={isResending}\n                >\n                  {isResending ? (\n                    <Loader2 className=\"h-4 w-4 animate-spin\" />\n                  ) : (\n                    <Send className=\"h-4 w-4 mr-2\" />\n                  )}\n                  Resend Selected ({selectedLogs.size})\n                </Button>\n              )}\n              {selectedLogs.size > 0 && (\n                <AlertDialog open={bulkDeleteConfirmOpen} onOpenChange={setBulkDeleteConfirmOpen}>\n                  <AlertDialogTrigger asChild>\n                    <Button \n                      variant=\"destructive\" \n                      disabled={isDeleting}\n                    >\n                      {isDeleting ? (\n                        <Loader2 className=\"h-4 w-4 animate-spin\" />\n                      ) : (\n                        <Trash2 className=\"h-4 w-4 mr-2\" />\n                      )}\n                      Delete Selected ({selectedLogs.size})\n                    </Button>\n                  </AlertDialogTrigger>\n                  <AlertDialogContent>\n                    <AlertDialogHeader>\n                      <AlertDialogTitle>Delete Notifications</AlertDialogTitle>\n                      <AlertDialogDescription>\n                        Are you sure you want to delete {selectedLogs.size} notification{selectedLogs.size === 1 ? '' : 's'}? \n                        This action cannot be undone and will permanently remove the notification{selectedLogs.size === 1 ? '' : 's'} from the system.\n                      </AlertDialogDescription>\n                    </AlertDialogHeader>\n                    <AlertDialogFooter>\n                      <AlertDialogCancel>Cancel</AlertDialogCancel>\n                      <AlertDialogAction\n                        onClick={handleBulkDelete}\n                        className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n                      >\n                        Delete {selectedLogs.size} Notification{selectedLogs.size === 1 ? '' : 's'}\n                      </AlertDialogAction>\n                    </AlertDialogFooter>\n                  </AlertDialogContent>\n                </AlertDialog>\n              )}\n            </div>\n          </div>\n\n          {/* Logs Table */}\n          {isLoading ? (\n            <div className=\"flex justify-center py-8\">\n              <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n            </div>\n          ) : logs.length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              No notification logs found\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {/* Select All Header */}\n              {logs.length > 0 && (\n                <div className=\"flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-800 rounded-lg border\">\n                  <div className=\"flex items-center space-x-3\">\n                    <Checkbox\n                      checked={logs.length > 0 && selectedLogs.size === logs.length}\n                      onCheckedChange={handleSelectAll}\n                    />\n                    <span className=\"text-sm font-medium\">\n                      {selectedLogs.size === 0 \n                        ? 'Select all notifications'\n                        : selectedLogs.size === logs.length\n                        ? 'All notifications selected'\n                        : `${selectedLogs.size} of ${logs.length} selected`\n                      }\n                    </span>\n                  </div>\n                  {selectedLogs.size > 0 && (\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={() => setSelectedLogs(new Set())}\n                    >\n                      Clear Selection\n                    </Button>\n                  )}\n                </div>\n              )}\n              \n              {/* Log Entries */}\n              {logs.map((log) => (\n                <Card key={log.id} className=\"p-4\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex items-start space-x-3\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Checkbox\n                          checked={selectedLogs.has(log.id)}\n                          onCheckedChange={(checked) => handleSelectLog(log.id, checked)}\n                        />\n                        {getStatusIcon(log.status)}\n                      </div>\n                      <div className=\"space-y-1\">\n                        <div className=\"flex items-center space-x-2\">\n                          <span className=\"font-medium\">{log.userName}</span>\n                          <span className=\"text-sm text-muted-foreground\">({log.userEmail})</span>\n                          {getTypeBadge(log.notificationType)}\n                          {getStatusBadge(log.status)}\n                        </div>\n                        \n                        {/* Dynamic details based on notification type */}\n                        <div className=\"text-sm text-muted-foreground\">\n                          {log.notificationType.includes('balance') && log.balanceAmount !== undefined && log.thresholdAmount !== undefined ? (\n                            <>Balance: €{log.balanceAmount.toFixed(4)} | Threshold: €{log.thresholdAmount.toFixed(4)}</>\n                          ) : null}\n                          \n                          {log.notificationType === 'email_verification' && log.otpCode ? (\n                            <>OTP Code: {log.otpCode}</>\n                          ) : null}\n                          \n                          {log.notificationType === 'account_activation' && log.activationData?.sippyAccountId ? (\n                            <>Sippy Account ID: {log.activationData.sippyAccountId}</>\n                          ) : null}\n                          \n                          {log.notificationType.includes('alert') && log.alertData ? (\n                            <>Alert Data: {JSON.stringify(log.alertData).substring(0, 100)}...</>\n                          ) : null}\n                          \n                          {(log.notificationType === 'payment_success_gateway' || log.notificationType === 'payment_success_admin') && log.paymentData ? (\n                            <>\n                              Amount: {new Intl.NumberFormat('en-US', { style: 'currency', currency: log.paymentData.currency }).format(log.paymentData.amount)}\n                              {log.paymentData.paymentMethod ? ` | Method: ${log.paymentData.paymentMethod}` : ''}\n                              {log.paymentData.transactionId ? ` | TX: ${log.paymentData.transactionId.substring(0, 12)}...` : ''}\n                              {log.paymentData.processedBy ? ` | By: ${log.paymentData.processedBy}` : ''}\n                            </>\n                          ) : null}\n                          \n                          {log.sippyAccountId ? (\n                            <> | Account: {log.sippyAccountId}</>\n                          ) : null}\n                        </div>\n                        \n                        <div className=\"text-sm\">\n                          <strong>Subject:</strong> {log.emailSubject}\n                        </div>\n                        {log.fromEmail && (\n                          <div className=\"text-sm text-muted-foreground\">\n                            <strong>From:</strong> {log.fromEmail}\n                          </div>\n                        )}\n                        {log.errorMessage && (\n                          <div className=\"text-sm text-red-600\">\n                            <strong>Error:</strong> {log.errorMessage}\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"text-right text-sm text-muted-foreground\">\n                        <div>Created: {format(new Date(log.createdAt), 'dd/MM/yyyy HH:mm:ss')}</div>\n                        {log.sentAt && (\n                          <div>Sent: {format(new Date(log.sentAt), 'dd/MM/yyyy HH:mm:ss')}</div>\n                        )}\n                      </div>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleResendSingle(log.id)}\n                        disabled={isResending}\n                        title=\"Resend this notification\"\n                      >\n                        {isResending ? (\n                          <Loader2 className=\"h-4 w-4 animate-spin\" />\n                        ) : (\n                          <RotateCcw className=\"h-4 w-4\" />\n                        )}\n                      </Button>\n                      <AlertDialog open={deleteConfirmOpen && logToDelete === log.id} onOpenChange={(open) => {\n                        setDeleteConfirmOpen(open);\n                        if (!open) setLogToDelete(null);\n                      }}>\n                        <AlertDialogTrigger asChild>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => setLogToDelete(log.id)}\n                            disabled={isDeleting}\n                            title=\"Delete this notification\"\n                          >\n                            {isDeleting && logToDelete === log.id ? (\n                              <Loader2 className=\"h-4 w-4 animate-spin\" />\n                            ) : (\n                              <Trash2 className=\"h-4 w-4 text-destructive\" />\n                            )}\n                          </Button>\n                        </AlertDialogTrigger>\n                        <AlertDialogContent>\n                          <AlertDialogHeader>\n                            <AlertDialogTitle>Delete Notification</AlertDialogTitle>\n                            <AlertDialogDescription>\n                              Are you sure you want to delete this notification for {log.userName}? \n                              This action cannot be undone and will permanently remove the notification from the system.\n                            </AlertDialogDescription>\n                          </AlertDialogHeader>\n                          <AlertDialogFooter>\n                            <AlertDialogCancel>Cancel</AlertDialogCancel>\n                            <AlertDialogAction\n                              onClick={() => handleDeleteSingle(log.id)}\n                              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n                            >\n                              Delete Notification\n                            </AlertDialogAction>\n                          </AlertDialogFooter>\n                        </AlertDialogContent>\n                      </AlertDialog>\n                    </div>\n                  </div>\n                </Card>\n              ))}\n            </div>\n          )}\n\n          {/* Pagination */}\n          {pagination.totalPages > 1 && (\n            <div className=\"flex items-center justify-between mt-6\">\n              <div className=\"text-sm text-muted-foreground\">\n                Showing {((pagination.page - 1) * pagination.limit) + 1} to {Math.min(pagination.page * pagination.limit, pagination.total)} of {pagination.total} results\n              </div>\n              <div className=\"flex space-x-2\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => changePage(pagination.page - 1)}\n                  disabled={!pagination.hasPrev}\n                >\n                  Previous\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => changePage(pagination.page + 1)}\n                  disabled={!pagination.hasNext}\n                >\n                  Next\n                </Button>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/admin/PaymentManagement.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchPayments'. Either include it or remove the dependency array.","line":189,"column":6,"nodeType":"ArrayExpression","endLine":189,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchPayments]","fix":{"range":[4647,4649],"text":"[fetchPayments]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { \n  Card, \n  CardContent, \n  CardDescription, \n  CardHeader, \n  CardTitle \n} from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport { \n  Loader2, \n  RefreshCw, \n  DollarSign,\n  X,\n  Filter,\n  Eye,\n  CreditCard,\n  Receipt,\n  CheckCircle,\n  XCircle,\n  Building\n} from 'lucide-react';\nimport { toast } from 'sonner';\nimport { format } from 'date-fns';\nimport { useAuth } from '@/lib/AuthContext';\nimport { useBranding } from '@/hooks/useBranding';\n\ninterface MongoPayment {\n  _id: string;\n  paymentIntentId: string;\n  userId: string;\n  userEmail: string;\n  sippyAccountId: number;\n  topupAmount: number;\n  processingFee: number;\n  fixedFee: number;\n  totalChargedAmount: number;\n  currency: string;\n  provider: string;\n  gatewayName: string;\n  paymentMethodType: string;\n  cardBrand?: string;\n  cardLast4?: string;\n  cardCountry?: string;\n  status: string;\n  paymentIntentStatus: string;\n  failureCode?: string;\n  failureMessage?: string;\n  paymentInitiatedAt: string;\n  paymentCompletedAt?: string;\n  paymentReference?: string;\n  description?: string;\n  notes?: string;\n  receiptUrl?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface PaymentStats {\n  totalPayments: number;\n  successfulPayments: number;\n  totalTopupAmount: number;\n  totalFeesCollected: number;\n  totalChargedAmount: number;\n  averagePaymentAmount: number;\n  currencies: string[];\n}\n\ninterface PaymentFilters {\n  status: string;\n  provider: string;\n  startDate: string;\n  endDate: string;\n  userEmail: string;\n  accountId: string;\n}\n\ninterface PaymentHistoryResponse {\n  success: boolean;\n  payments: MongoPayment[];\n  pagination: {\n    total: number;\n    limit: number;\n    offset: number;\n    hasMore: boolean;\n  };\n  statistics: PaymentStats;\n  filters: PaymentFilters;\n}\n\nexport function PaymentManagement() {\n  const { user } = useAuth();\n  const { colors } = useBranding();\n  const [payments, setPayments] = useState<MongoPayment[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [stats, setStats] = useState<PaymentStats | null>(null);\n  \n  // Pagination state\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalRecords, setTotalRecords] = useState(0);\n  const recordsPerPage = 50;\n  \n  // Filter state\n  const [showFilters, setShowFilters] = useState(false);\n  const [filters, setFilters] = useState({\n    status: 'all',\n    provider: 'all',\n    startDate: '',\n    endDate: '',\n    userEmail: '',\n    accountId: '',\n  });\n\n  // Selected payment for details\n  const [selectedPayment, setSelectedPayment] = useState<MongoPayment | null>(null);\n  const [showPaymentDetails, setShowPaymentDetails] = useState(false);\n\n  const fetchPayments = async (page: number = currentPage) => {\n    if (user?.role !== 'admin') {\n      setError('Access denied - Admin only');\n      setIsLoading(false);\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      const queryParams = new URLSearchParams({\n        limit: recordsPerPage.toString(),\n        offset: ((page - 1) * recordsPerPage).toString(),\n        ...(filters.status !== 'all' && { status: filters.status }),\n        ...(filters.startDate && { start_date: filters.startDate }),\n        ...(filters.endDate && { end_date: filters.endDate }),\n        ...(filters.accountId && { account_id: filters.accountId }),\n      });\n\n      const response = await fetch(`/api/payments/history?${queryParams}`);\n      \n      if (!response.ok) {\n        throw new Error('Failed to fetch payment history');\n      }\n\n      const data: PaymentHistoryResponse = await response.json();\n      \n      setPayments(data.payments);\n      setStats(data.statistics);\n      setTotalRecords(data.pagination.total);\n      \n    } catch (err) {\n      console.error('Error fetching payments:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch payments');\n      toast.error('Failed to fetch payment history');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchPayments(1);\n  }, []);\n\n  const handleFilterChange = (key: string, value: string) => {\n    setFilters(prev => ({ ...prev, [key]: value }));\n  };\n\n  const clearFilters = () => {\n    setFilters({\n      status: 'all',\n      provider: 'all',\n      startDate: '',\n      endDate: '',\n      userEmail: '',\n      accountId: '',\n    });\n    setCurrentPage(1);\n  };\n\n  const applyFilters = () => {\n    setCurrentPage(1);\n    fetchPayments(1);\n  };\n\n  const handlePageChange = (newPage: number) => {\n    setCurrentPage(newPage);\n    fetchPayments(newPage);\n  };\n\n  const formatCurrency = (amount: number, currency: string = 'EUR') => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: currency,\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    }).format(amount);\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'succeeded':\n        return <Badge className=\"bg-green-100 text-green-800\">Succeeded</Badge>;\n      case 'failed':\n        return <Badge variant=\"destructive\">Failed</Badge>;\n      case 'pending':\n        return <Badge variant=\"secondary\">Pending</Badge>;\n      case 'processing':\n        return <Badge className=\"bg-blue-100 text-blue-800\">Processing</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  const totalPages = Math.ceil(totalRecords / recordsPerPage);\n\n  if (user?.role !== 'admin') {\n    return (\n      <Card>\n        <CardContent className=\"text-center py-12\">\n          <XCircle className=\"h-16 w-16 text-red-500 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold text-red-700\">Access Denied</h3>\n          <p className=\"text-muted-foreground\">This page is restricted to administrators only.</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (error) {\n    return (\n      <Card className=\"border-destructive\">\n        <CardHeader>\n          <CardTitle className=\"text-destructive\">Error</CardTitle>\n          <CardDescription>Failed to load payment management</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-sm text-destructive mb-4\">{error}</p>\n          <Button onClick={() => fetchPayments()} variant=\"outline\">\n            <RefreshCw className=\"h-4 w-4 mr-2\" />\n            Retry\n          </Button>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div>\n        <h1 className=\"text-3xl font-bold\" style={{ color: colors.primary }}>\n          Payment Management\n        </h1>\n        <p className=\"text-muted-foreground\">\n          Manage MongoDB payment records and view detailed analytics\n        </p>\n      </div>\n\n      {/* Statistics Cards */}\n      {stats && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Total Payments</p>\n                  <p className=\"text-2xl font-bold\" style={{ color: colors.primary }}>\n                    {stats.totalPayments}\n                  </p>\n                </div>\n                <Receipt className=\"h-8 w-8\" style={{ color: `${colors.primary}60` }} />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Success Rate</p>\n                  <p className=\"text-2xl font-bold text-green-600\">\n                    {stats.totalPayments > 0 ? Math.round((stats.successfulPayments / stats.totalPayments) * 100) : 0}%\n                  </p>\n                </div>\n                <CheckCircle className=\"h-8 w-8 text-green-500\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Total Volume</p>\n                  <p className=\"text-2xl font-bold\" style={{ color: colors.primary }}>\n                    {formatCurrency(stats.totalChargedAmount, stats.currencies[0] || 'EUR')}\n                  </p>\n                </div>\n                <DollarSign className=\"h-8 w-8\" style={{ color: `${colors.primary}60` }} />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Fees Collected</p>\n                  <p className=\"text-2xl font-bold text-yellow-600\">\n                    {formatCurrency(stats.totalFeesCollected, stats.currencies[0] || 'EUR')}\n                  </p>\n                </div>\n                <Building className=\"h-8 w-8 text-yellow-500\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Actions */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-2\">\n          <Button \n            variant=\"outline\" \n            size=\"sm\"\n            onClick={() => setShowFilters(!showFilters)}\n          >\n            <Filter className=\"h-4 w-4 mr-2\" />\n            Filters\n          </Button>\n          <Button \n            variant=\"outline\" \n            size=\"sm\"\n            onClick={() => fetchPayments()}\n            disabled={isLoading}\n          >\n            <RefreshCw className={`h-4 w-4 mr-2 ${isLoading ? 'animate-spin' : ''}`} />\n            Refresh\n          </Button>\n        </div>\n        \n        <div className=\"text-sm text-muted-foreground\">\n          {totalRecords} total payments\n        </div>\n      </div>\n\n      {/* Filters Panel */}\n      {showFilters && (\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-base\">Filters</CardTitle>\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                onClick={() => setShowFilters(false)}\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 lg:grid-cols-6 gap-4\">\n              <div className=\"space-y-2\">\n                <Label>Status</Label>\n                <Select\n                  value={filters.status}\n                  onValueChange={(value) => handleFilterChange('status', value)}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Status</SelectItem>\n                    <SelectItem value=\"succeeded\">Succeeded</SelectItem>\n                    <SelectItem value=\"failed\">Failed</SelectItem>\n                    <SelectItem value=\"pending\">Pending</SelectItem>\n                    <SelectItem value=\"processing\">Processing</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label>Start Date</Label>\n                <Input\n                  type=\"date\"\n                  value={filters.startDate}\n                  onChange={(e) => handleFilterChange('startDate', e.target.value)}\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label>End Date</Label>\n                <Input\n                  type=\"date\"\n                  value={filters.endDate}\n                  onChange={(e) => handleFilterChange('endDate', e.target.value)}\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label>Account ID</Label>\n                <Input\n                  type=\"number\"\n                  placeholder=\"Sippy Account ID\"\n                  value={filters.accountId}\n                  onChange={(e) => handleFilterChange('accountId', e.target.value)}\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>&nbsp;</Label>\n                <div className=\"flex gap-2\">\n                  <Button onClick={applyFilters} size=\"sm\" style={{ backgroundColor: colors.primary }}>\n                    Apply\n                  </Button>\n                  <Button onClick={clearFilters} variant=\"outline\" size=\"sm\">\n                    Clear\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Main Content */}\n      {isLoading ? (\n        <Card>\n          <CardContent className=\"text-center py-12\">\n            <Loader2 className=\"h-8 w-8 animate-spin mx-auto mb-4\" style={{ color: colors.primary }} />\n            <p>Loading payment records...</p>\n          </CardContent>\n        </Card>\n      ) : payments.length === 0 ? (\n        <Card>\n          <CardContent className=\"text-center py-12\">\n            <Receipt className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold\">No Payment Records Found</h3>\n            <p className=\"text-muted-foreground\">No MongoDB payment records match your criteria.</p>\n          </CardContent>\n        </Card>\n      ) : (\n        <Card>\n          <CardContent className=\"p-0\">\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Date</TableHead>\n                    <TableHead>User</TableHead>\n                    <TableHead>Account</TableHead>\n                    <TableHead>Amount</TableHead>\n                    <TableHead>Card</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Provider</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {payments.map((payment) => (\n                    <TableRow key={payment._id}>\n                      <TableCell>\n                        <div>\n                          <div className=\"font-medium\">\n                            {format(new Date(payment.createdAt), 'MMM dd, yyyy')}\n                          </div>\n                          <div className=\"text-xs text-muted-foreground\">\n                            {format(new Date(payment.createdAt), 'HH:mm:ss')}\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div>\n                          <div className=\"font-medium\">{payment.userEmail}</div>\n                          <div className=\"text-xs text-muted-foreground\">ID: {payment.userId.slice(-8)}</div>\n                        </div>\n                      </TableCell>\n                      <TableCell className=\"font-mono\">{payment.sippyAccountId}</TableCell>\n                      <TableCell>\n                        <div>\n                          <div className=\"font-bold text-green-600\">\n                            {formatCurrency(payment.totalChargedAmount, payment.currency)}\n                          </div>\n                          <div className=\"text-xs text-muted-foreground\">\n                            Top-up: {formatCurrency(payment.topupAmount, payment.currency)}\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        {payment.cardBrand && payment.cardLast4 ? (\n                          <div className=\"flex items-center gap-2\">\n                            <CreditCard className=\"h-4 w-4\" />\n                            <span className=\"capitalize\">{payment.cardBrand} •••• {payment.cardLast4}</span>\n                          </div>\n                        ) : (\n                          <span className=\"text-muted-foreground\">N/A</span>\n                        )}\n                      </TableCell>\n                      <TableCell>{getStatusBadge(payment.status)}</TableCell>\n                      <TableCell className=\"capitalize\">{payment.provider}</TableCell>\n                      <TableCell>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => {\n                            setSelectedPayment(payment);\n                            setShowPaymentDetails(true);\n                          }}\n                        >\n                          <Eye className=\"h-4 w-4\" />\n                        </Button>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n            \n            {/* Pagination */}\n            <div className=\"border-t p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"text-sm text-muted-foreground\">\n                  Showing {(currentPage - 1) * recordsPerPage + 1} to {Math.min(currentPage * recordsPerPage, totalRecords)} of {totalRecords} payments\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => handlePageChange(currentPage - 1)}\n                    disabled={currentPage === 1 || isLoading}\n                  >\n                    Previous\n                  </Button>\n                  <span className=\"text-sm\">\n                    Page {currentPage} of {totalPages}\n                  </span>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => handlePageChange(currentPage + 1)}\n                    disabled={currentPage === totalPages || isLoading}\n                  >\n                    Next\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Payment Details Dialog */}\n      <Dialog open={showPaymentDetails} onOpenChange={setShowPaymentDetails}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Payment Details</DialogTitle>\n            <DialogDescription>\n              Complete payment information from MongoDB records\n            </DialogDescription>\n          </DialogHeader>\n          \n          {selectedPayment && (\n            <div className=\"space-y-6\">\n              {/* Basic Info */}\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label>Payment Intent ID</Label>\n                  <div className=\"font-mono text-sm\">{selectedPayment.paymentIntentId}</div>\n                </div>\n                <div>\n                  <Label>Payment Reference</Label>\n                  <div className=\"font-mono text-sm\">{selectedPayment.paymentReference || 'N/A'}</div>\n                </div>\n                <div>\n                  <Label>User Email</Label>\n                  <div>{selectedPayment.userEmail}</div>\n                </div>\n                <div>\n                  <Label>Sippy Account ID</Label>\n                  <div>{selectedPayment.sippyAccountId}</div>\n                </div>\n              </div>\n\n              {/* Amounts */}\n              <div>\n                <Label>Amount Breakdown</Label>\n                <div className=\"mt-2 p-4 bg-muted/30 rounded-lg\">\n                  <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span>Top-up Amount:</span>\n                      <span className=\"font-medium\">{formatCurrency(selectedPayment.topupAmount, selectedPayment.currency)}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Processing Fee:</span>\n                      <span className=\"font-medium\">{formatCurrency(selectedPayment.processingFee, selectedPayment.currency)}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Fixed Fee:</span>\n                      <span className=\"font-medium\">{formatCurrency(selectedPayment.fixedFee, selectedPayment.currency)}</span>\n                    </div>\n                    <div className=\"flex justify-between font-bold border-t pt-2\">\n                      <span>Total Charged:</span>\n                      <span>{formatCurrency(selectedPayment.totalChargedAmount, selectedPayment.currency)}</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Card Info */}\n              {selectedPayment.cardBrand && (\n                <div>\n                  <Label>Payment Method</Label>\n                  <div className=\"mt-2 p-4 bg-muted/30 rounded-lg\">\n                    <div className=\"flex items-center gap-4\">\n                      <CreditCard className=\"h-8 w-8\" />\n                      <div>\n                        <div className=\"font-medium capitalize\">\n                          {selectedPayment.cardBrand} •••• {selectedPayment.cardLast4}\n                        </div>\n                        {selectedPayment.cardCountry && (\n                          <div className=\"text-sm text-muted-foreground\">\n                            Issued in {selectedPayment.cardCountry}\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {/* Status and Dates */}\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label>Status</Label>\n                  <div className=\"mt-1\">{getStatusBadge(selectedPayment.status)}</div>\n                </div>\n                <div>\n                  <Label>Gateway</Label>\n                  <div>{selectedPayment.gatewayName} ({selectedPayment.provider})</div>\n                </div>\n                <div>\n                  <Label>Created At</Label>\n                  <div>{format(new Date(selectedPayment.createdAt), 'MMM dd, yyyy HH:mm:ss')}</div>\n                </div>\n                {selectedPayment.paymentCompletedAt && (\n                  <div>\n                    <Label>Completed At</Label>\n                    <div>{format(new Date(selectedPayment.paymentCompletedAt), 'MMM dd, yyyy HH:mm:ss')}</div>\n                  </div>\n                )}\n              </div>\n\n              {/* Notes */}\n              {(selectedPayment.description || selectedPayment.notes) && (\n                <div>\n                  <Label>Notes</Label>\n                  <div className=\"mt-2 p-4 bg-muted/30 rounded-lg text-sm\">\n                    {selectedPayment.description && (\n                      <div className=\"mb-2\">\n                        <strong>Description:</strong> {selectedPayment.description}\n                      </div>\n                    )}\n                    {selectedPayment.notes && (\n                      <div>\n                        <strong>Notes:</strong> {selectedPayment.notes}\n                      </div>\n                    )}\n                  </div>\n                </div>\n              )}\n\n              {/* Actions */}\n              {selectedPayment.receiptUrl && (\n                <div className=\"flex gap-2\">\n                  <Button\n                    onClick={() => window.open(selectedPayment.receiptUrl, '_blank')}\n                    variant=\"outline\"\n                  >\n                    <Receipt className=\"h-4 w-4 mr-2\" />\n                    View Receipt\n                  </Button>\n                </div>\n              )}\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/admin/PhoneNumberRequestsCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":110,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2668,2671],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2668,2671],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchPhoneNumberRequests'. Either include it or remove the dependency array.","line":169,"column":6,"nodeType":"ArrayExpression","endLine":169,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [fetchPhoneNumberRequests, limit]","fix":{"range":[5498,5505],"text":"[fetchPhoneNumberRequests, limit]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\nimport { Separator } from '@/components/ui/separator';\nimport { \n  AlertTriangle, \n  RefreshCw, \n  Phone, \n  ExternalLink,\n  Calendar,\n  AlertCircle,\n  CheckCircle2,\n  Clock,\n  XCircle,\n  PhoneCall\n} from 'lucide-react';\nimport Link from 'next/link';\nimport { toast } from 'sonner';\n\ninterface PhoneNumberRequest {\n  _id: string;\n  requestNumber: string;\n  requestType: 'cancel' | 'transfer' | 'suspend' | 'modify';\n  status: 'pending' | 'approved' | 'rejected' | 'completed' | 'cancelled';\n  priority: 'low' | 'medium' | 'high' | 'urgent';\n  reason: string;\n  description?: string;\n  createdAt: string;\n  updatedAt: string;\n  phoneNumber: {\n    _id: string;\n    number: string;\n    country: string;\n    numberType: string;\n    status: string;\n  };\n  user: {\n    _id: string;\n    name: string;\n    email: string;\n    company?: string;\n    onboarding?: {\n      companyName?: string;\n    };\n  };\n  reviewedAt?: string;\n  processedAt?: string;\n  daysOpen: number;\n}\n\ninterface RequestStats {\n  total: number;\n  byStatus: {\n    pending: number;\n    approved: number;\n    rejected: number;\n    completed: number;\n    cancelled: number;\n  };\n  byType: {\n    cancel: number;\n    transfer: number;\n    suspend: number;\n    modify: number;\n  };\n  byPriority: {\n    urgent: number;\n    high: number;\n    medium: number;\n    low: number;\n  };\n  oldestRequestDays: number;\n  averageDaysOpen: number;\n}\n\ninterface PhoneNumberRequestsCardProps {\n  onRefresh?: () => void;\n  limit?: number;\n  isEditMode?: boolean;\n}\n\nexport function PhoneNumberRequestsCard({ \n  onRefresh, \n  limit = 10,\n  isEditMode = false\n}: PhoneNumberRequestsCardProps) {\n  const [requests, setRequests] = useState<PhoneNumberRequest[]>([]);\n  const [stats, setStats] = useState<RequestStats | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchPhoneNumberRequests = async () => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      \n      const response = await fetch(`/api/admin/phone-numbers/requests?limit=${limit}&status=pending`);\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to fetch phone number requests');\n      }\n      \n      const data = await response.json();\n      \n      // Transform the data and calculate days open\n      const transformedRequests = (data.requests || []).map((request: any) => {\n        const now = new Date();\n        const createdAt = new Date(request.createdAt);\n        const daysOpen = Math.floor((now.getTime() - createdAt.getTime()) / (1000 * 60 * 60 * 24));\n        \n        return {\n          ...request,\n          daysOpen,\n          user: {\n            ...request.user,\n            company: request.user.onboarding?.companyName || request.user.company\n          }\n        };\n      });\n      \n      setRequests(transformedRequests);\n      \n      // Calculate stats\n      const statsData: RequestStats = {\n        total: transformedRequests.length,\n        byStatus: {\n          pending: transformedRequests.filter((r: PhoneNumberRequest) => r.status === 'pending').length,\n          approved: transformedRequests.filter((r: PhoneNumberRequest) => r.status === 'approved').length,\n          rejected: transformedRequests.filter((r: PhoneNumberRequest) => r.status === 'rejected').length,\n          completed: transformedRequests.filter((r: PhoneNumberRequest) => r.status === 'completed').length,\n          cancelled: transformedRequests.filter((r: PhoneNumberRequest) => r.status === 'cancelled').length,\n        },\n        byType: {\n          cancel: transformedRequests.filter((r: PhoneNumberRequest) => r.requestType === 'cancel').length,\n          transfer: transformedRequests.filter((r: PhoneNumberRequest) => r.requestType === 'transfer').length,\n          suspend: transformedRequests.filter((r: PhoneNumberRequest) => r.requestType === 'suspend').length,\n          modify: transformedRequests.filter((r: PhoneNumberRequest) => r.requestType === 'modify').length,\n        },\n        byPriority: {\n          urgent: transformedRequests.filter((r: PhoneNumberRequest) => r.priority === 'urgent').length,\n          high: transformedRequests.filter((r: PhoneNumberRequest) => r.priority === 'high').length,\n          medium: transformedRequests.filter((r: PhoneNumberRequest) => r.priority === 'medium').length,\n          low: transformedRequests.filter((r: PhoneNumberRequest) => r.priority === 'low').length,\n        },\n        oldestRequestDays: transformedRequests.length > 0 \n          ? Math.max(...transformedRequests.map((r: PhoneNumberRequest) => r.daysOpen))\n          : 0,\n        averageDaysOpen: transformedRequests.length > 0\n          ? Math.round(transformedRequests.reduce((sum: number, r: PhoneNumberRequest) => sum + r.daysOpen, 0) / transformedRequests.length)\n          : 0,\n      };\n      \n      setStats(statsData);\n    } catch (error) {\n      console.error('Error fetching phone number requests:', error);\n      setError(error instanceof Error ? error.message : 'Failed to load requests');\n      toast.error('Failed to load phone number requests');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchPhoneNumberRequests();\n  }, [limit]);\n\n  const handleRefresh = () => {\n    fetchPhoneNumberRequests();\n    onRefresh?.();\n  };\n\n  const getInitials = (name: string) => {\n    return name\n      .split(' ')\n      .map(n => n[0])\n      .join('')\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  const getPriorityBadgeVariant = (priority: string) => {\n    switch (priority) {\n      case 'urgent': return 'destructive';\n      case 'high': return 'secondary';\n      case 'medium': return 'outline';\n      case 'low': return 'outline';\n      default: return 'outline';\n    }\n  };\n\n  const getRequestTypeIcon = (type: string) => {\n    switch (type) {\n      case 'cancel': return <XCircle className=\"h-3 w-3 text-red-500\" />;\n      case 'transfer': return <PhoneCall className=\"h-3 w-3 text-blue-500\" />;\n      case 'suspend': return <Clock className=\"h-3 w-3 text-orange-500\" />;\n      case 'modify': return <AlertCircle className=\"h-3 w-3 text-purple-500\" />;\n      default: return <Phone className=\"h-3 w-3 text-gray-500\" />;\n    }\n  };\n\n  const getRequestTypeDisplayName = (type: string) => {\n    switch (type) {\n      case 'cancel': return 'Cancel';\n      case 'transfer': return 'Transfer';\n      case 'suspend': return 'Suspend';\n      case 'modify': return 'Modify';\n      default: return type.charAt(0).toUpperCase() + type.slice(1);\n    }\n  };\n\n  const formatDaysAgo = (daysOpen: number) => {\n    if (daysOpen === 0) return 'Today';\n    if (daysOpen === 1) return '1 day ago';\n    return `${daysOpen} days ago`;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-4 h-4 bg-muted rounded animate-pulse\" />\n            <div className=\"w-32 h-4 bg-muted rounded animate-pulse\" />\n          </div>\n          <div className=\"w-6 h-6 bg-muted rounded animate-pulse\" />\n        </div>\n        {[...Array(3)].map((_, i) => (\n          <div key={i} className=\"flex items-center space-x-3 p-3 border rounded-lg\">\n            <div className=\"w-10 h-10 bg-muted rounded-full animate-pulse\" />\n            <div className=\"flex-1 space-y-2\">\n              <div className=\"w-48 h-4 bg-muted rounded animate-pulse\" />\n              <div className=\"w-32 h-3 bg-muted rounded animate-pulse\" />\n            </div>\n            <div className=\"w-16 h-6 bg-muted rounded animate-pulse\" />\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"text-center py-8\">\n        <AlertTriangle className=\"h-12 w-12 text-red-500 mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold text-red-700 dark:text-red-300 mb-2\">\n          Error Loading Requests\n        </h3>\n        <p className=\"text-sm text-muted-foreground mb-4\">{error}</p>\n        <Button onClick={handleRefresh} variant=\"outline\" size=\"sm\">\n          <RefreshCw className=\"h-4 w-4 mr-2\" />\n          Try Again\n        </Button>\n      </div>\n    );\n  }\n\n  if (requests.length === 0) {\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"text-center py-8\">\n          <CheckCircle2 className=\"h-12 w-12 text-green-500 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold text-green-700 dark:text-green-300 mb-2\">\n            All Caught Up!\n          </h3>\n          <p className=\"text-sm text-muted-foreground mb-4\">\n            No pending phone number requests at the moment.\n          </p>\n          <Button onClick={handleRefresh} variant=\"outline\" size=\"sm\">\n            <RefreshCw className=\"h-4 w-4 mr-2\" />\n            Refresh\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-2\">\n          <Phone className=\"h-4 w-4 text-blue-500\" />\n          <span className=\"text-sm font-medium\">\n            {requests.length} pending request{requests.length !== 1 ? 's' : ''}\n          </span>\n          {stats && stats.averageDaysOpen > 0 && (\n            <Badge variant=\"outline\" className=\"text-xs\">\n              Avg {stats.averageDaysOpen} day{stats.averageDaysOpen !== 1 ? 's' : ''} open\n            </Badge>\n          )}\n        </div>\n        <Button\n          onClick={handleRefresh}\n          variant=\"ghost\"\n          size=\"sm\"\n          className=\"h-8 w-8 p-0\"\n        >\n          <RefreshCw className=\"h-4 w-4\" />\n        </Button>\n      </div>\n\n      {/* Quick Stats */}\n      {stats && isEditMode && (\n        <div className=\"grid grid-cols-2 gap-2 p-3 bg-muted/30 rounded-lg border-2 border-dashed border-primary/20\">\n          <div className=\"text-center\">\n            <div className=\"text-lg font-bold text-red-600\">{stats.byPriority.urgent + stats.byPriority.high}</div>\n            <div className=\"text-xs text-muted-foreground\">High Priority</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-lg font-bold text-orange-600\">{stats.oldestRequestDays}</div>\n            <div className=\"text-xs text-muted-foreground\">Oldest (days)</div>\n          </div>\n        </div>\n      )}\n\n      {/* Requests List */}\n      <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n        {requests.map((request, index) => (\n          <div key={request._id}>\n            <div className=\"flex items-center space-x-3 p-3 border rounded-lg hover:bg-muted/50 transition-colors\">\n              {/* User Avatar and Info */}\n              <div className=\"flex items-center space-x-3\">\n                {/* Avatar */}\n                <Avatar className=\"h-10 w-10\">\n                  <AvatarFallback className=\"text-xs font-medium bg-gradient-to-br from-blue-500 to-purple-600 text-white\">\n                    {getInitials(request.user.name)}\n                  </AvatarFallback>\n                </Avatar>\n                \n                {/* User Details */}\n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"flex items-center space-x-2 min-w-0\">\n                      <p className=\"text-sm font-medium text-gray-900 dark:text-gray-100 truncate\">\n                        {request.user.name}\n                      </p>\n                      {request.user.company && (\n                        <>\n                          <span className=\"text-muted-foreground\">•</span>\n                          <span className=\"text-sm text-muted-foreground truncate\">{request.user.company}</span>\n                        </>\n                      )}\n                    </div>\n                  </div>\n                  <p className=\"text-xs text-muted-foreground truncate\">\n                    {request.user.email}\n                  </p>\n                </div>\n              </div>\n\n              {/* Request Info */}\n              <div className=\"flex-1 min-w-0\">\n                <div className=\"flex items-center space-x-2 mb-1\">\n                  <code className=\"text-xs font-mono bg-muted px-1 py-0.5 rounded\">\n                    {request.requestNumber}\n                  </code>\n                  <Badge \n                    variant={getPriorityBadgeVariant(request.priority)} \n                    className=\"text-xs\"\n                  >\n                    {request.priority.toUpperCase()}\n                  </Badge>\n                  <div className=\"flex items-center space-x-1\">\n                    {getRequestTypeIcon(request.requestType)}\n                    <span className=\"text-xs text-muted-foreground\">\n                      {getRequestTypeDisplayName(request.requestType)}\n                    </span>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center space-x-2 mb-1\">\n                  <Phone className=\"h-3 w-3 text-muted-foreground\" />\n                  <span className=\"text-sm font-medium\">{request.phoneNumber.number}</span>\n                  <span className=\"text-xs text-muted-foreground\">({request.phoneNumber.country})</span>\n                </div>\n                \n                <div className=\"flex items-center space-x-4 text-xs text-muted-foreground\">\n                  <div className=\"flex items-center space-x-1\">\n                    <Calendar className=\"h-3 w-3\" />\n                    <span>{formatDaysAgo(request.daysOpen)}</span>\n                  </div>\n                </div>\n\n                <p className=\"text-xs text-muted-foreground mt-1 truncate\" title={request.reason}>\n                  {request.reason}\n                </p>\n              </div>\n\n              {/* Actions */}\n              <div className=\"flex items-center space-x-2\">\n                <Link href={`/admin/phone-number-requests`} passHref>\n                  <Button variant=\"outline\" size=\"sm\" className=\"h-8\">\n                    <ExternalLink className=\"h-3 w-3 mr-1\" />\n                    View\n                  </Button>\n                </Link>\n              </div>\n            </div>\n            \n            {index < requests.length - 1 && <Separator className=\"my-2\" />}\n          </div>\n        ))}\n      </div>\n\n      {/* Summary Footer */}\n      {requests.length > 0 && stats && (\n        <div className=\"pt-3 border-t\">\n          <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n            <span>\n              Showing {requests.length} pending request{requests.length !== 1 ? 's' : ''}\n            </span>\n            <span>\n              {stats.byPriority.urgent} urgent, {stats.byPriority.high} high priority\n            </span>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/admin/UnsolvedTicketsCard.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchUnsolvedTickets'. Either include it or remove the dependency array.","line":109,"column":6,"nodeType":"ArrayExpression","endLine":109,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [fetchUnsolvedTickets, limit]","fix":{"range":[2556,2563],"text":"[fetchUnsolvedTickets, limit]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\nimport { Separator } from '@/components/ui/separator';\nimport { \n  AlertTriangle, \n  RefreshCw, \n  Ticket, \n  User,\n  ExternalLink,\n  MessageSquare,\n  Calendar,\n  AlertCircle,\n  CheckCircle2,\n  Timer,\n  UserCheck\n} from 'lucide-react';\nimport Link from 'next/link';\nimport { toast } from 'sonner';\n\ninterface UnsolvedTicket {\n  id: string;\n  ticketNumber: string;\n  title: string;\n  service: string;\n  priority: 'low' | 'medium' | 'high' | 'urgent';\n  status: string;\n  createdAt: Date;\n  updatedAt: Date;\n  user: {\n    id: string;\n    name: string;\n    email: string;\n    companyName?: string;\n  };\n  assignedTo?: {\n    id: string;\n    name: string;\n    email: string;\n  };\n  daysOpen: number;\n  lastReplyAt?: Date;\n  replyCount: number;\n}\n\ninterface TicketStats {\n  total: number;\n  byStatus: {\n    open: number;\n    in_progress: number;\n    waiting_user: number;\n    waiting_admin: number;\n  };\n  byPriority: {\n    urgent: number;\n    high: number;\n    medium: number;\n    low: number;\n  };\n  oldestTicketDays: number;\n  averageDaysOpen: number;\n}\n\ninterface UnsolvedTicketsCardProps {\n  onRefresh?: () => void;\n  limit?: number;\n  isEditMode?: boolean;\n}\n\nexport function UnsolvedTicketsCard({ \n  onRefresh, \n  limit = 10,\n  isEditMode = false\n}: UnsolvedTicketsCardProps) {\n  const [tickets, setTickets] = useState<UnsolvedTicket[]>([]);\n  const [stats, setStats] = useState<TicketStats | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchUnsolvedTickets = async () => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      \n      const response = await fetch(`/api/admin/unsolved-tickets?limit=${limit}`);\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to fetch unsolved tickets');\n      }\n      \n      const data = await response.json();\n      setTickets(data.tickets || []);\n      setStats(data.stats || null);\n    } catch (error) {\n      console.error('Error fetching unsolved tickets:', error);\n      setError(error instanceof Error ? error.message : 'Failed to load tickets');\n      toast.error('Failed to load unsolved tickets');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchUnsolvedTickets();\n  }, [limit]);\n\n  const handleRefresh = () => {\n    fetchUnsolvedTickets();\n    onRefresh?.();\n  };\n\n  const getInitials = (name: string) => {\n    return name\n      .split(' ')\n      .map(n => n[0])\n      .join('')\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  const getPriorityBadgeVariant = (priority: string) => {\n    switch (priority) {\n      case 'urgent': return 'destructive';\n      case 'high': return 'secondary';\n      case 'medium': return 'outline';\n      case 'low': return 'outline';\n      default: return 'outline';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'open': return <AlertCircle className=\"h-3 w-3 text-red-500\" />;\n      case 'in_progress': return <Timer className=\"h-3 w-3 text-blue-500\" />;\n      case 'waiting_user': return <User className=\"h-3 w-3 text-orange-500\" />;\n      case 'waiting_admin': return <UserCheck className=\"h-3 w-3 text-purple-500\" />;\n      default: return <Ticket className=\"h-3 w-3 text-gray-500\" />;\n    }\n  };\n\n  const getStatusDisplayName = (status: string) => {\n    switch (status) {\n      case 'open': return 'Open';\n      case 'in_progress': return 'In Progress';\n      case 'waiting_user': return 'Waiting User';\n      case 'waiting_admin': return 'Waiting Admin';\n      default: return status.replace('_', ' ').replace(/\\b\\w/g, l => l.toUpperCase());\n    }\n  };\n\n  const getServiceDisplayName = (service: string) => {\n    const serviceNames = {\n      'outbound_calls': 'Outbound Calls',\n      'inbound_calls': 'Inbound Calls',\n      'did_numbers': 'DID Numbers',\n      'sms': 'SMS',\n      'emailing': 'Email',\n      'whatsapp_business': 'WhatsApp Business',\n      'billing': 'Billing',\n      'technical': 'Technical',\n      'other': 'Other'\n    };\n    return serviceNames[service as keyof typeof serviceNames] || service.replace('_', ' ').replace(/\\b\\w/g, l => l.toUpperCase());\n  };\n\n  const formatDaysAgo = (daysOpen: number) => {\n    if (daysOpen === 0) return 'Today';\n    if (daysOpen === 1) return '1 day ago';\n    return `${daysOpen} days ago`;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-4 h-4 bg-muted rounded animate-pulse\" />\n            <div className=\"w-32 h-4 bg-muted rounded animate-pulse\" />\n          </div>\n          <div className=\"w-6 h-6 bg-muted rounded animate-pulse\" />\n        </div>\n        {[...Array(3)].map((_, i) => (\n          <div key={i} className=\"flex items-center space-x-3 p-3 border rounded-lg\">\n            <div className=\"w-10 h-10 bg-muted rounded-full animate-pulse\" />\n            <div className=\"flex-1 space-y-2\">\n              <div className=\"w-48 h-4 bg-muted rounded animate-pulse\" />\n              <div className=\"w-32 h-3 bg-muted rounded animate-pulse\" />\n            </div>\n            <div className=\"w-16 h-6 bg-muted rounded animate-pulse\" />\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"text-center py-8\">\n        <AlertTriangle className=\"h-12 w-12 text-red-500 mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold text-red-700 dark:text-red-300 mb-2\">\n          Error Loading Tickets\n        </h3>\n        <p className=\"text-sm text-muted-foreground mb-4\">{error}</p>\n        <Button onClick={handleRefresh} variant=\"outline\" size=\"sm\">\n          <RefreshCw className=\"h-4 w-4 mr-2\" />\n          Try Again\n        </Button>\n      </div>\n    );\n  }\n\n  if (tickets.length === 0) {\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"text-center py-8\">\n          <CheckCircle2 className=\"h-12 w-12 text-green-500 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold text-green-700 dark:text-green-300 mb-2\">\n            All Caught Up!\n          </h3>\n          <p className=\"text-sm text-muted-foreground mb-4\">\n            No unsolved tickets at the moment. Great work!\n          </p>\n          <Button onClick={handleRefresh} variant=\"outline\" size=\"sm\">\n            <RefreshCw className=\"h-4 w-4 mr-2\" />\n            Refresh\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-2\">\n          <Ticket className=\"h-4 w-4 text-orange-500\" />\n          <span className=\"text-sm font-medium\">\n            {tickets.length} unsolved ticket{tickets.length !== 1 ? 's' : ''}\n          </span>\n          {stats && stats.averageDaysOpen > 0 && (\n            <Badge variant=\"outline\" className=\"text-xs\">\n              Avg {stats.averageDaysOpen} day{stats.averageDaysOpen !== 1 ? 's' : ''} open\n            </Badge>\n          )}\n        </div>\n        <Button\n          onClick={handleRefresh}\n          variant=\"ghost\"\n          size=\"sm\"\n          className=\"h-8 w-8 p-0\"\n        >\n          <RefreshCw className=\"h-4 w-4\" />\n        </Button>\n      </div>\n\n      {/* Quick Stats */}\n      {stats && isEditMode && (\n        <div className=\"grid grid-cols-2 gap-2 p-3 bg-muted/30 rounded-lg border-2 border-dashed border-primary/20\">\n          <div className=\"text-center\">\n            <div className=\"text-lg font-bold text-red-600\">{stats.byPriority.urgent + stats.byPriority.high}</div>\n            <div className=\"text-xs text-muted-foreground\">High Priority</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-lg font-bold text-orange-600\">{stats.oldestTicketDays}</div>\n            <div className=\"text-xs text-muted-foreground\">Oldest (days)</div>\n          </div>\n        </div>\n      )}\n\n      {/* Tickets List */}\n      <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n        {tickets.map((ticket, index) => (\n          <div key={ticket.id}>\n            <div className=\"flex items-center space-x-3 p-3 border rounded-lg hover:bg-muted/50 transition-colors\">\n              {/* User Avatar and Info */}\n              <div className=\"flex items-center space-x-3\">\n                {/* Avatar */}\n                <Avatar className=\"h-10 w-10\">\n                  <AvatarFallback className=\"text-xs font-medium bg-gradient-to-br from-blue-500 to-purple-600 text-white\">\n                    {getInitials(ticket.user.name)}\n                  </AvatarFallback>\n                </Avatar>\n                \n                {/* User Details */}\n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"flex items-center space-x-2\">\n                    <p className=\"text-sm font-medium text-gray-900 dark:text-gray-100 truncate\">\n                      {ticket.user.name}\n                    </p>\n                    {ticket.assignedTo && (\n                      <Badge variant=\"secondary\" className=\"text-xs\">\n                        <UserCheck className=\"w-3 h-3 mr-1\" />\n                        Assigned\n                      </Badge>\n                    )}\n                  </div>\n                  {ticket.user.companyName && (\n                    <p className=\"text-xs text-muted-foreground truncate\">\n                      {ticket.user.companyName}\n                    </p>\n                  )}\n                  <p className=\"text-xs text-muted-foreground truncate\">\n                    {ticket.user.email}\n                  </p>\n                </div>\n              </div>\n\n              {/* Ticket Info */}\n              <div className=\"flex-1 min-w-0\">\n                <div className=\"flex items-center space-x-2 mb-1\">\n                  <code className=\"text-xs font-mono bg-muted px-1 py-0.5 rounded\">\n                    {ticket.ticketNumber}\n                  </code>\n                  <Badge \n                    variant={getPriorityBadgeVariant(ticket.priority)} \n                    className=\"text-xs\"\n                  >\n                    {ticket.priority.toUpperCase()}\n                  </Badge>\n                  <div className=\"flex items-center space-x-1\">\n                    {getStatusIcon(ticket.status)}\n                    <span className=\"text-xs text-muted-foreground\">\n                      {getStatusDisplayName(ticket.status)}\n                    </span>\n                  </div>\n                </div>\n                \n                <h4 className=\"text-sm font-medium truncate mb-1\" title={ticket.title}>\n                  {ticket.title}\n                </h4>\n                \n                <div className=\"flex items-center space-x-4 text-xs text-muted-foreground\">\n                  <div className=\"flex items-center space-x-1\">\n                    <Calendar className=\"h-3 w-3\" />\n                    <span>{formatDaysAgo(ticket.daysOpen)}</span>\n                  </div>\n\n                  {ticket.replyCount > 0 && (\n                    <div className=\"flex items-center space-x-1\">\n                      <MessageSquare className=\"h-3 w-3\" />\n                      <span>{ticket.replyCount}</span>\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"flex items-center space-x-2 mt-1\">\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    {getServiceDisplayName(ticket.service)}\n                  </Badge>\n                  {ticket.assignedTo && (\n                    <Badge variant=\"secondary\" className=\"text-xs\">\n                      Assigned to {ticket.assignedTo.name}\n                    </Badge>\n                  )}\n                </div>\n              </div>\n\n              {/* Actions */}\n              <div className=\"flex items-center space-x-2\">\n                <Link href={`/tickets/${ticket.id}`} passHref>\n                  <Button variant=\"outline\" size=\"sm\" className=\"h-8\">\n                    <ExternalLink className=\"h-3 w-3 mr-1\" />\n                    View\n                  </Button>\n                </Link>\n              </div>\n            </div>\n            \n            {index < tickets.length - 1 && <Separator className=\"my-2\" />}\n          </div>\n        ))}\n      </div>\n\n      {/* Summary Footer */}\n      {tickets.length > 0 && stats && (\n        <div className=\"pt-3 border-t\">\n          <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n            <span>\n              Showing {tickets.length} of {stats.total} unsolved ticket{stats.total !== 1 ? 's' : ''}\n            </span>\n            <span>\n              {stats.byPriority.urgent} urgent, {stats.byPriority.high} high priority\n            </span>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/admin/UserAttentionCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/auth/AuthLayout.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":159,"column":19,"nodeType":"JSXOpeningElement","endLine":163,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { ReactNode } from 'react';\nimport { motion } from 'framer-motion';\nimport { useBranding } from '@/lib/BrandingContext';\nimport { useBranding as useBrandingHook } from '@/hooks/useBranding';\nimport { Phone, BarChart3, Shield } from 'lucide-react';\n\ninterface AuthLayoutProps {\n  children: ReactNode;\n  title: string;\n  subtitle: string;\n  inverted?: boolean;\n}\n\nexport function AuthLayout({ children, title, subtitle, inverted = false }: AuthLayoutProps) {\n  const { settings } = useBranding();\n  const { getAuthFormBackgroundColor } = useBrandingHook();\n\n  // Don't show any content until branding is loaded to prevent FOUC\n  const companyName = settings.companyName || 'Sippy Communications';\n  const logoUrl = settings.logoUrl;\n  const logoAltText = settings.logoAltText || 'Company Logo';\n  \n  // Use CSS variables directly instead of hardcoded fallbacks\n  const gradientStart = settings.gradientStartColor || 'var(--brand-gradient-start)';\n  const gradientMiddle = settings.gradientMiddleColor || 'var(--brand-gradient-middle)';\n  const gradientEnd = settings.gradientEndColor || 'var(--brand-gradient-end)';\n  const enableGradientBackground = settings.enableGradientBackground !== false;\n  const enableGlassMorphism = settings.enableGlassMorphism !== false;\n  const enableAnimations = settings.enableAnimations !== false;\n\n  // Create dynamic gradient style\n  const gradientStyle = enableGradientBackground \n    ? {\n        background: `linear-gradient(135deg, ${gradientStart} 0%, ${gradientMiddle} 50%, ${gradientEnd} 100%)`\n      }\n    : {\n        background: gradientStart\n      };\n\n  // Animation variants for floating elements\n  const floatingVariants = {\n    animate: {\n      y: [-20, 20, -20],\n      x: [-10, 10, -10],\n      rotate: [0, 360],\n      transition: {\n        duration: 20,\n        repeat: Infinity,\n        ease: \"linear\"\n      }\n    }\n  };\n\n  const pulseVariants = {\n    animate: {\n      scale: [1, 1.2, 1],\n      opacity: [0.5, 0.8, 0.5],\n      transition: {\n        duration: 4,\n        repeat: Infinity,\n        ease: \"easeInOut\"\n      }\n    }\n  };\n\n  // Simplified features data\n  const features = [\n    {\n      icon: Phone,\n      title: \"Real-Time Call Management\",\n      description: \"Monitor and control calls with precision\",\n      color: \"text-cyan-800\"\n    },\n    {\n      icon: BarChart3,\n      title: \"Advanced Analytics\",\n      description: \"AI-powered insights and reporting\",\n      color: \"text-emerald-800\"\n    },\n    {\n      icon: Shield,\n      title: \"Enterprise Security\",\n      description: \"Bank-level encryption and compliance\",\n      color: \"text-purple-800\"\n    }\n  ];\n\n  // Branding Panel Component\n  const BrandingPanel = () => (\n    <div className=\"hidden lg:flex lg:w-1/2 relative overflow-hidden\">\n      {/* Dynamic Gradient Background */}\n      <div \n        className=\"absolute inset-0\" \n        style={gradientStyle}\n      />\n      \n      {/* Simplified Animated Background Elements */}\n      {enableAnimations && (\n        <div className=\"absolute inset-0\">\n          {/* Large Gradient Orbs */}\n          <motion.div \n            className=\"absolute top-20 left-20 w-72 h-72 bg-white/10 rounded-full blur-3xl\"\n            variants={pulseVariants}\n            animate=\"animate\"\n          />\n          <motion.div \n            className=\"absolute bottom-20 right-20 w-96 h-96 bg-cyan-400/20 rounded-full blur-3xl\"\n            variants={pulseVariants}\n            animate=\"animate\"\n            transition={{ delay: 2 }}\n          />\n          <motion.div \n            className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-80 h-80 bg-pink-400/15 rounded-full blur-3xl\"\n            variants={pulseVariants}\n            animate=\"animate\"\n            transition={{ delay: 1 }}\n          />\n\n          {/* Floating Geometric Shapes */}\n          <motion.div\n            className=\"absolute top-32 right-32\"\n            variants={floatingVariants}\n            animate=\"animate\"\n          >\n            <div className=\"w-16 h-16 bg-white/20 backdrop-blur-sm rounded-lg rotate-45 shadow-lg\" />\n          </motion.div>\n\n          <motion.div\n            className=\"absolute bottom-32 left-40\"\n            variants={floatingVariants}\n            animate=\"animate\"\n            transition={{ delay: 5 }}\n          >\n            <div className=\"w-12 h-12 bg-cyan-400/30 backdrop-blur-sm rounded-full shadow-lg\" />\n          </motion.div>\n        </div>\n      )}\n\n      {/* Content */}\n      <div className=\"relative z-10 flex flex-col justify-center px-12 text-white\">\n        <motion.div\n          initial={enableAnimations ? { opacity: 0, y: 20 } : { opacity: 1, y: 0 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"space-y-12\"\n        >\n          {/* Header Section */}\n          <div>\n            <div className=\"flex items-center space-x-4 mb-8\">\n              {/* Dynamic Logo or Icon */}\n              {logoUrl ? (\n                <motion.div \n                  className=\"w-14 h-14 bg-white/25 backdrop-blur-md rounded-2xl flex items-center justify-center overflow-hidden border border-white/40 shadow-lg\"\n                  whileHover={{ scale: 1.1, rotate: 5 }}\n                  transition={{ type: \"spring\", stiffness: 300 }}\n                >\n                  <img\n                    src={logoUrl}\n                    alt={logoAltText}\n                    className=\"w-9 h-9 object-contain drop-shadow-sm\"\n                  />\n                </motion.div>\n              ) : (\n                <motion.div \n                  className=\"w-14 h-14 bg-white/25 backdrop-blur-md rounded-2xl flex items-center justify-center border border-white/40 shadow-lg\"\n                  whileHover={{ scale: 1.1, rotate: 5 }}\n                  transition={{ type: \"spring\", stiffness: 300 }}\n                >\n                  <Phone className=\"w-8 h-8 text-white drop-shadow-sm\" />\n                </motion.div>\n              )}\n              <div>\n                <h1 className=\"text-3xl font-bold tracking-tight\">{companyName}</h1>\n                <div className=\"flex items-center space-x-2 mt-1\">\n                  <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n                  <span className=\"text-sm text-white/80\">Live & Operational</span>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"space-y-6\">\n              <h2 className=\"text-5xl font-bold leading-tight\">\n                Transform Your\n                <span className=\"block bg-gradient-to-r from-cyan-300 via-white to-violet-300 bg-clip-text text-transparent\">\n                  Communication\n                </span>\n                <span className=\"block text-3xl text-white/90 font-medium\">\n                  Infrastructure\n                </span>\n              </h2>\n              \n              <p className=\"text-xl text-white/85 leading-relaxed max-w-lg\">\n                Enterprise-grade voice solutions powered by AI and built for scale. \n                Join thousands of businesses revolutionizing their workflows.\n              </p>\n            </div>\n          </div>\n\n          {/* Features Section */}\n          <div className=\"space-y-6\">\n            {features.map((feature, index) => (\n              <motion.div \n                key={index}\n                className=\"flex items-start space-x-4 group\"\n                initial={enableAnimations ? { opacity: 0, x: -20 } : { opacity: 1, x: 0 }}\n                animate={{ opacity: 1, x: 0 }}\n                transition={{ delay: 0.3 + index * 0.1, duration: 0.6 }}\n                whileHover={{ x: 10 }}\n              >\n                <motion.div \n                  className={`flex-shrink-0 w-12 h-12 bg-white/25 backdrop-blur-md rounded-xl flex items-center justify-center border border-white/40 group-hover:bg-white/35 group-hover:border-white/60 transition-all duration-300 shadow-lg`}\n                  whileHover={{ scale: 1.1 }}\n                >\n                  <feature.icon className={`w-6 h-6 ${feature.color} drop-shadow-sm`} />\n                </motion.div>\n                <div className=\"flex-1\">\n                  <h3 className=\"text-lg font-semibold text-white mb-1 drop-shadow-sm\">{feature.title}</h3>\n                  <p className=\"text-white/80 text-sm leading-relaxed drop-shadow-sm\">{feature.description}</p>\n                </div>\n              </motion.div>\n            ))}\n          </div>\n\n          {/* Enhanced Trust Indicators */}\n          <motion.div \n            className=\"pt-8 border-t border-white/20\"\n            initial={enableAnimations ? { opacity: 0 } : { opacity: 1 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 0.8, duration: 0.6 }}\n          >\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                {/* Company Logos */}\n                <div className=\"flex -space-x-2\">\n                  {/* Company 1 - Generic Tech */}\n                  <div \n                    className=\"w-8 h-8 rounded-full border-2 border-white/30 flex items-center justify-center text-xs font-bold text-white shadow-lg\"\n                    style={{ \n                      background: `linear-gradient(135deg, ${settings.primaryColor || '#7c3aed'}, ${settings.secondaryColor || '#a855f7'})` \n                    }}\n                  >\n                    T\n                  </div>\n                  {/* Company 2 - Generic Enterprise */}\n                  <div \n                    className=\"w-8 h-8 rounded-full border-2 border-white/30 flex items-center justify-center text-xs font-bold text-white shadow-lg\"\n                    style={{ \n                      background: `linear-gradient(135deg, ${settings.secondaryColor || '#a855f7'}, ${settings.accentColor || '#06b6d4'})` \n                    }}\n                  >\n                    E\n                  </div>\n                  {/* Company 3 - Generic Solutions */}\n                  <div \n                    className=\"w-8 h-8 rounded-full border-2 border-white/30 flex items-center justify-center text-xs font-bold text-white shadow-lg\"\n                    style={{ \n                      background: `linear-gradient(135deg, ${settings.accentColor || '#06b6d4'}, ${settings.primaryColor || '#7c3aed'})` \n                    }}\n                  >\n                    S\n                  </div>\n                </div>\n                <div>\n                  <div className=\"text-sm font-medium text-white drop-shadow-sm\">10,000+ Users</div>\n                  <div className=\"text-xs text-white/70 drop-shadow-sm\">Trusted by leading companies</div>\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"flex space-x-1\">\n                  {[1,2,3,4,5].map((i) => (\n                    <div \n                      key={i} \n                      className=\"w-3 h-3 rounded-full shadow-sm\"\n                      style={{ \n                        backgroundColor: settings.accentColor || '#06b6d4'\n                      }}\n                    ></div>\n                  ))}\n                </div>\n                <span className=\"text-sm text-white/90 drop-shadow-sm font-medium\">4.9/5</span>\n              </div>\n            </div>\n          </motion.div>\n        </motion.div>\n      </div>\n    </div>\n  );\n\n  // Form Panel Component\n  const FormPanel = () => (\n    <div \n      className=\"w-full lg:w-1/2 flex items-center justify-center p-8 relative\"\n      style={{ backgroundColor: getAuthFormBackgroundColor() }}\n    >\n      {/* Mobile Background */}\n      <div \n        className=\"lg:hidden absolute inset-0 opacity-10\" \n        style={gradientStyle}\n      />\n      \n      {/* Simplified Background Elements for Form Side */}\n      {enableAnimations && (\n        <div className=\"absolute inset-0 overflow-hidden\">\n          <motion.div\n            className=\"absolute top-20 right-20 w-32 h-32 bg-violet-200/20 rounded-full blur-2xl\"\n            animate={{\n              scale: [1, 1.3, 1],\n              opacity: [0.3, 0.6, 0.3],\n            }}\n            transition={{\n              duration: 6,\n              repeat: Infinity,\n              ease: \"easeInOut\"\n            }}\n          />\n          <motion.div\n            className=\"absolute bottom-32 left-16 w-24 h-24 bg-purple-200/20 rounded-full blur-2xl\"\n            animate={{\n              scale: [1, 1.2, 1],\n              opacity: [0.2, 0.5, 0.2],\n            }}\n            transition={{\n              duration: 8,\n              repeat: Infinity,\n              ease: \"easeInOut\",\n              delay: 2\n            }}\n          />\n        </div>\n      )}\n      \n      {/* Auth Card */}\n      <motion.div\n        initial={enableAnimations ? { opacity: 0, x: inverted ? -20 : 20 } : { opacity: 1, x: 0 }}\n        animate={{ opacity: 1, x: 0 }}\n        transition={{ duration: 0.8, delay: 0.2 }}\n        className=\"w-full max-w-md relative z-10\"\n      >\n        {/* Glass Card Effect */}\n        <div \n          className={`${\n            enableGlassMorphism \n              ? 'bg-white/90 dark:bg-black/20 backdrop-blur-xl border border-white/30 dark:border-white/10' \n              : 'bg-white/95 dark:bg-gray-900/95 border border-gray-200 dark:border-gray-700'\n          } rounded-2xl shadow-2xl p-8`}\n        >\n          <div className=\"text-center mb-8\">\n            <h3 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100 mb-2\">{title}</h3>\n            <p className=\"text-gray-600 dark:text-gray-400\">{subtitle}</p>\n          </div>\n          \n          {children}\n        </div>\n        \n        {/* Simplified Decorative Elements */}\n        {enableAnimations && (\n          <>\n            <motion.div \n              className=\"absolute -top-4 -right-4 w-20 h-20 bg-gradient-to-br from-cyan-400 to-blue-500 rounded-full opacity-20 blur-xl\"\n              animate={{\n                scale: [1, 1.2, 1],\n                rotate: [0, 180, 360],\n              }}\n              transition={{\n                duration: 10,\n                repeat: Infinity,\n                ease: \"linear\"\n              }}\n            />\n            <motion.div \n              className=\"absolute -bottom-4 -left-4 w-16 h-16 bg-gradient-to-br from-pink-400 to-purple-500 rounded-full opacity-20 blur-xl\"\n              animate={{\n                scale: [1, 1.3, 1],\n                rotate: [360, 180, 0],\n              }}\n              transition={{\n                duration: 12,\n                repeat: Infinity,\n                ease: \"linear\"\n              }}\n            />\n          </>\n        )}\n      </motion.div>\n    </div>\n  );\n\n  return (\n    <div className=\"min-h-screen flex relative overflow-hidden\">\n      {/* Conditional Layout Based on Inverted Prop */}\n      {inverted ? (\n        <>\n          <FormPanel />\n          <BrandingPanel />\n        </>\n      ) : (\n        <>\n          <BrandingPanel />\n          <FormPanel />\n        </>\n      )}\n    </div>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/auth/EmailVerificationForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/auth/LoginForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":68,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2009,2012],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2009,2012],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useForm } from 'react-hook-form';\nimport { z } from 'zod';\nimport { motion } from 'framer-motion';\nimport { Eye, EyeOff, Mail, Lock, Loader2, ArrowRight } from 'lucide-react';\nimport { toast } from 'sonner';\nimport Link from 'next/link';\n\nimport { Button } from '@/components/ui/button';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { useAuth } from '@/lib/AuthContext';\nimport { EmailVerificationForm } from '@/components/auth/EmailVerificationForm';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport { handleAuthError } from '@/lib/apiErrorHandler';\n\n// Form validation schema\nconst formSchema = z.object({\n  email: z.string().email({ message: 'Please enter a valid email' }),\n  password: z.string().min(1, { message: 'Password is required' }),\n});\n\nexport function LoginForm() {\n  const { login } = useAuth();\n  const [isLoading, setIsLoading] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  const [showVerificationModal, setShowVerificationModal] = useState(false);\n  const [verificationEmail, setVerificationEmail] = useState('');\n  const [showErrorDialog, setShowErrorDialog] = useState(false);\n  const [modalShake, setModalShake] = useState(false);\n  const [errorDialogContent, setErrorDialogContent] = useState({\n    title: '',\n    message: '',\n    description: ''\n  });\n\n  // Form definition\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      email: '',\n      password: '',\n    },\n  });\n\n  // Form submission handler\n  async function onSubmit(values: z.infer<typeof formSchema>) {\n    setIsLoading(true);\n    \n    try {\n      await login(values.email, values.password);\n      \n    } catch (error: any) {\n      // Handle different error types\n      if (error?.code === 'EMAIL_NOT_VERIFIED') {\n        setVerificationEmail(values.email);\n        setShowVerificationModal(true);\n        toast.error(error.message || 'Email verification required');\n      } else {\n        const errorData = handleAuthError(error);\n        setErrorDialogContent({\n          title: errorData.title,\n          message: errorData.message,\n          description: errorData.description\n        });\n        setShowErrorDialog(true);\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  const handleVerificationSuccess = async () => {\n    setShowVerificationModal(false);\n    \n    // Automatically attempt login after verification\n    try {\n      const formValues = form.getValues();\n      toast.success('Email verified successfully! Logging you in...');\n      await login(formValues.email, formValues.password);\n    } catch {\n      toast.error('Verification successful, but auto-login failed. Please sign in manually.');\n    }\n  };\n\n  const handleBackToLogin = () => {\n    setShowVerificationModal(false);\n    setVerificationEmail('');\n  };\n\n  // Function to trigger shake animation when trying to close modal\n  const triggerModalShake = () => {\n    setModalShake(true);\n    setTimeout(() => setModalShake(false), 500); // Reset after animation\n  };\n\n  return (\n    <div className=\"w-full space-y-4\">\n      {/* Main Form */}\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n          {/* Email Field */}\n          <FormField\n            control={form.control}\n            name=\"email\"\n            render={({ field }) => (\n              <FormItem>\n                <FormControl>\n                  <div className=\"relative group\">\n                    <div className=\"absolute inset-y-0 left-0 flex items-center pl-4 pointer-events-none\">\n                      <Mail className=\"h-5 w-5 text-gray-400 dark:text-gray-500 group-focus-within:text-[var(--brand-primary)] transition-colors duration-200\" />\n                    </div>\n                    <Input\n                      type=\"email\"\n                      placeholder=\"Email address\"\n                      className=\"pl-12 h-12 bg-gray-50 dark:bg-gray-800/50 border-gray-200 dark:border-gray-700 focus:bg-white dark:focus:bg-gray-800 focus:border-[var(--brand-primary)] focus:ring-4 focus:ring-[var(--brand-primary)]/10 rounded-xl transition-all duration-200 placeholder:text-gray-400 dark:placeholder:text-gray-500 hover:border-gray-300 dark:hover:border-gray-600\"\n                      {...field}\n                    />\n                  </div>\n                </FormControl>\n                <FormMessage className=\"text-red-500 dark:text-red-400 text-sm\" />\n              </FormItem>\n            )}\n          />\n\n          {/* Password Field */}\n          <FormField\n            control={form.control}\n            name=\"password\"\n            render={({ field }) => (\n              <FormItem>\n                <FormControl>\n                  <div className=\"relative group\">\n                    <div className=\"absolute inset-y-0 left-0 flex items-center pl-4 pointer-events-none\">\n                      <Lock className=\"h-5 w-5 text-gray-400 dark:text-gray-500 group-focus-within:text-[var(--brand-primary)] transition-colors duration-200\" />\n                    </div>\n                    <Input\n                      type={showPassword ? 'text' : 'password'}\n                      placeholder=\"Password\"\n                      className=\"pl-12 pr-12 h-12 bg-gray-50 dark:bg-gray-800/50 border-gray-200 dark:border-gray-700 focus:bg-white dark:focus:bg-gray-800 focus:border-[var(--brand-primary)] focus:ring-4 focus:ring-[var(--brand-primary)]/10 rounded-xl transition-all duration-200 placeholder:text-gray-400 dark:placeholder:text-gray-500 hover:border-gray-300 dark:hover:border-gray-600\"\n                      {...field}\n                    />\n                    <button\n                      type=\"button\"\n                      onClick={() => setShowPassword(!showPassword)}\n                      className=\"absolute inset-y-0 right-0 flex items-center pr-4 text-gray-400 dark:text-gray-500 hover:text-gray-600 dark:hover:text-gray-400 transition-colors duration-200\"\n                    >\n                      {showPassword ? (\n                        <EyeOff className=\"h-5 w-5\" />\n                      ) : (\n                        <Eye className=\"h-5 w-5\" />\n                      )}\n                    </button>\n                  </div>\n                </FormControl>\n                <FormMessage className=\"text-red-500 dark:text-red-400 text-sm\" />\n              </FormItem>\n            )}\n          />\n\n          {/* Forgot Password Link */}\n          <div className=\"flex justify-end\">\n            <Link \n              href=\"/forgot-password\" \n              className=\"text-sm text-[var(--brand-primary)] dark:text-blue-400 hover:text-[var(--brand-primary)]/80 dark:hover:text-blue-300 transition-colors duration-200 font-medium\"\n            >\n              Forgot password?\n            </Link>\n          </div>\n\n          {/* Submit Button */}\n          <motion.div\n            whileHover={{ scale: 1.01 }}\n            whileTap={{ scale: 0.99 }}\n          >\n            <Button\n              type=\"submit\"\n              disabled={isLoading}\n              className=\"w-full h-12 bg-[var(--brand-primary)] hover:bg-[var(--brand-primary)]/90 text-white font-semibold rounded-xl transition-all duration-300 shadow-lg hover:shadow-xl disabled:opacity-50 disabled:cursor-not-allowed group transform hover:-translate-y-0.5 border-0\"\n            >\n              {isLoading ? (\n                <>\n                  <Loader2 className=\"w-5 h-5 animate-spin mr-2\" />\n                  Signing in...\n                </>\n              ) : (\n                <>\n                  Sign In\n                  <ArrowRight className=\"w-5 h-5 ml-2 group-hover:translate-x-1 transition-transform duration-200\" />\n                </>\n              )}\n            </Button>\n          </motion.div>\n        </form>\n      </Form>\n\n      {/* Divider */}\n      <div className=\"relative\">\n        <div className=\"absolute inset-0 flex items-center\">\n          <span className=\"w-full border-t border-gray-200 dark:border-gray-700\" />\n        </div>\n        <div className=\"relative flex justify-center text-xs uppercase\">\n          <span className=\"bg-white dark:bg-gray-900 px-4 text-gray-500 dark:text-gray-400 font-medium\">or continue with</span>\n        </div>\n      </div>\n\n      {/* Social Login */}\n      <motion.div\n        whileHover={{ scale: 1.01 }}\n        whileTap={{ scale: 0.99 }}\n      >\n        <Button\n          type=\"button\"\n          variant=\"outline\"\n          className=\"w-full h-12 border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800/50 hover:bg-gray-50 dark:hover:bg-gray-800 rounded-xl transition-all duration-200 shadow-sm hover:shadow-md\"\n        >\n          <svg className=\"w-5 h-5 mr-3\" viewBox=\"0 0 24 24\">\n            <path\n              fill=\"currentColor\"\n              d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"\n            />\n            <path\n              fill=\"currentColor\"\n              d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"\n            />\n            <path\n              fill=\"currentColor\"\n              d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"\n            />\n            <path\n              fill=\"currentColor\"\n              d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"\n            />\n          </svg>\n          Continue with Google\n        </Button>\n      </motion.div>\n\n      {/* Sign Up Link */}\n      <div className=\"text-center pt-4\">\n        <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n          Don&apos;t have an account?{' '}\n          <Link \n            href=\"/register\" \n            className=\"text-[var(--brand-primary)] dark:text-blue-400 hover:text-[var(--brand-primary)]/80 dark:hover:text-blue-300 font-semibold transition-colors duration-200\"\n          >\n            Sign up for free\n          </Link>\n        </p>\n      </div>\n\n      {/* Email Verification Modal */}\n      <Dialog open={showVerificationModal} onOpenChange={(open) => {\n        // Only allow closing if explicitly called (not from outside click)\n        // The modal should only close via the back button or verification success\n        if (!open) {\n          // Don't auto-close on outside click, but show feedback\n          triggerModalShake();\n          return;\n        }\n        handleBackToLogin();\n      }}>\n        <DialogContent \n          className=\"sm:max-w-[425px]\"\n          onEscapeKeyDown={(e) => {\n            e.preventDefault();\n            triggerModalShake();\n          }}\n          onPointerDownOutside={(e) => {\n            e.preventDefault();\n            triggerModalShake();\n          }}\n        >\n          <motion.div\n            animate={modalShake ? { x: [-10, 10, -10, 10, 0] } : { x: 0 }}\n            transition={{ duration: 0.4, ease: \"easeInOut\" }}\n          >\n            <DialogHeader>\n              <DialogTitle>Verify Your Email</DialogTitle>\n              <DialogDescription>\n                Your email address needs to be verified before you can sign in. Please enter the verification code that was sent to your email.\n              </DialogDescription>\n            </DialogHeader>\n            \n            {verificationEmail && (\n              <EmailVerificationForm\n                email={verificationEmail}\n                name=\"\" // We don't have the name from login form\n                onVerificationSuccess={handleVerificationSuccess}\n                onBackToRegister={handleBackToLogin}\n              />\n            )}\n          </motion.div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Error Dialog */}\n      <Dialog open={showErrorDialog} onOpenChange={setShowErrorDialog}>\n        <DialogContent className=\"sm:max-w-[425px]\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2 text-red-600\">\n              <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clipRule=\"evenodd\" />\n              </svg>\n              {errorDialogContent.title}\n            </DialogTitle>\n            <DialogDescription className=\"space-y-2\">\n              <div className=\"font-medium text-gray-900 dark:text-gray-100\">{errorDialogContent.message}</div>\n              <div className=\"text-gray-600 dark:text-gray-400\">{errorDialogContent.description}</div>\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"flex justify-end gap-2 pt-4\">\n            <Button \n              onClick={() => setShowErrorDialog(false)}\n              className=\"bg-[var(--brand-primary)] hover:bg-[var(--brand-primary)]/90\"\n            >\n              Try Again\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/auth/RegisterForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/auth/SignupForm.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":459,"column":19,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[19060,19198],"text":"\n                We&apos;ve sent a verification code to your email address. Please enter it below to complete your registration.\n              "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[19060,19198],"text":"\n                We&lsquo;ve sent a verification code to your email address. Please enter it below to complete your registration.\n              "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[19060,19198],"text":"\n                We&#39;ve sent a verification code to your email address. Please enter it below to complete your registration.\n              "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[19060,19198],"text":"\n                We&rsquo;ve sent a verification code to your email address. Please enter it below to complete your registration.\n              "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useForm } from 'react-hook-form';\nimport { z } from 'zod';\nimport { motion } from 'framer-motion';\nimport { Eye, EyeOff, Mail, Lock, User, Loader2, ArrowRight } from 'lucide-react';\nimport { toast } from 'sonner';\nimport Link from 'next/link';\nimport { useRouter } from 'next/navigation';\n\nimport { Button } from '@/components/ui/button';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { EmailVerificationForm } from '@/components/auth/EmailVerificationForm';\nimport { useBranding } from '@/lib/BrandingContext';\nimport { useAuth } from '@/lib/AuthContext';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\n\n// Form validation schema\nconst formSchema = z.object({\n  name: z.string().min(2, { message: 'Name must be at least 2 characters' }),\n  email: z.string().email({ message: 'Please enter a valid email' }),\n  password: z.string()\n    .min(8, { message: 'Password must be at least 8 characters' })\n    .regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/, {\n      message: 'Password must contain uppercase, lowercase, and number'\n    }),\n  confirmPassword: z.string(),\n  acceptTerms: z.boolean().refine(val => val === true, {\n    message: 'You must accept the terms and conditions'\n  }),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\nexport function SignupForm() {\n  const [isLoading, setIsLoading] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [showVerificationModal, setShowVerificationModal] = useState(false);\n  const [verificationData, setVerificationData] = useState<{\n    email: string;\n    name: string;\n    password: string;\n  } | null>(null);\n  const [modalShake, setModalShake] = useState(false);\n  \n  const router = useRouter();\n  const { settings, isLoading: brandingLoading } = useBranding();\n  const companyName = brandingLoading ? 'the company' : (settings.companyName || 'the company');\n  const { login } = useAuth();\n\n  // Form definition\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      name: '',\n      email: '',\n      password: '',\n      confirmPassword: '',\n      acceptTerms: false,\n    },\n  });\n\n  // Watch password for strength indicator\n  const password = form.watch('password');\n\n  // Password strength checker\n  const getPasswordStrength = (password: string) => {\n    let score = 0;\n    if (password.length >= 8) score++;\n    if (/[a-z]/.test(password)) score++;\n    if (/[A-Z]/.test(password)) score++;\n    if (/\\d/.test(password)) score++;\n    if (/[^a-zA-Z\\d]/.test(password)) score++;\n    return score;\n  };\n\n  const passwordStrength = getPasswordStrength(password);\n\n  // Form submission handler\n  async function onSubmit(values: z.infer<typeof formSchema>) {\n    setIsLoading(true);\n    \n    try {\n      const response = await fetch('/api/auth/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          name: values.name,\n          email: values.email,\n          password: values.password,\n        }),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.message || 'Registration failed');\n      }\n\n      if (data.requiresVerification) {\n        // Show email verification modal\n        setVerificationData({\n          email: values.email,\n          name: values.name,\n          password: values.password\n        });\n        setShowVerificationModal(true);\n        toast.success('Account created! Please check your email for a verification code.');\n      } else {\n        // Registration successful without verification (fallback)\n        try {\n          toast.success('Account created successfully! Logging you in...');\n          await login(values.email, values.password);\n          // User will be redirected automatically by the AuthContext\n        } catch {\n          toast.error('Account created successfully, but auto-login failed. Please sign in manually.');\n          router.push('/');\n        }\n      }\n\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Registration failed';\n      toast.error(message);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  const handleVerificationSuccess = async () => {\n    setShowVerificationModal(false);\n    \n    if (verificationData) {\n      try {\n        toast.success('Email verified successfully! Logging you in...');\n        // Automatically log the user in\n        await login(verificationData.email, verificationData.password);\n        // User will be redirected automatically by the AuthContext\n      } catch {\n        toast.error('Verification successful, but auto-login failed. Please sign in manually.');\n        router.push('/');\n      }\n    } else {\n      router.push('/');\n    }\n  };\n\n  const handleBackToRegister = () => {\n    setShowVerificationModal(false);\n    setVerificationData(null);\n  };\n\n  // Function to trigger shake animation when trying to close modal\n  const triggerModalShake = () => {\n    setModalShake(true);\n    setTimeout(() => setModalShake(false), 500); // Reset after animation\n  };\n\n  return (\n    <>\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n          {/* Name Field */}\n          <FormField\n            control={form.control}\n            name=\"name\"\n            render={({ field }) => (\n              <FormItem>\n                <FormControl>\n                  <div className=\"relative group\">\n                    <div className=\"absolute inset-y-0 left-0 flex items-center pl-4 pointer-events-none\">\n                      <User className=\"h-5 w-5 text-gray-400 dark:text-gray-500 group-focus-within:text-[var(--brand-primary)] transition-colors\" />\n                    </div>\n                    <Input\n                      type=\"text\"\n                      placeholder=\"Full name\"\n                      className=\"pl-12 h-12 bg-gray-50 dark:bg-gray-800/50 border-gray-200 dark:border-gray-700 focus:bg-white dark:focus:bg-gray-800 focus:border-[var(--brand-primary)] focus:ring-4 focus:ring-[var(--brand-primary)]/10 rounded-xl transition-all duration-200 placeholder:text-gray-400 dark:placeholder:text-gray-500 hover:border-gray-300 dark:hover:border-gray-600\"\n                      {...field}\n                    />\n                  </div>\n                </FormControl>\n                <FormMessage className=\"text-red-500 dark:text-red-400 text-sm\" />\n              </FormItem>\n            )}\n          />\n\n          {/* Email Field */}\n          <FormField\n            control={form.control}\n            name=\"email\"\n            render={({ field }) => (\n              <FormItem>\n                <FormControl>\n                  <div className=\"relative group\">\n                    <div className=\"absolute inset-y-0 left-0 flex items-center pl-4 pointer-events-none\">\n                      <Mail className=\"h-5 w-5 text-gray-400 dark:text-gray-500 group-focus-within:text-[var(--brand-primary)] transition-colors\" />\n                    </div>\n                    <Input\n                      type=\"email\"\n                      placeholder=\"Email address\"\n                      className=\"pl-12 h-12 bg-gray-50 dark:bg-gray-800/50 border-gray-200 dark:border-gray-700 focus:bg-white dark:focus:bg-gray-800 focus:border-[var(--brand-primary)] focus:ring-4 focus:ring-[var(--brand-primary)]/10 rounded-xl transition-all duration-200 placeholder:text-gray-400 dark:placeholder:text-gray-500 hover:border-gray-300 dark:hover:border-gray-600\"\n                      {...field}\n                    />\n                  </div>\n                </FormControl>\n                <FormMessage className=\"text-red-500 dark:text-red-400 text-sm\" />\n              </FormItem>\n            )}\n          />\n\n          {/* Password Field */}\n          <FormField\n            control={form.control}\n            name=\"password\"\n            render={({ field }) => (\n              <FormItem>\n                <FormControl>\n                  <div className=\"relative group\">\n                    <div className=\"absolute inset-y-0 left-0 flex items-center pl-4 pointer-events-none\">\n                      <Lock className=\"h-5 w-5 text-gray-400 dark:text-gray-500 group-focus-within:text-[var(--brand-primary)] transition-colors\" />\n                    </div>\n                    <Input\n                      type={showPassword ? 'text' : 'password'}\n                      placeholder=\"Password (8+ chars, uppercase, lowercase, number)\"\n                      className=\"pl-12 pr-12 h-12 bg-gray-50 dark:bg-gray-800/50 border-gray-200 dark:border-gray-700 focus:bg-white dark:focus:bg-gray-800 focus:border-[var(--brand-primary)] focus:ring-4 focus:ring-[var(--brand-primary)]/10 rounded-xl transition-all duration-200 placeholder:text-gray-400 dark:placeholder:text-gray-500 hover:border-gray-300 dark:hover:border-gray-600\"\n                      {...field}\n                    />\n                    <button\n                      type=\"button\"\n                      onClick={() => setShowPassword(!showPassword)}\n                      className=\"absolute inset-y-0 right-0 flex items-center pr-4 text-gray-400 dark:text-gray-500 hover:text-gray-600 dark:hover:text-gray-400 transition-colors\"\n                    >\n                      {showPassword ? (\n                        <EyeOff className=\"h-5 w-5\" />\n                      ) : (\n                        <Eye className=\"h-5 w-5\" />\n                      )}\n                    </button>\n                  </div>\n                </FormControl>\n                \n                {/* Compact Password Strength Indicator */}\n                {password && (\n                  <div className=\"flex space-x-1 mt-2\">\n                    {[...Array(5)].map((_, i) => (\n                      <div\n                        key={i}\n                        className={`h-1 flex-1 rounded-full transition-colors ${\n                          i < passwordStrength\n                            ? passwordStrength <= 2\n                              ? 'bg-red-400'\n                              : passwordStrength <= 4\n                              ? 'bg-yellow-400'\n                              : 'bg-green-400'\n                            : 'bg-gray-200 dark:bg-gray-700'\n                        }`}\n                      />\n                    ))}\n                  </div>\n                )}\n                \n                <FormMessage className=\"text-red-500 dark:text-red-400 text-sm\" />\n              </FormItem>\n            )}\n          />\n\n          {/* Confirm Password Field */}\n          <FormField\n            control={form.control}\n            name=\"confirmPassword\"\n            render={({ field }) => (\n              <FormItem>\n                <FormControl>\n                  <div className=\"relative group\">\n                    <div className=\"absolute inset-y-0 left-0 flex items-center pl-4 pointer-events-none\">\n                      <Lock className=\"h-5 w-5 text-gray-400 dark:text-gray-500 group-focus-within:text-[var(--brand-primary)] transition-colors\" />\n                    </div>\n                    <Input\n                      type={showConfirmPassword ? 'text' : 'password'}\n                      placeholder=\"Confirm password\"\n                      className=\"pl-12 pr-12 h-12 bg-gray-50 dark:bg-gray-800/50 border-gray-200 dark:border-gray-700 focus:bg-white dark:focus:bg-gray-800 focus:border-[var(--brand-primary)] focus:ring-4 focus:ring-[var(--brand-primary)]/10 rounded-xl transition-all duration-200 placeholder:text-gray-400 dark:placeholder:text-gray-500 hover:border-gray-300 dark:hover:border-gray-600\"\n                      {...field}\n                    />\n                    <button\n                      type=\"button\"\n                      onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                      className=\"absolute inset-y-0 right-0 flex items-center pr-4 text-gray-400 dark:text-gray-500 hover:text-gray-600 dark:hover:text-gray-400 transition-colors\"\n                    >\n                      {showConfirmPassword ? (\n                        <EyeOff className=\"h-5 w-5\" />\n                      ) : (\n                        <Eye className=\"h-5 w-5\" />\n                      )}\n                    </button>\n                  </div>\n                </FormControl>\n                <FormMessage className=\"text-red-500 dark:text-red-400 text-sm\" />\n              </FormItem>\n            )}\n          />\n\n          {/* Terms and Conditions */}\n          <FormField\n            control={form.control}\n            name=\"acceptTerms\"\n            render={({ field }) => (\n              <FormItem>\n                <div className=\"flex items-center space-x-3\">\n                  <FormControl>\n                    <Checkbox\n                      checked={field.value}\n                      onCheckedChange={field.onChange}\n                      className=\"data-[state=checked]:bg-[var(--brand-primary)] data-[state=checked]:border-[var(--brand-primary)]\"\n                    />\n                  </FormControl>\n                  <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                    I agree to {companyName && companyName !== 'the company' ? `${companyName}&apos;s` : 'the'}{' '}\n                    <Link href=\"/terms\" className=\"text-[var(--brand-primary)] dark:text-blue-400 hover:text-[var(--brand-primary)]/80 dark:hover:text-blue-300 font-medium\">\n                      Terms of Service\n                    </Link>{' '}\n                    and{' '}\n                    <Link href=\"/privacy\" className=\"text-[var(--brand-primary)] dark:text-blue-400 hover:text-[var(--brand-primary)]/80 dark:hover:text-blue-300 font-medium\">\n                      Privacy Policy\n                    </Link>\n                  </div>\n                </div>\n                <FormMessage className=\"text-red-500 dark:text-red-400 text-sm\" />\n              </FormItem>\n            )}\n          />\n\n          {/* Submit Button */}\n          <motion.div\n            whileHover={{ scale: 1.01 }}\n            whileTap={{ scale: 0.99 }}\n          >\n            <Button\n              type=\"submit\"\n              disabled={isLoading}\n              className=\"w-full h-12 bg-[var(--brand-primary)] hover:bg-[var(--brand-primary)]/90 text-white font-semibold rounded-xl transition-all duration-300 shadow-lg hover:shadow-xl disabled:opacity-50 disabled:cursor-not-allowed group transform hover:-translate-y-0.5 border-0\"\n            >\n              {isLoading ? (\n                <>\n                  <Loader2 className=\"w-5 h-5 animate-spin mr-2\" />\n                  Creating account...\n                </>\n              ) : (\n                <>\n                  Create Account\n                  <ArrowRight className=\"w-5 h-5 ml-2 group-hover:translate-x-1 transition-transform duration-200\" />\n                </>\n              )}\n            </Button>\n          </motion.div>\n\n          {/* Divider */}\n          <div className=\"relative\">\n            <div className=\"absolute inset-0 flex items-center\">\n              <span className=\"w-full border-t border-gray-200 dark:border-gray-700\" />\n            </div>\n            <div className=\"relative flex justify-center text-xs uppercase\">\n              <span className=\"bg-white dark:bg-gray-900 px-4 text-gray-500 dark:text-gray-400 font-medium\">or continue with</span>\n            </div>\n          </div>\n\n          {/* Social Login */}\n          <motion.div\n            whileHover={{ scale: 1.01 }}\n            whileTap={{ scale: 0.99 }}\n          >\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              className=\"w-full h-12 border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800/50 hover:bg-gray-50 dark:hover:bg-gray-800 rounded-xl transition-all duration-200 shadow-sm hover:shadow-md\"\n            >\n              <svg className=\"w-5 h-5 mr-3\" viewBox=\"0 0 24 24\">\n                <path\n                  fill=\"currentColor\"\n                  d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"\n                />\n                <path\n                  fill=\"currentColor\"\n                  d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"\n                />\n                <path\n                  fill=\"currentColor\"\n                  d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"\n                />\n                <path\n                  fill=\"currentColor\"\n                  d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"\n                />\n              </svg>\n              Continue with Google\n            </Button>\n          </motion.div>\n\n          {/* Sign In Link */}\n          <div className=\"text-center pt-2 border-t border-gray-100 dark:border-gray-800\">\n            <span className=\"text-gray-600 dark:text-gray-400\">Already have an account? </span>\n            <Link \n              href=\"/\" \n              className=\"text-[var(--brand-primary)] dark:text-blue-400 hover:text-[var(--brand-primary)]/80 dark:hover:text-blue-300 font-semibold transition-colors duration-200\"\n            >\n              Sign in\n            </Link>\n          </div>\n        </form>\n      </Form>\n\n      {/* Email Verification Modal */}\n      <Dialog open={showVerificationModal} onOpenChange={(open) => {\n        // Only allow closing if explicitly called (not from outside click)\n        // The modal should only close via the back button or verification success\n        if (!open) {\n          // Don't auto-close on outside click, but show feedback\n          triggerModalShake();\n          return;\n        }\n        setShowVerificationModal(open);\n      }}>\n        <DialogContent \n          className=\"sm:max-w-md\"\n          onEscapeKeyDown={(e) => {\n            e.preventDefault();\n            triggerModalShake();\n          }}\n          onPointerDownOutside={(e) => {\n            e.preventDefault();\n            triggerModalShake();\n          }}\n        >\n          <motion.div\n            animate={modalShake ? { x: [-10, 10, -10, 10, 0] } : { x: 0 }}\n            transition={{ duration: 0.4, ease: \"easeInOut\" }}\n          >\n            <DialogHeader>\n              <DialogTitle>Verify Your Email</DialogTitle>\n              <DialogDescription>\n                We've sent a verification code to your email address. Please enter it below to complete your registration.\n              </DialogDescription>\n            </DialogHeader>\n            \n            {verificationData && (\n              <EmailVerificationForm\n                email={verificationData.email}\n                name={verificationData.name}\n                onVerificationSuccess={handleVerificationSuccess}\n                onBackToRegister={handleBackToRegister}\n              />\n            )}\n          </motion.div>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/calls/ActiveCalls.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/calls/CdrReports.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchCdrs'. Either include it or remove the dependency array.","line":683,"column":6,"nodeType":"ArrayExpression","endLine":683,"endColumn":23,"suggestions":[{"desc":"Update the dependencies array to be: [fetchCdrs, targetAccountId]","fix":{"range":[27689,27706],"text":"[fetchCdrs, targetAccountId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n/*\n * CdrReports Component - Color Usage Philosophy:\n * \n * - Brand colors (colors.primary, colors.secondary, colors.accent): Used for icons, backgrounds, and accents\n * - Theme-aware text colors (.text-brand): Used for main stat values for readability\n * - Tailwind semantic colors (.text-muted-foreground): Used for secondary text\n * \n * This ensures brand identity is maintained while text remains readable in both light and dark modes.\n */\n\nimport { useState, useEffect } from 'react';\nimport { \n  Card, \n  CardContent, \n  CardDescription, \n  CardHeader, \n  CardTitle \n} from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { \n  Loader2, \n  RefreshCw, \n  Download,\n  DollarSign,\n  Activity,\n  BarChart3,\n  Filter,\n  ChevronLeft,\n  ChevronRight,\n  Search,\n  X,\n  FileText,\n  Globe,\n  Timer,\n  Info,\n  AlertTriangle,\n  CheckCircle,\n  XCircle\n} from 'lucide-react';\nimport { toast } from 'sonner';\nimport { format } from 'date-fns';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useAuth } from '@/lib/AuthContext';\nimport { useBranding } from '@/hooks/useBranding';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from '@/components/ui/tooltip';\n\n// Helper function to parse Sippy's custom date format\n// Format: \"22:43:01.000 GMT Thu May 22 2025\"\nfunction parseSippyDate(sippyDateString: string): Date | null {\n  if (!sippyDateString) return null;\n  \n  try {\n    // Sippy format: \"HH:MM:SS.000 GMT Day Mon DD YYYY\"\n    // Example: \"22:43:01.000 GMT Thu May 22 2025\"\n    const parts = sippyDateString.split(' ');\n    if (parts.length < 6) return null;\n    \n    const time = parts[0]; // \"22:43:01.000\"\n    // parts[1] is \"GMT\"\n    const monthName = parts[3]; // \"May\"\n    const day = parts[4]; // \"22\"\n    const year = parts[5]; // \"2025\"\n    \n    // Convert month name to number\n    const months: Record<string, string> = {\n      'Jan': '01', 'Feb': '02', 'Mar': '03', 'Apr': '04',\n      'May': '05', 'Jun': '06', 'Jul': '07', 'Aug': '08',\n      'Sep': '09', 'Oct': '10', 'Nov': '11', 'Dec': '12'\n    };\n    \n    const month = months[monthName];\n    if (!month) {\n      console.error('Unknown month:', monthName);\n      return null;\n    }\n    \n    // Remove milliseconds from time and create ISO string\n    const timeWithoutMs = time.split('.')[0]; // \"22:43:01\"\n    const isoString = `${year}-${month}-${day.padStart(2, '0')}T${timeWithoutMs}Z`;\n    \n    return new Date(isoString);\n  } catch (e) {\n    console.error('Error parsing Sippy date:', sippyDateString, e);\n    return null;\n  }\n}\n\n// Sippy result code interpretations based on official documentation\n// Source: https://support.sippysoft.com/support/solutions/articles/3000107425-internal-external-result-codes-in-cdrs\nfunction interpretSippyResultCode(result: number): { \n  type: 'success' | 'error' | 'warning'; \n  label: string; \n  description: string;\n  category: string;\n} {\n  // Successful calls\n  if (result === 0 || result === 200) {\n    return {\n      type: 'success',\n      label: 'Success',\n      description: 'Call completed successfully',\n      category: 'Successful'\n    };\n  }\n\n  // Internal negative error codes (Sippy-specific)\n  const internalCodes: Record<number, { label: string; description: string; category: string }> = {\n    [-1]: { label: 'External Translator Rejected', description: 'External Translator Rejected The Call', category: 'Translation' },\n    [-2]: { label: 'Body-less INVITE', description: 'Body-less INVITE', category: 'Protocol' },\n    [-3]: { label: 'Account Expired', description: 'Account Expired', category: 'Account' },\n    [-4]: { label: 'Connection Capacity Exceeded', description: 'Connection Capacity Exceeded', category: 'Capacity' },\n    [-5]: { label: 'Malformed SDP', description: 'Malformed SDP', category: 'Protocol' },\n    [-6]: { label: 'Unsupported Content-Type', description: 'Unsupported Content-Type', category: 'Protocol' },\n    [-7]: { label: 'Unacceptable Codec', description: 'Unacceptable Codec', category: 'Media' },\n    [-8]: { label: 'Invalid CLD Translation (Auth)', description: 'Invalid CLD Translation Rule In The Authentication Rule', category: 'Translation' },\n    [-9]: { label: 'Invalid CLI Translation (Auth)', description: 'Invalid CLI Translation Rule In The Authentication Rule', category: 'Translation' },\n    [-10]: { label: 'Invalid CLD Translation (Account)', description: 'Invalid CLD Translation Rule In The Account', category: 'Translation' },\n    [-11]: { label: 'Invalid CLI Translation (Account)', description: 'Invalid CLI Translation Rule In The Account', category: 'Translation' },\n    [-12]: { label: 'Cannot Find Session', description: 'Cannot Find The Session To Bind To', category: 'Session' },\n    [-13]: { label: 'Invalid CLI Translation (DID)', description: 'Invalid CLI Translation Rule In The DID', category: 'Translation' },\n    [-14]: { label: 'No Rate Found', description: 'No Rate Found In Tariff', category: 'Billing' },\n    [-15]: { label: 'Call Loop Detected', description: 'Call Loop Detected', category: 'Routing' },\n    [-16]: { label: 'Too Many Sessions', description: 'Too Many Sessions', category: 'Capacity' },\n    [-17]: { label: 'Account In Use', description: 'Account Is In Use', category: 'Account' },\n    [-18]: { label: 'CPS Limit (Account)', description: 'Call Per Second (CPS) Limit On Account Exceeded', category: 'Rate Limiting' },\n    [-19]: { label: 'CPS Limit (System)', description: 'Call Per Second (CPS) System Limit Exceeded', category: 'Rate Limiting' },\n    [-20]: { label: 'Insufficient Balance', description: 'Insufficient Balance', category: 'Billing' },\n    [-21]: { label: 'Forbidden Destination', description: 'Destination Is Forbidden', category: 'Routing' },\n    [-22]: { label: 'No Customer Rate', description: 'No Rate Found In Customer\\'s Tariff', category: 'Billing' },\n    [-23]: { label: 'Loss Protection', description: 'Loss Protection', category: 'Quality' },\n    [-24]: { label: 'Address Incomplete', description: 'Address Is Incomplete', category: 'Addressing' },\n    [-25]: { label: 'No Routes Found', description: 'No Routes Found', category: 'Routing' },\n    [-26]: { label: 'CPS Limit (Connection)', description: 'Call Per Second (CPS) Limit On Connection Exceeded', category: 'Rate Limiting' },\n    [-27]: { label: 'Invalid Asserted ID', description: 'Invalid Asserted ID Translation Rule In The Account', category: 'Translation' },\n    [-28]: { label: 'CLD in DNC List', description: 'CLD is in the Do Not Call List', category: 'Compliance' },\n    [-29]: { label: 'Invalid CLD Translation (DID)', description: 'Invalid CLD Translation Rule In The DID', category: 'Translation' },\n    [-30]: { label: 'Call Canceled', description: 'Call has been canceled by calling party', category: 'User Action' },\n    [-31]: { label: 'CPS Limit (Customer)', description: 'Call Per Second (CPS) Limit On Customer Exceeded', category: 'Rate Limiting' },\n    [-32]: { label: 'Too Many Sessions (Customer)', description: 'Too Many Sessions For Customer', category: 'Capacity' },\n    [-33]: { label: 'CPS Limit (Auth Rule)', description: 'Call Per Second (CPS) Limit On Auth Rule Exceeded', category: 'Rate Limiting' },\n    [-34]: { label: 'Too Many Sessions (Auth Rule)', description: 'Too Many Sessions For Auth Rule', category: 'Capacity' },\n    [-35]: { label: 'Invalid CLI Translation (Pre-Routing)', description: 'Invalid CLI Translation Rule In The Pre-Routing Rule', category: 'Translation' },\n    [-36]: { label: 'Invalid CLD Translation (Pre-Routing)', description: 'Invalid CLD Translation Rule In The Pre-Routing Rule', category: 'Translation' },\n    [-37]: { label: 'CLI in DNC List', description: 'CLI is in the Do Not Call List', category: 'Compliance' }\n  };\n\n  if (internalCodes[result]) {\n    return {\n      type: 'error',\n      label: internalCodes[result].label,\n      description: internalCodes[result].description,\n      category: internalCodes[result].category\n    };\n  }\n\n  // Standard SIP response codes\n  const sipCodes: Record<number, { label: string; description: string; category: string }> = {\n    // 1xx Provisional\n    100: { label: 'Trying', description: 'Trying', category: 'Provisional' },\n    180: { label: 'Ringing', description: 'Ringing', category: 'Provisional' },\n    181: { label: 'Call Being Forwarded', description: 'Call Is Being Forwarded', category: 'Provisional' },\n    182: { label: 'Queued', description: 'Queued', category: 'Provisional' },\n    183: { label: 'Session Progress', description: 'Session Progress', category: 'Provisional' },\n\n    // 2xx Success\n    200: { label: 'OK', description: 'OK', category: 'Success' },\n    202: { label: 'Accepted', description: 'Accepted', category: 'Success' },\n\n    // 3xx Redirection\n    300: { label: 'Multiple Choices', description: 'Multiple Choices', category: 'Redirection' },\n    301: { label: 'Moved Permanently', description: 'Moved Permanently', category: 'Redirection' },\n    302: { label: 'Moved Temporarily', description: 'Moved Temporarily', category: 'Redirection' },\n    305: { label: 'Use Proxy', description: 'Use Proxy', category: 'Redirection' },\n    380: { label: 'Alternative Service', description: 'Alternative Service', category: 'Redirection' },\n\n    // 4xx Client Error\n    400: { label: 'Bad Request', description: 'Bad Request - Malformed SDP or Unsupported Content-Type', category: 'Client Error' },\n    401: { label: 'Unauthorized', description: 'Unauthorized', category: 'Client Error' },\n    402: { label: 'Payment Required', description: 'Payment Required', category: 'Client Error' },\n    403: { label: 'Forbidden', description: 'Forbidden - Auth Failed, Insufficient Balance, or Account Issues', category: 'Client Error' },\n    404: { label: 'Not Found', description: 'Not Found', category: 'Client Error' },\n    405: { label: 'Method Not Allowed', description: 'Method Not Allowed', category: 'Client Error' },\n    406: { label: 'Not Acceptable', description: 'Not Acceptable', category: 'Client Error' },\n    407: { label: 'Proxy Auth Required', description: 'Proxy Authentication Required', category: 'Client Error' },\n    408: { label: 'Request Timeout', description: 'Request Timeout', category: 'Client Error' },\n    410: { label: 'Gone', description: 'Gone', category: 'Client Error' },\n    413: { label: 'Request Entity Too Large', description: 'Request Entity Too Large', category: 'Client Error' },\n    414: { label: 'Request-URI Too Long', description: 'Request-URI Too Long', category: 'Client Error' },\n    415: { label: 'Unsupported Media Type', description: 'Unsupported Media Type', category: 'Client Error' },\n    416: { label: 'Unsupported URI Scheme', description: 'Unsupported URI Scheme', category: 'Client Error' },\n    420: { label: 'Bad Extension', description: 'Bad Extension', category: 'Client Error' },\n    421: { label: 'Extension Required', description: 'Extension Required', category: 'Client Error' },\n    423: { label: 'Interval Too Brief', description: 'Interval Too Brief', category: 'Client Error' },\n    480: { label: 'Temporarily Unavailable', description: 'Temporarily Unavailable', category: 'Client Error' },\n    481: { label: 'Call/Transaction Does Not Exist', description: 'Call/Transaction Does Not Exist', category: 'Client Error' },\n    482: { label: 'Loop Detected', description: 'Loop Detected', category: 'Client Error' },\n    483: { label: 'Too Many Hops', description: 'Too Many Hops', category: 'Client Error' },\n    484: { label: 'Address Incomplete', description: 'Address Incomplete', category: 'Client Error' },\n    485: { label: 'Ambiguous', description: 'Ambiguous', category: 'Client Error' },\n    486: { label: 'Busy Here', description: 'Busy Here', category: 'Client Error' },\n    487: { label: 'Request Terminated', description: 'Request Terminated', category: 'Client Error' },\n    488: { label: 'Not Acceptable Here', description: 'Not Acceptable Here - Codec incompatibility', category: 'Client Error' },\n    491: { label: 'Request Pending', description: 'Request Pending', category: 'Client Error' },\n    493: { label: 'Undecipherable', description: 'Undecipherable', category: 'Client Error' },\n\n    // 5xx Server Error\n    500: { label: 'Server Internal Error', description: 'Internal Server Error', category: 'Server Error' },\n    501: { label: 'Not Implemented', description: 'Not Implemented', category: 'Server Error' },\n    502: { label: 'Bad Gateway', description: 'Bad Gateway', category: 'Server Error' },\n    503: { label: 'Service Unavailable', description: 'Service Unavailable - Call rate too high or capacity exceeded', category: 'Server Error' },\n    504: { label: 'Server Time-out', description: 'Server Time-out', category: 'Server Error' },\n    505: { label: 'Version Not Supported', description: 'Version Not Supported', category: 'Server Error' },\n    513: { label: 'Message Too Large', description: 'Message Too Large', category: 'Server Error' },\n\n    // 6xx Global Failure\n    600: { label: 'Busy Everywhere', description: 'Busy Everywhere', category: 'Global Failure' },\n    603: { label: 'Decline', description: 'Decline', category: 'Global Failure' },\n    604: { label: 'Does Not Exist Anywhere', description: 'Does Not Exist Anywhere', category: 'Global Failure' },\n    606: { label: 'Not Acceptable', description: 'Not Acceptable', category: 'Global Failure' }\n  };\n\n  if (sipCodes[result]) {\n    const isError = result >= 400;\n    return {\n      type: isError ? 'error' : 'warning',\n      label: sipCodes[result].label,\n      description: sipCodes[result].description,\n      category: sipCodes[result].category\n    };\n  }\n\n  // Unknown result code\n  return {\n    type: 'error',\n    label: `Unknown (${result})`,\n    description: `Unknown result code: ${result}`,\n    category: 'Unknown'\n  };\n}\n\ninterface Cdr {\n  i_account: number;\n  connect_time: string;\n  billed_duration: number;\n  plan_duration: number;\n  cli: string;\n  cld: string;\n  cli_in: string;\n  cld_in: string;\n  cost: string;\n  payment_currency: string;\n  country: string;\n  description: string;\n  remote_ip: string;\n  result: number;\n  protocol: string;\n  accessibility_cost: number;\n  grace_period: number;\n  post_call_surcharge: number;\n  connect_fee: number;\n  free_seconds: number;\n  duration: number;\n  interval_1: number;\n  interval_n: number;\n  price_1: number;\n  price_n: number;\n  delay: number;\n  pdd1xx: number;\n  i_call: string;\n  call_id: string;\n  i_cdr: string;\n  prefix: string;\n  lrn_cld: string;\n  lrn_cld_in: string;\n  p_asserted_id: string;\n  remote_party_id: string;\n  release_source: string;\n  user_agent: string;\n  area_name: string;\n}\n\ninterface CdrStats {\n  total: number;\n  totalCost: number;\n  avgDuration: number;\n  avgCost: number;\n  completedCalls: number;\n  errorCalls: number;\n  totalMinutes: number;\n}\n\ninterface CdrReportsProps {\n  accountId?: number;\n}\n\nexport function CdrReports({ accountId }: CdrReportsProps) {\n  const { user } = useAuth();\n  const { colors, getGradientStyle, features } = useBranding();\n  const [cdrs, setCdrs] = useState<Cdr[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [lastRefresh, setLastRefresh] = useState<Date | null>(null);\n  \n  // Pagination state\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalRecords, setTotalRecords] = useState(0);\n  const [recordsPerPage, setRecordsPerPage] = useState(20);\n  \n  // Filter state\n  const [showFilters, setShowFilters] = useState(false);\n  const [filters, setFilters] = useState({\n    type: 'non_zero_and_errors',\n    start_date: '',\n    end_date: '',\n    cli: '',\n    cld: '',\n    result_type: 'all', // New filter for result types\n  });\n  \n  // Use provided accountId or user's account ID\n  const targetAccountId = accountId || user?.sippyAccountId;\n\n  // Filter CDRs by result type (client-side filtering)\n  const filterCdrsByResultType = (cdrs: Cdr[]): Cdr[] => {\n    if (!filters.result_type || filters.result_type === 'all') return cdrs;\n\n    return cdrs.filter(cdr => {\n      const interpretation = interpretSippyResultCode(cdr.result);\n      \n      switch (filters.result_type) {\n        case 'success':\n          return interpretation.type === 'success';\n        case 'billing':\n          return interpretation.category === 'Billing';\n        case 'rate_limiting':\n          return interpretation.category === 'Rate Limiting';\n        case 'translation':\n          return interpretation.category === 'Translation';\n        case 'capacity':\n          return interpretation.category === 'Capacity';\n        case 'routing':\n          return interpretation.category === 'Routing';\n        case 'protocol':\n          return interpretation.category === 'Protocol';\n        case 'account':\n          return interpretation.category === 'Account';\n        case 'compliance':\n          return interpretation.category === 'Compliance';\n        case 'client_error':\n          return cdr.result >= 400 && cdr.result < 500;\n        case 'server_error':\n          return cdr.result >= 500 && cdr.result < 600;\n        default:\n          return true;\n      }\n    });\n  };\n\n  // Apply result type filtering\n  const filteredCdrs = filterCdrsByResultType(cdrs);\n\n  // Calculate CDR statistics\n  const calculateStats = (cdrs: Cdr[]): CdrStats => {\n    const stats: CdrStats = {\n      total: cdrs.length,\n      totalCost: 0,\n      avgDuration: 0,\n      avgCost: 0,\n      completedCalls: 0,\n      errorCalls: 0,\n      totalMinutes: 0\n    };\n\n    if (cdrs.length === 0) return stats;\n\n    let totalDuration = 0;\n    let totalCost = 0;\n\n    cdrs.forEach(cdr => {\n      const cost = parseFloat(cdr.cost) || 0;\n      const duration = cdr.duration || 0;\n      \n      totalCost += cost;\n      totalDuration += duration;\n      \n      // Count completed vs error calls based on result\n      if (cdr.result === 0 || cdr.result === 200) {\n        stats.completedCalls++;\n      } else {\n        stats.errorCalls++;\n      }\n    });\n\n    stats.totalCost = totalCost;\n    stats.avgDuration = totalDuration / cdrs.length;\n    stats.avgCost = totalCost / cdrs.length;\n    stats.totalMinutes = totalDuration / 60;\n\n    return stats;\n  };\n\n  const stats = calculateStats(filteredCdrs);\n\n  const fetchCdrs = async (page: number = currentPage, customRecordsPerPage?: number) => {\n    if (!targetAccountId) {\n      setError('No account ID available');\n      setIsLoading(false);\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      let queryFilters = { ...filters };\n      const limit = customRecordsPerPage || recordsPerPage;\n      const offset = (page - 1) * limit;\n\n      // If no date filters are provided, set default to last 7 days\n      // This prevents Sippy API from only returning last hour's CDRs\n      if (!queryFilters.start_date && !queryFilters.end_date) {\n        const now = new Date();\n        const sevenDaysAgo = new Date(now.getTime() - (7 * 24 * 60 * 60 * 1000));\n        \n        queryFilters = {\n          ...queryFilters,\n          start_date: sevenDaysAgo.toISOString().slice(0, 16),\n          end_date: now.toISOString().slice(0, 16)\n        };\n      }\n\n      const queryParams = new URLSearchParams({\n        ...queryFilters,\n        limit: limit.toString(),\n        offset: offset.toString(),\n        mode: 'full' // Use full parsing for CDR Reports to get all fields\n      });\n\n      // Add timeout to the fetch request\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 second timeout\n\n      const apiUrl = `/api/sippy/account/${targetAccountId}/cdrs?${queryParams}`;\n      console.log('Fetching CDRs with params:', { limit, offset, page, customRecordsPerPage, recordsPerPage, mode: 'full' });\n      console.log('Full API URL:', apiUrl);\n      console.log('Query params object:', Object.fromEntries(queryParams.entries()));\n      const response = await fetch(apiUrl, {\n        signal: controller.signal,\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n      \n      clearTimeout(timeoutId);\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({ error: 'Unknown error' }));\n        throw new Error(errorData.error || `HTTP ${response.status}: Failed to fetch CDRs`);\n      }\n\n      const data = await response.json();\n      console.log('CDR API response:', { recordCount: data.cdrs?.length, limit, offset });\n      console.log('First few CDRs:', data.cdrs?.slice(0, 3));\n      setCdrs(data.cdrs || []);\n      setLastRefresh(new Date());\n      \n      // Update total records for pagination\n      const currentRecords = data.cdrs?.length || 0;\n      const effectiveLimit = customRecordsPerPage || recordsPerPage;\n      \n      if (currentRecords === effectiveLimit) {\n        // If we got a full page, there might be more records\n        // Set a high estimate to enable \"Next\" button\n        setTotalRecords((page + 10) * effectiveLimit);\n      } else {\n        // If we got less than a full page, this is the last page\n        setTotalRecords(offset + currentRecords);\n      }\n    } catch (err) {\n      console.error('Error fetching CDRs:', err);\n      \n      let errorMessage = 'Failed to fetch CDRs';\n      if (err instanceof Error) {\n        if (err.name === 'AbortError') {\n          errorMessage = 'Request timed out. Please try again.';\n        } else {\n          errorMessage = err.message;\n        }\n      }\n      \n      setError(errorMessage);\n      toast.error(errorMessage);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleFilterChange = (key: string, value: string) => {\n    setFilters(prev => ({ ...prev, [key]: value }));\n  };\n\n  const clearFilters = () => {\n    setFilters({\n      type: 'non_zero_and_errors',\n      start_date: '',\n      end_date: '',\n      cli: '',\n      cld: '',\n      result_type: 'all',\n    });\n    setCurrentPage(1);\n    setRecordsPerPage(20);\n  };\n\n  const applyFilters = () => {\n    setCurrentPage(1);\n    fetchCdrs(1);\n  };\n\n  const handlePageChange = (newPage: number) => {\n    setCurrentPage(newPage);\n    fetchCdrs(newPage);\n  };\n\n\n\n  const formatDuration = (seconds: number) => {\n    if (seconds < 60) return `${Math.round(seconds)}s`;\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = Math.round(seconds % 60);\n    return `${minutes}m ${remainingSeconds}s`;\n  };\n\n  const formatCurrency = (amount: number, currency: string = '') => {\n    return `${amount.toFixed(4)} ${currency}`.trim();\n  };\n\n  const getCallResultBadge = (result: number) => {\n    const interpretation = interpretSippyResultCode(result);\n    \n    const getIcon = () => {\n      switch (interpretation.type) {\n        case 'success':\n          return <CheckCircle className=\"h-3 w-3\" />;\n        case 'warning':\n          return <AlertTriangle className=\"h-3 w-3\" />;\n        case 'error':\n          return <XCircle className=\"h-3 w-3\" />;\n        default:\n          return <Info className=\"h-3 w-3\" />;\n      }\n    };\n\n    const getBadgeClasses = () => {\n      switch (interpretation.type) {\n        case 'success':\n          return 'text-green-700 bg-green-50 border-green-200 hover:bg-green-100 dark:text-green-400 dark:bg-green-950 dark:border-green-800 dark:hover:bg-green-900';\n        case 'warning':\n          return 'text-yellow-700 bg-yellow-50 border-yellow-200 hover:bg-yellow-100 dark:text-yellow-400 dark:bg-yellow-950 dark:border-yellow-800 dark:hover:bg-yellow-900';\n        case 'error':\n          return 'text-red-700 bg-red-50 border-red-200 hover:bg-red-100 dark:text-red-400 dark:bg-red-950 dark:border-red-800 dark:hover:bg-red-900';\n        default:\n          return 'text-gray-700 bg-gray-50 border-gray-200 hover:bg-gray-100 dark:text-gray-400 dark:bg-gray-950 dark:border-gray-800 dark:hover:bg-gray-900';\n      }\n    };\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>\n          <Badge \n            variant=\"outline\" \n            className={`text-xs cursor-help transition-colors ${getBadgeClasses()}`}\n            title={`${interpretation.label}: ${interpretation.description} (Code: ${result})`}\n          >\n            <div className=\"flex items-center gap-1\">\n              {getIcon()}\n              <span>{interpretation.label}</span>\n              <span className=\"text-xs opacity-60\">({result})</span>\n            </div>\n          </Badge>\n        </TooltipTrigger>\n        <TooltipContent side=\"top\" className=\"max-w-xs\">\n          <div className=\"space-y-2\">\n            <div className=\"font-medium\">{interpretation.label}</div>\n            <div className=\"text-sm text-muted-foreground\">{interpretation.description}</div>\n            <div className=\"flex items-center gap-2 text-xs\">\n              <Badge variant=\"secondary\" className=\"text-xs\">\n                {interpretation.category}\n              </Badge>\n              <span className=\"text-muted-foreground\">Code: {result}</span>\n            </div>\n            {interpretation.type === 'error' && interpretation.category === 'Billing' && (\n              <div className=\"text-xs text-amber-600 bg-amber-50 border border-amber-200 p-2 rounded dark:text-amber-400 dark:bg-amber-950 dark:border-amber-800\">\n                💡 <strong>Tip:</strong> Check account balance and billing configuration\n              </div>\n            )}\n            {interpretation.type === 'error' && interpretation.category === 'Rate Limiting' && (\n              <div className=\"text-xs text-blue-600 bg-blue-50 border border-blue-200 p-2 rounded dark:text-blue-400 dark:bg-blue-950 dark:border-blue-800\">\n                💡 <strong>Tip:</strong> Consider adjusting CPS limits or contact support\n              </div>\n            )}\n            {interpretation.type === 'error' && interpretation.category === 'Translation' && (\n              <div className=\"text-xs text-purple-600 bg-purple-50 border border-purple-200 p-2 rounded dark:text-purple-400 dark:bg-purple-950 dark:border-purple-800\">\n                💡 <strong>Tip:</strong> Review CLI/CLD translation rules configuration\n              </div>\n            )}\n          </div>\n        </TooltipContent>\n      </Tooltip>\n    );\n  };\n\n  const exportToCsv = () => {\n    const headers = [\n      'Call ID',\n      'Connect Time',\n      'Duration',\n      'Billed Duration',\n      'CLI',\n      'CLD',\n      'Cost',\n      'Country',\n      'Description',\n      'Result',\n      'Protocol',\n      'Remote IP'\n    ];\n\n    const csvContent = [\n      headers.join(','),\n      ...filteredCdrs.map(cdr => [\n        cdr.i_call || cdr.call_id || '',\n        cdr.connect_time || '',\n        cdr.duration || '',\n        cdr.billed_duration || '',\n        cdr.cli || '',\n        cdr.cld || '',\n        cdr.cost || '',\n        cdr.country || '',\n        cdr.description || '',\n        cdr.result ?? '',\n        cdr.protocol || '',\n        cdr.remote_ip || ''\n      ].join(','))\n    ].join('\\n');\n\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n    const link = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n    link.setAttribute('href', url);\n    link.setAttribute('download', `cdrs_${format(new Date(), 'yyyy-MM-dd')}.csv`);\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  useEffect(() => {\n    fetchCdrs(1);\n  }, [targetAccountId]);\n\n  if (isLoading && cdrs.length === 0) {\n    return (\n      <div \n        className=\"min-h-[400px] flex items-center justify-center\"\n        style={features.gradientBackground ? getGradientStyle() : {}}\n      >\n        <div className=\"text-center space-y-4\">\n          <div \n            className=\"mx-auto w-16 h-16 rounded-2xl flex items-center justify-center shadow-lg\"\n            style={{ background: `linear-gradient(135deg, ${colors.primary}, ${colors.secondary})` }}\n          >\n            <Loader2 className=\"h-8 w-8 animate-spin text-white\" />\n          </div>\n          <div>\n            <h3 className=\"text-lg font-semibold\" style={{ color: colors.primary }}>\n              Loading CDR Reports\n            </h3>\n            <p className=\"text-muted-foreground\">Fetching call detail records...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <Card className=\"border-destructive\">\n        <CardHeader>\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 rounded-lg bg-red-50 flex items-center justify-center\">\n              <FileText className=\"h-5 w-5 text-red-600\" />\n            </div>\n            <div>\n              <CardTitle className=\"text-destructive\">Error Loading CDR Reports</CardTitle>\n              <CardDescription>There was an error loading the CDR data</CardDescription>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-sm text-destructive mb-4\">{error}</p>\n          <Button \n            variant=\"outline\" \n            onClick={() => fetchCdrs()}\n            className=\"gap-2\"\n          >\n            <RefreshCw className=\"h-4 w-4\" />\n            Try Again\n          </Button>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!user?.sippyAccountId && !accountId) {\n    return (\n      <Card className=\"border-destructive\">\n        <CardHeader>\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 rounded-lg bg-red-50 flex items-center justify-center\">\n              <FileText className=\"h-5 w-5 text-red-600\" />\n            </div>\n            <div>\n              <CardTitle className=\"text-destructive\">No Sippy Account ID</CardTitle>\n              <CardDescription>Your user account doesn&apos;t have a Sippy Account ID configured.</CardDescription>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-sm text-destructive\">\n            Please contact an administrator to set up your Sippy account.\n          </p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const totalPages = Math.ceil(totalRecords / recordsPerPage);\n  const startRecord = (currentPage - 1) * recordsPerPage + 1;\n  const endRecord = Math.min(currentPage * recordsPerPage, totalRecords);\n\n  return (\n    <TooltipProvider>\n      <div className=\"space-y-6\">\n      {/* Header with Actions */}\n      <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-4\">\n        <div>\n          <div className=\"flex items-center gap-2 mb-1\">\n            <div \n              className=\"inline-flex items-center gap-2 px-3 py-1.5 rounded-full text-sm font-medium\"\n              style={{ backgroundColor: `${colors.primary}20`, color: colors.primary }}\n            >\n              <BarChart3 className=\"h-4 w-4\" />\n              Call Detail Records\n            </div>\n          </div>\n          <p className=\"text-muted-foreground\">\n            {stats.total} record{stats.total !== 1 ? 's' : ''} for account {targetAccountId}\n            {filters.result_type && filters.result_type !== 'all' && (\n              <span className=\"ml-2\">\n                • Filtered by: {filters.result_type.replace('_', ' ')}\n                {cdrs.length !== filteredCdrs.length && (\n                  <span className=\"text-amber-600\"> ({cdrs.length - filteredCdrs.length} hidden)</span>\n                )}\n              </span>\n            )}\n            {lastRefresh && (\n              <span className=\"ml-2\">\n                • Last updated {format(lastRefresh, 'HH:mm:ss')}\n              </span>\n            )}\n          </p>\n        </div>\n        \n        <div className=\"flex items-center gap-2\">\n          <Button \n            variant=\"outline\" \n            size=\"sm\"\n            onClick={() => setShowFilters(!showFilters)}\n            className=\"gap-2\"\n          >\n            <Filter className=\"h-4 w-4\" />\n            Filters\n          </Button>\n          <Button \n            variant=\"outline\" \n            size=\"sm\"\n            onClick={() => fetchCdrs()}\n            disabled={isLoading}\n            className=\"gap-2\"\n          >\n            <RefreshCw className={`h-4 w-4 ${isLoading ? 'animate-spin' : ''}`} />\n            Refresh\n          </Button>\n          <Button \n            variant=\"outline\" \n            size=\"sm\"\n            onClick={exportToCsv}\n            disabled={filteredCdrs.length === 0}\n            className=\"gap-2\"\n          >\n            <Download className=\"h-4 w-4\" />\n            Export CSV\n          </Button>\n        </div>\n      </div>\n\n      {/* Statistics Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        {/* Total Records */}\n        <Card \n          className={features.glassMorphism ? 'bg-background/90 backdrop-blur-sm' : ''}\n        >\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Total Records</p>\n                <p className=\"text-2xl font-bold text-brand\">\n                  {stats.total}\n                </p>\n              </div>\n              <div \n                className=\"w-12 h-12 rounded-xl flex items-center justify-center\"\n                style={{ backgroundColor: `${colors.primary}20` }}\n              >\n                <FileText className=\"h-6 w-6\" style={{ color: colors.primary }} />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Total Cost */}\n        <Card \n          className={features.glassMorphism ? 'bg-background/90 backdrop-blur-sm' : ''}\n        >\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Total Cost</p>\n                <p className=\"text-2xl font-bold text-green-600 dark:text-green-400\">\n                  {formatCurrency(stats.totalCost, filteredCdrs[0]?.payment_currency)}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 rounded-xl bg-green-50 dark:bg-green-950/50 flex items-center justify-center\">\n                <DollarSign className=\"h-6 w-6 text-green-600 dark:text-green-400\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Average Duration */}\n        <Card \n          className={features.glassMorphism ? 'bg-background/90 backdrop-blur-sm' : ''}\n        >\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Avg Duration</p>\n                <p className=\"text-2xl font-bold text-brand\">\n                  {formatDuration(stats.avgDuration)}\n                </p>\n              </div>\n              <div \n                className=\"w-12 h-12 rounded-xl flex items-center justify-center\"\n                style={{ backgroundColor: `${colors.secondary}20` }}\n              >\n                <Timer className=\"h-6 w-6\" style={{ color: colors.secondary }} />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Success Rate */}\n        <Card \n          className={features.glassMorphism ? 'bg-background/90 backdrop-blur-sm' : ''}\n        >\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Success Rate</p>\n                <p className=\"text-2xl font-bold text-brand\">\n                  {stats.total > 0 ? Math.round((stats.completedCalls / stats.total) * 100) : 0}%\n                </p>\n                <p className=\"text-xs text-muted-foreground\">\n                  {stats.completedCalls} of {stats.total} calls\n                </p>\n              </div>\n              <div \n                className=\"w-12 h-12 rounded-xl flex items-center justify-center\"\n                style={{ backgroundColor: `${colors.accent}20` }}\n              >\n                <Activity className=\"h-6 w-6\" style={{ color: colors.accent }} />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters Panel */}\n      {showFilters && (\n        <Card \n          className={features.glassMorphism ? 'bg-background/90 backdrop-blur-sm' : ''}\n        >\n          <CardHeader className=\"pb-3\">\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-base flex items-center gap-2\">\n                <Filter className=\"h-5 w-5\" style={{ color: colors.primary }} />\n                Filters\n              </CardTitle>\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                onClick={() => setShowFilters(false)}\n                className=\"h-8 w-8 p-0\"\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div className=\"space-y-2\">\n                <Label>Type</Label>\n                <Select\n                  value={filters.type}\n                  onValueChange={(value) => handleFilterChange('type', value)}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"non_zero_and_errors\">Non-zero and Errors</SelectItem>\n                    <SelectItem value=\"non_zero\">Non-zero Duration</SelectItem>\n                    <SelectItem value=\"all\">All</SelectItem>\n                    <SelectItem value=\"complete\">Completed Calls</SelectItem>\n                    <SelectItem value=\"incomplete\">Incomplete Calls</SelectItem>\n                    <SelectItem value=\"errors\">Errors</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n                              <div className=\"space-y-2\">\n                  <Label>Result Type</Label>\n                  <Select\n                    value={filters.result_type || \"all\"}\n                    onValueChange={(value) => handleFilterChange('result_type', value)}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"All result types\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Result Types</SelectItem>\n                      <SelectItem value=\"success\">✅ Successful Calls</SelectItem>\n                      <SelectItem value=\"billing\">💰 Billing Issues</SelectItem>\n                      <SelectItem value=\"rate_limiting\">⚡ Rate Limiting</SelectItem>\n                      <SelectItem value=\"translation\">🔄 Translation Errors</SelectItem>\n                      <SelectItem value=\"capacity\">📊 Capacity Issues</SelectItem>\n                      <SelectItem value=\"routing\">🛣️ Routing Problems</SelectItem>\n                      <SelectItem value=\"protocol\">📡 Protocol Errors</SelectItem>\n                      <SelectItem value=\"account\">👤 Account Issues</SelectItem>\n                      <SelectItem value=\"compliance\">⚖️ Compliance (DNC)</SelectItem>\n                      <SelectItem value=\"client_error\">❌ Client Errors (4xx)</SelectItem>\n                      <SelectItem value=\"server_error\">🔥 Server Errors (5xx)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              <div className=\"space-y-2\">\n                <Label>Start Date</Label>\n                <Input\n                  type=\"datetime-local\"\n                  value={filters.start_date}\n                  onChange={(e) => handleFilterChange('start_date', e.target.value)}\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label>End Date</Label>\n                <Input\n                  type=\"datetime-local\"\n                  value={filters.end_date}\n                  onChange={(e) => handleFilterChange('end_date', e.target.value)}\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label>CLI</Label>\n                <Input\n                  value={filters.cli}\n                  onChange={(e) => handleFilterChange('cli', e.target.value)}\n                  placeholder=\"Filter by CLI\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label>CLD</Label>\n                <Input\n                  value={filters.cld}\n                  onChange={(e) => handleFilterChange('cld', e.target.value)}\n                  placeholder=\"Filter by CLD\"\n                />\n              </div>\n            </div>\n            \n            <div className=\"flex gap-2 mt-4\">\n              <Button \n                onClick={applyFilters}\n                disabled={isLoading}\n                className=\"gap-2\"\n                style={{ backgroundColor: colors.primary }}\n              >\n                {isLoading ? (\n                  <>\n                    <Loader2 className=\"h-4 w-4 animate-spin\" />\n                    Searching...\n                  </>\n                ) : (\n                  <>\n                    <Search className=\"h-4 w-4\" />\n                    Apply Filters\n                  </>\n                )}\n              </Button>\n              <Button \n                variant=\"outline\"\n                onClick={clearFilters}\n                disabled={isLoading}\n                className=\"gap-2\"\n              >\n                <X className=\"h-4 w-4\" />\n                Clear Filters\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* CDR Table */}\n      {stats.total === 0 ? (\n        <Card>\n          <CardContent className=\"text-center py-12\">\n            <div className=\"space-y-4\">\n              <div \n                className=\"mx-auto w-16 h-16 rounded-2xl flex items-center justify-center shadow-lg\"\n                style={{ background: `linear-gradient(135deg, ${colors.primary}, ${colors.secondary})` }}\n              >\n                <FileText className=\"h-8 w-8 text-white\" />\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold\" style={{ color: colors.primary }}>\n                  No CDR Records Found\n                </h3>\n                <p className=\"text-muted-foreground\">\n                  No call detail records found for account {targetAccountId}. Try adjusting your filters or date range.\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      ) : (\n        <Card \n          className={features.glassMorphism ? 'bg-background/90 backdrop-blur-sm' : ''}\n        >\n          <CardHeader className=\"pb-3\">\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-base flex items-center gap-2\">\n                <FileText className=\"h-5 w-5\" style={{ color: colors.primary }} />\n                Call Detail Records\n              </CardTitle>\n              <div className=\"text-sm text-muted-foreground\">\n                Showing {startRecord}-{endRecord} of {totalRecords} records\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent className=\"p-0\">\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Call</TableHead>\n                    <TableHead>Connect Time</TableHead>\n                    <TableHead>Duration</TableHead>\n                    <TableHead>Cost</TableHead>\n                    <TableHead>Country</TableHead>\n                    <TableHead>Protocol</TableHead>\n                    <TableHead>Result</TableHead>\n                    <TableHead>Remote IP</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredCdrs.map((cdr, index) => {\n                    const connectDate = parseSippyDate(cdr.connect_time);\n                    \n                    return (\n                      <TableRow key={cdr.i_cdr || index} className=\"hover:bg-muted/50\">\n                        <TableCell>\n                          <div className=\"space-y-1\">\n                            <div className=\"font-medium\">\n                              {cdr.cli} → {cdr.cld}\n                            </div>\n                            <div className=\"text-xs text-muted-foreground font-mono\">\n                              {cdr.i_call || cdr.call_id}\n                            </div>\n                          </div>\n                        </TableCell>\n                        \n                        <TableCell>\n                          <div className=\"text-sm text-foreground\">\n                            {connectDate ? format(connectDate, 'HH:mm:ss') : 'N/A'}\n                          </div>\n                          {connectDate && (\n                            <div className=\"text-xs text-muted-foreground\">\n                              {format(connectDate, 'MMM dd')}\n                            </div>\n                          )}\n                        </TableCell>\n                        \n                        <TableCell>\n                          <div className=\"font-medium text-foreground\">\n                            {formatDuration(cdr.duration || 0)}\n                          </div>\n                          <div className=\"text-xs text-muted-foreground\">\n                            Billed: {formatDuration(cdr.billed_duration || 0)}\n                          </div>\n                        </TableCell>\n                        \n                        <TableCell>\n                          <div className=\"font-medium text-foreground\">\n                            {formatCurrency(parseFloat(cdr.cost) || 0, cdr.payment_currency)}\n                          </div>\n                        </TableCell>\n                        \n                        <TableCell>\n                          <div className=\"font-medium text-foreground\">{cdr.country || 'N/A'}</div>\n                          <div className=\"text-xs text-muted-foreground\">\n                            {cdr.description || 'N/A'}\n                          </div>\n                        </TableCell>\n                        \n                        <TableCell>\n                          <Badge variant=\"secondary\" className=\"text-xs\">\n                            {cdr.protocol || 'N/A'}\n                          </Badge>\n                        </TableCell>\n                        \n                        <TableCell>\n                          {getCallResultBadge(cdr.result)}\n                        </TableCell>\n                        \n                        <TableCell>\n                          <div className=\"flex items-center gap-1 text-xs\">\n                            <Globe className=\"h-3 w-3 text-muted-foreground\" />\n                            <span className=\"font-mono\">{cdr.remote_ip || 'N/A'}</span>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })}\n                </TableBody>\n              </Table>\n            </div>\n          </CardContent>\n          \n          {/* Pagination */}\n          <CardContent className=\"pt-4\">\n            <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-4\">\n              <div className=\"flex items-center gap-4\">\n                <div className=\"text-sm text-muted-foreground\">\n                  Showing {startRecord}-{endRecord} of {totalRecords} records\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"text-sm text-muted-foreground\">Records per page:</span>\n                  <Select\n                    value={recordsPerPage.toString()}\n                    onValueChange={(value) => {\n                      const newLimit = parseInt(value);\n                      setRecordsPerPage(newLimit);\n                      setCurrentPage(1);\n                      fetchCdrs(1, newLimit);\n                    }}\n                  >\n                    <SelectTrigger className=\"w-[100px] h-8\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"20\">20</SelectItem>\n                      <SelectItem value=\"50\">50</SelectItem>\n                      <SelectItem value=\"100\">100</SelectItem>\n                      <SelectItem value=\"200\">200</SelectItem>\n                      <SelectItem value=\"500\">500</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center gap-2\">\n                <div className=\"text-sm text-muted-foreground\">\n                  Page {currentPage} of {totalPages}\n                </div>\n                <div className=\"flex items-center gap-1\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => handlePageChange(1)}\n                    disabled={currentPage === 1 || isLoading}\n                    className=\"h-8 w-8 p-0\"\n                  >\n                    <span className=\"sr-only\">First page</span>\n                    ⟪\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => handlePageChange(currentPage - 1)}\n                    disabled={currentPage === 1 || isLoading}\n                    className=\"h-8 w-8 p-0\"\n                  >\n                    <ChevronLeft className=\"h-4 w-4\" />\n                  </Button>\n                  \n                  {/* Page numbers */}\n                  {(() => {\n                    const pages = [];\n                    const maxVisiblePages = 5;\n                    let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));\n                    const endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);\n                    \n                    // Adjust start page if we're near the end\n                    if (endPage - startPage + 1 < maxVisiblePages) {\n                      startPage = Math.max(1, endPage - maxVisiblePages + 1);\n                    }\n                    \n                    for (let i = startPage; i <= endPage; i++) {\n                      pages.push(\n                        <Button\n                          key={i}\n                          variant={i === currentPage ? \"default\" : \"outline\"}\n                          size=\"sm\"\n                          onClick={() => handlePageChange(i)}\n                          disabled={isLoading}\n                          className=\"h-8 w-8 p-0\"\n                          style={i === currentPage ? { backgroundColor: colors.primary } : {}}\n                        >\n                          {i}\n                        </Button>\n                      );\n                    }\n                    return pages;\n                  })()}\n                  \n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => handlePageChange(currentPage + 1)}\n                    disabled={currentPage === totalPages || isLoading}\n                    className=\"h-8 w-8 p-0\"\n                  >\n                    <ChevronRight className=\"h-4 w-4\" />\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => handlePageChange(totalPages)}\n                    disabled={currentPage === totalPages || isLoading}\n                    className=\"h-8 w-8 p-0\"\n                  >\n                    <span className=\"sr-only\">Last page</span>\n                    ⟫\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Result Codes Information */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Info className=\"h-5 w-5\" style={{ color: colors.primary }} />\n            Understanding Result Codes\n          </CardTitle>\n          <CardDescription>\n            Sippy result codes help identify call success, failures, and specific issues\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 text-sm\">\n            <div className=\"space-y-2\">\n              <h4 className=\"font-medium flex items-center gap-2\">\n                <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                Successful Calls\n              </h4>\n              <ul className=\"text-muted-foreground space-y-1\">\n                <li>• <strong>0, 200:</strong> Call completed successfully</li>\n                <li>• <strong>1xx:</strong> Provisional responses (trying, ringing)</li>\n              </ul>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <h4 className=\"font-medium flex items-center gap-2\">\n                <XCircle className=\"h-4 w-4 text-red-600\" />\n                Common Issues\n              </h4>\n              <ul className=\"text-muted-foreground space-y-1\">\n                <li>• <strong>-20:</strong> Insufficient balance</li>\n                <li>• <strong>-18 to -19:</strong> Call rate limits exceeded</li>\n                <li>• <strong>486:</strong> Busy here</li>\n                <li>• <strong>404:</strong> Number not found</li>\n              </ul>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <h4 className=\"font-medium flex items-center gap-2\">\n                <AlertTriangle className=\"h-4 w-4 text-amber-600\" />\n                System Errors\n              </h4>\n              <ul className=\"text-muted-foreground space-y-1\">\n                <li>• <strong>5xx:</strong> Server errors</li>\n                <li>• <strong>-4, -16:</strong> Capacity exceeded</li>\n                <li>• <strong>-25:</strong> No routes found</li>\n                <li>• <strong>488:</strong> Codec incompatibility</li>\n              </ul>\n            </div>\n          </div>\n          \n\n        </CardContent>\n              </Card>\n      </div>\n    </TooltipProvider>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/cdrs/CdrTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/cdrs/DateRangePicker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/dashboard/AcdWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/dashboard/ActiveCallsTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/dashboard/AsrWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/dashboard/CostOfDayWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/dashboard/DashboardCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/dashboard/DashboardSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/dashboard/DateSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/dashboard/DisconnectAllButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/dashboard/StatsCards.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/dashboard/TotalMinutesWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/dashboard/WidgetSettingsModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":44,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":5}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Switch } from '@/components/ui/switch';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Slider } from '@/components/ui/slider';\nimport { Label } from '@/components/ui/label';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Settings, Info, Palette, Grid3X3, Timer, LockIcon, Eye } from 'lucide-react';\n\ninterface WidgetSettingsModalProps {\n  id: string;\n  title: string;\n  enabled?: boolean;\n  collapsible?: boolean;\n  locked?: boolean;\n  alwaysVisible?: boolean;\n  gridCols?: number;\n  gridRows?: number;\n  category?: string;\n  aspectRatio?: 'auto' | 'square' | 'wide' | 'tall';\n  refreshInterval?: number;\n  priority?: number;\n  showTitle?: boolean;\n  totalGridColumns?: number;\n  onToggleEnabled?: (enabled: boolean) => void;\n  onToggleLock?: (locked: boolean) => void;\n  onGridColsChange?: (gridCols: number) => void;\n  onGridRowsChange?: (gridRows: number) => void;\n  onToggleCollapsible?: (collapsible: boolean) => void;\n  onUpdateCategory?: (category: string) => void;\n  onUpdateAspectRatio?: (aspectRatio: 'auto' | 'square' | 'wide' | 'tall') => void;\n  onUpdateRefreshInterval?: (interval: number) => void;\n  onUpdatePriority?: (priority: number) => void;\n  onToggleShowTitle?: (showTitle: boolean) => void;\n  trigger?: React.ReactNode;\n  open?: boolean;\n  onOpenChange?: (open: boolean) => void;\n}\n\nexport function WidgetSettingsModal({\n  id,\n  title,\n  enabled = true,\n  collapsible = true,\n  locked = false,\n  alwaysVisible = false,\n  gridCols = 3,\n  gridRows = 1,\n  category = 'general',\n  aspectRatio = 'auto',\n  refreshInterval = 0,\n  priority = 5,\n  showTitle = true,\n  totalGridColumns = 12,\n  onToggleEnabled,\n  onToggleLock,\n  onGridColsChange,\n  onGridRowsChange,\n  onToggleCollapsible,\n  onUpdateCategory,\n  onUpdateAspectRatio,\n  onUpdateRefreshInterval,\n  onUpdatePriority,\n  onToggleShowTitle,\n  trigger,\n  open,\n  onOpenChange,\n}: WidgetSettingsModalProps) {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const handleOpenChange = (newOpen: boolean) => {\n    if (onOpenChange) {\n      onOpenChange(newOpen);\n    } else {\n      setIsOpen(newOpen);\n    }\n  };\n\n  const formatRefreshTime = (seconds: number) => {\n    if (seconds === 0) return 'Disabled';\n    if (seconds < 60) return `${seconds}s`;\n    if (seconds < 3600) return `${Math.floor(seconds / 60)}m`;\n    return `${Math.floor(seconds / 3600)}h`;\n  };\n\n  const getPriorityLabel = (priority: number) => {\n    if (priority >= 8) return 'Critical';\n    if (priority >= 6) return 'High';\n    if (priority >= 4) return 'Medium';\n    if (priority >= 2) return 'Low';\n    return 'Minimal';\n  };\n\n  const getPriorityColor = (priority: number) => {\n    if (priority >= 8) return 'text-red-500';\n    if (priority >= 6) return 'text-orange-500';\n    if (priority >= 4) return 'text-yellow-500';\n    return 'text-green-500';\n  };\n\n  return (\n    <Dialog open={open !== undefined ? open : isOpen} onOpenChange={handleOpenChange}>\n      {trigger && <DialogTrigger asChild>{trigger}</DialogTrigger>}\n      \n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <Settings className=\"h-5 w-5\" />\n            <span>Widget Settings</span>\n            <Badge variant=\"outline\" className=\"text-xs\">{title}</Badge>\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Quick Status Overview */}\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm flex items-center space-x-2\">\n                <Info className=\"h-4 w-4\" />\n                <span>Current Status</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-2\">\n              <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                <div className=\"flex items-center justify-between\">\n                  <span>Visibility:</span>\n                  <Badge variant={enabled ? 'default' : 'secondary'}>\n                    {enabled ? 'Visible' : 'Hidden'}\n                  </Badge>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span>Size:</span>\n                  <Badge variant=\"outline\">{gridCols}×{gridRows}</Badge>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span>Category:</span>\n                  <Badge variant=\"outline\" className=\"capitalize\">{category}</Badge>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span>Priority:</span>\n                  <Badge variant=\"outline\" className={getPriorityColor(priority)}>\n                    {getPriorityLabel(priority)} ({priority})\n                  </Badge>\n                </div>\n              </div>\n              \n              {/* Status Indicators */}\n              <div className=\"flex flex-wrap gap-2 mt-3\">\n                {alwaysVisible && (\n                  <Badge variant=\"destructive\" className=\"text-xs\">\n                    <LockIcon className=\"h-3 w-3 mr-1\" />\n                    Critical Widget\n                  </Badge>\n                )}\n                {locked && (\n                  <Badge variant=\"outline\" className=\"text-xs text-yellow-600\">\n                    <LockIcon className=\"h-3 w-3 mr-1\" />\n                    Locked\n                  </Badge>\n                )}\n                {!collapsible && (\n                  <Badge variant=\"outline\" className=\"text-xs text-orange-600\">\n                    No Collapse\n                  </Badge>\n                )}\n                {refreshInterval > 0 && (\n                  <Badge variant=\"outline\" className=\"text-xs text-green-600\">\n                    <Timer className=\"h-3 w-3 mr-1\" />\n                    Auto-refresh\n                  </Badge>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Visibility & Behavior */}\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm flex items-center space-x-2\">\n                <Eye className=\"h-4 w-4\" />\n                <span>Visibility & Behavior</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-1\">\n                    <Label className=\"text-sm font-medium\">Widget Enabled</Label>\n                    <p className=\"text-xs text-muted-foreground\">Show or hide this widget on the dashboard</p>\n                  </div>\n                  <Switch\n                    checked={enabled}\n                    onCheckedChange={onToggleEnabled}\n                    disabled={alwaysVisible}\n                  />\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-1\">\n                    <Label className=\"text-sm font-medium\">Show Title</Label>\n                    <p className=\"text-xs text-muted-foreground\">Display the widget title header</p>\n                  </div>\n                  <Switch\n                    checked={showTitle}\n                    onCheckedChange={onToggleShowTitle}\n                  />\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-1\">\n                    <Label className=\"text-sm font-medium\">Allow Collapsing</Label>\n                    <p className=\"text-xs text-muted-foreground\">Users can collapse this widget</p>\n                  </div>\n                  <Switch\n                    checked={collapsible}\n                    onCheckedChange={onToggleCollapsible}\n                  />\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-1\">\n                    <Label className=\"text-sm font-medium\">Lock Widget</Label>\n                    <p className=\"text-xs text-muted-foreground\">Prevent moving or resizing</p>\n                  </div>\n                  <Switch\n                    checked={locked}\n                    onCheckedChange={onToggleLock}\n                  />\n                </div>\n\n                {alwaysVisible && (\n                  <div className=\"col-span-1 md:col-span-2\">\n                    <div className=\"p-3 bg-blue-50 dark:bg-blue-950/20 rounded-lg border border-blue-200 dark:border-blue-800\">\n                      <div className=\"flex items-center space-x-2 text-sm text-blue-800 dark:text-blue-200\">\n                        <Info className=\"h-4 w-4\" />\n                        <span>This is a critical widget that cannot be hidden.</span>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Layout & Sizing */}\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm flex items-center space-x-2\">\n                <Grid3X3 className=\"h-4 w-4\" />\n                <span>Layout & Sizing</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {/* Width Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <Label className=\"text-sm font-medium\">Width (Columns)</Label>\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      {gridCols} of {totalGridColumns}\n                    </Badge>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Slider\n                      value={[gridCols]}\n                      onValueChange={(value: number[]) => onGridColsChange?.(value[0])}\n                      min={1}\n                      max={totalGridColumns}\n                      step={1}\n                      className=\"w-full\"\n                      disabled={locked}\n                    />\n                    <div className=\"flex justify-between text-xs text-muted-foreground\">\n                      <span>1 col</span>\n                      <span>{totalGridColumns} cols</span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Height Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <Label className=\"text-sm font-medium\">Height (Rows)</Label>\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      {gridRows} row{gridRows !== 1 ? 's' : ''}\n                    </Badge>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Slider\n                      value={[gridRows]}\n                      onValueChange={(value: number[]) => onGridRowsChange?.(value[0])}\n                      min={1}\n                      max={6}\n                      step={1}\n                      className=\"w-full\"\n                      disabled={locked}\n                    />\n                    <div className=\"flex justify-between text-xs text-muted-foreground\">\n                      <span>1 row</span>\n                      <span>6 rows</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Aspect Ratio */}\n              <div className=\"space-y-2\">\n                <Label className=\"text-sm font-medium\">Aspect Ratio</Label>\n                <Select value={aspectRatio} onValueChange={onUpdateAspectRatio}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"auto\">Auto (Content-based)</SelectItem>\n                    <SelectItem value=\"square\">Square (1:1)</SelectItem>\n                    <SelectItem value=\"wide\">Wide (2:1)</SelectItem>\n                    <SelectItem value=\"tall\">Tall (1:2)</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Category & Priority */}\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm flex items-center space-x-2\">\n                <Palette className=\"h-4 w-4\" />\n                <span>Category & Priority</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Category</Label>\n                  <Select value={category} onValueChange={onUpdateCategory}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"general\">General</SelectItem>\n                      <SelectItem value=\"overview\">Overview</SelectItem>\n                      <SelectItem value=\"admin\">Admin</SelectItem>\n                      <SelectItem value=\"metrics\">Metrics</SelectItem>\n                      <SelectItem value=\"analytics\">Analytics</SelectItem>\n                      <SelectItem value=\"reports\">Reports</SelectItem>\n                      <SelectItem value=\"settings\">Settings</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <Label className=\"text-sm font-medium\">Priority</Label>\n                    <Badge variant=\"outline\" className={`text-xs ${getPriorityColor(priority)}`}>\n                      {getPriorityLabel(priority)} ({priority})\n                    </Badge>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Slider\n                      value={[priority]}\n                      onValueChange={(value: number[]) => onUpdatePriority?.(value[0])}\n                      min={0}\n                      max={10}\n                      step={1}\n                      className=\"w-full\"\n                    />\n                    <div className=\"flex justify-between text-xs text-muted-foreground\">\n                      <span>Low (0)</span>\n                      <span>High (10)</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Auto-Refresh */}\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm flex items-center space-x-2\">\n                <Timer className=\"h-4 w-4\" />\n                <span>Auto-Refresh Settings</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <Label className=\"text-sm font-medium\">Refresh Interval</Label>\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    {formatRefreshTime(refreshInterval)}\n                  </Badge>\n                </div>\n                <div className=\"space-y-2\">\n                  <Slider\n                    value={[refreshInterval]}\n                    onValueChange={(value: number[]) => onUpdateRefreshInterval?.(value[0])}\n                    min={0}\n                    max={3600}\n                    step={60}\n                    className=\"w-full\"\n                  />\n                  <div className=\"flex justify-between text-xs text-muted-foreground\">\n                    <span>Disabled</span>\n                    <span>1 hour</span>\n                  </div>\n                </div>\n                {refreshInterval > 0 && (\n                  <div className=\"p-3 bg-green-50 dark:bg-green-950/20 rounded-lg border border-green-200 dark:border-green-800\">\n                    <div className=\"flex items-center space-x-2 text-sm text-green-800 dark:text-green-200\">\n                      <Timer className=\"h-4 w-4\" />\n                      <span>Widget will auto-refresh every {formatRefreshTime(refreshInterval)}</span>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Preview */}\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm\">Live Preview</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"p-4 border rounded-lg bg-muted/50\">\n                <div className=\"text-sm space-y-2\">\n                  <div className=\"font-medium\">Widget: {title}</div>\n                  <div className=\"text-muted-foreground\">\n                    Size: {gridCols}×{gridRows} • Category: {category} • Priority: {priority}\n                  </div>\n                  <div className=\"flex flex-wrap gap-1\">\n                    {enabled && <Badge variant=\"default\" className=\"text-xs\">Visible</Badge>}\n                    {!enabled && <Badge variant=\"secondary\" className=\"text-xs\">Hidden</Badge>}\n                    {showTitle && <Badge variant=\"outline\" className=\"text-xs\">Title Shown</Badge>}\n                    {!showTitle && <Badge variant=\"outline\" className=\"text-xs text-orange-600\">Title Hidden</Badge>}\n                    {collapsible && <Badge variant=\"outline\" className=\"text-xs\">Collapsible</Badge>}\n                    {locked && <Badge variant=\"outline\" className=\"text-xs text-yellow-600\">Locked</Badge>}\n                    {refreshInterval > 0 && <Badge variant=\"outline\" className=\"text-xs text-green-600\">Auto-refresh</Badge>}\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/layout/ClientNav.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/layout/MainLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/layout/PageLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/notifications/NotificationBell.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/notifications/NotificationCenter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/notifications/NotificationPermissionModal.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":182,"column":48,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[6626,6651],"text":"You&apos;ll be notified about:"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[6626,6651],"text":"You&lsquo;ll be notified about:"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[6626,6651],"text":"You&#39;ll be notified about:"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[6626,6651],"text":"You&rsquo;ll be notified about:"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { toast } from 'sonner';\nimport InternalNotificationService from '@/services/InternalNotificationService';\nimport { Bell, Volume2, Smartphone, X, Check } from 'lucide-react';\n\ninterface NotificationPermissionModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onComplete: (granted: boolean) => void;\n}\n\nexport function NotificationPermissionModal({ \n  isOpen, \n  onComplete \n}: NotificationPermissionModalProps) {\n  const [isRequesting, setIsRequesting] = useState(false);\n  const [permissionStatus, setPermissionStatus] = useState<NotificationPermission>('default');\n  \n  const notificationService = InternalNotificationService.getInstance();\n\n  useEffect(() => {\n    if (typeof window !== 'undefined' && 'Notification' in window) {\n      setPermissionStatus(Notification.permission);\n    }\n  }, []);\n\n  const handleRequestPermission = async () => {\n    if (!('Notification' in window)) {\n      toast.error('Notifications are not supported in this browser');\n      onComplete(false);\n      return;\n    }\n\n    setIsRequesting(true);\n    try {\n      // Request browser notification permission\n      const permission = await Notification.requestPermission();\n      setPermissionStatus(permission);\n\n      if (permission === 'granted') {\n        // Request push notification permission through our service\n        const pushGranted = await notificationService.requestPushPermission();\n        \n        if (pushGranted) {\n          // Enable push notifications in user preferences\n          await fetch('/api/notifications/enable-push-for-user', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            credentials: 'include'\n          });\n\n          // Show a test notification\n          setTimeout(() => {\n            new Notification('Welcome to OVO!', {\n              body: 'You&apos;ll now receive important notifications about your account.',\n              icon: '/icons/notification-icon.svg',\n              badge: '/icons/notification-badge.svg'\n            });\n          }, 1000);\n\n          toast.success('Notifications enabled successfully!');\n        } else {\n          toast.warning('Basic notifications enabled, but push notifications may not work properly');\n        }\n\n        // Only mark as \"asked\" when permission is granted\n        await fetch('/api/user/notification-permission-requested', {\n          method: 'POST',\n          credentials: 'include'\n        });\n\n        onComplete(true);\n      } else {\n        // Permission denied - don't mark as asked so modal can appear again\n        toast.info('You can enable notifications later by clicking the notification icon in your browser&apos;s address bar');\n        onComplete(false);\n      }\n\n    } catch (error) {\n      console.error('Error requesting notification permission:', error);\n      toast.error('Failed to set up notifications');\n      onComplete(false);\n    } finally {\n      setIsRequesting(false);\n    }\n  };\n\n  const handleSkip = async () => {\n    // Don't mark as \"asked\" when user skips, so modal can appear again\n    toast.info('You can enable notifications later in Settings');\n    onComplete(false);\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={() => {}}>\n      <DialogContent className=\"sm:max-w-[500px]\" onPointerDownOutside={(e) => e.preventDefault()}>\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Bell className=\"w-5 h-5 text-blue-600\" />\n            Stay Updated with Notifications\n          </DialogTitle>\n          <DialogDescription>\n            Enable notifications to receive important updates about your account, \n            support tickets, and payment activities.\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          {/* Notification Types */}\n          <div className=\"grid grid-cols-1 gap-3\">\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm flex items-center gap-2\">\n                  <Bell className=\"w-4 h-4\" />\n                  Desktop Notifications\n                </CardTitle>\n                <CardDescription className=\"text-xs\">\n                  Get instant alerts in your browser for important events\n                </CardDescription>\n              </CardHeader>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm flex items-center gap-2\">\n                  <Volume2 className=\"w-4 h-4\" />\n                  Sound Alerts\n                </CardTitle>\n                <CardDescription className=\"text-xs\">\n                  Audio notifications for urgent messages and alerts\n                </CardDescription>\n              </CardHeader>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm flex items-center gap-2\">\n                  <Smartphone className=\"w-4 h-4\" />\n                  Push Notifications\n                </CardTitle>\n                <CardDescription className=\"text-xs\">\n                  Receive notifications even when the app is closed\n                </CardDescription>\n              </CardHeader>\n            </Card>\n          </div>\n\n          {/* Current Status */}\n          {permissionStatus !== 'default' && (\n            <div className=\"p-3 bg-gray-50 rounded-lg\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-gray-600\">Current Permission Status:</span>\n                <Badge variant={permissionStatus === 'granted' ? 'default' : 'secondary'}>\n                  {permissionStatus === 'granted' ? (\n                    <>\n                      <Check className=\"w-3 h-3 mr-1\" />\n                      Granted\n                    </>\n                  ) : (\n                    <>\n                      <X className=\"w-3 h-3 mr-1\" />\n                      Denied\n                    </>\n                  )}\n                </Badge>\n              </div>\n            </div>\n          )}\n\n          {/* Benefits */}\n          <div className=\"text-sm text-gray-600\">\n            <p className=\"font-medium mb-2\">You'll be notified about:</p>\n            <ul className=\"space-y-1 text-xs\">\n              <li>• Support ticket updates and responses</li>\n              <li>• Payment confirmations and billing alerts</li>\n              <li>• Account balance and low balance warnings</li>\n              <li>• Phone number approvals and assignments</li>\n              <li>• System maintenance and security alerts</li>\n            </ul>\n          </div>\n        </div>\n\n        <DialogFooter className=\"flex gap-2\">\n          <Button\n            variant=\"outline\"\n            onClick={handleSkip}\n            disabled={isRequesting}\n          >\n            Maybe Later\n          </Button>\n          <Button\n            onClick={handleRequestPermission}\n            disabled={isRequesting || permissionStatus === 'granted'}\n            className=\"flex-1\"\n          >\n            {isRequesting ? (\n              'Setting up...'\n            ) : permissionStatus === 'granted' ? (\n              'Already Enabled'\n            ) : (\n              'Enable Notifications'\n            )}\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/notifications/NotificationPermissionProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/notifications/NotificationToast.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'handleDismiss'. Either include it or remove the dependency array.","line":123,"column":6,"nodeType":"ArrayExpression","endLine":123,"endColumn":26,"suggestions":[{"desc":"Update the dependencies array to be: [isPaused, duration, handleDismiss]","fix":{"range":[3557,3577],"text":"[isPaused, duration, handleDismiss]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { X, AlertTriangle, Info, Bell, ExternalLink } from 'lucide-react';\nimport { InternalNotification } from '@/types/notifications';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { cn } from '@/lib/utils';\n\ninterface NotificationToastProps {\n  notification: InternalNotification;\n  onDismiss: () => void;\n  onAction?: () => void;\n  duration?: number;\n  position?: 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left' | 'top-center' | 'bottom-center';\n}\n\ninterface ToastPosition {\n  top?: string;\n  bottom?: string;\n  left?: string;\n  right?: string;\n  transform?: string;\n}\n\nconst getPositionStyles = (position: string): ToastPosition => {\n  switch (position) {\n    case 'top-left':\n      return { top: '24px', left: '24px' };\n    case 'top-right':\n      return { top: '24px', right: '24px' };\n    case 'top-center':\n      return { top: '24px', left: '50%', transform: 'translateX(-50%)' };\n    case 'bottom-left':\n      return { bottom: '24px', left: '24px' };\n    case 'bottom-right':\n      return { bottom: '24px', right: '24px' };\n    case 'bottom-center':\n      return { bottom: '24px', left: '50%', transform: 'translateX(-50%)' };\n    default:\n      return { top: '24px', right: '24px' };\n  }\n};\n\nconst getPriorityIcon = (priority: string) => {\n  switch (priority) {\n    case 'urgent':\n      return <AlertTriangle className=\"w-6 h-6 text-red-500\" />;\n    case 'high':\n      return <AlertTriangle className=\"w-6 h-6 text-orange-500\" />;\n    case 'medium':\n      return <Info className=\"w-6 h-6 text-blue-500\" />;\n    case 'low':\n      return <Bell className=\"w-6 h-6 text-gray-500\" />;\n    default:\n      return <Info className=\"w-6 h-6 text-blue-500\" />;\n  }\n};\n\nconst getPriorityColors = (priority: string) => {\n  switch (priority) {\n    case 'urgent':\n      return {\n        border: 'border-l-red-500',\n        bg: 'bg-red-50 dark:bg-red-950/20',\n        accent: 'text-red-700 dark:text-red-300'\n      };\n    case 'high':\n      return {\n        border: 'border-l-orange-500',\n        bg: 'bg-orange-50 dark:bg-orange-950/20',\n        accent: 'text-orange-700 dark:text-orange-300'\n      };\n    case 'medium':\n      return {\n        border: 'border-l-blue-500',\n        bg: 'bg-blue-50 dark:bg-blue-950/20',\n        accent: 'text-blue-700 dark:text-blue-300'\n      };\n    case 'low':\n      return {\n        border: 'border-l-gray-500',\n        bg: 'bg-gray-50 dark:bg-gray-950/20',\n        accent: 'text-gray-700 dark:text-gray-300'\n      };\n    default:\n      return {\n        border: 'border-l-blue-500',\n        bg: 'bg-blue-50 dark:bg-blue-950/20',\n        accent: 'text-blue-700 dark:text-blue-300'\n      };\n  }\n};\n\nexport default function NotificationToast({ \n  notification, \n  onDismiss, \n  onAction,\n  duration = 5000,\n  position = 'top-right' \n}: NotificationToastProps) {\n  const [isVisible, setIsVisible] = useState(true);\n  const [progress, setProgress] = useState(100);\n  const [isPaused, setIsPaused] = useState(false);\n\n  const colors = getPriorityColors(notification.priority);\n  const positionStyles = getPositionStyles(position);\n\n  useEffect(() => {\n    if (!isPaused && duration > 0) {\n      const interval = setInterval(() => {\n        setProgress((prev) => {\n          const newProgress = prev - (100 / (duration / 100));\n          if (newProgress <= 0) {\n            handleDismiss();\n            return 0;\n          }\n          return newProgress;\n        });\n      }, 100);\n\n      return () => clearInterval(interval);\n    }\n  }, [isPaused, duration]);\n\n  const handleDismiss = () => {\n    setIsVisible(false);\n    setTimeout(() => onDismiss(), 300); // Wait for animation\n  };\n\n  const handleAction = () => {\n    if (notification.actionUrl) {\n      window.open(notification.actionUrl, '_blank');\n    }\n    if (onAction) {\n      onAction();\n    }\n    handleDismiss();\n  };\n\n  const slideDirection = position.includes('left') ? -100 : position.includes('right') ? 100 : 0;\n  const slideAxis = position.includes('left') || position.includes('right') ? 'x' : 'y';\n  const initialSlide = slideAxis === 'x' ? slideDirection : position.includes('top') ? -100 : 100;\n\n  return (\n    <AnimatePresence>\n      {isVisible && (\n        <motion.div\n          initial={{ \n            opacity: 0,\n            scale: 0.8,\n            [slideAxis]: initialSlide\n          }}\n          animate={{ \n            opacity: 1,\n            scale: 1,\n            [slideAxis]: 0\n          }}\n          exit={{ \n            opacity: 0,\n            scale: 0.8,\n            [slideAxis]: initialSlide\n          }}\n          transition={{\n            type: \"spring\",\n            stiffness: 300,\n            damping: 30,\n            duration: 0.3\n          }}\n          className=\"fixed z-50 pointer-events-auto\"\n          style={positionStyles}\n          onMouseEnter={() => setIsPaused(true)}\n          onMouseLeave={() => setIsPaused(false)}\n        >\n          <div className={cn(\n            \"relative min-w-[400px] max-w-[500px] rounded-xl shadow-2xl border border-gray-200 dark:border-gray-700\",\n            \"backdrop-blur-md bg-white/95 dark:bg-gray-900/95\",\n            \"overflow-hidden\",\n            colors.bg,\n            colors.border,\n            \"border-l-4\"\n          )}>\n            {/* Progress bar */}\n            {duration > 0 && (\n              <div className=\"absolute top-0 left-0 h-1 bg-gray-200 dark:bg-gray-700 w-full\">\n                <motion.div\n                  className={cn(\"h-full transition-all duration-100\", colors.accent.replace('text-', 'bg-'))}\n                  style={{ width: `${progress}%` }}\n                />\n              </div>\n            )}\n\n            <div className=\"relative p-6\">\n              {/* Header */}\n              <div className=\"flex items-start justify-between gap-4 mb-3\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"flex-shrink-0\">\n                    {getPriorityIcon(notification.priority)}\n                  </div>\n                  <div className=\"flex-1 min-w-0\">\n                    <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 leading-tight\">\n                      {notification.title}\n                    </h3>\n                    <div className=\"flex items-center gap-2 mt-1\">\n                      <span className={cn(\n                        \"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium\",\n                        colors.bg,\n                        colors.accent\n                      )}>\n                        {notification.priority.toUpperCase()}\n                      </span>\n                      <span className=\"text-xs text-gray-500 dark:text-gray-400\">\n                        {notification.type.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase())}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n\n                <button\n                  onClick={handleDismiss}\n                  className=\"flex-shrink-0 p-1 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors\"\n                >\n                  <X className=\"w-5 h-5 text-gray-400\" />\n                </button>\n              </div>\n\n              {/* Message */}\n              <div className=\"mb-4\">\n                <p className=\"text-gray-700 dark:text-gray-300 leading-relaxed\">\n                  {notification.message}\n                </p>\n                \n                {/* Additional data display */}\n                {notification.data && Object.keys(notification.data).length > 0 && (\n                  <div className=\"mt-3 p-3 rounded-lg bg-gray-50 dark:bg-gray-800/50\">\n                    <div className=\"space-y-1\">\n                      {Object.entries(notification.data).map(([key, value]) => (\n                        <div key={key} className=\"flex justify-between text-sm\">\n                          <span className=\"text-gray-500 dark:text-gray-400 capitalize\">\n                            {key.replace(/([A-Z])/g, ' $1').trim()}:\n                          </span>\n                          <span className=\"text-gray-700 dark:text-gray-300 font-medium\">\n                            {typeof value === 'object' ? JSON.stringify(value) : String(value)}\n                          </span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n\n              {/* Actions */}\n              <div className=\"flex items-center justify-between\">\n                <div className=\"text-xs text-gray-500 dark:text-gray-400\">\n                  {new Date(notification.createdAt).toLocaleTimeString()}\n                </div>\n\n                <div className=\"flex gap-2\">\n                  <button\n                    onClick={handleDismiss}\n                    className=\"px-3 py-1.5 text-sm font-medium text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200 transition-colors\"\n                  >\n                    Dismiss\n                  </button>\n                  \n                  {notification.actionUrl && (\n                    <button\n                      onClick={handleAction}\n                      className={cn(\n                        \"inline-flex items-center gap-1.5 px-4 py-1.5 text-sm font-medium rounded-lg transition-all\",\n                        \"bg-blue-600 hover:bg-blue-700 text-white shadow-sm hover:shadow-md\"\n                      )}\n                    >\n                      View Details\n                      <ExternalLink className=\"w-3.5 h-3.5\" />\n                    </button>\n                  )}\n                </div>\n              </div>\n            </div>\n\n            {/* Decorative elements */}\n            <div className=\"absolute top-4 right-4 opacity-10\">\n              <div className={cn(\"w-20 h-20 rounded-full\", colors.accent.replace('text-', 'bg-'))} />\n            </div>\n            <div className=\"absolute bottom-2 left-2 opacity-5\">\n              <div className={cn(\"w-12 h-12 rounded-full\", colors.accent.replace('text-', 'bg-'))} />\n            </div>\n          </div>\n        </motion.div>\n      )}\n    </AnimatePresence>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/notifications/NotificationToastContainer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/notifications/ToastTestPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/onboarding/AdminOnboardingForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":554,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":554,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20253,20256],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20253,20256],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":886,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":886,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[37317,37320],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[37317,37320],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":906,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":906,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[38466,38469],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[38466,38469],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":1175,"column":29,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[51108,51178],"text":"\n              This user hasn&apos;t completed onboarding yet.\n            "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[51108,51178],"text":"\n              This user hasn&lsquo;t completed onboarding yet.\n            "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[51108,51178],"text":"\n              This user hasn&#39;t completed onboarding yet.\n            "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[51108,51178],"text":"\n              This user hasn&rsquo;t completed onboarding yet.\n            "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { CountrySelector } from '@/components/ui/country-selector';\nimport { MultiCountrySelector } from '@/components/ui/multi-country-selector';\nimport { \n  Building2, \n  Phone, \n  Mail, \n  MessageCircle, \n  Plus, \n  X, \n  Save,\n  BarChart3,\n  Loader2,\n  Edit,\n  Check,\n  ArrowRight,\n  ArrowLeft,\n  Sparkles,\n  Target,\n  Users\n} from 'lucide-react';\nimport { toast } from 'sonner';\nimport { UserOnboarding, ContactMethod, ServiceInterest } from '@/models/UserOnboarding';\nimport { CountryData, COUNTRIES } from '@/data/countries';\n\ninterface AdminOnboardingFormProps {\n  userId: string;\n  existingData?: UserOnboarding | null;\n  onSave: () => void;\n}\n\nconst SERVICE_OPTIONS = [\n  { \n    value: 'outbound_calls', \n    label: 'Outbound Calls', \n    icon: Phone, \n    needsCountries: true,\n    description: 'Make calls to customers worldwide'\n  },\n  { \n    value: 'inbound_calls', \n    label: 'Inbound Calls', \n    icon: Phone, \n    needsCountries: true,\n    description: 'Receive calls from customers'\n  },\n  { \n    value: 'did_numbers', \n    label: 'DID Numbers (SDA)', \n    icon: Phone, \n    needsCountries: true,\n    description: 'Direct Inward Dialing numbers'\n  },\n  { \n    value: 'sms', \n    label: 'SMS Services', \n    icon: MessageCircle, \n    needsCountries: true,\n    description: 'Send and receive text messages'\n  },\n  { \n    value: 'emailing', \n    label: 'Email Marketing', \n    icon: Mail, \n    needsCountries: false,\n    description: 'Email campaigns and automation'\n  },\n  { \n    value: 'whatsapp_business', \n    label: 'WhatsApp Business API', \n    icon: MessageCircle, \n    needsCountries: true,\n    description: 'WhatsApp business messaging'\n  },\n  { \n    value: 'other', \n    label: 'Other Services', \n    icon: Plus, \n    needsCountries: false,\n    description: 'Custom communication solutions'\n  },\n];\n\nconst CONTACT_METHOD_OPTIONS = [\n  { value: 'phone', label: 'Phone', icon: Phone, description: 'Phone calls' },\n  { value: 'email', label: 'Email', icon: Mail, description: 'Email communication' },\n  { value: 'whatsapp', label: 'WhatsApp', icon: MessageCircle, description: 'WhatsApp messaging' },\n  { value: 'other', label: 'Other', icon: Plus, description: 'Custom method' },\n];\n\nexport function AdminOnboardingForm({ \n  userId, \n  existingData, \n  onSave \n}: AdminOnboardingFormProps) {\n  const [isLoading, setIsLoading] = useState(false);\n  const [isEditing, setIsEditing] = useState(!existingData); // Start in edit mode if no data\n  const [currentStep, setCurrentStep] = useState(1);\n  const totalSteps = 4;\n\n  // Form data\n  const [formData, setFormData] = useState({\n    companyName: existingData?.companyName || '',\n    address: {\n      street: existingData?.address?.street || '',\n      city: existingData?.address?.city || '',\n      postalCode: existingData?.address?.postalCode || '',\n      country: existingData?.address?.country || '',\n      state: existingData?.address?.state || ''\n    },\n    phoneNumber: existingData?.phoneNumber || '',\n    preferredContactMethods: existingData?.preferredContactMethods || [] as ContactMethod[],\n    servicesInterested: existingData?.servicesInterested || [] as ServiceInterest[],\n    trafficVolume: existingData?.trafficVolume || {\n      type: 'volume' as 'volume' | 'agents',\n      value: 0,\n      unit: 'minutes' as 'minutes' | 'calls' | 'sms' | 'agents',\n      period: 'monthly' as 'daily' | 'weekly' | 'monthly' | 'yearly'\n    },\n    additionalNotes: existingData?.additionalNotes || ''\n  });\n\n  // Contact method form\n  const [newContactMethod, setNewContactMethod] = useState<ContactMethod>({\n    type: 'phone',\n    value: '',\n    description: ''\n  });\n\n  // Service selection\n  const [selectedServices, setSelectedServices] = useState<string[]>(\n    existingData?.servicesInterested?.map(s => s.service) || []\n  );\n  const [serviceDescriptions, setServiceDescriptions] = useState<Record<string, string>>(\n    existingData?.servicesInterested?.reduce((acc, service) => ({\n      ...acc,\n      [service.service]: service.description || ''\n    }), {}) || {}\n  );\n  const [serviceCountries, setServiceCountries] = useState<Record<string, string[]>>(\n    existingData?.servicesInterested?.reduce((acc, service) => ({\n      ...acc,\n      [service.service]: service.countries || []\n    }), {}) || {}\n  );\n\n  // Selected country for address\n  const [selectedCountry, setSelectedCountry] = useState<CountryData | null>(() => {\n    if (existingData?.address?.country) {\n      return COUNTRIES.find(c => c.name === existingData.address.country) || null;\n    }\n    return null;\n  });\n\n  const handleNext = () => {\n    if (isEditing ? validateCurrentStep() : true) {\n      setCurrentStep(prev => Math.min(prev + 1, totalSteps));\n    }\n  };\n\n  const handlePrevious = () => {\n    setCurrentStep(prev => Math.max(prev - 1, 1));\n  };\n\n  const validateCurrentStep = () => {\n    if (!isEditing) return true; // Skip validation in view mode\n\n    switch (currentStep) {\n      case 1: // Company details\n        if (!formData.companyName.trim()) {\n          toast.error('Company name is required');\n          return false;\n        }\n        if (!formData.address.street.trim() || !formData.address.city.trim() || \n            !formData.address.postalCode.trim() || !formData.address.country) {\n          toast.error('Complete address is required');\n          return false;\n        }\n        if (!formData.phoneNumber.trim()) {\n          toast.error('Phone number is required');\n          return false;\n        }\n        return true;\n\n      case 2: // Contact methods\n        if (formData.preferredContactMethods.length === 0) {\n          toast.error('At least one contact method is required');\n          return false;\n        }\n        return true;\n\n      case 3: // Services\n        if (selectedServices.length === 0) {\n          toast.error('Please select at least one service');\n          return false;\n        }\n        return true;\n\n      case 4: // Traffic volume\n        if (formData.trafficVolume.value <= 0) {\n          toast.error('Please specify traffic volume');\n          return false;\n        }\n        return true;\n\n      default:\n        return true;\n    }\n  };\n\n  const handleCountrySelect = (country: CountryData) => {\n    setSelectedCountry(country);\n    setFormData(prev => ({\n      ...prev,\n      address: {\n        ...prev.address,\n        country: country.name\n      }\n    }));\n  };\n\n  const addContactMethod = () => {\n    if (!newContactMethod.value.trim()) {\n      toast.error('Contact value is required');\n      return;\n    }\n\n    if (newContactMethod.type === 'other' && !newContactMethod.description?.trim()) {\n      toast.error('Description is required for other contact methods');\n      return;\n    }\n\n    setFormData(prev => ({\n      ...prev,\n      preferredContactMethods: [...prev.preferredContactMethods, { ...newContactMethod }]\n    }));\n\n    setNewContactMethod({\n      type: 'phone',\n      value: '',\n      description: ''\n    });\n  };\n\n  const removeContactMethod = (index: number) => {\n    setFormData(prev => ({\n      ...prev,\n      preferredContactMethods: prev.preferredContactMethods.filter((_, i) => i !== index)\n    }));\n  };\n\n  const handleServiceToggle = (serviceValue: string) => {\n    setSelectedServices(prev => {\n      if (prev.includes(serviceValue)) {\n        return prev.filter(s => s !== serviceValue);\n      } else {\n        return [...prev, serviceValue];\n      }\n    });\n  };\n\n  const handleServiceDescriptionChange = (service: string, description: string) => {\n    setServiceDescriptions(prev => ({ ...prev, [service]: description }));\n  };\n\n  const handleServiceCountriesChange = (service: string, countries: string[]) => {\n    setServiceCountries(prev => ({ ...prev, [service]: countries }));\n  };\n\n  const handleSave = async () => {\n    setIsLoading(true);\n\n    try {\n      // Basic validation\n      if (!formData.companyName.trim()) {\n        toast.error('Company name is required');\n        setIsLoading(false);\n        return;\n      }\n\n      if (!formData.address.street.trim() || !formData.address.city.trim() || \n          !formData.address.postalCode.trim() || !formData.address.country.trim()) {\n        toast.error('Complete address is required');\n        setIsLoading(false);\n        return;\n      }\n\n      if (!formData.phoneNumber.trim()) {\n        toast.error('Phone number is required');\n        setIsLoading(false);\n        return;\n      }\n\n      if (formData.preferredContactMethods.length === 0) {\n        toast.error('At least one contact method is required');\n        setIsLoading(false);\n        return;\n      }\n\n      if (selectedServices.length === 0) {\n        toast.error('At least one service must be selected');\n        setIsLoading(false);\n        return;\n      }\n\n      if (formData.trafficVolume.value <= 0) {\n        toast.error('Traffic volume must be greater than 0');\n        setIsLoading(false);\n        return;\n      }\n\n      // Prepare services data\n      const servicesInterested: ServiceInterest[] = selectedServices.map(service => ({\n        service: service as ServiceInterest['service'],\n        description: serviceDescriptions[service] || undefined,\n        countries: serviceCountries[service] || undefined\n      }));\n\n      const onboardingData = {\n        ...formData,\n        servicesInterested,\n        completed: true,\n        completedAt: new Date().toISOString(),\n      };\n\n      const response = await fetch(`/api/admin/onboarding/${userId}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(onboardingData),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to save onboarding data');\n      }\n\n      toast.success('Onboarding data saved successfully!');\n      setIsEditing(false);\n      onSave();\n    } catch (error) {\n      console.error('Error saving onboarding data:', error);\n      toast.error(error instanceof Error ? error.message : 'Failed to save onboarding data');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const renderStepContent = () => {\n    switch (currentStep) {\n      case 1:\n        return (\n          <div className=\"space-y-6\">\n            {/* Header */}\n            <div className=\"text-center space-y-2\">\n              <div \n                className=\"mx-auto w-12 h-12 rounded-xl flex items-center justify-center shadow-md bg-black dark:bg-white\"\n              >\n                <Building2 className=\"h-6 w-6 text-white dark:text-black\" />\n              </div>\n              <div>\n                <h3 \n                  className=\"text-xl font-bold text-black dark:text-white\"\n                >\n                  Company Information\n                </h3>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  {isEditing ? 'Edit company details' : 'Company information overview'}\n                </p>\n              </div>\n            </div>\n\n            <div className=\"space-y-4\">\n              {/* Company Name */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"companyName\" className=\"text-sm font-medium text-black dark:text-white\">Company Name *</Label>\n                {isEditing ? (\n                  <Input\n                    id=\"companyName\"\n                    value={formData.companyName}\n                    onChange={(e) => setFormData(prev => ({ ...prev, companyName: e.target.value }))}\n                    placeholder=\"Enter company name\"\n                    className=\"h-10 border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-900 text-black dark:text-white\"\n                  />\n                ) : (\n                  <div className=\"p-3 bg-gray-100 dark:bg-gray-800 rounded-lg border border-gray-300 dark:border-gray-600\">\n                    <p className=\"font-medium text-black dark:text-white\">{formData.companyName || 'Not provided'}</p>\n                  </div>\n                )}\n              </div>\n\n              {/* Address Section */}\n              <div className=\"space-y-3\">\n                <Label className=\"text-sm font-medium text-black dark:text-white\">Business Address *</Label>\n                \n                {isEditing ? (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                    <div className=\"md:col-span-2\">\n                      <Input\n                        value={formData.address.street}\n                        onChange={(e) => setFormData(prev => ({ \n                          ...prev, \n                          address: { ...prev.address, street: e.target.value }\n                        }))}\n                        placeholder=\"Street address\"\n                        className=\"h-10 border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-900 text-black dark:text-white\"\n                      />\n                    </div>\n                    \n                    <div>\n                      <Input\n                        value={formData.address.city}\n                        onChange={(e) => setFormData(prev => ({ \n                          ...prev, \n                          address: { ...prev.address, city: e.target.value }\n                        }))}\n                        placeholder=\"City\"\n                        className=\"h-10 border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-900 text-black dark:text-white\"\n                      />\n                    </div>\n                    \n                    <div>\n                      <Input\n                        value={formData.address.postalCode}\n                        onChange={(e) => setFormData(prev => ({ \n                          ...prev, \n                          address: { ...prev.address, postalCode: e.target.value }\n                        }))}\n                        placeholder=\"Postal code\"\n                        className=\"h-10 border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-900 text-black dark:text-white\"\n                      />\n                    </div>\n                    \n                    <div>\n                      <Input\n                        value={formData.address.state}\n                        onChange={(e) => setFormData(prev => ({ \n                          ...prev, \n                          address: { ...prev.address, state: e.target.value }\n                        }))}\n                        placeholder=\"State/Province\"\n                        className=\"h-10 border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-900 text-black dark:text-white\"\n                      />\n                    </div>\n                    \n                    <div>\n                      <CountrySelector\n                        value={selectedCountry?.code}\n                        onValueChange={handleCountrySelect}\n                        placeholder=\"Select country\"\n                      />\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"p-3 bg-gray-100 dark:bg-gray-800 rounded-lg border border-gray-300 dark:border-gray-600 space-y-1\">\n                    <p className=\"font-medium text-black dark:text-white\">{formData.address.street || 'Not provided'}</p>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                      {formData.address.city && formData.address.postalCode && \n                        `${formData.address.city}, ${formData.address.postalCode}`}\n                    </p>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                      {formData.address.state && `${formData.address.state}, `}{formData.address.country}\n                    </p>\n                  </div>\n                )}\n              </div>\n\n              {/* Phone Number */}\n              <div className=\"space-y-2\">\n                <Label className=\"text-sm font-medium text-black dark:text-white\">Business Phone Number *</Label>\n                {isEditing ? (\n                  <div className=\"flex space-x-2\">\n                    {/* Country Code Display */}\n                    {selectedCountry?.phoneCode && (\n                      <div className=\"flex items-center bg-gray-100 dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg px-3 py-2 text-sm font-medium text-black dark:text-white min-w-0\">\n                        <span className=\"text-lg leading-none mr-2\">{selectedCountry.flag}</span>\n                        <span className=\"whitespace-nowrap\">{selectedCountry.phoneCode}</span>\n                      </div>\n                    )}\n                    \n                    {/* Phone Number Field */}\n                    <Input\n                      type=\"tel\"\n                      value={formData.phoneNumber.startsWith(selectedCountry?.phoneCode || '') ? \n                        formData.phoneNumber.substring((selectedCountry?.phoneCode || '').length).trim() : \n                        formData.phoneNumber}\n                      onChange={(e) => {\n                        const phoneNumber = e.target.value.replace(/[^\\d\\s\\-\\(\\)]/g, ''); // Clean input\n                        const fullNumber = selectedCountry?.phoneCode ? \n                          `${selectedCountry.phoneCode} ${phoneNumber}`.trim() : phoneNumber;\n                        setFormData(prev => ({ ...prev, phoneNumber: fullNumber }));\n                      }}\n                      placeholder=\"Enter phone number\"\n                      className=\"flex-1 h-10 border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-900 text-black dark:text-white\"\n                    />\n                  </div>\n                ) : (\n                  <div className=\"p-3 bg-gray-100 dark:bg-gray-800 rounded-lg border border-gray-300 dark:border-gray-600\">\n                    <p className=\"font-medium text-black dark:text-white\">{formData.phoneNumber || 'Not provided'}</p>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        );\n\n      case 2:\n        return (\n          <div className=\"space-y-6\">\n            {/* Header */}\n            <div className=\"text-center space-y-2\">\n              <div \n                className=\"mx-auto w-12 h-12 rounded-xl flex items-center justify-center shadow-md bg-black dark:bg-white\"\n              >\n                <MessageCircle className=\"h-6 w-6 text-white dark:text-black\" />\n              </div>\n              <div>\n                <h3 \n                  className=\"text-xl font-bold text-black dark:text-white\"\n                >\n                  Contact Preferences\n                </h3>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  {isEditing ? 'Manage contact methods' : 'Preferred contact methods'}\n                </p>\n              </div>\n            </div>\n\n            <div className=\"space-y-6\">\n              {/* Add Contact Method */}\n              {isEditing && (\n                <Card className=\"border-dashed border-gray-300 dark:border-gray-600 bg-gray-50 dark:bg-gray-800\">\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-base flex items-center gap-2 text-black dark:text-white\">\n                      <Plus className=\"h-4 w-4 text-black dark:text-white\" />\n                      Add Contact Method\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-4 gap-3\">\n                      <div>\n                        <Select\n                          value={newContactMethod.type}\n                          onValueChange={(value: any) => setNewContactMethod(prev => ({ ...prev, type: value }))}\n                        >\n                          <SelectTrigger className=\"h-10 border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-900\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {CONTACT_METHOD_OPTIONS.map(option => (\n                              <SelectItem key={option.value} value={option.value}>\n                                <div className=\"flex items-center space-x-2\">\n                                  <option.icon className=\"h-4 w-4\" />\n                                  <span>{option.label}</span>\n                                </div>\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      \n                      <div className=\"md:col-span-2\">\n                        <Input\n                          value={newContactMethod.value}\n                          onChange={(e) => setNewContactMethod(prev => ({ ...prev, value: e.target.value }))}\n                          placeholder={\n                            newContactMethod.type === 'phone' ? '+1 555 123 4567' : \n                            newContactMethod.type === 'email' ? 'contact@company.com' : \n                            newContactMethod.type === 'whatsapp' ? '+1 555 123 4567' : \n                            'Enter contact details'\n                          }\n                          className=\"h-10 border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-900\"\n                        />\n                      </div>\n                      \n                      <div>\n                        <Button \n                          onClick={addContactMethod} \n                          className=\"h-10 w-full text-white dark:text-black bg-black dark:bg-white hover:bg-gray-800 dark:hover:bg-gray-200\"\n                        >\n                          <Plus className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                    \n                    {newContactMethod.type === 'other' && (\n                      <div className=\"mt-3\">\n                        <Input\n                          value={newContactMethod.description || ''}\n                          onChange={(e) => setNewContactMethod(prev => ({ ...prev, description: e.target.value }))}\n                          placeholder=\"Description for other method\"\n                          className=\"h-10 border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-900\"\n                        />\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              )}\n\n              {/* Existing Contact Methods */}\n              <div className=\"space-y-3\">\n                <Label className=\"text-sm font-medium text-black dark:text-white\">Contact Methods</Label>\n                \n                {formData.preferredContactMethods.length === 0 ? (\n                  <div className=\"text-center py-8 text-gray-500 dark:text-gray-400\">\n                    <MessageCircle className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n                    <p>No contact methods added yet</p>\n                  </div>\n                ) : (\n                  <div className=\"grid gap-3\">\n                    {formData.preferredContactMethods.map((method, index) => {\n                      const MethodIcon = CONTACT_METHOD_OPTIONS.find(opt => opt.value === method.type)?.icon || MessageCircle;\n                      return (\n                        <Card key={index} className=\"p-3 border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-900\">\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center space-x-3\">\n                              <div \n                                className=\"w-8 h-8 rounded-lg flex items-center justify-center bg-gray-100 dark:bg-gray-800\"\n                              >\n                                <MethodIcon className=\"h-4 w-4 text-black dark:text-white\" />\n                              </div>\n                              <div>\n                                <div className=\"flex items-center space-x-2\">\n                                  <Badge variant=\"secondary\">\n                                    {CONTACT_METHOD_OPTIONS.find(opt => opt.value === method.type)?.label || method.type}\n                                  </Badge>\n                                  <span className=\"font-medium text-black dark:text-white\">{method.value}</span>\n                                </div>\n                                {method.description && (\n                                  <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">{method.description}</p>\n                                )}\n                              </div>\n                            </div>\n                            {isEditing && (\n                              <Button\n                                onClick={() => removeContactMethod(index)}\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                className=\"text-red-600 hover:text-red-500 hover:bg-red-50 dark:hover:bg-red-900/20\"\n                              >\n                                <X className=\"h-4 w-4\" />\n                              </Button>\n                            )}\n                          </div>\n                        </Card>\n                      );\n                    })}\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        );\n\n      case 3:\n        return (\n          <div className=\"space-y-6\">\n            {/* Header */}\n            <div className=\"text-center space-y-2\">\n              <div \n                className=\"mx-auto w-12 h-12 rounded-xl flex items-center justify-center shadow-md bg-black dark:bg-white\"\n              >\n                <Target className=\"h-6 w-6 text-white dark:text-black\" />\n              </div>\n              <div>\n                <h3 \n                  className=\"text-xl font-bold text-black dark:text-white\"\n                >\n                  Services & Solutions\n                </h3>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  {isEditing ? 'Select and configure services' : 'Interested services overview'}\n                </p>\n              </div>\n            </div>\n\n            <div className=\"space-y-4\">\n              {SERVICE_OPTIONS.map((service) => {\n                const isSelected = selectedServices.includes(service.value);\n                const ServiceIcon = service.icon;\n                \n                return (\n                  <Card \n                    key={service.value} \n                    className={`transition-all duration-200 cursor-pointer border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-900 ${\n                      isSelected \n                        ? 'shadow-md border-black dark:border-white' \n                        : 'hover:shadow-sm'\n                    }`}\n                    onClick={() => isEditing && handleServiceToggle(service.value)}\n                  >\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-start space-x-3\">\n                        <div className=\"flex items-center space-x-3 flex-1\">\n                          {isEditing && (\n                            <Checkbox\n                              checked={isSelected}\n                              onCheckedChange={() => handleServiceToggle(service.value)}\n                            />\n                          )}\n                          <div \n                            className={`w-10 h-10 rounded-lg flex items-center justify-center ${\n                              isSelected \n                                ? 'bg-black dark:bg-white text-white dark:text-black' \n                                : 'bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-400'\n                            }`}\n                          >\n                            <ServiceIcon className=\"h-5 w-5\" />\n                          </div>\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center space-x-2\">\n                              <h4 className=\"font-semibold text-black dark:text-white\">{service.label}</h4>\n                              {isSelected && (\n                                <Badge \n                                  variant=\"secondary\"\n                                  className=\"bg-black dark:bg-white text-white dark:text-black\"\n                                >\n                                  Selected\n                                </Badge>\n                              )}\n                            </div>\n                            <p className=\"text-sm text-gray-600 dark:text-gray-400\">{service.description}</p>\n                          </div>\n                        </div>\n                      </div>\n                      \n                      {/* Expanded options for selected services */}\n                      {isSelected && (\n                        <div className=\"mt-4 space-y-3 border-t pt-4\" onClick={(e) => e.stopPropagation()}>\n                          {/* Service Description */}\n                          <div>\n                            <Label className=\"text-sm font-medium text-black dark:text-white\">Additional Details (Optional)</Label>\n                            {isEditing ? (\n                              <Textarea\n                                value={serviceDescriptions[service.value] || ''}\n                                onChange={(e) => handleServiceDescriptionChange(service.value, e.target.value)}\n                                placeholder={`Describe your ${service.label.toLowerCase()} requirements...`}\n                                rows={2}\n                                className=\"mt-1 border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-900 text-black dark:text-white\"\n                              />\n                            ) : (\n                              <div className=\"mt-1 p-2 bg-gray-50 dark:bg-gray-800 rounded text-sm text-black dark:text-white\">\n                                {serviceDescriptions[service.value] || 'No additional details provided'}\n                              </div>\n                            )}\n                          </div>\n                          \n                          {/* Country Selection for services that need it */}\n                          {service.needsCountries && (\n                            <div>\n                              <Label className=\"text-sm font-medium text-black dark:text-white\">Target Countries</Label>\n                              {isEditing ? (\n                                <div className=\"mt-1\">\n                                  <MultiCountrySelector\n                                    values={serviceCountries[service.value] || []}\n                                    onValuesChange={(countries: string[]) => handleServiceCountriesChange(service.value, countries)}\n                                    placeholder=\"Select target countries\"\n                                  />\n                                </div>\n                              ) : (\n                                <div className=\"mt-1 flex flex-wrap gap-1\">\n                                  {(serviceCountries[service.value] || []).length > 0 ? (\n                                    serviceCountries[service.value]?.map((country) => (\n                                      <Badge key={country} variant=\"outline\" className=\"text-xs\">\n                                        {country}\n                                      </Badge>\n                                    ))\n                                  ) : (\n                                    <span className=\"text-sm text-gray-600 dark:text-gray-400\">No countries specified</span>\n                                  )}\n                                </div>\n                              )}\n                            </div>\n                          )}\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n          </div>\n        );\n\n      case 4:\n        return (\n          <div className=\"space-y-6\">\n            {/* Header */}\n            <div className=\"text-center space-y-2\">\n              <div \n                className=\"mx-auto w-12 h-12 rounded-xl flex items-center justify-center shadow-md bg-black dark:bg-white\"\n              >\n                <BarChart3 className=\"h-6 w-6 text-white dark:text-black\" />\n              </div>\n              <div>\n                <h3 \n                  className=\"text-xl font-bold text-black dark:text-white\"\n                >\n                  Traffic & Scale\n                </h3>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  {isEditing ? 'Configure expected volume' : 'Expected traffic overview'}\n                </p>\n              </div>\n            </div>\n\n            <div className=\"space-y-6\">\n              {/* Traffic Volume Type */}\n              <Card className=\"border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-900\">\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-base text-black dark:text-white\">Volume Type</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {isEditing ? (\n                    <RadioGroup\n                      value={formData.trafficVolume.type}\n                      onValueChange={(value: 'volume' | 'agents') => \n                        setFormData(prev => ({ \n                          ...prev, \n                          trafficVolume: { ...prev.trafficVolume, type: value }\n                        }))\n                      }\n                    >\n                      <div className=\"flex items-center space-x-2\">\n                        <RadioGroupItem value=\"volume\" id=\"volume\" />\n                        <Label htmlFor=\"volume\" className=\"text-black dark:text-white\">Communication Volume</Label>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <RadioGroupItem value=\"agents\" id=\"agents\" />\n                        <Label htmlFor=\"agents\" className=\"text-black dark:text-white\">Number of Agents</Label>\n                      </div>\n                    </RadioGroup>\n                  ) : (\n                    <div className=\"p-3 bg-gray-100 dark:bg-gray-800 rounded-lg\">\n                      <p className=\"font-medium text-black dark:text-white\">\n                        {formData.trafficVolume.type === 'volume' ? 'Communication Volume' : 'Number of Agents'}\n                      </p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Volume/Agent Count */}\n              <Card className=\"border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-900\">\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-base text-black dark:text-white\">\n                    {formData.trafficVolume.type === 'volume' ? 'Expected Volume' : 'Agent Count'}\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  {isEditing ? (\n                    <>\n                      <div>\n                        <Label className=\"text-sm font-medium text-black dark:text-white\">\n                          {formData.trafficVolume.type === 'volume' ? 'Volume Amount' : 'Number of Agents'}\n                        </Label>\n                        <Input\n                          type=\"number\"\n                          min=\"1\"\n                          value={formData.trafficVolume.value || ''}\n                          onChange={(e) => setFormData(prev => ({ \n                            ...prev, \n                            trafficVolume: { ...prev.trafficVolume, value: parseInt(e.target.value) || 0 }\n                          }))}\n                          placeholder=\"Enter amount\"\n                          className=\"mt-1 border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-900 text-black dark:text-white\"\n                        />\n                      </div>\n\n                      {formData.trafficVolume.type === 'volume' && (\n                        <>\n                          <div>\n                            <Label className=\"text-sm font-medium text-black dark:text-white\">Unit</Label>\n                            <Select\n                              value={formData.trafficVolume.unit}\n                              onValueChange={(value: any) => setFormData(prev => ({ \n                                ...prev, \n                                trafficVolume: { ...prev.trafficVolume, unit: value }\n                              }))}\n                            >\n                              <SelectTrigger className=\"mt-1 border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-900\">\n                                <SelectValue />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"minutes\">Minutes</SelectItem>\n                                <SelectItem value=\"calls\">Calls</SelectItem>\n                                <SelectItem value=\"sms\">SMS Messages</SelectItem>\n                              </SelectContent>\n                            </Select>\n                          </div>\n\n                          <div>\n                            <Label className=\"text-sm font-medium text-black dark:text-white\">Period</Label>\n                            <Select\n                              value={formData.trafficVolume.period}\n                              onValueChange={(value: any) => setFormData(prev => ({ \n                                ...prev, \n                                trafficVolume: { ...prev.trafficVolume, period: value }\n                              }))}\n                            >\n                              <SelectTrigger className=\"mt-1 border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-900\">\n                                <SelectValue />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"daily\">Daily</SelectItem>\n                                <SelectItem value=\"weekly\">Weekly</SelectItem>\n                                <SelectItem value=\"monthly\">Monthly</SelectItem>\n                                <SelectItem value=\"yearly\">Yearly</SelectItem>\n                              </SelectContent>\n                            </Select>\n                          </div>\n                        </>\n                      )}\n                    </>\n                  ) : (\n                    <div className=\"p-3 bg-gray-100 dark:bg-gray-800 rounded-lg\">\n                      <p className=\"font-medium text-black dark:text-white\">\n                        {formData.trafficVolume.value.toLocaleString()}{' '}\n                        {formData.trafficVolume.type === 'agents' \n                          ? 'agents' \n                          : `${formData.trafficVolume.unit} ${formData.trafficVolume.period}`\n                        }\n                      </p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Additional Notes */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"additionalNotes\" className=\"text-sm font-medium text-black dark:text-white\">Additional Requirements (Optional)</Label>\n                {isEditing ? (\n                  <>\n                    <Textarea\n                      id=\"additionalNotes\"\n                      value={formData.additionalNotes}\n                      onChange={(e) => setFormData(prev => ({ ...prev, additionalNotes: e.target.value }))}\n                      placeholder=\"Any specific requirements, integrations, or special needs...\"\n                      rows={3}\n                      maxLength={1000}\n                      className=\"text-sm border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-900 text-black dark:text-white\"\n                    />\n                    <div className=\"text-right text-xs text-gray-500 dark:text-gray-400\">\n                      {formData.additionalNotes.length}/1000 characters\n                    </div>\n                  </>\n                ) : (\n                  <div className=\"p-3 bg-gray-100 dark:bg-gray-800 rounded-lg\">\n                    <p className=\"text-sm text-black dark:text-white\">{formData.additionalNotes || 'No additional requirements specified'}</p>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  const renderViewModeContent = () => {\n    return (\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n        {/* Company Information Card */}\n        <Card className=\"h-fit border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-900\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-base flex items-center gap-2 text-black dark:text-white\">\n              <div \n                className=\"w-8 h-8 rounded-lg flex items-center justify-center bg-gray-100 dark:bg-gray-800\"\n              >\n                <Building2 className=\"h-4 w-4 text-black dark:text-white\" />\n              </div>\n              Company Information\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <div>\n              <span className=\"text-xs font-medium text-gray-600 dark:text-gray-400\">Company Name</span>\n              <p className=\"font-medium text-black dark:text-white\">{formData.companyName || 'Not provided'}</p>\n            </div>\n            \n            <div>\n              <span className=\"text-xs font-medium text-gray-600 dark:text-gray-400\">Address</span>\n              <div className=\"text-sm text-black dark:text-white\">\n                <p>{formData.address.street || 'Not provided'}</p>\n                <p>\n                  {formData.address.city && formData.address.postalCode && \n                    `${formData.address.city}, ${formData.address.postalCode}`}\n                </p>\n                <p>\n                  {formData.address.state && `${formData.address.state}, `}{formData.address.country}\n                </p>\n              </div>\n            </div>\n            \n            <div>\n              <span className=\"text-xs font-medium text-gray-600 dark:text-gray-400\">Phone Number</span>\n              <p className=\"font-medium text-black dark:text-white\">{formData.phoneNumber || 'Not provided'}</p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Contact Methods Card */}\n        <Card className=\"h-fit border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-900\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-base flex items-center gap-2 text-black dark:text-white\">\n              <div \n                className=\"w-8 h-8 rounded-lg flex items-center justify-center bg-gray-100 dark:bg-gray-800\"\n              >\n                <MessageCircle className=\"h-4 w-4 text-black dark:text-white\" />\n              </div>\n              Contact Methods\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {formData.preferredContactMethods.length > 0 ? (\n              <div className=\"space-y-2\">\n                {formData.preferredContactMethods.map((method, index) => {\n                  const MethodIcon = CONTACT_METHOD_OPTIONS.find(opt => opt.value === method.type)?.icon || MessageCircle;\n                  return (\n                    <div key={index} className=\"flex items-center space-x-2 p-2 bg-gray-100 dark:bg-gray-800 rounded-lg\">\n                      <MethodIcon className=\"h-4 w-4 text-gray-600 dark:text-gray-400\" />\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex items-center space-x-2\">\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            {CONTACT_METHOD_OPTIONS.find(opt => opt.value === method.type)?.label || method.type}\n                          </Badge>\n                          <span className=\"text-sm font-medium truncate text-black dark:text-white\">{method.value}</span>\n                        </div>\n                        {method.description && (\n                          <p className=\"text-xs text-gray-600 dark:text-gray-400 mt-1\">{method.description}</p>\n                        )}\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            ) : (\n              <p className=\"text-sm text-gray-600 dark:text-gray-400 text-center py-4\">No contact methods provided</p>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Services Card */}\n        <Card className=\"h-fit border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-900\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-base flex items-center gap-2 text-black dark:text-white\">\n              <div \n                className=\"w-8 h-8 rounded-lg flex items-center justify-center bg-gray-100 dark:bg-gray-800\"\n              >\n                <Target className=\"h-4 w-4 text-black dark:text-white\" />\n              </div>\n              Services & Solutions\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {formData.servicesInterested.length > 0 ? (\n              <div className=\"space-y-3\">\n                {formData.servicesInterested.map((service, index) => {\n                  const serviceOption = SERVICE_OPTIONS.find(opt => opt.value === service.service);\n                  const ServiceIcon = serviceOption?.icon || Target;\n                  return (\n                    <div key={index} className=\"p-3 bg-gray-100 dark:bg-gray-800 rounded-lg\">\n                      <div className=\"flex items-center space-x-2 mb-2\">\n                        <ServiceIcon className=\"h-4 w-4 text-gray-600 dark:text-gray-400\" />\n                        <span className=\"font-medium text-sm text-black dark:text-white\">{serviceOption?.label || service.service}</span>\n                      </div>\n                      \n                      {service.description && (\n                        <p className=\"text-xs text-gray-600 dark:text-gray-400 mb-2\">{service.description}</p>\n                      )}\n                      \n                      {service.countries && service.countries.length > 0 && (\n                        <div className=\"flex flex-wrap gap-1\">\n                          {service.countries.slice(0, 3).map(country => (\n                            <Badge key={country} variant=\"outline\" className=\"text-xs\">\n                              {country}\n                            </Badge>\n                          ))}\n                          {service.countries.length > 3 && (\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              +{service.countries.length - 3} more\n                            </Badge>\n                          )}\n                        </div>\n                      )}\n                    </div>\n                  );\n                })}\n              </div>\n            ) : (\n              <p className=\"text-sm text-gray-600 dark:text-gray-400 text-center py-4\">No services specified</p>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Traffic & Scale Card */}\n        <Card className=\"h-fit border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-900\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-base flex items-center gap-2 text-black dark:text-white\">\n              <div \n                className=\"w-8 h-8 rounded-lg flex items-center justify-center bg-gray-100 dark:bg-gray-800\"\n              >\n                <BarChart3 className=\"h-4 w-4 text-black dark:text-white\" />\n              </div>\n              Traffic & Scale\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <div>\n              <span className=\"text-xs font-medium text-gray-600 dark:text-gray-400\">Volume Type</span>\n              <p className=\"font-medium text-black dark:text-white\">\n                {formData.trafficVolume.type === 'volume' ? 'Communication Volume' : 'Number of Agents'}\n              </p>\n            </div>\n            \n            <div>\n              <span className=\"text-xs font-medium text-gray-600 dark:text-gray-400\">Expected Volume</span>\n              <p className=\"font-medium text-black dark:text-white\">\n                {formData.trafficVolume.value.toLocaleString()}{' '}\n                {formData.trafficVolume.type === 'agents' \n                  ? 'agents' \n                  : `${formData.trafficVolume.unit} ${formData.trafficVolume.period}`\n                }\n              </p>\n            </div>\n\n            {formData.additionalNotes && (\n              <div>\n                <span className=\"text-xs font-medium text-gray-600 dark:text-gray-400\">Additional Notes</span>\n                <p className=\"text-sm mt-1 p-2 bg-gray-100 dark:bg-gray-800 rounded border border-gray-300 dark:border-gray-600 text-black dark:text-white\">{formData.additionalNotes}</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    );\n  };\n\n  // Step indicators\n  const stepIndicators = [\n    { step: 1, label: 'Company', icon: Building2 },\n    { step: 2, label: 'Contact', icon: MessageCircle },\n    { step: 3, label: 'Services', icon: Target },\n    { step: 4, label: 'Scale', icon: BarChart3 },\n  ];\n\n  if (!existingData && !isEditing) {\n    return (\n      <div \n        className=\"text-center py-12\"\n      >\n        <div className=\"space-y-4\">\n          <div \n            className=\"mx-auto w-16 h-16 rounded-2xl flex items-center justify-center shadow-lg bg-black dark:bg-white\"\n          >\n            <Users className=\"h-8 w-8 text-white dark:text-black\" />\n          </div>\n          <div>\n            <h3 className=\"text-lg font-semibold text-black dark:text-white\">\n              No Onboarding Data\n            </h3>\n            <p className=\"text-gray-600 dark:text-gray-400\">\n              This user hasn't completed onboarding yet.\n            </p>\n          </div>\n          <Button \n            onClick={() => setIsEditing(true)}\n            className=\"gap-2 bg-black dark:bg-white text-white dark:text-black hover:bg-gray-800 dark:hover:bg-gray-200\"\n          >\n            <Plus className=\"h-4 w-4\" />\n            Create Onboarding Data\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header with Mode Toggle */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <div className=\"flex items-center gap-2 mb-1\">\n            <div \n              className=\"inline-flex items-center gap-2 px-3 py-1.5 rounded-full text-sm font-medium bg-black dark:bg-white text-white dark:text-black\"\n            >\n              <Sparkles className=\"h-4 w-4\" />\n              {isEditing ? 'Edit Mode' : 'View Mode'}\n            </div>\n          </div>\n          <h3 className=\"text-lg font-semibold text-black dark:text-white\">\n            Onboarding Information\n          </h3>\n          <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n            {isEditing ? 'Edit onboarding details with step-by-step interface' : 'Complete onboarding overview'}\n          </p>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          {!isEditing ? (\n            <Button \n              onClick={() => setIsEditing(true)} \n              variant=\"outline\"\n              className=\"gap-2 border-black dark:border-white text-black dark:text-white hover:bg-gray-100 dark:hover:bg-gray-800\"\n            >\n              <Edit className=\"h-4 w-4\" />\n              Edit\n            </Button>\n          ) : (\n            <div className=\"flex space-x-2\">\n              <Button \n                onClick={handleSave} \n                disabled={isLoading}\n                className=\"gap-2 bg-black dark:bg-white text-white dark:text-black hover:bg-gray-800 dark:hover:bg-gray-200\"\n              >\n                {isLoading ? (\n                  <>\n                    <Loader2 className=\"h-4 w-4 animate-spin\" />\n                    Saving...\n                  </>\n                ) : (\n                  <>\n                    <Save className=\"h-4 w-4\" />\n                    Save\n                  </>\n                )}\n              </Button>\n              <Button \n                onClick={() => setIsEditing(false)} \n                variant=\"outline\"\n                disabled={isLoading}\n                className=\"border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800\"\n              >\n                Cancel\n              </Button>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Progress Steps (only in edit mode) */}\n      {isEditing && (\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between mb-4\">\n            {stepIndicators.map((indicator, index) => {\n              const isActive = currentStep === indicator.step;\n              const isCompleted = currentStep > indicator.step;\n              const IconComponent = indicator.icon;\n\n              return (\n                <div key={indicator.step} className=\"flex items-center\">\n                  <div \n                    className={`relative flex items-center justify-center w-10 h-10 rounded-lg transition-all duration-300 cursor-pointer ${\n                      isActive \n                        ? 'shadow-md scale-105 bg-black dark:bg-white' \n                        : isCompleted\n                        ? 'shadow-sm bg-black dark:bg-white'\n                        : 'bg-gray-200 dark:bg-gray-700 border border-gray-300 dark:border-gray-600'\n                    }`}\n                    onClick={() => setCurrentStep(indicator.step)}\n                  >\n                    <IconComponent className={`h-4 w-4 ${\n                      isActive || isCompleted ? 'text-white dark:text-black' : 'text-gray-500 dark:text-gray-400'\n                    }`} />\n                    {isCompleted && (\n                      <div \n                        className=\"absolute -top-0.5 -right-0.5 w-4 h-4 rounded-full flex items-center justify-center bg-green-500\"\n                      >\n                        <Check className=\"h-2.5 w-2.5 text-white\" />\n                      </div>\n                    )}\n                  </div>\n                  <div className=\"ml-2 hidden md:block\">\n                    <div className={`text-xs font-medium ${\n                      isActive ? 'text-black dark:text-white' : 'text-gray-500 dark:text-gray-400'\n                    }`}>\n                      {indicator.label}\n                    </div>\n                  </div>\n                  \n                  {index < stepIndicators.length - 1 && (\n                    <div \n                      className={`flex-1 h-0.5 mx-3 rounded-full transition-colors duration-300 ${\n                        currentStep > indicator.step ? 'bg-black dark:bg-white' : 'bg-gray-300 dark:bg-gray-600'\n                      }`}\n                    />\n                  )}\n                </div>\n              );\n            })}\n          </div>\n\n          {/* Progress Bar */}\n          <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-1.5 overflow-hidden\">\n            <div \n              className=\"h-full transition-all duration-500 ease-out rounded-full bg-black dark:bg-white\"\n              style={{ \n                width: `${(currentStep / totalSteps) * 100}%`\n              }}\n            />\n          </div>\n          <div className=\"flex justify-between text-xs text-gray-500 dark:text-gray-400 mt-1\">\n            <span>Step {currentStep} of {totalSteps}</span>\n            <span>{Math.round((currentStep / totalSteps) * 100)}% complete</span>\n          </div>\n        </div>\n      )}\n\n      {/* Main Content */}\n      <Card \n        className=\"border-gray-300 dark:border-gray-600 shadow-lg bg-white dark:bg-gray-900\"\n      >\n        <CardContent className=\"p-6\">\n          {isEditing ? renderStepContent() : renderViewModeContent()}\n        </CardContent>\n      </Card>\n\n      {/* Navigation (only in edit mode) */}\n      {isEditing && (\n        <div className=\"flex items-center justify-between mt-6\">\n          <div>\n            {currentStep > 1 ? (\n              <Button onClick={handlePrevious} variant=\"outline\" className=\"gap-2 border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800\">\n                <ArrowLeft className=\"h-4 w-4\" />\n                Previous\n              </Button>\n            ) : (\n              <div></div>\n            )}\n          </div>\n\n          <div className=\"flex items-center space-x-3\">\n            {currentStep < totalSteps ? (\n              <Button \n                onClick={handleNext} \n                className=\"gap-2 text-white dark:text-black bg-black dark:bg-white hover:bg-gray-800 dark:hover:bg-gray-200\"\n                disabled={isEditing && !validateCurrentStep()}\n              >\n                Continue\n                <ArrowRight className=\"h-4 w-4\" />\n              </Button>\n            ) : (\n              <Button \n                onClick={handleSave} \n                disabled={isLoading} \n                className=\"gap-2 text-white dark:text-black bg-black dark:bg-white hover:bg-gray-800 dark:hover:bg-gray-200\"\n              >\n                {isLoading ? (\n                  <>\n                    <Loader2 className=\"h-4 w-4 animate-spin\" />\n                    Saving...\n                  </>\n                ) : (\n                  <>\n                    <Save className=\"h-4 w-4\" />\n                    Save Changes\n                  </>\n                )}\n              </Button>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/onboarding/UserOnboardingForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":280,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":280,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8132,8135],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8132,8135],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":478,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":478,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16863,16866],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16863,16866],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":685,"column":98,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[27834,27880],"text":"Select the services you&apos;re interested in above"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[27834,27880],"text":"Select the services you&lsquo;re interested in above"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[27834,27880],"text":"Select the services you&#39;re interested in above"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[27834,27880],"text":"Select the services you&rsquo;re interested in above"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":788,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":788,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[32960,32963],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[32960,32963],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":811,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":811,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[34170,34173],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[34170,34173],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { CountrySelector } from '@/components/ui/country-selector';\nimport { MultiCountrySelector } from '@/components/ui/multi-country-selector';\nimport { \n  Building2, \n  Phone, \n  Mail, \n  MessageCircle, \n  Plus, \n  X, \n  Check,\n  BarChart3,\n  Loader2,\n  ArrowRight,\n  ArrowLeft,\n  Sparkles,\n  Target,\n  UserCheck\n} from 'lucide-react';\nimport { toast } from 'sonner';\nimport { UserOnboarding, ContactMethod, ServiceInterest } from '@/models/UserOnboarding';\nimport { CountryData } from '@/data/countries';\n\ninterface UserOnboardingFormProps {\n  onComplete: () => void;\n  onSkip?: () => void;\n}\n\nconst SERVICE_OPTIONS = [\n  { \n    value: 'outbound_calls', \n    label: 'Outbound Calls', \n    icon: Phone, \n    needsCountries: true,\n    description: 'Make calls to customers worldwide'\n  },\n  { \n    value: 'inbound_calls', \n    label: 'Inbound Calls', \n    icon: Phone, \n    needsCountries: true,\n    description: 'Receive calls from customers'\n  },\n  { \n    value: 'did_numbers', \n    label: 'DID Numbers (SDA)', \n    icon: Phone, \n    needsCountries: true,\n    description: 'Direct Inward Dialing numbers'\n  },\n  { \n    value: 'sms', \n    label: 'SMS Services', \n    icon: MessageCircle, \n    needsCountries: true,\n    description: 'Send and receive text messages'\n  },\n  { \n    value: 'emailing', \n    label: 'Email Marketing', \n    icon: Mail, \n    needsCountries: false,\n    description: 'Email campaigns and automation'\n  },\n  { \n    value: 'whatsapp_business', \n    label: 'WhatsApp Business API', \n    icon: MessageCircle, \n    needsCountries: true,\n    description: 'WhatsApp business messaging'\n  },\n  { \n    value: 'other', \n    label: 'Other Services', \n    icon: Plus, \n    needsCountries: false,\n    description: 'Custom communication solutions'\n  },\n];\n\nconst CONTACT_METHOD_OPTIONS = [\n  { value: 'phone', label: 'Phone', icon: Phone, description: 'Phone calls' },\n  { value: 'email', label: 'Email', icon: Mail, description: 'Email communication' },\n  { value: 'whatsapp', label: 'WhatsApp', icon: MessageCircle, description: 'WhatsApp messaging' },\n  { value: 'other', label: 'Other', icon: Plus, description: 'Custom method' },\n];\n\nexport function UserOnboardingForm({ onComplete, onSkip }: UserOnboardingFormProps) {\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentStep, setCurrentStep] = useState(1);\n  const totalSteps = 4;\n\n  // Form data\n  const [formData, setFormData] = useState({\n    companyName: '',\n    address: {\n      street: '',\n      city: '',\n      postalCode: '',\n      country: '',\n      state: ''\n    },\n    phoneNumber: '',\n    preferredContactMethods: [] as ContactMethod[],\n    servicesInterested: [] as ServiceInterest[],\n    trafficVolume: {\n      type: 'volume' as 'volume' | 'agents',\n      value: 0,\n      unit: 'minutes' as 'minutes' | 'calls' | 'sms' | 'agents',\n      period: 'monthly' as 'daily' | 'weekly' | 'monthly' | 'yearly'\n    },\n    additionalNotes: ''\n  });\n\n  // Contact method form\n  const [newContactMethod, setNewContactMethod] = useState<ContactMethod>({\n    type: 'phone',\n    value: '',\n    description: ''\n  });\n\n  // Service selection\n  const [selectedServices, setSelectedServices] = useState<string[]>([]);\n  const [serviceDescriptions, setServiceDescriptions] = useState<Record<string, string>>({});\n  const [serviceCountries, setServiceCountries] = useState<Record<string, string[]>>({});\n\n  // Selected country for address\n  const [selectedCountry, setSelectedCountry] = useState<CountryData | null>(null);\n\n  const handleNext = () => {\n    if (validateCurrentStep()) {\n      setCurrentStep(prev => Math.min(prev + 1, totalSteps));\n    }\n  };\n\n  const handlePrevious = () => {\n    setCurrentStep(prev => Math.max(prev - 1, 1));\n  };\n\n  const validateCurrentStep = () => {\n    switch (currentStep) {\n      case 1: // Company details\n        if (!formData.companyName.trim()) {\n          toast.error('Company name is required');\n          return false;\n        }\n        if (!formData.address.street.trim() || !formData.address.city.trim() || \n            !formData.address.postalCode.trim() || !formData.address.country) {\n          toast.error('Complete address is required');\n          return false;\n        }\n        if (!formData.phoneNumber.trim()) {\n          toast.error('Phone number is required');\n          return false;\n        }\n        return true;\n\n      case 2: // Contact methods\n        if (formData.preferredContactMethods.length === 0) {\n          toast.error('At least one contact method is required');\n          return false;\n        }\n        return true;\n\n      case 3: // Services\n        if (selectedServices.length === 0) {\n          toast.error('Please select at least one service');\n          return false;\n        }\n        return true;\n\n      case 4: // Traffic volume\n        if (formData.trafficVolume.value <= 0) {\n          toast.error('Please specify traffic volume');\n          return false;\n        }\n        return true;\n\n      default:\n        return true;\n    }\n  };\n\n  const addContactMethod = () => {\n    if (!newContactMethod.value.trim()) {\n      toast.error('Contact value is required');\n      return;\n    }\n\n    if (newContactMethod.type === 'other' && !newContactMethod.description?.trim()) {\n      toast.error('Description is required for other contact methods');\n      return;\n    }\n\n    setFormData(prev => ({\n      ...prev,\n      preferredContactMethods: [...prev.preferredContactMethods, { ...newContactMethod }]\n    }));\n\n    setNewContactMethod({\n      type: 'phone',\n      value: '',\n      description: ''\n    });\n  };\n\n  const removeContactMethod = (index: number) => {\n    setFormData(prev => ({\n      ...prev,\n      preferredContactMethods: prev.preferredContactMethods.filter((_, i) => i !== index)\n    }));\n  };\n\n  const handleServiceToggle = (serviceValue: string) => {\n    setSelectedServices(prev => {\n      if (prev.includes(serviceValue)) {\n        return prev.filter(s => s !== serviceValue);\n      } else {\n        return [...prev, serviceValue];\n      }\n    });\n  };\n\n  const handleServiceDescriptionChange = (service: string, description: string) => {\n    setServiceDescriptions(prev => ({ ...prev, [service]: description }));\n  };\n\n  const handleServiceCountriesChange = (service: string, countries: string[]) => {\n    setServiceCountries(prev => ({ ...prev, [service]: countries }));\n  };\n\n  const handleCountrySelect = (country: CountryData) => {\n    const previousCountry = selectedCountry;\n    setSelectedCountry(country);\n    setFormData(prev => {\n      // Update address country\n      const updatedForm = {\n        ...prev,\n        address: { ...prev.address, country: country.name }\n      };\n\n      // Update phone number if there's an existing phone number and country code changed\n      if (prev.phoneNumber && country.phoneCode) {\n        let phoneWithoutCode = prev.phoneNumber;\n        \n        // Remove previous country code if it exists\n        if (previousCountry?.phoneCode && prev.phoneNumber.startsWith(previousCountry.phoneCode)) {\n          phoneWithoutCode = prev.phoneNumber.substring(previousCountry.phoneCode.length).trim();\n        }\n        \n        // Add new country code\n        updatedForm.phoneNumber = phoneWithoutCode ? \n          `${country.phoneCode} ${phoneWithoutCode}`.trim() : \n          country.phoneCode;\n      }\n\n      return updatedForm;\n    });\n  };\n\n\n\n  const handleSubmit = async () => {\n    if (!validateCurrentStep()) return;\n\n    setIsLoading(true);\n\n    try {\n      // Prepare services data\n      const servicesInterested: ServiceInterest[] = selectedServices.map(service => ({\n        service: service as any,\n        description: serviceDescriptions[service] || undefined,\n        countries: serviceCountries[service] || undefined\n      }));\n\n      const onboardingData: Omit<UserOnboarding, 'userId' | 'completed' | 'completedAt' | 'createdAt' | 'updatedAt'> = {\n        ...formData,\n        servicesInterested,\n      };\n\n      const response = await fetch('/api/user/onboarding', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(onboardingData),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to save onboarding data');\n      }\n\n      toast.success('Onboarding completed successfully!');\n      onComplete();\n    } catch (error) {\n      console.error('Error submitting onboarding:', error);\n      toast.error(error instanceof Error ? error.message : 'Failed to complete onboarding');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const renderStepContent = () => {\n    switch (currentStep) {\n      case 1:\n        return (\n          <div className=\"space-y-6\">\n            {/* Header */}\n            <div className=\"text-center space-y-2\">\n              <div \n                className=\"mx-auto w-12 h-12 rounded-xl flex items-center justify-center shadow-md bg-black dark:bg-white\"\n              >\n                <Building2 className=\"h-6 w-6 text-white dark:text-black\" />\n              </div>\n              <div>\n                <h3 \n                  className=\"text-xl font-bold text-black dark:text-white\"\n                >\n                  Company Information\n                </h3>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">Tell us about your business</p>\n              </div>\n            </div>\n\n            <div className=\"space-y-4\">\n              {/* Company Name */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"companyName\" className=\"text-sm font-medium text-black dark:text-white\">Company Name *</Label>\n                <Input\n                  id=\"companyName\"\n                  value={formData.companyName}\n                  onChange={(e) => setFormData(prev => ({ ...prev, companyName: e.target.value }))}\n                  placeholder=\"Enter your company name\"\n                  className=\"h-10 border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-900 text-black dark:text-white\"\n                />\n              </div>\n\n              {/* Address Section */}\n              <div className=\"space-y-3\">\n                <Label className=\"text-sm font-medium text-black dark:text-white\">Business Address *</Label>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                  <div className=\"md:col-span-2\">\n                    <Input\n                      value={formData.address.street}\n                      onChange={(e) => setFormData(prev => ({ \n                        ...prev, \n                        address: { ...prev.address, street: e.target.value }\n                      }))}\n                      placeholder=\"Street address\"\n                      className=\"h-10 border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-900 text-black dark:text-white\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Input\n                      value={formData.address.city}\n                      onChange={(e) => setFormData(prev => ({ \n                        ...prev, \n                        address: { ...prev.address, city: e.target.value }\n                      }))}\n                      placeholder=\"City\"\n                      className=\"h-10 border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-900 text-black dark:text-white\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Input\n                      value={formData.address.postalCode}\n                      onChange={(e) => setFormData(prev => ({ \n                        ...prev, \n                        address: { ...prev.address, postalCode: e.target.value }\n                      }))}\n                      placeholder=\"Postal code\"\n                      className=\"h-10 border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-900 text-black dark:text-white\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Input\n                      value={formData.address.state}\n                      onChange={(e) => setFormData(prev => ({ \n                        ...prev, \n                        address: { ...prev.address, state: e.target.value }\n                      }))}\n                      placeholder=\"State/Province\"\n                      className=\"h-10 border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-900 text-black dark:text-white\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <CountrySelector\n                      value={selectedCountry?.code}\n                      onValueChange={handleCountrySelect}\n                      placeholder=\"Select country\"\n                    />\n                  </div>\n                </div>\n              </div>\n\n              {/* Phone Number */}\n              <div className=\"space-y-2\">\n                <Label className=\"text-sm font-medium text-black dark:text-white\">Business Phone Number *</Label>\n                <div className=\"flex space-x-2\">\n                  {/* Country Code Display */}\n                  {selectedCountry?.phoneCode && (\n                    <div className=\"flex items-center bg-gray-100 dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg px-3 py-2 text-sm font-medium text-black dark:text-white min-w-0\">\n                      <span className=\"text-lg leading-none mr-2\">{selectedCountry.flag}</span>\n                      <span className=\"whitespace-nowrap\">{selectedCountry.phoneCode}</span>\n                    </div>\n                  )}\n                  \n                  {/* Phone Number Field */}\n                  <Input\n                    type=\"tel\"\n                    value={formData.phoneNumber.startsWith(selectedCountry?.phoneCode || '') ? \n                      formData.phoneNumber.substring((selectedCountry?.phoneCode || '').length).trim() : \n                      formData.phoneNumber}\n                    onChange={(e) => {\n                      const phoneNumber = e.target.value.replace(/[^\\d\\s\\-\\(\\)]/g, ''); // Clean input\n                      const fullNumber = selectedCountry?.phoneCode ? \n                        `${selectedCountry.phoneCode} ${phoneNumber}`.trim() : phoneNumber;\n                      setFormData(prev => ({ ...prev, phoneNumber: fullNumber }));\n                    }}\n                    placeholder=\"Enter phone number\"\n                    className=\"flex-1 h-10 border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-900 text-black dark:text-white\"\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n\n      case 2:\n        return (\n          <div className=\"space-y-6\">\n            {/* Header */}\n            <div className=\"text-center space-y-2\">\n              <div \n                className=\"mx-auto w-12 h-12 rounded-xl flex items-center justify-center shadow-md bg-black dark:bg-white\"\n              >\n                <MessageCircle className=\"h-6 w-6 text-white dark:text-black\" />\n              </div>\n              <div>\n                <h3 \n                  className=\"text-xl font-bold text-black dark:text-white\"\n                >\n                  Contact Preferences\n                </h3>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  How would you like us to reach out?\n                </p>\n              </div>\n            </div>\n\n            <div className=\"space-y-6\">\n              {/* Add Contact Method */}\n              <Card className=\"border-dashed border-gray-300 dark:border-gray-600 bg-gray-50 dark:bg-gray-800\">\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-base flex items-center gap-2 text-black dark:text-white\">\n                    <Plus className=\"h-4 w-4 text-black dark:text-white\" />\n                    Add Contact Method\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-3\">\n                    <div>\n                      <Select\n                        value={newContactMethod.type}\n                        onValueChange={(value: any) => setNewContactMethod(prev => ({ ...prev, type: value }))}\n                      >\n                        <SelectTrigger className=\"border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-900\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {CONTACT_METHOD_OPTIONS.map(option => (\n                            <SelectItem key={option.value} value={option.value}>\n                              <div className=\"flex items-center space-x-2\">\n                                <option.icon className=\"h-4 w-4\" />\n                                <span>{option.label}</span>\n                              </div>\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    \n                    <div>\n                      <Input\n                        value={newContactMethod.value}\n                        onChange={(e) => setNewContactMethod(prev => ({ ...prev, value: e.target.value }))}\n                        placeholder={\n                          newContactMethod.type === 'phone' ? '+1 555 123 4567' : \n                          newContactMethod.type === 'email' ? 'contact@company.com' : \n                          newContactMethod.type === 'whatsapp' ? '+1 555 123 4567' : \n                          'Enter contact details'\n                        }\n                        className=\"h-10 border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-900\"\n                      />\n                    </div>\n                    \n                    <div>\n                      <Button \n                        onClick={addContactMethod} \n                        className=\"h-10 w-full bg-black dark:bg-white text-white dark:text-black hover:bg-gray-800 dark:hover:bg-gray-200\"\n                      >\n                        <Plus className=\"h-4 w-4 mr-2\" />\n                        Add\n                      </Button>\n                    </div>\n                  </div>\n                  \n                  {newContactMethod.type === 'other' && (\n                    <div className=\"mt-3\">\n                      <Input\n                        value={newContactMethod.description || ''}\n                        onChange={(e) => setNewContactMethod(prev => ({ ...prev, description: e.target.value }))}\n                        placeholder=\"Describe method\"\n                        className=\"h-10 border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-900\"\n                      />\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Existing Contact Methods */}\n              {formData.preferredContactMethods.length > 0 && (\n                <div className=\"space-y-3\">\n                  <h4 className=\"text-base font-semibold flex items-center gap-2 text-black dark:text-white\">\n                    <Check className=\"h-4 w-4 text-green-600\" />\n                    Your Contact Methods ({formData.preferredContactMethods.length})\n                  </h4>\n                  \n                  <div className=\"grid gap-3\">\n                    {formData.preferredContactMethods.map((method, index) => {\n                      const option = CONTACT_METHOD_OPTIONS.find(opt => opt.value === method.type);\n                      return (\n                        <div key={index} className=\"flex items-center justify-between p-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-900\">\n                          <div className=\"flex items-center space-x-3\">\n                            {option?.icon && (\n                              <div \n                                className=\"w-8 h-8 rounded-lg flex items-center justify-center bg-gray-100 dark:bg-gray-800\"\n                              >\n                                <option.icon className=\"h-4 w-4 text-black dark:text-white\" />\n                              </div>\n                            )}\n                            <div>\n                              <div className=\"font-medium capitalize text-sm text-black dark:text-white\">{method.type}</div>\n                              <div className=\"text-gray-600 dark:text-gray-400 text-xs\">\n                                {method.value}\n                                {method.description && ` - ${method.description}`}\n                              </div>\n                            </div>\n                          </div>\n                          <Button\n                            onClick={() => removeContactMethod(index)}\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"text-red-600 hover:text-red-500 hover:bg-red-50 dark:hover:bg-red-900/20\"\n                          >\n                            <X className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      );\n                    })}\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        );\n\n      case 3:\n        return (\n          <div className=\"space-y-6\">\n            {/* Header */}\n            <div className=\"text-center space-y-2\">\n              <div \n                className=\"mx-auto w-12 h-12 rounded-xl flex items-center justify-center shadow-md bg-black dark:bg-white\"\n              >\n                <Target className=\"h-6 w-6 text-white dark:text-black\" />\n              </div>\n              <div>\n                <h3 \n                  className=\"text-xl font-bold text-black dark:text-white\"\n                >\n                  Services & Solutions\n                </h3>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  What services are you interested in?\n                </p>\n              </div>\n            </div>\n\n            <div className=\"space-y-4\">\n              {/* Services Grid */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {SERVICE_OPTIONS.map((service) => {\n                  const isSelected = selectedServices.includes(service.value);\n                  \n                  return (\n                    <Card \n                      key={service.value} \n                      className={`transition-all duration-200 hover:shadow-md border cursor-pointer ${\n                        isSelected \n                          ? 'ring-2 border-black dark:border-white shadow-md' \n                          : 'border-gray-300 dark:border-gray-600 hover:border-gray-400 dark:hover:border-gray-500 bg-white dark:bg-gray-900'\n                      }`}\n                      style={isSelected ? { '--tw-ring-color': '#000000' } as React.CSSProperties : {}}\n                      onClick={() => handleServiceToggle(service.value)}\n                    >\n                      <CardHeader className=\"pb-3\">\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center space-x-3\">\n                            <div \n                              className={`w-8 h-8 rounded-lg flex items-center justify-center ${\n                                isSelected ? 'bg-black dark:bg-white text-white dark:text-black' : 'bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-400'\n                              }`}\n                            >\n                              <service.icon className=\"h-4 w-4\" />\n                            </div>\n                            <div>\n                              <CardTitle className=\"text-sm font-semibold text-black dark:text-white\">{service.label}</CardTitle>\n                              <p className=\"text-xs text-gray-600 dark:text-gray-400 mt-1\">{service.description}</p>\n                            </div>\n                          </div>\n                          <div \n                            className={`w-4 h-4 rounded-full border-2 flex items-center justify-center ${\n                              isSelected ? 'bg-black dark:bg-white border-black dark:border-white' : 'border-gray-400 dark:border-gray-500'\n                            }`}\n                          >\n                            {isSelected && <Check className=\"h-2.5 w-2.5 text-white dark:text-black\" />}\n                          </div>\n                        </div>\n                      </CardHeader>\n                      \n                      {/* Expanded options for selected services */}\n                      {isSelected && (\n                        <CardContent className=\"pt-0 space-y-3\" onClick={(e) => e.stopPropagation()}>\n                          {/* Service Description */}\n                          <div>\n                            <Label className=\"text-xs font-medium text-black dark:text-white\">Additional Details (Optional)</Label>\n                            <Textarea\n                              value={serviceDescriptions[service.value] || ''}\n                              onChange={(e) => handleServiceDescriptionChange(service.value, e.target.value)}\n                              placeholder={`Describe your needs for ${service.label.toLowerCase()}...`}\n                              rows={2}\n                              className=\"text-sm border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-900\"\n                              onClick={(e) => e.stopPropagation()}\n                            />\n                          </div>\n                          \n                          {/* Country Selection for services that need it */}\n                          {service.needsCountries && (\n                            <div>\n                              <Label className=\"text-xs font-medium text-black dark:text-white\">Target Countries</Label>\n                              <div className=\"mt-1\">\n                                <MultiCountrySelector\n                                  values={serviceCountries[service.value] || []}\n                                  onValuesChange={(countries: string[]) => handleServiceCountriesChange(service.value, countries)}\n                                  placeholder=\"Select target countries\"\n                                />\n                              </div>\n                            </div>\n                          )}\n                        </CardContent>\n                      )}\n                    </Card>\n                  );\n                })}\n              </div>\n\n              {/* Empty State */}\n              {selectedServices.length === 0 && (\n                <div className=\"text-center py-6 border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-xl bg-gray-50 dark:bg-gray-800\">\n                  <Sparkles className=\"h-8 w-8 mx-auto text-gray-400 dark:text-gray-500 mb-2\" />\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">Select the services you're interested in above</p>\n                </div>\n              )}\n            </div>\n          </div>\n        );\n\n      case 4:\n        return (\n          <div className=\"space-y-6\">\n            {/* Header */}\n            <div className=\"text-center space-y-2\">\n              <div \n                className=\"mx-auto w-12 h-12 rounded-xl flex items-center justify-center shadow-md bg-black dark:bg-white\"\n              >\n                <BarChart3 className=\"h-6 w-6 text-white dark:text-black\" />\n              </div>\n              <div>\n                <h3 \n                  className=\"text-xl font-bold text-black dark:text-white\"\n                >\n                  Volume & Scale\n                </h3>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  Help us understand your usage requirements\n                </p>\n              </div>\n            </div>\n\n            <div className=\"space-y-6\">\n              {/* Volume Type Selection */}\n              <div className=\"space-y-3\">\n                <Label className=\"text-sm font-medium text-black dark:text-white\">What are you measuring? *</Label>\n                <RadioGroup \n                  value={formData.trafficVolume.type} \n                  onValueChange={(value: 'volume' | 'agents') => \n                    setFormData(prev => ({ \n                      ...prev, \n                      trafficVolume: { ...prev.trafficVolume, type: value }\n                    }))\n                  }\n                  className=\"grid grid-cols-1 md:grid-cols-2 gap-4\"\n                >\n                  <div \n                    className=\"flex items-center space-x-3 p-4 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-900 hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors cursor-pointer\"\n                    onClick={() => setFormData(prev => ({ \n                      ...prev, \n                      trafficVolume: { ...prev.trafficVolume, type: 'volume' }\n                    }))}\n                  >\n                    <RadioGroupItem value=\"volume\" id=\"volume\" />\n                    <div className=\"flex-1\">\n                      <Label htmlFor=\"volume\" className=\"text-black dark:text-white font-medium cursor-pointer\">Communication Volume</Label>\n                      <p className=\"text-xs text-gray-600 dark:text-gray-400 mt-1\">Measure calls, SMS, or email volume</p>\n                    </div>\n                  </div>\n                  <div \n                    className=\"flex items-center space-x-3 p-4 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-900 hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors cursor-pointer\"\n                    onClick={() => setFormData(prev => ({ \n                      ...prev, \n                      trafficVolume: { ...prev.trafficVolume, type: 'agents' }\n                    }))}\n                  >\n                    <RadioGroupItem value=\"agents\" id=\"agents\" />\n                    <div className=\"flex-1\">\n                      <Label htmlFor=\"agents\" className=\"text-black dark:text-white font-medium cursor-pointer\">Number of Agents</Label>\n                      <p className=\"text-xs text-gray-600 dark:text-gray-400 mt-1\">Measure by team size</p>\n                    </div>\n                  </div>\n                </RadioGroup>\n              </div>\n\n              {/* Volume Input Section */}\n              <div className=\"space-y-4\">\n                <Label className=\"text-sm font-medium text-black dark:text-white\">\n                  {formData.trafficVolume.type === 'volume' ? 'Expected Volume *' : 'Number of Agents *'}\n                </Label>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  {/* Amount Input */}\n                  <div className=\"space-y-2\">\n                    <Label className=\"text-xs font-medium text-gray-600 dark:text-gray-400\">\n                      {formData.trafficVolume.type === 'volume' ? 'Volume Amount' : 'Agent Count'}\n                    </Label>\n                    <Input\n                      type=\"number\"\n                      min=\"1\"\n                      value={formData.trafficVolume.value || ''}\n                      onChange={(e) => setFormData(prev => ({ \n                        ...prev, \n                        trafficVolume: { ...prev.trafficVolume, value: parseInt(e.target.value) || 0 }\n                      }))}\n                      placeholder=\"Enter amount\"\n                      className=\"h-10 border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-900 text-black dark:text-white\"\n                    />\n                  </div>\n\n                  {/* Unit Selection (only for volume) */}\n                  {formData.trafficVolume.type === 'volume' && (\n                    <div className=\"space-y-2\">\n                      <Label className=\"text-xs font-medium text-gray-600 dark:text-gray-400\">Unit</Label>\n                      <Select\n                        value={formData.trafficVolume.unit}\n                        onValueChange={(value: any) => setFormData(prev => ({ \n                          ...prev, \n                          trafficVolume: { ...prev.trafficVolume, unit: value }\n                        }))}\n                      >\n                        <SelectTrigger className=\"h-10 border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-900\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"minutes\">Minutes</SelectItem>\n                          <SelectItem value=\"calls\">Calls</SelectItem>\n                          <SelectItem value=\"sms\">SMS Messages</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  )}\n\n                  {/* Period Selection (only for volume) */}\n                  {formData.trafficVolume.type === 'volume' && (\n                    <div className=\"space-y-2\">\n                      <Label className=\"text-xs font-medium text-gray-600 dark:text-gray-400\">Period</Label>\n                      <Select\n                        value={formData.trafficVolume.period}\n                        onValueChange={(value: any) => setFormData(prev => ({ \n                          ...prev, \n                          trafficVolume: { ...prev.trafficVolume, period: value }\n                        }))}\n                      >\n                        <SelectTrigger className=\"h-10 border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-900\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"daily\">Daily</SelectItem>\n                          <SelectItem value=\"weekly\">Weekly</SelectItem>\n                          <SelectItem value=\"monthly\">Monthly</SelectItem>\n                          <SelectItem value=\"yearly\">Yearly</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* Volume Summary Display */}\n              {formData.trafficVolume.value > 0 && (\n                <div className=\"p-4 border border-gray-300 dark:border-gray-600 rounded-lg bg-gray-50 dark:bg-gray-800\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-8 h-8 rounded-lg flex items-center justify-center bg-black dark:bg-white\">\n                      <BarChart3 className=\"h-4 w-4 text-white dark:text-black\" />\n                    </div>\n                    <div>\n                      <h4 className=\"text-sm font-medium text-black dark:text-white\">Volume Summary</h4>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                        <span className=\"font-semibold\">{formData.trafficVolume.value.toLocaleString()}</span>\n                        <span className=\"mx-1\">\n                          {formData.trafficVolume.type === 'agents' \n                            ? 'agents' \n                            : `${formData.trafficVolume.unit} ${formData.trafficVolume.period}`\n                          }\n                        </span>\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {/* Additional Requirements */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"additionalNotes\" className=\"text-sm font-medium text-black dark:text-white\">\n                  Additional Requirements\n                  <span className=\"text-gray-600 dark:text-gray-400 ml-1\">(Optional)</span>\n                </Label>\n                <Textarea\n                  id=\"additionalNotes\"\n                  value={formData.additionalNotes}\n                  onChange={(e) => setFormData(prev => ({ ...prev, additionalNotes: e.target.value }))}\n                  placeholder=\"Any specific requirements, integrations, or special needs...\"\n                  rows={3}\n                  maxLength={1000}\n                  className=\"text-sm border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-900 text-black dark:text-white\"\n                />\n                <div className=\"text-right text-xs text-gray-500 dark:text-gray-400\">\n                  {formData.additionalNotes.length}/1000 characters\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  // Step indicators\n  const stepIndicators = [\n    { step: 1, label: 'Company', icon: Building2 },\n    { step: 2, label: 'Contact', icon: MessageCircle },\n    { step: 3, label: 'Services', icon: Target },\n    { step: 4, label: 'Scale', icon: BarChart3 },\n  ];\n\n  return (\n    <div \n      className=\"min-h-screen bg-gray-50 dark:bg-gray-900\"\n    >\n      <div className=\"max-w-4xl mx-auto p-6 py-8\">\n        {/* Header */}\n        <div className=\"text-center space-y-4 mb-8\">\n          <div \n            className=\"inline-flex items-center gap-2 px-3 py-1.5 rounded-full text-sm font-medium mb-3 bg-black dark:bg-white text-white dark:text-black\"\n          >\n            <Sparkles className=\"h-4 w-4\" />\n            Complete Your Profile\n          </div>\n          <h1 className=\"text-2xl md:text-3xl font-bold mb-2 text-black dark:text-white\">\n            Welcome to Your Onboarding\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-400 max-w-xl mx-auto\">\n            Help us understand your business needs so we can provide the best service for you.\n          </p>\n        </div>\n\n        {/* Progress Steps */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between mb-4\">\n            {stepIndicators.map((indicator, index) => {\n              const isActive = currentStep === indicator.step;\n              const isCompleted = currentStep > indicator.step;\n              const IconComponent = indicator.icon;\n\n              return (\n                <div key={indicator.step} className=\"flex items-center\">\n                  <div \n                    className={`relative flex items-center justify-center w-10 h-10 rounded-lg transition-all duration-300 ${\n                      isActive \n                        ? 'shadow-md scale-105 bg-black dark:bg-white' \n                        : isCompleted\n                        ? 'shadow-sm bg-black dark:bg-white'\n                        : 'bg-gray-200 dark:bg-gray-700 border border-gray-300 dark:border-gray-600'\n                    }`}\n                  >\n                    <IconComponent className={`h-4 w-4 ${\n                      isActive || isCompleted ? 'text-white dark:text-black' : 'text-gray-500 dark:text-gray-400'\n                    }`} />\n                    {isCompleted && (\n                      <div \n                        className=\"absolute -top-0.5 -right-0.5 w-4 h-4 rounded-full flex items-center justify-center bg-green-500\"\n                      >\n                        <Check className=\"h-2.5 w-2.5 text-white\" />\n                      </div>\n                    )}\n                  </div>\n                  <div className=\"ml-2 hidden md:block\">\n                    <div className={`text-xs font-medium ${\n                      isActive ? 'text-black dark:text-white' : 'text-gray-500 dark:text-gray-400'\n                    }`}>\n                      {indicator.label}\n                    </div>\n                  </div>\n                  \n                  {index < stepIndicators.length - 1 && (\n                    <div \n                      className={`flex-1 h-0.5 mx-3 rounded-full transition-colors duration-300 ${\n                        currentStep > indicator.step ? 'bg-black dark:bg-white' : 'bg-gray-300 dark:bg-gray-600'\n                      }`}\n                    />\n                  )}\n                </div>\n              );\n            })}\n          </div>\n\n          {/* Progress Bar */}\n          <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-1.5 overflow-hidden\">\n            <div \n              className=\"h-full transition-all duration-500 ease-out rounded-full bg-black dark:bg-white\"\n              style={{ \n                width: `${(currentStep / totalSteps) * 100}%`\n              }}\n            />\n          </div>\n          <div className=\"flex justify-between text-xs text-gray-500 dark:text-gray-400 mt-1\">\n            <span>Step {currentStep} of {totalSteps}</span>\n            <span>{Math.round((currentStep / totalSteps) * 100)}% complete</span>\n          </div>\n        </div>\n\n        {/* Main Content */}\n        <Card \n          className=\"max-w-4xl mx-auto border-gray-300 dark:border-gray-600 shadow-lg bg-white dark:bg-gray-900\"\n        >\n          <CardHeader className=\"space-y-3 pb-6\">\n            <div \n              className=\"p-3 rounded-xl inline-flex shadow-lg bg-black dark:bg-white\"\n            >\n              <UserCheck className=\"h-6 w-6 text-white dark:text-black\" />\n            </div>\n          </CardHeader>\n          <CardContent className=\"p-6\">\n            {renderStepContent()}\n          </CardContent>\n        </Card>\n\n        {/* Navigation */}\n        <div className=\"flex items-center justify-between mt-6\">\n          <div>\n            {currentStep > 1 ? (\n              <Button onClick={handlePrevious} variant=\"outline\" className=\"gap-2 border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800\">\n                <ArrowLeft className=\"h-4 w-4\" />\n                Previous\n              </Button>\n            ) : (\n              <Button onClick={onSkip} variant=\"ghost\" className=\"text-gray-600 dark:text-gray-400 gap-2 hover:bg-gray-100 dark:hover:bg-gray-800\">\n                Skip for now\n                <X className=\"h-4 w-4\" />\n              </Button>\n            )}\n          </div>\n\n          <div className=\"flex items-center space-x-3\">\n            {currentStep < totalSteps ? (\n              <Button \n                onClick={handleNext} \n                className=\"gap-2 text-white dark:text-black bg-black dark:bg-white hover:bg-gray-800 dark:hover:bg-gray-200\"\n              >\n                Continue\n                <ArrowRight className=\"h-4 w-4\" />\n              </Button>\n            ) : (\n              <Button \n                onClick={handleSubmit} \n                disabled={isLoading} \n                className=\"gap-2 text-white dark:text-black bg-black dark:bg-white hover:bg-gray-800 dark:hover:bg-gray-200\"\n              >\n                {isLoading ? (\n                  <>\n                    <Loader2 className=\"h-4 w-4 animate-spin\" />\n                    Saving...\n                  </>\n                ) : (\n                  <>\n                    <Check className=\"h-4 w-4\" />\n                    Complete Setup\n                  </>\n                )}\n              </Button>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/payments/AccountPayments.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1710,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1710,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[66582,66585],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[66582,66585],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchPayments'. Either include it or remove the dependency array.","line":2115,"column":6,"nodeType":"ArrayExpression","endLine":2115,"endColumn":23,"suggestions":[{"desc":"Update the dependencies array to be: [fetchPayments, targetAccountId]","fix":{"range":[81089,81106],"text":"[fetchPayments, targetAccountId]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":3068,"column":103,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3068,"endColumn":106,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[124346,124349],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[124346,124349],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":3202,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3202,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[129067,129070],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[129067,129070],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":3205,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3205,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[129168,129171],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[129168,129171],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n/*\n * AccountPayments Component - Color Usage Philosophy:\n * \n * - Brand colors (colors.primary, colors.secondary, colors.accent): Used for icons, backgrounds, and accents\n * - Theme-aware text colors (.text-brand): Used for main stat values for readability\n * - Tailwind semantic colors (.text-muted-foreground): Used for secondary text\n * \n * This ensures brand identity is maintained while text remains readable in both light and dark modes.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport { \n  Calendar, \n  CheckCircle, \n  ChevronLeft,\n  ChevronRight,\n  DollarSign, \n  Download,\n  Eye,\n  Hash, \n  Info, \n  Loader2,\n  Receipt, \n  RefreshCw,\n  Search,\n  X,\n  XCircle, \n  CreditCard, \n  FileText, \n  TrendingUp, \n  TrendingDown, \n  Copy,\n  Filter,\n  Plus,\n  Minus,\n  User\n} from 'lucide-react';\nimport { useAuth } from '@/lib/AuthContext';\nimport { useBranding } from '@/hooks/useBranding';\nimport { toast } from 'sonner';\nimport { format } from 'date-fns';\nimport { BalanceTopup } from './BalanceTopup';\nimport { PhoneNumberBillingSection } from './PhoneNumberBillingSection';\n\ninterface Payment {\n  payment_time: string;\n  amount: number;\n  currency: string;\n  i_payment: number;\n  tx_id: string;\n  tx_error: string;\n  tx_result: number; // 1 = successful, 2 = failed\n  i_account: number;\n  i_customer: number;\n  by_credit_debit_card: boolean;\n  by_voucher: boolean;\n  notes: string;\n  // Optional MongoDB data for admin view\n  _mongoData?: MongoDBPaymentData;\n  _source?: string;\n  _sippyData?: Payment;\n  // Failed payment specific fields\n  _isFailedPayment?: boolean;\n  _failureReason?: string;\n  _paymentReference?: string;\n  // User info for admin view\n  _userInfo?: {\n    userName?: string;\n    userEmail?: string;\n    sippyAccountId?: number;\n  };\n}\n\n// Add proper type definition for MongoDB payment data\ninterface MongoDBPaymentData {\n  paymentReference?: string;\n  paymentIntentId?: string;\n  status?: string;\n  userEmail?: string;\n  userName?: string;\n  sippyAccountId?: number;\n  sippyCustomerId?: number;\n  topupAmount?: number;\n  processingFee?: number;\n  fixedFee?: number;\n  totalChargedAmount?: number;\n  currency?: string;\n  paymentMethodType?: string;\n  gatewayName?: string;\n  provider?: string;\n  cardBrand?: string;\n  cardLast4?: string;\n  cardCountry?: string;\n  description?: string;\n  notes?: string;\n  receiptUrl?: string;\n  createdAt?: string;\n  updatedAt?: string;\n  paymentCompletedAt?: string;\n  paymentInitiatedAt?: string;\n  taxAmount?: number;\n  taxRate?: number;\n  failureCode?: string;\n  failureMessage?: string;\n  [key: string]: unknown; // For any additional MongoDB fields\n}\n\ninterface PaymentsData {\n  result: string;\n  payments: Payment[];\n  count: number;\n  requestDuration?: number;\n}\n\ninterface PaymentsStats {\n  totalPayments: number;\n  totalCredits: number;\n  totalDebits: number;\n  successfulPayments: number;\n  failedPayments: number;\n  currency: string;\n}\n\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n  role: string;\n  sippyAccountId?: number;\n  isEmailVerified: boolean;\n}\n\ninterface AccountPaymentsProps {\n  accountId?: number;\n}\n\ninterface EnhancedPaymentData {\n  [key: string]: unknown;\n}\n\ninterface UserSearchResult {\n  id: string;\n  name: string;\n  email: string;\n  role?: string;\n  sippyAccountId?: number;\n}\n\ninterface UsersResponse {\n  users: UserSearchResult[];\n}\n\ninterface MongoPaymentRecord {\n  paymentReference?: string;\n  paymentIntentId?: string;\n  status?: string;\n  userEmail?: string;\n  userName?: string;\n  sippyAccountId?: number;\n  sippyCustomerId?: number;\n  sippyPaymentId?: string;\n  topupAmount?: number;\n  processingFee?: number;\n  fixedFee?: number;\n  totalChargedAmount?: number;\n  currency?: string;\n  paymentMethodType?: string;\n  gatewayName?: string;\n  provider?: string;\n  cardBrand?: string;\n  cardLast4?: string;\n  cardCountry?: string;\n  description?: string;\n  notes?: string;\n  receiptUrl?: string;\n  createdAt?: string;\n  updatedAt?: string;\n  paymentCompletedAt?: string;\n  paymentInitiatedAt?: string;\n  taxAmount?: number;\n  taxRate?: number;\n  failureCode?: string;\n  failureMessage?: string;\n  [key: string]: unknown;\n}\n\ninterface MongoPaymentsResponse {\n  payments: MongoPaymentRecord[];\n  count?: number;\n}\n\ninterface FilterOverrides {\n  type?: 'credit' | 'debit' | 'all';\n  status?: 'successful' | 'failed' | 'all';\n  startDate?: string;\n  endDate?: string;\n  userId?: string;\n}\n\nexport function AccountPayments({ accountId }: AccountPaymentsProps) {\n  const { user } = useAuth();\n  const { colors } = useBranding();\n  const [paymentsData, setPaymentsData] = useState<PaymentsData | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [lastRefresh, setLastRefresh] = useState<Date | null>(null);\n  \n  // Pagination state\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalRecords, setTotalRecords] = useState(0);\n  const [recordsPerPage, setRecordsPerPage] = useState(50);\n  \n  // Filter state\n  const [showFilters, setShowFilters] = useState(false);\n  const [filters, setFilters] = useState(() => {\n    // Default to current month's date range using GMT timezone\n    const now = new Date();\n    const currentYear = now.getUTCFullYear();\n    const currentMonth = now.getUTCMonth(); // 0-based (0 = January, 11 = December)\n    \n    // First day of current month in GMT\n    const firstDayOfMonth = new Date(Date.UTC(currentYear, currentMonth, 1));\n    const startDate = firstDayOfMonth.toISOString().split('T')[0]; // YYYY-MM-DD format\n    \n    // Last day of current month in GMT\n    const lastDayOfMonth = new Date(Date.UTC(currentYear, currentMonth + 1, 0)); // Day 0 of next month = last day of current month\n    const endDate = lastDayOfMonth.toISOString().split('T')[0]; // YYYY-MM-DD format\n    \n    return {\n      type: 'all' as 'credit' | 'debit' | 'all',\n      status: 'all' as 'successful' | 'failed' | 'all',\n      startDate,\n      endDate,\n      userId: 'all', // Add user filter\n    };\n  });\n\n  // Balance management state\n  const [showBalanceDialog, setShowBalanceDialog] = useState(false);\n  const [balanceOperation, setBalanceOperation] = useState({\n    operation: 'credit' as 'credit' | 'debit' | 'add_funds',\n    amount: '',\n    currency: 'EUR',\n    notes: '',\n    selectedUserId: '',\n    selectedUserAccountId: null as number | null\n  });\n  const [isBalanceLoading, setIsBalanceLoading] = useState(false);\n  \n  // User management state for balance operations\n  const [users, setUsers] = useState<User[]>([]);\n  const [isLoadingUsers, setIsLoadingUsers] = useState(false);\n  const [userSearchTerm, setUserSearchTerm] = useState('');\n\n  // Payment details dialog state\n  const [showPaymentDetails, setShowPaymentDetails] = useState(false);\n  const [selectedPayment, setSelectedPayment] = useState<Payment | null>(null);\n  const [enhancedPaymentData, setEnhancedPaymentData] = useState<EnhancedPaymentData | null>(null);\n\n  // Use provided accountId or user's account ID\n  const targetAccountId = accountId || user?.sippyAccountId;\n\n  // Parse Sippy date format to JavaScript Date\n  const parseSippyDate = (sippyDate: string): Date => {\n    // Format: '09:57:29.000 GMT Wed Nov 18 2009'\n    try {\n      if (!sippyDate || typeof sippyDate !== 'string') {\n        return new Date();\n      }\n\n      // Remove the milliseconds and GMT parts to make it parseable\n      // Convert \"09:57:29.000 GMT Wed Nov 18 2009\" to \"Wed Nov 18 2009 09:57:29 GMT\"\n      const parts = sippyDate.trim().split(' ');\n      if (parts.length >= 6) {\n        const time = parts[0]; // \"09:57:29.000\"\n        const timeWithoutMs = time.split('.')[0]; // \"09:57:29\"\n        const dayName = parts[2]; // \"Wed\"\n        const month = parts[3]; // \"Nov\"\n        const day = parts[4]; // \"18\"\n        const year = parts[5]; // \"2009\"\n        \n        // Reconstruct in a format JavaScript can parse\n        const dateString = `${dayName} ${month} ${day} ${year} ${timeWithoutMs} GMT`;\n        const parsedDate = new Date(dateString);\n        \n        if (!isNaN(parsedDate.getTime())) {\n          return parsedDate;\n        }\n      }\n      \n      // Fallback: try parsing as-is\n      const fallbackDate = new Date(sippyDate);\n      if (!isNaN(fallbackDate.getTime())) {\n        return fallbackDate;\n      }\n      \n      // If all else fails, return current date\n      console.warn('Failed to parse Sippy date:', sippyDate);\n      return new Date();\n    } catch (error) {\n      console.warn('Error parsing Sippy date:', sippyDate, error);\n      return new Date();\n    }\n  };\n\n  // Calculate payments statistics\n  const calculateStats = (payments: Payment[]): PaymentsStats => {\n    // Handle undefined or null payments array\n    if (!payments || !Array.isArray(payments)) {\n      return {\n        totalPayments: 0,\n        totalCredits: 0,\n        totalDebits: 0,\n        successfulPayments: 0,\n        failedPayments: 0,\n        currency: 'EUR'\n      };\n    }\n\n    const stats: PaymentsStats = {\n      totalPayments: payments.length,\n      totalCredits: 0,\n      totalDebits: 0,\n      successfulPayments: 0,\n      failedPayments: 0,\n      currency: payments[0]?.currency || 'EUR'\n    };\n\n    payments.forEach(payment => {\n      if (payment.tx_result === 1) {\n        stats.successfulPayments++;\n        if (payment.amount > 0) {\n          stats.totalCredits += payment.amount;\n        } else {\n          stats.totalDebits += Math.abs(payment.amount);\n        }\n      } else {\n        stats.failedPayments++;\n      }\n    });\n\n    return stats;\n  };\n\n  const stats = paymentsData?.payments ? calculateStats(paymentsData.payments) : {\n    totalPayments: 0,\n    totalCredits: 0,\n    totalDebits: 0,\n    successfulPayments: 0,\n    failedPayments: 0,\n    currency: 'EUR'\n  };\n\n  // Cache for user information to avoid multiple API calls\n  const userInfoCache = new Map<string, { userName: string; userEmail: string } | null>();\n\n  // Helper function to get user information by email\n  const getUserInfoByEmail = async (email: string): Promise<{ userName: string; userEmail: string } | null> => {\n    // Check cache first\n    if (userInfoCache.has(email)) {\n      return userInfoCache.get(email) || null;\n    }\n    \n    try {\n      const response = await fetch(`/api/users?search=${encodeURIComponent(email)}&limit=1`, {\n        headers: { 'Content-Type': 'application/json' },\n      });\n      \n      if (response.ok) {\n        const data: UsersResponse = await response.json();\n        const user = data.users?.find((u: UserSearchResult) => u.email === email);\n        if (user) {\n          const userInfo = {\n            userName: user.name || 'Unknown User',\n            userEmail: user.email\n          };\n          userInfoCache.set(email, userInfo);\n          return userInfo;\n        }\n      }\n    } catch (error) {\n      console.warn('Failed to fetch user info for email:', email, error);\n    }\n    \n    // Cache null result to avoid repeated failed lookups\n    userInfoCache.set(email, null);\n    return null;\n  };\n\n  const fetchPayments = async (page: number = currentPage, customRecordsPerPage?: number) => {\n    // For admin users without specific accountId, fetch all payments from Sippy\n    const isAdminViewingAll = user?.role === 'admin' && !accountId;\n    \n    if (!isAdminViewingAll && !targetAccountId) {\n      setError('No Sippy account ID available');\n      setIsLoading(false);\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      const limit = customRecordsPerPage || recordsPerPage;\n      const offset = (page - 1) * limit;\n\n      if (isAdminViewingAll) {\n        // Admin viewing all payments - fetch from all Sippy accounts\n        \n        const sippyQueryParams = new URLSearchParams({\n          limit: limit.toString(),\n          offset: offset.toString(),\n          ...(filters.type && filters.type !== 'all' && { \n            type: filters.type === 'credit' ? 'credit' : 'debit'\n          }),\n          ...(filters.status && filters.status !== 'all' && { \n            status: filters.status === 'successful' ? 'successful' : 'failed'\n          }),\n          ...(filters.startDate && { start_date: filters.startDate }),\n          ...(filters.endDate && { end_date: filters.endDate }),\n          ...(filters.userId && filters.userId !== 'all' && { user_id: filters.userId }),\n        });\n\n        const sippyResponse = await fetch(`/api/sippy/payments/all?${sippyQueryParams}`, {\n          headers: { 'Content-Type': 'application/json' },\n        });\n\n        if (!sippyResponse.ok) {\n          const errorData = await sippyResponse.json().catch(() => ({ error: 'Unknown error' }));\n          throw new Error(errorData.error || `HTTP ${sippyResponse.status}: Failed to fetch payments`);\n        }\n\n        const sippyData = await sippyResponse.json();\n        const sippyPayments = sippyData.payments || [];\n        \n\n        // Now enhance Sippy payments with MongoDB data where available\n        let enhancedPayments = sippyPayments;\n        \n        if (sippyPayments.length > 0) {\n          try {\n            // Fetch MongoDB payments to enhance the Sippy data\n            const mongoQueryParams = new URLSearchParams({\n              limit: '500', // Fetch more MongoDB records to find matches\n              offset: '0',\n              include_raw: 'false',\n              ...(filters.startDate && { start_date: filters.startDate }),\n              ...(filters.endDate && { end_date: filters.endDate }),\n            });\n\n            const mongoResponse = await fetch(`/api/payments/history?${mongoQueryParams}`, {\n              headers: { 'Content-Type': 'application/json' },\n            });\n\n            if (mongoResponse.ok) {\n              const mongoData: MongoPaymentsResponse = await mongoResponse.json();\n              const mongoPayments = mongoData.payments || [];\n              \n              // Create a map of MongoDB payments for quick lookup\n              const mongoMap = new Map<string, MongoPaymentRecord>();\n              const failedMongoPayments: MongoPaymentRecord[] = [];\n              \n              mongoPayments.forEach((mp: MongoPaymentRecord) => {\n                // Separate failed payments that are not in Sippy\n                if (mp.status === 'failed' && !mp.sippyPaymentId) {\n                  failedMongoPayments.push(mp);\n                } else {\n                  // For successful payments, create lookup maps\n                  // Map by payment intent ID\n                  if (mp.paymentIntentId) {\n                    mongoMap.set(`tx_${mp.paymentIntentId}`, mp);\n                  }\n                  // Map by Sippy payment ID if available\n                  if (mp.sippyPaymentId) {\n                    mongoMap.set(`payment_${mp.sippyPaymentId}`, mp);\n                  }\n                  // Map by account ID and amount for fuzzy matching\n                  if (mp.sippyAccountId && mp.topupAmount) {\n                    const key = `account_${mp.sippyAccountId}_${mp.topupAmount}_${mp.currency}`;\n                    mongoMap.set(key, mp);\n                  }\n                }\n              });\n\n              // Enhance Sippy payments with MongoDB data where available\n              enhancedPayments = sippyPayments.map((payment: Payment) => {\n                // Try different matching strategies\n                let mongoData: MongoPaymentRecord | undefined = undefined;\n                \n                // 1. Match by transaction ID\n                if (payment.tx_id) {\n                  mongoData = mongoMap.get(`tx_${payment.tx_id}`);\n                }\n                \n                // 2. Match by payment ID\n                if (!mongoData && payment.i_payment) {\n                  mongoData = mongoMap.get(`payment_${payment.i_payment}`);\n                }\n                \n                // 3. Match by account ID and amount\n                if (!mongoData && payment._userInfo?.sippyAccountId && payment.amount) {\n                  const key = `account_${payment._userInfo.sippyAccountId}_${Math.abs(payment.amount)}_${payment.currency}`;\n                  mongoData = mongoMap.get(key);\n                }\n                \n                if (mongoData) {\n                  return {\n                    ...payment,\n                    _mongoData: mongoData,\n                    _source: 'enhanced'\n                  };\n                }\n                \n                return {\n                  ...payment,\n                  _source: 'sippy_only'\n                };\n              });\n              \n              // Convert failed MongoDB payments to Sippy payment format for admin view\n              const failedPaymentsForAdmin = await Promise.all(failedMongoPayments\n                .filter((fp: MongoPaymentRecord) => {\n                  // Apply user filtering if specified\n                  if (filters.userId && filters.userId !== 'all') {\n                    // Find the user by ID to get their email for comparison\n                    const selectedUser = users.find(u => u.id === filters.userId);\n                    if (selectedUser && fp.userEmail !== selectedUser.email) {\n                      return false; // Filter out this failed payment\n                    }\n                  }\n                  \n                  // Apply status filtering if specified\n                  if (filters.status && filters.status !== 'all') {\n                    if (filters.status === 'successful' && fp.status === 'failed') {\n                      return false; // Filter out failed payments when showing only successful\n                    }\n                    if (filters.status === 'failed' && fp.status !== 'failed') {\n                      return false; // Filter out successful payments when showing only failed\n                    }\n                  }\n                  \n                  return true; // Include this payment\n                })\n                .map(async (fp: MongoPaymentRecord) => {\n                  // Try to get actual user info by email\n                  const userInfo = fp.userEmail ? await getUserInfoByEmail(fp.userEmail) : null;\n                  \n                  return {\n                    payment_time: fp.paymentCompletedAt || fp.paymentInitiatedAt,\n                    amount: fp.topupAmount || 0,\n                    currency: fp.currency || 'EUR',\n                    i_payment: 0, // No Sippy payment ID for failed payments\n                    tx_id: fp.paymentIntentId || fp.paymentReference || '',\n                    tx_error: fp.failureMessage || 'Payment failed',\n                    tx_result: 2, // Failed\n                    i_account: fp.sippyAccountId || 0,\n                    i_customer: fp.sippyCustomerId || 0,\n                    by_credit_debit_card: true,\n                    by_voucher: false,\n                    notes: `Failed payment: ${fp.failureMessage || 'Unknown error'}`,\n                    _mongoData: fp,\n                    _source: 'failed_only',\n                    _userInfo: {\n                      userName: userInfo?.userName || fp.userEmail?.split('@')[0] || 'Unknown',\n                      userEmail: fp.userEmail || 'Unknown',\n                      sippyAccountId: fp.sippyAccountId\n                    },\n                    _isFailedPayment: true,\n                    _failureReason: fp.failureMessage,\n                    _paymentReference: fp.paymentReference\n                  };\n                }));\n              \n              // Add failed payments to enhanced payments\n              enhancedPayments = [...enhancedPayments, ...failedPaymentsForAdmin];\n            }\n          } catch (error) {\n            console.warn('Failed to enhance Sippy payments with MongoDB data:', error);\n          }\n        }\n\n        // Convert to expected format with user information\n        const convertedPayments = enhancedPayments.map((sippyPayment: Payment) => ({\n          payment_time: sippyPayment.payment_time,\n          amount: sippyPayment.amount,\n          currency: sippyPayment.currency,\n          i_payment: sippyPayment.i_payment,\n          tx_id: sippyPayment.tx_id,\n          tx_error: sippyPayment.tx_error || '',\n          tx_result: sippyPayment.tx_result,\n          i_account: sippyPayment.i_account,\n          i_customer: sippyPayment.i_customer || 0,\n          by_credit_debit_card: sippyPayment.by_credit_debit_card || false,\n          by_voucher: sippyPayment.by_voucher || false,\n          notes: sippyPayment.notes || '',\n          _mongoData: sippyPayment._mongoData ? {\n            ...sippyPayment._mongoData,\n            userName: sippyPayment._userInfo?.userName,\n            userEmail: sippyPayment._userInfo?.userEmail\n          } : {\n            userName: sippyPayment._userInfo?.userName,\n            userEmail: sippyPayment._userInfo?.userEmail\n          },\n          _source: sippyPayment._source || 'sippy_primary',\n          _isFailedPayment: sippyPayment._isFailedPayment,\n          _failureReason: sippyPayment._failureReason,\n          _paymentReference: sippyPayment._paymentReference\n        }));\n        \n        // Apply client-side status filtering to all payments (Sippy + MongoDB)\n        const filteredPayments = convertedPayments.filter((payment: Payment) => {\n          // Apply status filtering if specified\n          if (filters.status && filters.status !== 'all') {\n            if (filters.status === 'successful' && payment.tx_result !== 1) {\n              return false; // Filter out failed payments when showing only successful\n            }\n            if (filters.status === 'failed' && payment.tx_result === 1) {\n              return false; // Filter out successful payments when showing only failed\n            }\n          }\n          return true;\n        });\n        \n        // Sort by payment time (most recent first)\n        filteredPayments.sort((a: Payment, b: Payment) => {\n          // Handle different date formats for robust sorting\n          const getTimestamp = (payment: Payment): number => {\n            try {\n              // Priority 1: For failed payments from MongoDB, use the MongoDB date directly\n              if (payment._isFailedPayment && payment._mongoData) {\n                const mongoDate = payment._mongoData.paymentCompletedAt || \n                                payment._mongoData.paymentInitiatedAt || \n                                payment._mongoData.createdAt;\n                if (mongoDate) {\n                  const timestamp = new Date(mongoDate).getTime();\n                  if (!isNaN(timestamp)) {\n                    return timestamp;\n                  }\n                }\n              }\n              \n              // Priority 2: Check if payment_time is in ISO format (from failed payments) - HIGHEST PRIORITY\n              if (payment.payment_time && (payment.payment_time.includes('T') || payment.payment_time.includes('Z'))) {\n                const timestamp = new Date(payment.payment_time).getTime();\n                if (!isNaN(timestamp)) {\n                  return timestamp;\n                }\n              }\n              \n              // Priority 3: For Sippy payments, use the parseSippyDate function\n              if (payment.payment_time) {\n                const timestamp = parseSippyDate(payment.payment_time).getTime();\n                if (!isNaN(timestamp)) {\n                  return timestamp;\n                }\n              }\n              \n              // Priority 4: Return very old timestamp for invalid dates (will appear at bottom)\n              console.warn('No valid date found for payment, using old timestamp:', payment);\n              return 0; // January 1, 1970 - will appear at bottom\n            } catch (error) {\n              console.warn('Error parsing payment date for sorting:', payment.payment_time, error);\n              return 0; // January 1, 1970 - will appear at bottom\n            }\n          };\n          \n          const timestampA = getTimestamp(a);\n          const timestampB = getTimestamp(b);\n          \n          // Sort descending (most recent first)\n          const result = timestampB - timestampA;\n          \n          // Handle NaN cases: if either timestamp is NaN, put it at the bottom\n          if (isNaN(result)) {\n            if (isNaN(timestampA) && isNaN(timestampB)) {\n              return 0; // Both invalid, keep original order\n            } else if (isNaN(timestampA)) {\n              return 1; // A is invalid, put it after B\n            } else if (isNaN(timestampB)) {\n              return -1; // B is invalid, put it after A\n            }\n          }\n          \n          return result;\n        });\n\n        \n        setPaymentsData({\n          result: 'success',\n          payments: filteredPayments,\n          count: filteredPayments.length,\n          requestDuration: 0\n        });\n        \n        setTotalRecords(sippyData.pagination?.total || 0);\n        \n      } else {\n        // Regular user or admin viewing specific account - fetch Sippy payments and enhance with MongoDB data\n        const queryParams = new URLSearchParams({\n          offset: offset.toString(),\n          limit: limit.toString(),\n          ...(filters.type && filters.type !== 'all' && { type: filters.type }),\n          ...(filters.status && filters.status !== 'all' && { status: filters.status }),\n          ...(filters.startDate && { start_date: filters.startDate }),\n          ...(filters.endDate && { end_date: filters.endDate }),\n        });\n\n        \n        const response = await fetch(`/api/sippy/account/${targetAccountId}/payments?${queryParams}`, {\n          headers: { 'Content-Type': 'application/json' },\n        });\n        \n        if (!response.ok) {\n          const errorData = await response.json().catch(() => ({ error: 'Unknown error' }));\n          throw new Error(errorData.error || `HTTP ${response.status}: Failed to fetch payments`);\n        }\n\n        const data = await response.json();\n        \n        // Ensure payments is always an array\n        if (!data.payments || !Array.isArray(data.payments)) {\n          data.payments = [];\n        }\n        \n        // For single account view, try to enhance Sippy payments with MongoDB data\n        // But do this more efficiently by fetching MongoDB data for this specific account\n        let enhancedPayments = data.payments.map((payment: Payment) => ({\n          ...payment,\n          _source: 'sippy_only'\n        }));\n\n        // Try to fetch MongoDB payments for this specific account to enhance the data\n        // and also fetch failed payments that are not in Sippy\n        let failedPayments: Payment[] = [];\n        \n        if (targetAccountId) {\n          try {\n            const mongoEnhanceParams = new URLSearchParams({\n              limit: '500', // Fetch more to find matches and failed payments\n              offset: '0',\n              include_raw: 'false',\n              account_id: targetAccountId.toString(),\n              ...(filters.startDate && { start_date: filters.startDate }),\n              ...(filters.endDate && { end_date: filters.endDate }),\n            });\n\n            const mongoResponse = await fetch(`/api/payments/history?${mongoEnhanceParams}`, {\n              headers: { 'Content-Type': 'application/json' },\n            });\n\n            if (mongoResponse.ok) {\n              const mongoData = await mongoResponse.json();\n              const mongoPayments = mongoData.payments || [];\n              \n              // Create a map of MongoDB payments for quick lookup\n              const mongoMap = new Map<string, MongoPaymentRecord>();\n              const failedMongoPayments: MongoPaymentRecord[] = [];\n              \n              mongoPayments.forEach((mp: MongoPaymentRecord) => {\n                // Separate failed payments that are not in Sippy\n                if (mp.status === 'failed' && !mp.sippyPaymentId) {\n                  failedMongoPayments.push(mp);\n                } else {\n                  // For successful payments, create lookup maps\n                  if (mp.sippyPaymentId) {\n                    mongoMap.set(`payment_${mp.sippyPaymentId}`, mp);\n                  }\n                  if (mp.paymentIntentId) {\n                    mongoMap.set(`tx_${mp.paymentIntentId}`, mp);\n                  }\n                }\n              });\n\n              // Enhance Sippy payments with MongoDB data where available\n              enhancedPayments = data.payments.map((payment: Payment) => {\n                const mongoData = mongoMap.get(`payment_${payment.i_payment}`) || \n                                mongoMap.get(`tx_${payment.tx_id}`);\n                \n                if (mongoData) {\n                  return {\n                    ...payment,\n                    _mongoData: mongoData,\n                    _source: 'enhanced'\n                  };\n                }\n                \n                return {\n                  ...payment,\n                  _source: 'sippy_only'\n                };\n              });\n              \n              // Convert failed MongoDB payments to Payment format\n              failedPayments = failedMongoPayments.map((fp: MongoPaymentRecord) => ({\n                payment_time: fp.paymentCompletedAt || fp.paymentInitiatedAt || new Date().toISOString(),\n                amount: fp.topupAmount || 0,\n                currency: fp.currency || 'EUR',\n                i_payment: 0, // No Sippy payment ID for failed payments\n                tx_id: fp.paymentIntentId || fp.paymentReference || '',\n                tx_error: fp.failureMessage || 'Payment failed',\n                tx_result: 2, // Failed\n                i_account: fp.sippyAccountId || targetAccountId || 0,\n                i_customer: fp.sippyCustomerId || 0,\n                by_credit_debit_card: true, // Failed payments are typically card payments\n                by_voucher: false,\n                notes: `Failed payment: ${fp.failureMessage || 'Unknown error'}`,\n                _mongoData: fp,\n                _source: 'failed_only',\n                _isFailedPayment: true,\n                _failureReason: fp.failureMessage || undefined,\n                _paymentReference: fp.paymentReference || undefined\n              }));\n              \n            }\n          } catch (error) {\n            console.warn('Failed to enhance payments with MongoDB data:', error);\n          }\n        }\n        \n        // Combine Sippy payments with failed payments\n        const allPayments = [...enhancedPayments, ...failedPayments];\n        \n        // Sort by payment time (most recent first)\n        allPayments.sort((a, b) => {\n          // Handle different date formats for robust sorting\n          const getTimestamp = (payment: Payment): number => {\n            try {\n              // For failed payments from MongoDB, use ISO date format\n              if (payment._isFailedPayment && payment._mongoData) {\n                const mongoDate = payment._mongoData.paymentCompletedAt || payment._mongoData.paymentInitiatedAt || payment._mongoData.createdAt;\n                if (mongoDate) {\n                  const timestamp = new Date(mongoDate).getTime();\n                  if (!isNaN(timestamp)) {\n                    return timestamp;\n                  }\n                }\n              }\n              \n              // For Sippy payments, use the parseSippyDate function\n              if (payment.payment_time) {\n                // Check if it's already in ISO format (from MongoDB)\n                if (payment.payment_time.includes('T') || payment.payment_time.includes('Z')) {\n                  const timestamp = new Date(payment.payment_time).getTime();\n                  if (!isNaN(timestamp)) {\n                    return timestamp;\n                  }\n                }\n                // Otherwise, parse as Sippy format\n                const timestamp = parseSippyDate(payment.payment_time).getTime();\n                if (!isNaN(timestamp)) {\n                  return timestamp;\n                }\n              }\n              \n              // Fallback to current time if no valid date\n              return new Date().getTime();\n            } catch (error) {\n              console.warn('Error parsing payment date for sorting:', payment.payment_time, error);\n              return new Date().getTime();\n            }\n          };\n          \n          const timestampA = getTimestamp(a);\n          const timestampB = getTimestamp(b);\n          \n          // Sort descending (most recent first)\n          const result = timestampB - timestampA;\n          \n          // Handle NaN cases: if either timestamp is NaN, put it at the bottom\n          if (isNaN(result)) {\n            if (isNaN(timestampA) && isNaN(timestampB)) {\n              return 0; // Both invalid, keep original order\n            } else if (isNaN(timestampA)) {\n              return 1; // A is invalid, put it after B\n            } else if (isNaN(timestampB)) {\n              return -1; // B is invalid, put it after A\n            }\n          }\n          \n          return result;\n        });\n        \n        \n        setPaymentsData({\n          result: 'success',\n          payments: allPayments,\n          count: allPayments.length,\n          requestDuration: data.requestDuration || 0\n        });\n        \n        // Update total records for pagination\n        const currentRecords = allPayments.length;\n        const effectiveLimit = recordsPerPage;\n        \n        if (currentRecords === effectiveLimit) {\n          setTotalRecords((page + 10) * effectiveLimit);\n        } else {\n          setTotalRecords(offset + currentRecords);\n        }\n      }\n      \n      setLastRefresh(new Date());\n      \n    } catch (err) {\n      console.error('Error fetching payments:', err);\n      \n      let errorMessage = 'Failed to fetch payments';\n      if (err instanceof Error) {\n        errorMessage = err.message;\n      }\n      \n      setError(errorMessage);\n      toast.error(errorMessage);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleFilterChange = (key: string, value: string) => {\n    const newFilters = { ...filters, [key]: value };\n    setFilters(newFilters);\n    setCurrentPage(1);\n    \n    // Automatically apply the filter when it changes\n    fetchPaymentsWithFilters(newFilters, 1);\n  };\n\n  // Individual filter application function for mixing filters\n  // const applyIndividualFilter = (key: string, value: string) => {\n  //   const newFilters = { ...filters, [key]: value };\n  //   setFilters(newFilters);\n  //   setCurrentPage(1);\n  //   fetchPaymentsWithFilters(newFilters, 1);\n  // };\n\n  const clearFilters = () => {\n    // Reset to current month's date range using GMT timezone\n    const now = new Date();\n    const currentYear = now.getUTCFullYear();\n    const currentMonth = now.getUTCMonth(); // 0-based (0 = January, 11 = December)\n    \n    // First day of current month in GMT\n    const firstDayOfMonth = new Date(Date.UTC(currentYear, currentMonth, 1));\n    const startDate = firstDayOfMonth.toISOString().split('T')[0]; // YYYY-MM-DD format\n    \n    // Last day of current month in GMT\n    const lastDayOfMonth = new Date(Date.UTC(currentYear, currentMonth + 1, 0)); // Day 0 of next month = last day of current month\n    const endDate = lastDayOfMonth.toISOString().split('T')[0]; // YYYY-MM-DD format\n    \n    const newFilters = {\n      type: 'all' as 'credit' | 'debit' | 'all',\n      status: 'all' as 'successful' | 'failed' | 'all',\n      startDate,\n      endDate,\n      userId: 'all',\n    };\n    \n    setFilters(newFilters);\n    setCurrentPage(1);\n    \n    // Automatically apply the cleared filters\n    fetchPaymentsWithFilters(newFilters, 1);\n  };\n\n  // Quick filter functions for common date ranges\n  const setQuickFilter = (range: 'today' | 'this_month' | 'last_month' | 'this_year') => {\n    // Use GMT timezone for all date calculations to match Sippy's requirements\n    const now = new Date();\n    const currentYear = now.getUTCFullYear();\n    const currentMonth = now.getUTCMonth(); // 0-based (0 = January, 11 = December)\n    \n    let startDate: string;\n    let endDate: string;\n    \n    switch (range) {\n      case 'today':\n        // Today in GMT\n        const todayGMT = new Date(Date.UTC(currentYear, currentMonth, now.getUTCDate()));\n        startDate = todayGMT.toISOString().split('T')[0];\n        endDate = todayGMT.toISOString().split('T')[0];\n        break;\n        \n      case 'this_month':\n        // First day of current month in GMT\n        const firstDayOfMonth = new Date(Date.UTC(currentYear, currentMonth, 1));\n        startDate = firstDayOfMonth.toISOString().split('T')[0];\n        \n        // Last day of current month in GMT\n        const lastDayOfMonth = new Date(Date.UTC(currentYear, currentMonth + 1, 0));\n        endDate = lastDayOfMonth.toISOString().split('T')[0];\n        break;\n        \n      case 'last_month':\n        // First day of last month in GMT\n        const firstDayOfLastMonth = new Date(Date.UTC(currentYear, currentMonth - 1, 1));\n        startDate = firstDayOfLastMonth.toISOString().split('T')[0];\n        \n        // Last day of last month in GMT\n        const lastDayOfLastMonth = new Date(Date.UTC(currentYear, currentMonth, 0));\n        endDate = lastDayOfLastMonth.toISOString().split('T')[0];\n        break;\n        \n      case 'this_year':\n        // First day of current year in GMT\n        const firstDayOfYear = new Date(Date.UTC(currentYear, 0, 1));\n        startDate = firstDayOfYear.toISOString().split('T')[0];\n        \n        // Last day of current year in GMT\n        const lastDayOfYear = new Date(Date.UTC(currentYear, 11, 31));\n        endDate = lastDayOfYear.toISOString().split('T')[0];\n        break;\n        \n      default:\n        return;\n    }\n    \n    // Update filters state\n    const newFilters = {\n      ...filters,\n      startDate,\n      endDate\n    };\n    \n    setFilters(newFilters);\n    setCurrentPage(1);\n    \n    // Immediately fetch payments with the new dates - don't wait for state update\n    fetchPaymentsWithFilters(newFilters, 1);\n  };\n\n  // Helper function to fetch payments with specific filters\n  const fetchPaymentsWithFilters = async (filterOverrides: FilterOverrides, page: number = 1) => {\n    // For admin users without specific accountId, fetch all payments from Sippy\n    const isAdminViewingAll = user?.role === 'admin' && !accountId;\n    \n    if (!isAdminViewingAll && !targetAccountId) {\n      setError('No Sippy account ID available');\n      setIsLoading(false);\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      const limit = recordsPerPage;\n      const offset = (page - 1) * limit;\n\n      if (isAdminViewingAll) {\n        // Admin viewing all payments - fetch from all Sippy accounts\n        \n        const sippyQueryParams = new URLSearchParams({\n          limit: limit.toString(),\n          offset: offset.toString(),\n          ...(filterOverrides.type && filterOverrides.type !== 'all' && { \n            type: filterOverrides.type === 'credit' ? 'credit' : 'debit'\n          }),\n          ...(filterOverrides.status && filterOverrides.status !== 'all' && { \n            status: filterOverrides.status === 'successful' ? 'successful' : 'failed'\n          }),\n          ...(filterOverrides.startDate && { start_date: filterOverrides.startDate }),\n          ...(filterOverrides.endDate && { end_date: filterOverrides.endDate }),\n          ...(filterOverrides.userId && filterOverrides.userId !== 'all' && { user_id: filterOverrides.userId }),\n        });\n\n        const sippyResponse = await fetch(`/api/sippy/payments/all?${sippyQueryParams}`, {\n          headers: { 'Content-Type': 'application/json' },\n        });\n\n        if (!sippyResponse.ok) {\n          const errorData = await sippyResponse.json().catch(() => ({ error: 'Unknown error' }));\n          throw new Error(errorData.error || `HTTP ${sippyResponse.status}: Failed to fetch payments`);\n        }\n\n        const sippyData = await sippyResponse.json();\n        const sippyPayments = sippyData.payments || [];\n        \n\n        // Now enhance Sippy payments with MongoDB data where available\n        let enhancedPayments = sippyPayments;\n        \n        if (sippyPayments.length > 0) {\n          try {\n            // Fetch MongoDB payments to enhance the Sippy data\n            const mongoQueryParams = new URLSearchParams({\n              limit: '500', // Fetch more MongoDB records to find matches\n              offset: '0',\n              include_raw: 'false',\n              ...(filterOverrides.startDate && { start_date: filterOverrides.startDate }),\n              ...(filterOverrides.endDate && { end_date: filterOverrides.endDate }),\n            });\n\n            const mongoResponse = await fetch(`/api/payments/history?${mongoQueryParams}`, {\n              headers: { 'Content-Type': 'application/json' },\n            });\n\n            if (mongoResponse.ok) {\n              const mongoData: MongoPaymentsResponse = await mongoResponse.json();\n              const mongoPayments = mongoData.payments || [];\n              \n              // Create a map of MongoDB payments for quick lookup\n              const mongoMap = new Map<string, MongoPaymentRecord>();\n              const failedMongoPayments: MongoPaymentRecord[] = [];\n              \n              mongoPayments.forEach((mp: MongoPaymentRecord) => {\n                // Separate failed payments that are not in Sippy\n                if (mp.status === 'failed' && !mp.sippyPaymentId) {\n                  failedMongoPayments.push(mp);\n                } else {\n                  // For successful payments, create lookup maps\n                  // Map by payment intent ID\n                  if (mp.paymentIntentId) {\n                    mongoMap.set(`tx_${mp.paymentIntentId}`, mp);\n                  }\n                  // Map by Sippy payment ID if available\n                  if (mp.sippyPaymentId) {\n                    mongoMap.set(`payment_${mp.sippyPaymentId}`, mp);\n                  }\n                  // Map by account ID and amount for fuzzy matching\n                  if (mp.sippyAccountId && mp.topupAmount) {\n                    const key = `account_${mp.sippyAccountId}_${mp.topupAmount}_${mp.currency}`;\n                    mongoMap.set(key, mp);\n                  }\n                }\n              });\n\n              // Enhance Sippy payments with MongoDB data where available\n              enhancedPayments = sippyPayments.map((payment: Payment) => {\n                // Try different matching strategies\n                let mongoData: MongoPaymentRecord | undefined = undefined;\n                \n                // 1. Match by transaction ID\n                if (payment.tx_id) {\n                  mongoData = mongoMap.get(`tx_${payment.tx_id}`);\n                }\n                \n                // 2. Match by payment ID\n                if (!mongoData && payment.i_payment) {\n                  mongoData = mongoMap.get(`payment_${payment.i_payment}`);\n                }\n                \n                // 3. Match by account ID and amount\n                if (!mongoData && payment._userInfo?.sippyAccountId && payment.amount) {\n                  const key = `account_${payment._userInfo.sippyAccountId}_${Math.abs(payment.amount)}_${payment.currency}`;\n                  mongoData = mongoMap.get(key);\n                }\n                \n                if (mongoData) {\n                  return {\n                    ...payment,\n                    _mongoData: mongoData,\n                    _source: 'enhanced'\n                  };\n                }\n                \n                return {\n                  ...payment,\n                  _source: 'sippy_only'\n                };\n              });\n              \n              // Convert failed MongoDB payments to Sippy payment format for admin view\n              const failedPaymentsForAdmin = await Promise.all(failedMongoPayments\n                .filter((fp: MongoPaymentRecord) => {\n                  // Apply user filtering if specified\n                  if (filterOverrides.userId && filterOverrides.userId !== 'all') {\n                    // Find the user by ID to get their email for comparison\n                    const selectedUser = users.find(u => u.id === filterOverrides.userId);\n                    if (selectedUser && fp.userEmail !== selectedUser.email) {\n                      return false; // Filter out this failed payment\n                    }\n                  }\n                  \n                  // Apply status filtering if specified\n                  if (filterOverrides.status && filterOverrides.status !== 'all') {\n                    if (filterOverrides.status === 'successful' && fp.status === 'failed') {\n                      return false; // Filter out failed payments when showing only successful\n                    }\n                    if (filterOverrides.status === 'failed' && fp.status !== 'failed') {\n                      return false; // Filter out successful payments when showing only failed\n                    }\n                  }\n                  \n                  return true; // Include this payment\n                })\n                .map(async (fp: MongoPaymentRecord) => {\n                  // Try to get actual user info by email\n                  const userInfo = fp.userEmail ? await getUserInfoByEmail(fp.userEmail) : null;\n                  \n                  return {\n                    payment_time: fp.paymentCompletedAt || fp.paymentInitiatedAt,\n                    amount: fp.topupAmount || 0,\n                    currency: fp.currency || 'EUR',\n                    i_payment: 0, // No Sippy payment ID for failed payments\n                    tx_id: fp.paymentIntentId || fp.paymentReference || '',\n                    tx_error: fp.failureMessage || 'Payment failed',\n                    tx_result: 2, // Failed\n                    i_account: fp.sippyAccountId || 0,\n                    i_customer: fp.sippyCustomerId || 0,\n                    by_credit_debit_card: true,\n                    by_voucher: false,\n                    notes: `Failed payment: ${fp.failureMessage || 'Unknown error'}`,\n                    _mongoData: fp,\n                    _source: 'failed_only',\n                    _userInfo: {\n                      userName: userInfo?.userName || fp.userEmail?.split('@')[0] || 'Unknown',\n                      userEmail: fp.userEmail || 'Unknown',\n                      sippyAccountId: fp.sippyAccountId\n                    },\n                    _isFailedPayment: true,\n                    _failureReason: fp.failureMessage,\n                    _paymentReference: fp.paymentReference\n                  };\n                }));\n              \n              // Add failed payments to enhanced payments\n              enhancedPayments = [...enhancedPayments, ...failedPaymentsForAdmin];\n            }\n          } catch (error) {\n            console.warn('Failed to enhance Sippy payments with MongoDB data:', error);\n          }\n        }\n\n        // Convert to expected format with user information\n        const convertedPayments = enhancedPayments.map((sippyPayment: Payment) => ({\n          payment_time: sippyPayment.payment_time,\n          amount: sippyPayment.amount,\n          currency: sippyPayment.currency,\n          i_payment: sippyPayment.i_payment,\n          tx_id: sippyPayment.tx_id,\n          tx_error: sippyPayment.tx_error || '',\n          tx_result: sippyPayment.tx_result,\n          i_account: sippyPayment.i_account,\n          i_customer: sippyPayment.i_customer || 0,\n          by_credit_debit_card: sippyPayment.by_credit_debit_card || false,\n          by_voucher: sippyPayment.by_voucher || false,\n          notes: sippyPayment.notes || '',\n          _mongoData: sippyPayment._mongoData ? {\n            ...sippyPayment._mongoData,\n            userName: sippyPayment._userInfo?.userName,\n            userEmail: sippyPayment._userInfo?.userEmail\n          } : {\n            userName: sippyPayment._userInfo?.userName,\n            userEmail: sippyPayment._userInfo?.userEmail\n          },\n          _source: sippyPayment._source || 'sippy_primary',\n          _isFailedPayment: sippyPayment._isFailedPayment,\n          _failureReason: sippyPayment._failureReason,\n          _paymentReference: sippyPayment._paymentReference\n        }));\n        \n        // Apply client-side status filtering to all payments (Sippy + MongoDB)\n        const filteredPayments = convertedPayments.filter((payment: Payment) => {\n          // Apply status filtering if specified\n          if (filterOverrides.status && filterOverrides.status !== 'all') {\n            if (filterOverrides.status === 'successful' && payment.tx_result !== 1) {\n              return false; // Filter out failed payments when showing only successful\n            }\n            if (filterOverrides.status === 'failed' && payment.tx_result === 1) {\n              return false; // Filter out successful payments when showing only failed\n            }\n          }\n          return true;\n        });\n        \n        // Sort by payment time (most recent first)\n        filteredPayments.sort((a: Payment, b: Payment) => {\n          // Handle different date formats for robust sorting\n          const getTimestamp = (payment: Payment): number => {\n            try {\n              // Priority 1: For failed payments from MongoDB, use the MongoDB date directly\n              if (payment._isFailedPayment && payment._mongoData) {\n                const mongoDate = payment._mongoData.paymentCompletedAt || \n                                payment._mongoData.paymentInitiatedAt || \n                                payment._mongoData.createdAt;\n                if (mongoDate) {\n                  const timestamp = new Date(mongoDate).getTime();\n                  if (!isNaN(timestamp)) {\n                    return timestamp;\n                  }\n                }\n              }\n              \n              // Priority 2: Check if payment_time is in ISO format (from failed payments) - HIGHEST PRIORITY\n              if (payment.payment_time && (payment.payment_time.includes('T') || payment.payment_time.includes('Z'))) {\n                const timestamp = new Date(payment.payment_time).getTime();\n                if (!isNaN(timestamp)) {\n                  return timestamp;\n                }\n              }\n              \n              // Priority 3: For Sippy payments, use the parseSippyDate function\n              if (payment.payment_time) {\n                const timestamp = parseSippyDate(payment.payment_time).getTime();\n                if (!isNaN(timestamp)) {\n                  return timestamp;\n                }\n              }\n              \n              // Priority 4: Return very old timestamp for invalid dates (will appear at bottom)\n              console.warn('No valid date found for payment, using old timestamp:', payment);\n              return 0; // January 1, 1970 - will appear at bottom\n            } catch (error) {\n              console.warn('Error parsing payment date for sorting:', payment.payment_time, error);\n              return 0; // January 1, 1970 - will appear at bottom\n            }\n          };\n          \n          const timestampA = getTimestamp(a);\n          const timestampB = getTimestamp(b);\n          \n          // Sort descending (most recent first)\n          const result = timestampB - timestampA;\n          \n          // Handle NaN cases: if either timestamp is NaN, put it at the bottom\n          if (isNaN(result)) {\n            if (isNaN(timestampA) && isNaN(timestampB)) {\n              return 0; // Both invalid, keep original order\n            } else if (isNaN(timestampA)) {\n              return 1; // A is invalid, put it after B\n            } else if (isNaN(timestampB)) {\n              return -1; // B is invalid, put it after A\n            }\n          }\n          \n          return result;\n        });\n\n        \n        setPaymentsData({\n          result: 'success',\n          payments: filteredPayments,\n          count: filteredPayments.length,\n          requestDuration: 0\n        });\n        \n        setTotalRecords(sippyData.pagination?.total || 0);\n        \n      } else {\n        // Regular user or admin viewing specific account\n        const queryParams = new URLSearchParams({\n          offset: offset.toString(),\n          limit: limit.toString(),\n          ...(filterOverrides.type && filterOverrides.type !== 'all' && { type: filterOverrides.type }),\n          ...(filterOverrides.startDate && { start_date: filterOverrides.startDate }),\n          ...(filterOverrides.endDate && { end_date: filterOverrides.endDate }),\n        });\n\n        \n        const response = await fetch(`/api/sippy/account/${targetAccountId}/payments?${queryParams}`, {\n          headers: { 'Content-Type': 'application/json' },\n        });\n        \n        if (!response.ok) {\n          const errorData = await response.json().catch(() => ({ error: 'Unknown error' }));\n          throw new Error(errorData.error || `HTTP ${response.status}: Failed to fetch payments`);\n        }\n\n        const data = await response.json();\n        \n        // Ensure payments is always an array\n        if (!data.payments || !Array.isArray(data.payments)) {\n          data.payments = [];\n        }\n        \n        // For single account view, try to enhance Sippy payments with MongoDB data\n        // But do this more efficiently by fetching MongoDB data for this specific account\n        let enhancedPayments = data.payments.map((payment: Payment) => ({\n          ...payment,\n          _source: 'sippy_only'\n        }));\n\n        // Try to fetch MongoDB payments for this specific account to enhance the data\n        // and also fetch failed payments that are not in Sippy\n        let failedPayments: Payment[] = [];\n        \n        if (targetAccountId) {\n          try {\n            const mongoEnhanceParams = new URLSearchParams({\n              limit: '500', // Fetch more to find matches and failed payments\n              offset: '0',\n              include_raw: 'false',\n              account_id: targetAccountId.toString(),\n              ...(filterOverrides.startDate && { start_date: filterOverrides.startDate }),\n              ...(filterOverrides.endDate && { end_date: filterOverrides.endDate }),\n            });\n\n            const mongoResponse = await fetch(`/api/payments/history?${mongoEnhanceParams}`, {\n              headers: { 'Content-Type': 'application/json' },\n            });\n\n            if (mongoResponse.ok) {\n              const mongoData = await mongoResponse.json();\n              const mongoPayments = mongoData.payments || [];\n              \n              // Create a map of MongoDB payments for quick lookup\n              const mongoMap = new Map<string, MongoPaymentRecord>();\n              const failedMongoPayments: MongoPaymentRecord[] = [];\n              \n              mongoPayments.forEach((mp: MongoPaymentRecord) => {\n                // Separate failed payments that are not in Sippy\n                if (mp.status === 'failed' && !mp.sippyPaymentId) {\n                  failedMongoPayments.push(mp);\n                } else {\n                  // For successful payments, create lookup maps\n                  if (mp.sippyPaymentId) {\n                    mongoMap.set(`payment_${mp.sippyPaymentId}`, mp);\n                  }\n                  if (mp.paymentIntentId) {\n                    mongoMap.set(`tx_${mp.paymentIntentId}`, mp);\n                  }\n                }\n              });\n\n              // Enhance Sippy payments with MongoDB data where available\n              enhancedPayments = data.payments.map((payment: Payment) => {\n                const mongoData = mongoMap.get(`payment_${payment.i_payment}`) || \n                                mongoMap.get(`tx_${payment.tx_id}`);\n                \n                if (mongoData) {\n                  return {\n                    ...payment,\n                    _mongoData: mongoData,\n                    _source: 'enhanced'\n                  };\n                }\n                \n                return {\n                  ...payment,\n                  _source: 'sippy_only'\n                };\n              });\n              \n              // Convert failed MongoDB payments to Payment format with status filtering\n              failedPayments = failedMongoPayments\n                .filter((fp: MongoPaymentRecord) => {\n                  // Apply status filtering if specified\n                  if (filterOverrides.status && filterOverrides.status !== 'all') {\n                    if (filterOverrides.status === 'successful' && fp.status === 'failed') {\n                      return false; // Filter out failed payments when showing only successful\n                    }\n                    if (filterOverrides.status === 'failed' && fp.status !== 'failed') {\n                      return false; // Filter out successful payments when showing only failed\n                    }\n                  }\n                  return true;\n                })\n                .map((fp: MongoPaymentRecord) => ({\n                  payment_time: fp.paymentCompletedAt || fp.paymentInitiatedAt || new Date().toISOString(),\n                  amount: fp.topupAmount || 0,\n                  currency: fp.currency || 'EUR',\n                  i_payment: 0, // No Sippy payment ID for failed payments\n                  tx_id: fp.paymentIntentId || fp.paymentReference || '',\n                  tx_error: fp.failureMessage || 'Payment failed',\n                  tx_result: 2, // Failed\n                  i_account: fp.sippyAccountId || targetAccountId,\n                  i_customer: fp.sippyCustomerId || 0,\n                  by_credit_debit_card: true, // Failed payments are typically card payments\n                  by_voucher: false,\n                  notes: `Failed payment: ${fp.failureMessage || 'Unknown error'}`,\n                  _mongoData: fp,\n                  _source: 'failed_only',\n                  _isFailedPayment: true,\n                  _failureReason: fp.failureMessage,\n                  _paymentReference: fp.paymentReference\n                }));\n              \n            }\n          } catch (error) {\n            console.warn('Failed to enhance payments with MongoDB data:', error);\n          }\n        }\n        \n        // Combine Sippy payments with failed payments\n        const allPayments = [...enhancedPayments, ...failedPayments];\n        \n        // Apply client-side status filtering to Sippy payments\n        const filteredPayments = allPayments.filter((payment: Payment) => {\n          // Apply status filtering if specified\n          if (filterOverrides.status && filterOverrides.status !== 'all') {\n            if (filterOverrides.status === 'successful' && payment.tx_result !== 1) {\n              return false; // Filter out failed payments when showing only successful\n            }\n            if (filterOverrides.status === 'failed' && payment.tx_result === 1) {\n              return false; // Filter out successful payments when showing only failed\n            }\n          }\n          return true;\n        });\n        \n        // Sort by payment time (most recent first)\n        filteredPayments.sort((a, b) => {\n          // Handle different date formats for robust sorting\n          const getTimestamp = (payment: Payment): number => {\n            try {\n              // For failed payments from MongoDB, use ISO date format\n              if (payment._isFailedPayment && payment._mongoData) {\n                const mongoDate = payment._mongoData.paymentCompletedAt || payment._mongoData.paymentInitiatedAt || payment._mongoData.createdAt;\n                if (mongoDate) {\n                  const timestamp = new Date(mongoDate).getTime();\n                  if (!isNaN(timestamp)) {\n                    return timestamp;\n                  }\n                }\n              }\n              \n              // For Sippy payments, use the parseSippyDate function\n              if (payment.payment_time) {\n                // Check if it's already in ISO format (from MongoDB)\n                if (payment.payment_time.includes('T') || payment.payment_time.includes('Z')) {\n                  const timestamp = new Date(payment.payment_time).getTime();\n                  if (!isNaN(timestamp)) {\n                    return timestamp;\n                  }\n                }\n                // Otherwise, parse as Sippy format\n                const timestamp = parseSippyDate(payment.payment_time).getTime();\n                if (!isNaN(timestamp)) {\n                  return timestamp;\n                }\n              }\n              \n              // Fallback to current time if no valid date\n              return new Date().getTime();\n            } catch (error) {\n              console.warn('Error parsing payment date for sorting:', payment.payment_time, error);\n              return new Date().getTime();\n            }\n          };\n          \n          const timestampA = getTimestamp(a);\n          const timestampB = getTimestamp(b);\n          \n          // Sort descending (most recent first)\n          const result = timestampB - timestampA;\n          \n          // Handle NaN cases: if either timestamp is NaN, put it at the bottom\n          if (isNaN(result)) {\n            if (isNaN(timestampA) && isNaN(timestampB)) {\n              return 0; // Both invalid, keep original order\n            } else if (isNaN(timestampA)) {\n              return 1; // A is invalid, put it after B\n            } else if (isNaN(timestampB)) {\n              return -1; // B is invalid, put it after A\n            }\n          }\n          \n          return result;\n        });\n        \n        \n        setPaymentsData({\n          result: 'success',\n          payments: filteredPayments,\n          count: filteredPayments.length,\n          requestDuration: data.requestDuration || 0\n        });\n        \n        // Update total records for pagination\n        const currentRecords = filteredPayments.length;\n        const effectiveLimit = recordsPerPage;\n        \n        if (currentRecords === effectiveLimit) {\n          setTotalRecords((page + 10) * effectiveLimit);\n        } else {\n          setTotalRecords(offset + currentRecords);\n        }\n      }\n      \n      setLastRefresh(new Date());\n      \n    } catch (err) {\n      console.error('Error fetching payments:', err);\n      \n      let errorMessage = 'Failed to fetch payments';\n      if (err instanceof Error) {\n        errorMessage = err.message;\n      }\n      \n      setError(errorMessage);\n      toast.error(errorMessage);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Helper function to check if a quick filter is currently active\n  const isQuickFilterActive = (range: 'today' | 'this_month' | 'last_month' | 'this_year'): boolean => {\n    // Use GMT timezone for consistency with Sippy API\n    const now = new Date();\n    const currentYear = now.getUTCFullYear();\n    const currentMonth = now.getUTCMonth();\n    \n    let expectedStartDate: string;\n    let expectedEndDate: string;\n    \n    switch (range) {\n      case 'today':\n        const todayGMT = new Date(Date.UTC(currentYear, currentMonth, now.getUTCDate()));\n        expectedStartDate = todayGMT.toISOString().split('T')[0];\n        expectedEndDate = todayGMT.toISOString().split('T')[0];\n        break;\n        \n      case 'this_month':\n        const firstDayOfMonth = new Date(Date.UTC(currentYear, currentMonth, 1));\n        const lastDayOfMonth = new Date(Date.UTC(currentYear, currentMonth + 1, 0));\n        expectedStartDate = firstDayOfMonth.toISOString().split('T')[0];\n        expectedEndDate = lastDayOfMonth.toISOString().split('T')[0];\n        break;\n        \n      case 'last_month':\n        const firstDayOfLastMonth = new Date(Date.UTC(currentYear, currentMonth - 1, 1));\n        const lastDayOfLastMonth = new Date(Date.UTC(currentYear, currentMonth, 0));\n        expectedStartDate = firstDayOfLastMonth.toISOString().split('T')[0];\n        expectedEndDate = lastDayOfLastMonth.toISOString().split('T')[0];\n        break;\n        \n      case 'this_year':\n        const firstDayOfYear = new Date(Date.UTC(currentYear, 0, 1));\n        const lastDayOfYear = new Date(Date.UTC(currentYear, 11, 31));\n        expectedStartDate = firstDayOfYear.toISOString().split('T')[0];\n        expectedEndDate = lastDayOfYear.toISOString().split('T')[0];\n        break;\n        \n      default:\n        return false;\n    }\n    \n    return filters.startDate === expectedStartDate && filters.endDate === expectedEndDate;\n  };\n\n  // const applyFilters = () => {\n  //   setCurrentPage(1);\n  //   fetchPayments(1);\n  // };\n\n  const handlePageChange = (newPage: number) => {\n    setCurrentPage(newPage);\n    fetchPayments(newPage);\n  };\n\n  const handleLimitChange = (value: string) => {\n    const newLimit = parseInt(value);\n    setRecordsPerPage(newLimit);\n    setCurrentPage(1);\n    fetchPayments(1, newLimit);\n  };\n\n  const formatCurrency = (amount: number, currency: string = 'EUR') => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: currency,\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    }).format(amount);\n  };\n\n  // Helper function to get currency symbols\n  const getCurrencySymbol = (currency: string): string => {\n    switch (currency.toUpperCase()) {\n      case 'EUR': return '€';\n      case 'USD': return '$';\n      case 'GBP': return '£';\n      default: return currency;\n    }\n  };\n\n  // Format amount with currency symbol after the amount (European style)\n  const formatAmountWithSymbol = (amount: number, currency: string = 'EUR'): string => {\n    const formattedAmount = new Intl.NumberFormat('en-US', {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    }).format(Math.abs(amount));\n    \n    const symbol = getCurrencySymbol(currency);\n    return `${formattedAmount}${symbol}`;\n  };\n\n  // Intelligent payment method detection\n  const getPaymentMethod = (payment: Payment, enhancedData?: any) => {\n    // First priority: Use embedded MongoDB data from admin view\n    if (payment._mongoData) {\n      const mongoData = payment._mongoData;\n      if (mongoData.cardBrand && typeof mongoData.cardBrand === 'string' && mongoData.cardLast4) {\n        return `${mongoData.cardBrand.charAt(0).toUpperCase() + mongoData.cardBrand.slice(1)} •••• ${mongoData.cardLast4}`;\n      }\n      if (mongoData.paymentMethodType) {\n        return mongoData.paymentMethodType === 'card' ? 'Credit/Debit Card' : mongoData.paymentMethodType;\n      }\n    }\n\n    // Second priority: Use MongoDB enhanced data if available\n    if (enhancedData?.type === 'mongodb' && enhancedData?.data) {\n      const mongoData = enhancedData.data;\n      if (mongoData.paymentMethodType) {\n        // Return the actual payment method from MongoDB\n        if (mongoData.cardBrand && mongoData.cardLast4) {\n          return `${mongoData.cardBrand.charAt(0).toUpperCase() + mongoData.cardBrand.slice(1)} •••• ${mongoData.cardLast4}`;\n        }\n        return mongoData.paymentMethodType;\n      }\n    }\n\n    // Third priority: Check transaction ID patterns for payment gateway detection\n    if (payment.tx_id) {\n      // Stripe payment intent pattern\n      if (payment.tx_id.startsWith('pi_') || payment.tx_id.includes('pi_')) {\n        return 'Credit/Debit Card (Stripe)';\n      }\n      // PayPal pattern\n      if (payment.tx_id.includes('paypal') || payment.tx_id.toUpperCase().includes('PP')) {\n        return 'PayPal';\n      }\n      // Other payment gateway patterns can be added here\n    }\n\n    // Fourth priority: Check payment notes for gateway information\n    if (payment.notes) {\n      const notes = payment.notes.toLowerCase();\n      if (notes.includes('stripe') || notes.includes('pi_')) {\n        return 'Credit/Debit Card (Stripe)';\n      }\n      if (notes.includes('paypal')) {\n        return 'PayPal';\n      }\n      if (notes.includes('manual') || notes.includes('admin')) {\n        return 'Manual Topup';\n      }\n    }\n\n    // Fifth priority: Use Sippy flags\n    if (payment.by_credit_debit_card) {\n      return 'Credit/Debit Card';\n    }\n    if (payment.by_voucher) {\n      return 'Voucher';\n    }\n\n    // Default: Assume manual topup for payments without clear gateway indicators\n    return 'Manual Topup';\n  };\n\n  const exportToCsv = () => {\n    if (!paymentsData?.payments || !Array.isArray(paymentsData.payments) || paymentsData.payments.length === 0) {\n      toast.error('No payment data available to export');\n      return;\n    }\n\n    const isAdminViewingAll = user?.role === 'admin' && !accountId;\n\n    const headers = [\n      'Payment Time',\n      ...(isAdminViewingAll ? ['User Name', 'Account ID'] : []),\n      'Amount',\n      'Currency',\n      'Payment ID',\n      'Transaction ID',\n      'Status',\n      'Method',\n      'Notes'\n    ];\n\n    const csvContent = [\n      headers.join(','),\n      ...paymentsData.payments.map(payment => [\n        payment.payment_time || '',\n        ...(isAdminViewingAll ? [\n          payment._mongoData?.userName || payment._mongoData?.userEmail || 'Unknown User',\n          payment.i_account || ''\n        ] : []),\n        payment.amount || '',\n        payment.currency || '',\n        payment.i_payment || '',\n        payment.tx_id || '',\n        payment.tx_result === 1 ? 'Success' : 'Failed',\n        getPaymentMethod(payment),\n        payment.notes || ''\n      ].join(','))\n    ].join('\\n');\n\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n    const link = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n    link.setAttribute('href', url);\n    const filename = isAdminViewingAll \n      ? `all_payments_${format(new Date(), 'yyyy-MM-dd')}.csv`\n      : `account_payments_${targetAccountId}_${format(new Date(), 'yyyy-MM-dd')}.csv`;\n    link.setAttribute('download', filename);\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  // Fetch users for balance operations\n  const fetchUsers = async () => {\n    try {\n      setIsLoadingUsers(true);\n      \n      const response = await fetch('/api/users', {\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to fetch users');\n      }\n\n      const data = await response.json();\n      const usersWithSippyAccounts = data.users?.filter((user: User) => \n        user.isEmailVerified && user.sippyAccountId\n      ) || [];\n      \n      setUsers(usersWithSippyAccounts);\n    } catch (error) {\n      console.error('Error fetching users:', error);\n      toast.error('Failed to fetch users');\n    } finally {\n      setIsLoadingUsers(false);\n    }\n  };\n\n  // Handle user selection for balance operations\n  const handleUserSelection = (userId: string) => {\n    const selectedUser = users.find(user => user.id === userId);\n    if (selectedUser) {\n      setBalanceOperation(prev => ({\n        ...prev,\n        selectedUserId: userId,\n        selectedUserAccountId: selectedUser.sippyAccountId || null\n      }));\n    }\n  };\n\n  // Filter users based on search term\n  const filteredUsers = users.filter(user => \n    user.email.toLowerCase().includes(userSearchTerm.toLowerCase()) ||\n    `${user.name} ${user.email}`.toLowerCase().includes(userSearchTerm.toLowerCase()) ||\n    (user.sippyAccountId && user.sippyAccountId.toString().includes(userSearchTerm))\n  );\n\n  // Open balance dialog and fetch users\n  const openBalanceDialog = () => {\n    setShowBalanceDialog(true);\n    fetchUsers();\n  };\n\n  const handleBalanceOperation = async () => {\n    // For balance operations, use selectedUserAccountId if available, otherwise fall back to targetAccountId\n    const operationAccountId = balanceOperation.selectedUserAccountId || targetAccountId;\n    \n    if (!operationAccountId || !balanceOperation.amount) {\n      toast.error('Please select a user and fill in all required fields');\n      return;\n    }\n\n    try {\n      setIsBalanceLoading(true);\n\n      const response = await fetch(`/api/sippy/account/${operationAccountId}/balance`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          operation: balanceOperation.operation,\n          amount: parseFloat(balanceOperation.amount),\n          currency: balanceOperation.currency,\n          payment_notes: balanceOperation.notes || undefined,\n        }),\n      });\n\n      const result = await response.json();\n\n      if (!response.ok) {\n        throw new Error(result.error || 'Failed to perform balance operation');\n      }\n\n      const selectedUser = users.find(user => user.id === balanceOperation.selectedUserId);\n      const userInfo = selectedUser ? `${selectedUser.name} (${selectedUser.email})` : `Account ${operationAccountId}`;\n      \n      toast.success(`Balance operation completed successfully for ${userInfo}`);\n      setShowBalanceDialog(false);\n      setBalanceOperation({\n        operation: 'credit',\n        amount: '',\n        currency: 'EUR',\n        notes: '',\n        selectedUserId: '',\n        selectedUserAccountId: null\n      });\n      \n      // Refresh payments to show the new transaction (if viewing the same account)\n      if (operationAccountId === targetAccountId) {\n        fetchPayments();\n      }\n    } catch (err) {\n      console.error('Error performing balance operation:', err);\n      toast.error(err instanceof Error ? err.message : 'Failed to perform balance operation');\n    } finally {\n      setIsBalanceLoading(false);\n    }\n  };\n\n  // Extract payment intent ID from Sippy payment notes/description\n  const extractPaymentIntentId = (payment: Payment): string | null => {\n    // Check tx_id first\n    if (payment.tx_id) {\n      // If tx_id looks like a payment intent ID, use it\n      if (payment.tx_id.startsWith('pi_')) {\n        return payment.tx_id;\n      }\n    }\n    \n    // Check notes field for Stripe payment intent pattern\n    if (payment.notes) {\n      const piMatch = payment.notes.match(/pi_[a-zA-Z0-9]+/);\n      if (piMatch) {\n        return piMatch[0];\n      }\n    }\n    \n    // Check if tx_id contains the payment intent pattern\n    if (payment.tx_id) {\n      const piMatch = payment.tx_id.match(/pi_[a-zA-Z0-9]+/);\n      if (piMatch) {\n        return piMatch[0];\n      }\n    }\n    \n    return null;\n  };\n\n  // Fetch enhanced payment data from MongoDB\n  const fetchEnhancedPaymentData = async (payment: Payment) => {\n    try {\n      \n      // Extract payment intent ID from Sippy data\n      const extractedPaymentIntentId = extractPaymentIntentId(payment);\n      \n      // First, try to find MongoDB payment record directly by payment intent ID\n      if (extractedPaymentIntentId) {\n        const directResponse = await fetch(`/api/payments/${extractedPaymentIntentId}/receipt`);\n        \n        if (directResponse.ok) {\n          const receiptData = await directResponse.json();\n          \n          // If this receipt has comprehensive data, convert it to MongoDB format\n          if (receiptData.success && receiptData.receipt) {\n            \n            // Convert receipt format to MongoDB format for consistency\n            const convertedData = {\n              paymentReference: receiptData.receipt.receiptNumber,\n              paymentIntentId: receiptData.receipt.payment?.id,\n              status: receiptData.receipt.payment?.status,\n              userEmail: receiptData.receipt.customer?.email,\n              sippyAccountId: receiptData.receipt.customer?.accountId,\n              sippyCustomerId: receiptData.receipt.customer?.customerId,\n              topupAmount: receiptData.receipt.amounts?.topupAmount,\n              processingFee: receiptData.receipt.amounts?.processingFee,\n              fixedFee: receiptData.receipt.amounts?.fixedFee,\n              totalChargedAmount: receiptData.receipt.amounts?.totalCharged,\n              currency: receiptData.receipt.amounts?.currency,\n              paymentMethodType: receiptData.receipt.payment?.method,\n              gatewayName: receiptData.receipt.payment?.gateway,\n              provider: receiptData.receipt.payment?.provider,\n              cardBrand: receiptData.receipt.card?.brand,\n              cardLast4: receiptData.receipt.card?.last4,\n              cardCountry: receiptData.receipt.card?.country,\n              description: receiptData.receipt.description,\n              notes: receiptData.receipt.notes,\n              receiptUrl: receiptData.receipt.receiptUrl,\n              createdAt: receiptData.receipt.createdAt,\n              updatedAt: receiptData.receipt.updatedAt,\n              paymentCompletedAt: receiptData.receipt.paymentDate,\n              taxAmount: receiptData.receipt.tax?.amount,\n              taxRate: receiptData.receipt.tax?.rate\n            };\n            \n            setEnhancedPaymentData({\n              type: 'mongodb',\n              data: convertedData,\n              sippyData: payment\n            });\n            return;\n          }\n        } else {\n        }\n      } else {\n      }\n      \n      // Search MongoDB payment history for matching payment\n      let searchOffset = 0;\n      const searchLimit = 100;\n      let found = false;\n      \n      \n      // Search through multiple pages if needed (up to 500 payments)\n      while (!found && searchOffset < 500) {\n        const mongoResponse = await fetch(`/api/payments/history?limit=${searchLimit}&offset=${searchOffset}&include_raw=false`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        });\n        \n        if (mongoResponse.ok) {\n          const mongoData = await mongoResponse.json();\n          \n          if (mongoData.payments && mongoData.payments.length > 0) {\n            \n            // Look for matching payment with prioritized criteria\n            const matchingPayment = mongoData.payments?.find((p: MongoPaymentRecord) => {\n              // Primary matching criteria: payment intent ID (highest priority)\n              const matchesExtractedPaymentIntent = extractedPaymentIntentId && p.paymentIntentId === extractedPaymentIntentId;\n              \n              // Secondary matching criteria\n              const matchesOriginalTxId = payment.tx_id && p.paymentIntentId === payment.tx_id;\n              const matchesPaymentId = p.sippyPaymentId && p.sippyPaymentId === payment.i_payment.toString();\n              const matchesAccountId = p.sippyAccountId === payment.i_account;\n              \n              // Tertiary matching criteria (for payments without perfect ID matches)\n              const amountMatches = p.topupAmount ? Math.abs(p.topupAmount - Math.abs(payment.amount)) < 0.01 : false; // Allow for small rounding differences\n              const currencyMatches = p.currency === payment.currency;\n              const accountAmountMatch = matchesAccountId && amountMatches && currencyMatches;\n              \n              // Prioritize payment intent ID match first\n              const isMatch = matchesExtractedPaymentIntent || matchesOriginalTxId || matchesPaymentId || accountAmountMatch;\n              \n              return isMatch;\n            });\n            \n            if (matchingPayment) {\n              setEnhancedPaymentData({\n                type: 'mongodb',\n                data: matchingPayment,\n                sippyData: payment\n              });\n              found = true;\n              return;\n            }\n          }\n          \n          // If we got fewer results than the limit, we've reached the end\n          if (mongoData.payments.length < searchLimit) {\n            break;\n          }\n        } else {\n          break;\n        }\n        \n        searchOffset += searchLimit;\n      }\n      \n      // No enhanced data found\n      setEnhancedPaymentData({\n        type: 'sippy_only',\n        data: null,\n        sippyData: payment\n      });\n      \n    } catch (error) {\n      console.error('Error fetching enhanced payment data:', error);\n      setEnhancedPaymentData({\n        type: 'sippy_only',\n        data: null,\n        sippyData: payment\n      });\n    }\n  };\n\n  const handlePaymentDetailsClick = async (payment: Payment) => {\n    setSelectedPayment(payment);\n    setShowPaymentDetails(true);\n    \n    // Always try to fetch enhanced payment data, even without tx_id\n    await fetchEnhancedPaymentData(payment);\n  };\n\n  useEffect(() => {\n    // Fetch payments when we have a target account ID (auth handled by page)\n    if (targetAccountId) {\n      fetchPayments(1);\n    }\n  }, [targetAccountId]);\n\n  const totalPages = Math.ceil(totalRecords / recordsPerPage);\n  const startRecord = (currentPage - 1) * recordsPerPage + 1;\n  const endRecord = Math.min(currentPage * recordsPerPage, totalRecords);\n\n  // Show loading state while fetching payments (auth already handled by page)\n  if (isLoading && !paymentsData) {\n    return (\n      <div className=\"min-h-[400px] flex items-center justify-center\">\n        <div className=\"text-center space-y-4\">\n          <div \n            className=\"mx-auto w-16 h-16 rounded-2xl flex items-center justify-center shadow-lg\"\n            style={{ background: `linear-gradient(135deg, ${colors.primary}, ${colors.secondary})` }}\n          >\n            <Loader2 className=\"h-8 w-8 animate-spin text-white\" />\n          </div>\n          <div>\n            <h3 className=\"text-lg font-semibold\" style={{ color: colors.primary }}>\n              Loading Payments\n            </h3>\n            <p className=\"text-muted-foreground\">\n              Fetching payment history from Sippy...\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <Card className=\"border-destructive\">\n        <CardHeader>\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 rounded-lg bg-red-50 dark:bg-red-950/50 flex items-center justify-center\">\n              <CreditCard className=\"h-5 w-5 text-red-600 dark:text-red-400\" />\n            </div>\n            <div>\n              <CardTitle className=\"text-destructive\">Error Loading Payments</CardTitle>\n              <CardDescription>There was an error loading your payment history</CardDescription>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-sm text-destructive mb-4\">{error}</p>\n          <Button \n            variant=\"outline\" \n            onClick={() => fetchPayments()}\n            className=\"gap-2\"\n          >\n            <RefreshCw className=\"h-4 w-4\" />\n            Try Again\n          </Button>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Actions */}\n      <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-4\">\n        <div className=\"flex items-center gap-2\">\n          <div \n            className=\"inline-flex items-center gap-2 px-3 py-1.5 rounded-full text-sm font-medium\"\n            style={{ backgroundColor: `${colors.primary}20`, color: colors.primary }}\n          >\n            <CreditCard className=\"h-4 w-4\" />\n            {stats.totalPayments} payment{stats.totalPayments !== 1 ? 's' : ''} • {stats.successfulPayments} successful\n          </div>\n          {lastRefresh && (\n            <span className=\"text-sm text-muted-foreground\">\n              • Last updated {format(lastRefresh, 'HH:mm:ss')}\n            </span>\n          )}\n        </div>\n        \n        <div className=\"flex items-center gap-2\">\n          <BalanceTopup onPaymentSuccess={() => fetchPayments()} />\n          \n          {user?.role === 'admin' && (\n            <Button \n              onClick={openBalanceDialog}\n              variant=\"outline\"\n              className=\"gap-2\"\n            >\n              <DollarSign className=\"h-4 w-4\" />\n              Manage Balance\n            </Button>\n          )}\n          \n          <Button \n            variant=\"outline\" \n            size=\"sm\"\n            onClick={() => {\n              setShowFilters(!showFilters);\n              // Load users when opening filters for admin\n              if (!showFilters && user?.role === 'admin' && !accountId && users.length === 0) {\n                fetchUsers();\n              }\n            }}\n            className=\"gap-2\"\n          >\n            <Filter className=\"h-4 w-4\" />\n            Filters\n          </Button>\n          <Button \n            variant=\"outline\" \n            size=\"sm\"\n            onClick={() => fetchPayments()}\n            disabled={isLoading}\n            className=\"gap-2\"\n          >\n            <RefreshCw className={`h-4 w-4 ${isLoading ? 'animate-spin' : ''}`} />\n            Refresh\n          </Button>\n          <Button \n            variant=\"outline\" \n            size=\"sm\"\n            onClick={exportToCsv}\n            disabled={!paymentsData?.payments || !Array.isArray(paymentsData.payments) || paymentsData.payments.length === 0}\n            className=\"gap-2\"\n          >\n            <Download className=\"h-4 w-4\" />\n            Export CSV\n          </Button>\n        </div>\n      </div>\n\n      {/* Statistics Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        {/* Total Payments */}\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Total Payments</p>\n                <p className=\"text-2xl font-bold text-brand\">\n                  {stats.totalPayments}\n                </p>\n                <p className=\"text-xs text-muted-foreground\">\n                  {stats.successfulPayments} successful\n                </p>\n              </div>\n              <div \n                className=\"w-12 h-12 rounded-xl flex items-center justify-center\"\n                style={{ backgroundColor: `${colors.primary}20` }}\n              >\n                <Receipt className=\"h-6 w-6\" style={{ color: colors.primary }} />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Total Credits */}\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Total Credits</p>\n                <p className=\"text-2xl font-bold text-green-600 dark:text-green-400\">\n                  {formatCurrency(stats.totalCredits, stats.currency)}\n                </p>\n                <p className=\"text-xs text-muted-foreground\">\n                  Money added\n                </p>\n              </div>\n              <div className=\"w-12 h-12 rounded-xl flex items-center justify-center bg-green-100 dark:bg-green-950/50\">\n                <TrendingUp className=\"h-6 w-6 text-green-600 dark:text-green-400\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Total Debits */}\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Total Debits</p>\n                <p className=\"text-2xl font-bold text-red-600 dark:text-red-400\">\n                  {formatCurrency(stats.totalDebits, stats.currency)}\n                </p>\n                <p className=\"text-xs text-muted-foreground\">\n                  Money deducted\n                </p>\n              </div>\n              <div className=\"w-12 h-12 rounded-xl flex items-center justify-center bg-red-100 dark:bg-red-950/50\">\n                <TrendingDown className=\"h-6 w-6 text-red-600 dark:text-red-400\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Failed Payments */}\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Failed Payments</p>\n                <p className=\"text-2xl font-bold text-red-600 dark:text-red-400\">\n                  {stats.failedPayments}\n                </p>\n                <p className=\"text-xs text-muted-foreground\">\n                  {stats.totalPayments > 0 ? Math.round((stats.failedPayments / stats.totalPayments) * 100) : 0}% failure rate\n                </p>\n              </div>\n              <div className=\"w-12 h-12 rounded-xl flex items-center justify-center bg-red-100 dark:bg-red-950/50\">\n                <XCircle className=\"h-6 w-6 text-red-600 dark:text-red-400\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters Panel */}\n      {showFilters && (\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-base flex items-center gap-2\">\n                <Filter className=\"h-5 w-5\" style={{ color: colors.primary }} />\n                Filters\n              </CardTitle>\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                onClick={() => setShowFilters(false)}\n                className=\"h-8 w-8 p-0\"\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </div>\n            \n            {/* Active Filters Indicator */}\n            <div className=\"flex flex-wrap gap-2 mt-2\">\n              {filters.type !== 'all' && (\n                <Badge variant=\"secondary\" className=\"gap-1\">\n                  Type: {filters.type === 'credit' ? 'Credits' : 'Debits'}\n                  <X \n                    className=\"h-3 w-3 cursor-pointer hover:text-destructive\" \n                    onClick={() => handleFilterChange('type', 'all')}\n                  />\n                </Badge>\n              )}\n              {filters.status !== 'all' && (\n                <Badge variant=\"secondary\" className=\"gap-1\">\n                  Status: {filters.status === 'successful' ? 'Successful' : 'Failed'}\n                  <X \n                    className=\"h-3 w-3 cursor-pointer hover:text-destructive\" \n                    onClick={() => handleFilterChange('status', 'all')}\n                  />\n                </Badge>\n              )}\n              {filters.userId !== 'all' && user?.role === 'admin' && !accountId && (\n                <Badge variant=\"secondary\" className=\"gap-1\">\n                  User: {users.find(u => u.id === filters.userId)?.name || 'Unknown'}\n                  <X \n                    className=\"h-3 w-3 cursor-pointer hover:text-destructive\" \n                    onClick={() => handleFilterChange('userId', 'all')}\n                  />\n                </Badge>\n              )}\n              {(filters.startDate || filters.endDate) && (\n                <Badge variant=\"secondary\" className=\"gap-1\">\n                  Date: {filters.startDate} to {filters.endDate}\n                  <X \n                    className=\"h-3 w-3 cursor-pointer hover:text-destructive\" \n                    onClick={() => {\n                      const now = new Date();\n                      const currentYear = now.getUTCFullYear();\n                      const currentMonth = now.getUTCMonth();\n                      const firstDayOfMonth = new Date(Date.UTC(currentYear, currentMonth, 1));\n                      const lastDayOfMonth = new Date(Date.UTC(currentYear, currentMonth + 1, 0));\n                      const startDate = firstDayOfMonth.toISOString().split('T')[0];\n                      const endDate = lastDayOfMonth.toISOString().split('T')[0];\n                      const newFilters = { ...filters, startDate, endDate };\n                      setFilters(newFilters);\n                      fetchPaymentsWithFilters(newFilters, 1);\n                    }}\n                  />\n                </Badge>\n              )}\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className={`grid gap-4 ${\n              user?.role === 'admin' && !accountId \n                ? 'grid-cols-1 md:grid-cols-2 lg:grid-cols-5' \n                : 'grid-cols-1 md:grid-cols-2 lg:grid-cols-4'\n            }`}>\n              <div className=\"space-y-2\">\n                <Label className=\"flex items-center gap-2\">\n                  Payment Type\n                  {isLoading && <Loader2 className=\"h-3 w-3 animate-spin text-muted-foreground\" />}\n                </Label>\n                <Select\n                  value={filters.type}\n                  onValueChange={(value) => handleFilterChange('type', value)}\n                  disabled={isLoading}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"All types\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All types</SelectItem>\n                    <SelectItem value=\"credit\">Credits only</SelectItem>\n                    <SelectItem value=\"debit\">Debits only</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"space-y-2\">\n                <Label className=\"flex items-center gap-2\">\n                  Status\n                  {isLoading && <Loader2 className=\"h-3 w-3 animate-spin text-muted-foreground\" />}\n                </Label>\n                <Select\n                  value={filters.status}\n                  onValueChange={(value) => handleFilterChange('status', value)}\n                  disabled={isLoading}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"All statuses\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All statuses</SelectItem>\n                    <SelectItem value=\"successful\">Successful</SelectItem>\n                    <SelectItem value=\"failed\">Failed</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              {user?.role === 'admin' && !accountId && (\n                <div className=\"space-y-2\">\n                  <Label className=\"flex items-center gap-2\">\n                    User\n                    {isLoading && <Loader2 className=\"h-3 w-3 animate-spin text-muted-foreground\" />}\n                  </Label>\n                  <Select\n                    value={filters.userId}\n                    onValueChange={(value) => handleFilterChange('userId', value)}\n                    disabled={isLoading}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"All users\" />\n                    </SelectTrigger>\n                    <SelectContent className=\"max-h-60\">\n                      <SelectItem value=\"all\">All users</SelectItem>\n                      {users.map((user) => (\n                        <SelectItem key={user.id} value={user.id}>\n                          <div className=\"flex flex-col\">\n                            <span className=\"font-medium\">\n                              {user.name}\n                            </span>\n                            <span className=\"text-xs text-muted-foreground\">\n                              {user.email}\n                            </span>\n                          </div>\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              )}\n              <div className=\"space-y-2\">\n                <Label className=\"flex items-center gap-2\">\n                  Start Date\n                  {isLoading && <Loader2 className=\"h-3 w-3 animate-spin text-muted-foreground\" />}\n                </Label>\n                <Input\n                  type=\"date\"\n                  value={filters.startDate}\n                  onChange={(e) => handleFilterChange('startDate', e.target.value)}\n                  disabled={isLoading}\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label className=\"flex items-center gap-2\">\n                  End Date\n                  {isLoading && <Loader2 className=\"h-3 w-3 animate-spin text-muted-foreground\" />}\n                </Label>\n                <Input\n                  type=\"date\"\n                  value={filters.endDate}\n                  onChange={(e) => handleFilterChange('endDate', e.target.value)}\n                  disabled={isLoading}\n                />\n              </div>\n            </div>\n            \n            <div className=\"flex items-center justify-between mt-4\">\n              <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                <Info className=\"h-4 w-4\" />\n                <span>Filters apply automatically as you change them</span>\n              </div>\n              <Button \n                variant=\"outline\"\n                onClick={clearFilters}\n                disabled={isLoading}\n                className=\"gap-2\"\n              >\n                <X className=\"h-4 w-4\" />\n                Clear All Filters\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Quick Filter Buttons - Above Table */}\n      <Card className=\"border-0 shadow-sm\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex justify-center\">\n            <div className=\"flex flex-wrap gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setQuickFilter('today')}\n                disabled={isLoading}\n                className=\"gap-2 hover:bg-blue-50 hover:border-blue-300\"\n                style={{ \n                  backgroundColor: isQuickFilterActive('today') ? `${colors.primary}20` : undefined,\n                  borderColor: isQuickFilterActive('today') ? colors.primary : undefined,\n                  color: isQuickFilterActive('today') ? colors.primary : undefined\n                }}\n              >\n                <Calendar className=\"h-3 w-3\" />\n                Today\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setQuickFilter('this_month')}\n                disabled={isLoading}\n                className=\"gap-2 hover:bg-green-50 hover:border-green-300\"\n                style={{ \n                  backgroundColor: isQuickFilterActive('this_month') ? `${colors.primary}20` : undefined,\n                  borderColor: isQuickFilterActive('this_month') ? colors.primary : undefined,\n                  color: isQuickFilterActive('this_month') ? colors.primary : undefined\n                }}\n              >\n                <Calendar className=\"h-3 w-3\" />\n                This Month\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setQuickFilter('last_month')}\n                disabled={isLoading}\n                className=\"gap-2 hover:bg-orange-50 hover:border-orange-300\"\n                style={{ \n                  backgroundColor: isQuickFilterActive('last_month') ? `${colors.primary}20` : undefined,\n                  borderColor: isQuickFilterActive('last_month') ? colors.primary : undefined,\n                  color: isQuickFilterActive('last_month') ? colors.primary : undefined\n                }}\n              >\n                <Calendar className=\"h-3 w-3\" />\n                Last Month\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setQuickFilter('this_year')}\n                disabled={isLoading}\n                className=\"gap-2 hover:bg-purple-50 hover:border-purple-300\"\n                style={{ \n                  backgroundColor: isQuickFilterActive('this_year') ? `${colors.primary}20` : undefined,\n                  borderColor: isQuickFilterActive('this_year') ? colors.primary : undefined,\n                  color: isQuickFilterActive('this_year') ? colors.primary : undefined\n                }}\n              >\n                <Calendar className=\"h-3 w-3\" />\n                This Year\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Main Content */}\n      {!paymentsData?.payments || !Array.isArray(paymentsData.payments) || paymentsData.payments.length === 0 ? (\n        <Card>\n          <CardContent className=\"text-center py-12\">\n            <div className=\"space-y-4\">\n              <div \n                className=\"mx-auto w-16 h-16 rounded-2xl flex items-center justify-center shadow-lg\"\n                style={{ background: `linear-gradient(135deg, ${colors.primary}, ${colors.secondary})` }}\n              >\n                <CreditCard className=\"h-8 w-8 text-white\" />\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold\" style={{ color: colors.primary }}>\n                  No Payments Found\n                </h3>\n                <p className=\"text-muted-foreground\">\n                  {user?.role === 'admin' && !accountId \n                    ? 'No payment history found across all accounts. Try adjusting your filters.'\n                    : `No payment history found for account ${targetAccountId}. Try adjusting your filters.`\n                  }\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      ) : (\n        /* Payments Table */\n        <Card className=\"border-0 shadow-xl rounded-xl overflow-hidden\">\n          <div \n            className=\"h-2 rounded-t-xl\"\n            style={{ background: `linear-gradient(90deg, ${colors.primary}, ${colors.secondary}, ${colors.accent})` }}\n          />\n          <CardContent className=\"p-0\">\n            <div className=\"overflow-x-auto\">\n              <Table className=\"rounded-b-xl overflow-hidden m-0\">\n                <TableHeader className=\"m-0\">\n                  <TableRow className=\"border-b-0 m-0\">\n                    <TableHead \n                      className=\"bg-muted/40 font-bold text-foreground border-r border-muted/50 pt-2 pb-4 px-6\"\n                      style={{ color: colors.primary }}\n                    >\n                      <div className=\"flex items-center gap-2\">\n                        <Calendar className=\"h-4 w-4\" />\n                        Date & Time\n                      </div>\n                    </TableHead>\n                    {user?.role === 'admin' && !accountId && (\n                      <TableHead \n                        className=\"bg-muted/40 font-bold text-foreground border-r border-muted/50 pt-2 pb-4 px-6\"\n                        style={{ color: colors.primary }}\n                      >\n                        <div className=\"flex items-center gap-2\">\n                          <User className=\"h-4 w-4\" />\n                          User\n                        </div>\n                      </TableHead>\n                    )}\n                    <TableHead \n                      className=\"bg-muted/40 font-bold text-foreground border-r border-muted/50 pt-2 pb-4 px-6\"\n                      style={{ color: colors.primary }}\n                    >\n                      <div className=\"flex items-center gap-2\">\n                        <DollarSign className=\"h-4 w-4\" />\n                        Amount\n                      </div>\n                    </TableHead>\n                    <TableHead \n                      className=\"bg-muted/40 font-bold text-foreground border-r border-muted/50 pt-2 pb-4 px-6\"\n                      style={{ color: colors.primary }}\n                    >\n                      <div className=\"flex items-center gap-2\">\n                        <Info className=\"h-4 w-4\" />\n                        Status\n                      </div>\n                    </TableHead>\n                    <TableHead \n                      className=\"bg-muted/40 font-bold text-foreground border-r border-muted/50 pt-2 pb-4 px-6\"\n                      style={{ color: colors.primary }}\n                    >\n                      <div className=\"flex items-center gap-2\">\n                        <CreditCard className=\"h-4 w-4\" />\n                        Method\n                      </div>\n                    </TableHead>\n                    <TableHead \n                      className=\"bg-muted/40 font-bold text-foreground pt-2 pb-4 px-6\"\n                      style={{ color: colors.primary }}\n                    >\n                      <div className=\"flex items-center gap-2\">\n                        <Receipt className=\"h-4 w-4\" />\n                        Details\n                      </div>\n                    </TableHead>\n                    <TableHead \n                      className=\"bg-muted/40 font-bold text-foreground pt-2 pb-4 px-6\"\n                      style={{ color: colors.primary }}\n                    >\n                      <div className=\"flex items-center gap-2\">\n                        <Eye className=\"h-4 w-4\" />\n                        Actions\n                      </div>\n                    </TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {paymentsData?.payments && Array.isArray(paymentsData.payments) && \n                    // Final sort to ensure proper date ordering (most recent first)\n                    [...paymentsData.payments].sort((a, b) => {\n                      const getTimestamp = (payment: Payment): number => {\n                        try {\n                          // Priority 1: For failed payments from MongoDB, use the MongoDB date directly\n                          if (payment._isFailedPayment && payment._mongoData) {\n                            const mongoDate = payment._mongoData.paymentCompletedAt || \n                                payment._mongoData.paymentInitiatedAt || \n                                payment._mongoData.createdAt;\n                            if (mongoDate) {\n                              const timestamp = new Date(mongoDate).getTime();\n                              if (!isNaN(timestamp)) {\n                                return timestamp;\n                              }\n                            }\n                          }\n                          \n                          // Priority 2: Check if payment_time is in ISO format (from failed payments) - HIGHEST PRIORITY\n                          if (payment.payment_time && (payment.payment_time.includes('T') || payment.payment_time.includes('Z'))) {\n                            const timestamp = new Date(payment.payment_time).getTime();\n                            if (!isNaN(timestamp)) {\n                              return timestamp;\n                            }\n                          }\n                          \n                          // Priority 3: For Sippy payments, use the parseSippyDate function\n                          if (payment.payment_time) {\n                            const timestamp = parseSippyDate(payment.payment_time).getTime();\n                            if (!isNaN(timestamp)) {\n                              return timestamp;\n                            }\n                          }\n                          \n                          // Priority 4: Return very old timestamp for invalid dates (will appear at bottom)\n                          console.warn('No valid date found for payment, using old timestamp:', payment);\n                          return 0; // January 1, 1970 - will appear at bottom\n                        } catch (error) {\n                          console.warn('Error parsing payment date for sorting:', payment.payment_time, error);\n                          return 0; // January 1, 1970 - will appear at bottom\n                        }\n                      };\n                      \n                      const timestampA = getTimestamp(a);\n                      const timestampB = getTimestamp(b);\n                      \n                      // Sort descending (most recent first)\n                      const result = timestampB - timestampA;\n                      \n                      // Handle NaN cases: if either timestamp is NaN, put it at the bottom\n                      if (isNaN(result)) {\n                        if (isNaN(timestampA) && isNaN(timestampB)) {\n                          return 0; // Both invalid, keep original order\n                        } else if (isNaN(timestampA)) {\n                          return 1; // A is invalid, put it after B\n                        } else if (isNaN(timestampB)) {\n                          return -1; // B is invalid, put it after A\n                        }\n                      }\n                      \n                      return result;\n                    }).map((payment, index) => (\n                    <TableRow \n                      key={`${payment.i_payment}-${index}`} \n                      className=\"hover:bg-muted/30 transition-all duration-200 border-b border-muted/30 group\"\n                    >\n                      <TableCell className=\"border-r border-muted/30 pt-4 pb-4 px-6\">\n                        <div>\n                          <div className=\"font-semibold text-sm\">\n                            {(() => {\n                              try {\n                                const date = parseSippyDate(payment.payment_time);\n                                return format(date, 'MMM dd, yyyy');\n                              } catch (error) {\n                                console.warn('Error formatting payment date:', payment.payment_time, error);\n                                return payment.payment_time || 'Invalid Date';\n                              }\n                            })()}\n                          </div>\n                          <div className=\"text-xs text-muted-foreground\">\n                            {(() => {\n                              try {\n                                const date = parseSippyDate(payment.payment_time);\n                                return format(date, 'HH:mm:ss');\n                              } catch {\n                                return '--:--:--';\n                              }\n                            })()}\n                          </div>\n                        </div>\n                      </TableCell>\n                      {user?.role === 'admin' && !accountId && (\n                        <TableCell className=\"border-r border-muted/30 pt-4 pb-4 px-6\">\n                          <div>\n                            <div className=\"font-medium text-sm\">\n                              {payment._mongoData?.userName || payment._mongoData?.userEmail || 'Unknown User'}\n                            </div>\n                            <div className=\"text-xs text-muted-foreground\">\n                              {payment._mongoData?.userEmail && payment._mongoData?.userName ? payment._mongoData.userEmail : `Account: ${payment.i_account}`}\n                            </div>\n                          </div>\n                        </TableCell>\n                      )}\n                      <TableCell className=\"border-r border-muted/30 pt-4 pb-4 px-6\">\n                        <div className=\"text-right\">\n                          {payment.tx_result === 2 || payment._isFailedPayment ? (\n                            // Failed transaction styling\n                            <div className=\"flex items-center justify-end gap-2\">\n                              <XCircle className=\"h-4 w-4 text-red-600 flex-shrink-0\" />\n                              <div className=\"font-bold text-lg text-red-600\">\n                                {formatAmountWithSymbol(payment.amount, payment.currency)}\n                              </div>\n                            </div>\n                          ) : (\n                            // Successful transaction styling with icons\n                            <div className=\"flex items-center justify-end gap-2\">\n                              {payment.amount >= 0 ? (\n                                <TrendingUp className=\"h-4 w-4 text-green-600 flex-shrink-0\" />\n                              ) : (\n                                <TrendingDown className=\"h-4 w-4 text-red-600 flex-shrink-0\" />\n                              )}\n                              <div \n                                className={`font-bold text-lg ${payment.amount >= 0 ? 'text-green-600' : 'text-red-600'}`}\n                              >\n                                {formatAmountWithSymbol(payment.amount, payment.currency)}\n                              </div>\n                            </div>\n                          )}\n                        </div>\n                      </TableCell>\n                      <TableCell className=\"border-r border-muted/30 pt-4 pb-4 px-6\">\n                        <div className=\"flex items-center gap-2\">\n                          {payment.tx_result === 1 ? (\n                            <>\n                              <CheckCircle className=\"h-4 w-4 text-green-600 dark:text-green-400\" />\n                              <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800 dark:bg-green-950 dark:text-green-400 border-green-200 dark:border-green-800\">\n                                Success\n                              </Badge>\n                            </>\n                          ) : (\n                            <>\n                              <XCircle className=\"h-4 w-4 text-red-600 dark:text-red-400\" />\n                              <Badge variant=\"destructive\">\n                                Failed\n                              </Badge>\n                            </>\n                          )}\n                        </div>\n                        {payment.tx_error && (\n                          <div className=\"text-xs text-red-600 mt-1\">\n                            {payment.tx_error}\n                          </div>\n                        )}\n                      </TableCell>\n                      <TableCell className=\"border-r border-muted/30 pt-4 pb-4 px-6\">\n                        <div>\n                          <div className=\"font-medium text-sm\">\n                            {getPaymentMethod(payment)}\n                          </div>\n                          {payment.tx_id && (\n                            <div className=\"text-xs text-muted-foreground font-mono\">\n                              TX: {payment.tx_id}\n                            </div>\n                          )}\n                        </div>\n                      </TableCell>\n                      <TableCell className=\"pt-4 pb-4 px-6\">\n                        <div>\n                          <div className=\"text-xs text-muted-foreground\">\n                            Payment ID: {payment.i_payment}\n                          </div>\n                          {payment.notes && (\n                            <div className=\"text-sm mt-1 max-w-xs truncate\">\n                              {payment.notes}\n                            </div>\n                          )}\n                        </div>\n                      </TableCell>\n                      <TableCell className=\"pt-4 pb-4 px-6\">\n                        <div>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handlePaymentDetailsClick(payment)}\n                            className=\"gap-2 hover:bg-blue-50 hover:border-blue-300\"\n                            style={{ \n                              borderColor: `${colors.primary}40`,\n                              color: colors.primary\n                            }}\n                          >\n                            <Receipt className=\"h-3 w-3\" />\n                            View Details\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          </CardContent>\n          \n          {/* Pagination */}\n          <div \n            className=\"border-t bg-muted/20 px-6 py-4\"\n            style={{ borderColor: `${colors.primary}20` }}\n          >\n            <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-4\">\n              <div className=\"flex items-center gap-6\">\n                <div className=\"flex items-center gap-2\">\n                  <div \n                    className=\"w-8 h-8 rounded-lg flex items-center justify-center\"\n                    style={{ backgroundColor: `${colors.primary}20` }}\n                  >\n                    <Info className=\"h-4 w-4\" style={{ color: colors.primary }} />\n                  </div>\n                  <div>\n                    <div className=\"text-sm font-medium\">\n                      {startRecord}-{endRecord} of {totalRecords}\n                    </div>\n                    <div className=\"text-xs text-muted-foreground\">\n                      Payments displayed\n                    </div>\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-3\">\n                  <span className=\"text-sm font-medium text-muted-foreground\">Rows:</span>\n                  <Select\n                    value={recordsPerPage.toString()}\n                    onValueChange={handleLimitChange}\n                  >\n                    <SelectTrigger \n                      className=\"w-[80px] h-9 border-0 shadow-md\"\n                      style={{ backgroundColor: `${colors.primary}10` }}\n                    >\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"25\">25</SelectItem>\n                      <SelectItem value=\"50\">50</SelectItem>\n                      <SelectItem value=\"100\">100</SelectItem>\n                      <SelectItem value=\"200\">200</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center gap-4\">\n                <div className=\"text-sm font-medium\" style={{ color: colors.secondary }}>\n                  Page {currentPage} of {totalPages}\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => handlePageChange(currentPage - 1)}\n                    disabled={currentPage === 1 || isLoading}\n                    className=\"h-9 w-9 p-0 shadow-md hover:shadow-lg transition-all\"\n                    style={{ \n                      borderColor: colors.primary,\n                      color: colors.primary\n                    }}\n                  >\n                    <ChevronLeft className=\"h-4 w-4\" />\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => handlePageChange(currentPage + 1)}\n                    disabled={currentPage === totalPages || isLoading}\n                    className=\"h-9 w-9 p-0 shadow-md hover:shadow-lg transition-all\"\n                    style={{ \n                      borderColor: colors.primary,\n                      color: colors.primary\n                    }}\n                  >\n                    <ChevronRight className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </Card>\n      )}\n\n      {/* Balance Management Dialog */}\n      <Dialog open={showBalanceDialog} onOpenChange={setShowBalanceDialog}>\n        <DialogContent className=\"max-w-lg\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <DollarSign className=\"h-5 w-5\" style={{ color: colors.primary }} />\n              Manage Account Balance\n            </DialogTitle>\n            <DialogDescription>\n              Select a user and manage their account balance\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            {/* User Selection */}\n            <div className=\"space-y-2\">\n              <Label>Select User</Label>\n              {isLoadingUsers ? (\n                <div className=\"flex items-center justify-center p-4 border rounded-lg\">\n                  <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\n                  <span className=\"text-sm text-muted-foreground\">Loading users...</span>\n                </div>\n              ) : (\n                <div className=\"space-y-2\">\n                  {/* Search Input */}\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                    <Input\n                      placeholder=\"Search by email, name, or account ID...\"\n                      value={userSearchTerm}\n                      onChange={(e) => setUserSearchTerm(e.target.value)}\n                      className=\"pl-10\"\n                    />\n                  </div>\n                  \n                  {/* User Selection */}\n                  <Select\n                    value={balanceOperation.selectedUserId}\n                    onValueChange={handleUserSelection}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Choose a user to manage balance for\" />\n                    </SelectTrigger>\n                    <SelectContent className=\"max-h-60\">\n                      {filteredUsers.length === 0 ? (\n                        <div className=\"p-4 text-center text-sm text-muted-foreground\">\n                          {userSearchTerm ? 'No users found matching search criteria' : 'No users with Sippy accounts found'}\n                        </div>\n                      ) : (\n                        filteredUsers.map((user) => (\n                          <SelectItem key={user.id} value={user.id}>\n                            <div className=\"flex flex-col\">\n                              <span className=\"font-medium\">\n                                {user.name}\n                              </span>\n                              <span className=\"text-xs text-muted-foreground\">\n                                {user.email} • Account: {user.sippyAccountId}\n                              </span>\n                            </div>\n                          </SelectItem>\n                        ))\n                      )}\n                    </SelectContent>\n                  </Select>\n                  \n                  {/* Selected User Info */}\n                  {balanceOperation.selectedUserAccountId && (\n                    <div className=\"p-3 bg-blue-50 border border-blue-200 rounded-lg dark:bg-blue-950/50 dark:border-blue-800\">\n                      <div className=\"text-sm\">\n                        <span className=\"font-medium text-blue-900 dark:text-blue-100\">Selected Account:</span>\n                        <span className=\"ml-2 font-mono text-blue-700 dark:text-blue-300\">\n                          {balanceOperation.selectedUserAccountId}\n                        </span>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n\n            {/* Operation Type */}\n            <div className=\"space-y-2\">\n              <Label>Operation</Label>\n              <Select\n                value={balanceOperation.operation}\n                onValueChange={(value) => setBalanceOperation(prev => ({ ...prev, operation: value as any }))}\n              >\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"credit\">Credit (Add funds)</SelectItem>\n                  <SelectItem value=\"debit\">Debit (Deduct funds)</SelectItem>\n                  <SelectItem value=\"add_funds\">Add Funds</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            {/* Amount and Currency */}\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label>Amount</Label>\n                <Input\n                  type=\"number\"\n                  step=\"0.01\"\n                  min=\"0\"\n                  value={balanceOperation.amount}\n                  onChange={(e) => setBalanceOperation(prev => ({ ...prev, amount: e.target.value }))}\n                  placeholder=\"0.00\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label>Currency</Label>\n                <Select\n                  value={balanceOperation.currency}\n                  onValueChange={(value) => setBalanceOperation(prev => ({ ...prev, currency: value }))}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"EUR\">EUR</SelectItem>\n                    <SelectItem value=\"USD\">USD</SelectItem>\n                    <SelectItem value=\"GBP\">GBP</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n            \n            {/* Notes */}\n            <div className=\"space-y-2\">\n              <Label>Notes (Optional)</Label>\n              <Textarea\n                value={balanceOperation.notes}\n                onChange={(e) => setBalanceOperation(prev => ({ ...prev, notes: e.target.value }))}\n                placeholder=\"Add a note for this transaction...\"\n                rows={3}\n              />\n            </div>\n            \n            {/* Action Buttons */}\n            <div className=\"flex gap-2 pt-4\">\n              <Button\n                onClick={handleBalanceOperation}\n                disabled={isBalanceLoading || !balanceOperation.amount || !balanceOperation.selectedUserAccountId}\n                className=\"flex-1 gap-2\"\n                style={{ backgroundColor: colors.primary }}\n              >\n                {isBalanceLoading ? (\n                  <>\n                    <Loader2 className=\"h-4 w-4 animate-spin\" />\n                    Processing...\n                  </>\n                ) : (\n                  <>\n                    {balanceOperation.operation === 'credit' || balanceOperation.operation === 'add_funds' ? (\n                      <Plus className=\"h-4 w-4\" />\n                    ) : (\n                      <Minus className=\"h-4 w-4\" />\n                    )}\n                    {balanceOperation.operation === 'credit' ? 'Credit Account' : \n                     balanceOperation.operation === 'debit' ? 'Debit Account' : 'Add Funds'}\n                  </>\n                )}\n              </Button>\n              <Button\n                variant=\"outline\"\n                onClick={() => {\n                  setShowBalanceDialog(false);\n                  setUserSearchTerm('');\n                  setBalanceOperation({\n                    operation: 'credit',\n                    amount: '',\n                    currency: 'EUR',\n                    notes: '',\n                    selectedUserId: '',\n                    selectedUserAccountId: null\n                  });\n                }}\n                disabled={isBalanceLoading}\n              >\n                Cancel\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Phone Number Billing Section - Shows billing for phone numbers across accounts */}\n      <PhoneNumberBillingSection\n        isAdmin={user?.role === 'admin'}\n        colors={colors}\n      />\n\n      {/* Payment Details Dialog */}\n      <PaymentDetailsDialog\n        payment={selectedPayment}\n        enhancedPaymentData={enhancedPaymentData}\n        isOpen={showPaymentDetails}\n        onClose={() => {\n          setShowPaymentDetails(false);\n          setSelectedPayment(null);\n          setEnhancedPaymentData(null);\n        }}\n        getPaymentMethod={getPaymentMethod}\n      />\n    </div>\n  );\n}\n\n// Payment Details Dialog Component\nfunction PaymentDetailsDialog({ \n  payment, \n  enhancedPaymentData, \n  isOpen, \n  onClose, \n  getPaymentMethod \n}: { \n  payment: Payment | null;\n  enhancedPaymentData: any;\n  isOpen: boolean;\n  onClose: () => void;\n  getPaymentMethod: (payment: Payment, enhancedData?: any) => string;\n}) {\n  const { colors } = useBranding();\n  \n  if (!payment) return null;\n\n  // Determine primary data source\n  const hasMongoDB = enhancedPaymentData?.type === 'mongodb' && enhancedPaymentData?.data;\n  const hasReceipt = enhancedPaymentData?.type === 'receipt' && enhancedPaymentData?.data;\n  const mongoData = hasMongoDB ? enhancedPaymentData.data : null;\n  const receiptData = hasReceipt ? enhancedPaymentData.data : null;\n\n  const formatCurrency = (amount: number, currency: string = 'EUR') => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: currency,\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    }).format(amount);\n  };\n\n  const formatDate = (dateString: string) => {\n    try {\n      const date = new Date(dateString);\n      return {\n        date: format(date, 'EEEE, MMMM dd, yyyy'),\n        time: format(date, 'HH:mm:ss'),\n        timestamp: date.toISOString()\n      };\n    } catch {\n      return {\n        date: dateString || 'Invalid Date',\n        time: '--:--:--',\n        timestamp: new Date().toISOString()\n      };\n    }\n  };\n\n  const copyToClipboard = (text: string, label: string) => {\n    navigator.clipboard.writeText(text);\n    toast.success(`${label} copied to clipboard`);\n  };\n\n  // Use MongoDB data as primary source if available\n  const primaryStatus = mongoData ? mongoData.status : (payment.tx_result === 1 ? 'succeeded' : 'failed');\n  const primaryDate = mongoData ? mongoData.createdAt : payment.payment_time;\n  const isSuccess = primaryStatus === 'succeeded';\n\n  const dateInfo = formatDate(primaryDate);\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'succeeded':\n        return <Badge className=\"bg-green-100 text-green-800 dark:bg-green-950 dark:text-green-400 border-green-200 dark:border-green-800\">Succeeded</Badge>;\n      case 'failed':\n        return <Badge variant=\"destructive\">Failed</Badge>;\n      case 'pending':\n        return <Badge variant=\"secondary\">Pending</Badge>;\n      case 'processing':\n        return <Badge className=\"bg-blue-100 text-blue-800 dark:bg-blue-950 dark:text-blue-400 border-blue-200 dark:border-blue-800\">Processing</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={(open) => !open && onClose()}>\n      <DialogContent className={`${\n        mongoData ? 'max-w-6xl w-[95vw]' : 'max-w-4xl'\n      } max-h-[90vh] overflow-y-auto overflow-x-hidden`}>\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-3 pr-8\">\n            <div \n              className=\"p-2 rounded-lg flex-shrink-0\"\n              style={{ backgroundColor: `${colors.primary}20` }}\n            >\n              <Receipt className=\"h-5 w-5\" style={{ color: colors.primary }} />\n            </div>\n            <div className=\"min-w-0 flex-1\">\n              <div className=\"flex items-center gap-2 flex-wrap\">\n                <span className=\"font-semibold\">Payment Details</span>\n                {getStatusBadge(primaryStatus)}\n              </div>\n              <div className=\"text-sm text-muted-foreground font-normal break-words\">\n                {mongoData ? (\n                  <>Payment Reference: {mongoData.paymentReference || mongoData.paymentIntentId}</>\n                ) : (\n                  <>Payment ID: {payment.i_payment}</>\n                )}\n              </div>\n            </div>\n          </DialogTitle>\n          <DialogDescription className=\"break-words\">\n            {mongoData ? (\n              `Comprehensive payment details with amount breakdown, card information, and processing status.`\n            ) : (\n              `Basic payment information from payment processing system.`\n            )}\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-6 overflow-x-hidden\">\n          {/* Primary Payment Information */}\n          {mongoData ? (\n            <>\n              {/* MongoDB Payment Details */}\n              <div className={`p-4 rounded-lg border ${\n                isSuccess \n                  ? 'bg-green-50 border-green-200 dark:bg-green-950/50 dark:border-green-800' \n                  : 'bg-red-50 border-red-200 dark:bg-red-950/50 dark:border-red-800'\n              }`}>\n                <div className=\"flex items-center gap-3\">\n                  <div className={`p-2 rounded-full ${\n                    isSuccess ? 'bg-green-100 dark:bg-green-900' : 'bg-red-100 dark:bg-red-900'\n                  }`}>\n                    {isSuccess ? (\n                      <CheckCircle className=\"h-5 w-5 text-green-600 dark:text-green-400\" />\n                    ) : (\n                      <XCircle className=\"h-5 w-5 text-red-600 dark:text-red-400\" />\n                    )}\n                  </div>\n                  <div>\n                    <h4 className={`font-medium ${\n                      isSuccess ? 'text-green-900 dark:text-green-100' : 'text-red-900 dark:text-red-100'\n                    }`}>\n                      Payment {isSuccess ? 'Successful' : 'Failed'}\n                    </h4>\n                    <p className={`text-sm ${\n                      isSuccess ? 'text-green-700 dark:text-green-300' : 'text-red-700 dark:text-red-300'\n                    }`}>\n                      Total charged: {formatCurrency(mongoData.totalChargedAmount, mongoData.currency)}\n                    </p>\n                  </div>\n                </div>\n              </div>\n\n              {/* Payment Reference & IDs */}\n              <div>\n                <h4 className=\"font-semibold flex items-center gap-2 mb-3\">\n                  <Hash className=\"h-4 w-4\" style={{ color: colors.primary }} />\n                  Payment References\n                </h4>\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-3\">\n                  <div className=\"flex items-center justify-between p-3 bg-muted/30 rounded-lg min-w-0\">\n                    <span className=\"text-sm text-muted-foreground flex-shrink-0\">Payment Reference</span>\n                    <div className=\"flex items-center gap-2 min-w-0 ml-2\">\n                      <span className=\"font-mono text-sm truncate\">{mongoData.paymentReference || 'N/A'}</span>\n                      {mongoData.paymentReference && (\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => copyToClipboard(mongoData.paymentReference, 'Payment Reference')}\n                          className=\"h-6 w-6 p-0 flex-shrink-0\"\n                        >\n                          <Copy className=\"h-3 w-3\" />\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center justify-between p-3 bg-muted/30 rounded-lg min-w-0\">\n                    <span className=\"text-sm text-muted-foreground flex-shrink-0\">Payment Intent ID</span>\n                    <div className=\"flex items-center gap-2 min-w-0 ml-2\">\n                      <span className=\"font-mono text-sm truncate\">{mongoData.paymentIntentId}</span>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => copyToClipboard(mongoData.paymentIntentId, 'Payment Intent ID')}\n                        className=\"h-6 w-6 p-0 flex-shrink-0\"\n                      >\n                        <Copy className=\"h-3 w-3\" />\n                      </Button>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center justify-between p-3 bg-muted/30 rounded-lg min-w-0\">\n                    <span className=\"text-sm text-muted-foreground flex-shrink-0\">User Email</span>\n                    <span className=\"text-sm truncate ml-2\">{mongoData.userEmail}</span>\n                  </div>\n\n                  <div className=\"flex items-center justify-between p-3 bg-muted/30 rounded-lg min-w-0\">\n                    <span className=\"text-sm text-muted-foreground flex-shrink-0\">Account ID</span>\n                    <span className=\"font-mono text-sm truncate ml-2\">{mongoData.sippyAccountId}</span>\n                  </div>\n                </div>\n              </div>\n\n              {/* Amount Breakdown */}\n              <div>\n                <h4 className=\"font-semibold flex items-center gap-2 mb-3\">\n                  <DollarSign className=\"h-4 w-4\" style={{ color: colors.primary }} />\n                  Amount Breakdown\n                </h4>\n                <div className=\"p-4 bg-muted/30 rounded-lg\">\n                  <div className=\"space-y-3\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm text-muted-foreground\">Top-up Amount</span>\n                      <span className=\"font-bold text-green-600\">\n                        {formatCurrency(mongoData.topupAmount, mongoData.currency)}\n                      </span>\n                    </div>\n                    {mongoData.processingFee > 0 && (\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm text-muted-foreground\">Processing Fee</span>\n                        <span className=\"font-medium text-yellow-600\">\n                          {formatCurrency(mongoData.processingFee, mongoData.currency)}\n                        </span>\n                      </div>\n                    )}\n                    {mongoData.fixedFee > 0 && (\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm text-muted-foreground\">Fixed Fee</span>\n                        <span className=\"font-medium text-yellow-600\">\n                          {formatCurrency(mongoData.fixedFee, mongoData.currency)}\n                        </span>\n                      </div>\n                    )}\n                    <div className=\"border-t pt-3 flex justify-between items-center\">\n                      <span className=\"font-medium\">Total Charged</span>\n                      <span className=\"font-bold text-lg\" style={{ color: colors.primary }}>\n                        {formatCurrency(mongoData.totalChargedAmount, mongoData.currency)}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Card Information */}\n              {mongoData.cardBrand && mongoData.cardLast4 && (\n                <div>\n                  <h4 className=\"font-semibold flex items-center gap-2 mb-3\">\n                    <CreditCard className=\"h-4 w-4\" style={{ color: colors.primary }} />\n                    Payment Method\n                  </h4>\n                  <div className=\"p-4 bg-green-50 border border-green-200 rounded-lg dark:bg-green-950/50 dark:border-green-800\">\n                    <div className=\"flex items-center gap-4\">\n                      <CreditCard className=\"h-8 w-8 text-green-600 dark:text-green-400\" />\n                      <div>\n                        <div className=\"font-medium capitalize text-green-900 dark:text-green-100\">\n                          {mongoData.cardBrand} •••• {mongoData.cardLast4}\n                        </div>\n                        {mongoData.cardCountry && (\n                          <div className=\"text-sm text-green-700 dark:text-green-300\">\n                            Issued in {mongoData.cardCountry}\n                          </div>\n                        )}\n                        <div className=\"text-sm text-green-700 dark:text-green-300\">\n                          {mongoData.paymentMethodType} payment\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {/* Gateway Information */}\n              <div>\n                <h4 className=\"font-semibold flex items-center gap-2 mb-3\">\n                  <Info className=\"h-4 w-4\" style={{ color: colors.primary }} />\n                  Gateway & Timing\n                </h4>\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-3\">\n                  <div className=\"p-3 bg-muted/30 rounded-lg min-w-0\">\n                    <div className=\"text-sm text-muted-foreground mb-1\">Gateway</div>\n                    <div className=\"font-medium truncate\">{mongoData.gatewayName}</div>\n                    <div className=\"text-xs text-muted-foreground capitalize truncate\">{mongoData.provider}</div>\n                  </div>\n\n                  <div className=\"p-3 bg-muted/30 rounded-lg min-w-0\">\n                    <div className=\"text-sm text-muted-foreground mb-1\">Status</div>\n                    <div>{getStatusBadge(mongoData.status)}</div>\n                  </div>\n\n                  <div className=\"p-3 bg-muted/30 rounded-lg min-w-0\">\n                    <div className=\"text-sm text-muted-foreground mb-1\">Created</div>\n                    <div className=\"font-medium truncate\">{dateInfo.date}</div>\n                    <div className=\"text-xs text-muted-foreground font-mono\">{dateInfo.time}</div>\n                  </div>\n\n                  {mongoData.paymentCompletedAt && (\n                    <div className=\"p-3 bg-muted/30 rounded-lg min-w-0\">\n                      <div className=\"text-sm text-muted-foreground mb-1\">Completed</div>\n                      <div className=\"font-medium truncate\">{format(new Date(mongoData.paymentCompletedAt), 'MMM dd, yyyy')}</div>\n                      <div className=\"text-xs text-muted-foreground font-mono\">{format(new Date(mongoData.paymentCompletedAt), 'HH:mm:ss')}</div>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* Description & Notes */}\n              {(mongoData.description || mongoData.notes) && (\n                <div>\n                  <h4 className=\"font-semibold flex items-center gap-2 mb-3\">\n                    <FileText className=\"h-4 w-4\" style={{ color: colors.primary }} />\n                    Notes & Description\n                  </h4>\n                  <div className=\"space-y-3\">\n                    {mongoData.description && (\n                      <div className=\"p-3 bg-muted/30 rounded-lg\">\n                        <div className=\"text-sm text-muted-foreground mb-1\">Description</div>\n                        <div className=\"text-sm\">{mongoData.description}</div>\n                      </div>\n                    )}\n                    {mongoData.notes && (\n                      <div className=\"p-3 bg-muted/30 rounded-lg\">\n                        <div className=\"text-sm text-muted-foreground mb-1\">Notes</div>\n                        <div className=\"text-sm whitespace-pre-wrap\">{mongoData.notes}</div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              )}\n\n              {/* Failure Information */}\n              {mongoData.status === 'failed' && (mongoData.failureCode || mongoData.failureMessage) && (\n                <div className=\"p-4 bg-red-50 border border-red-200 rounded-lg dark:bg-red-950/50 dark:border-red-800\">\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <XCircle className=\"h-4 w-4 text-red-600 dark:text-red-400\" />\n                    <span className=\"font-medium text-red-900 dark:text-red-100\">Failure Details</span>\n                  </div>\n                  {mongoData.failureCode && (\n                    <div className=\"text-sm text-red-700 dark:text-red-300 mb-1\">\n                      <strong>Code:</strong> {mongoData.failureCode}\n                    </div>\n                  )}\n                  {mongoData.failureMessage && (\n                    <div className=\"text-sm text-red-700 dark:text-red-300\">\n                      <strong>Message:</strong> {mongoData.failureMessage}\n                    </div>\n                  )}\n                </div>\n              )}\n\n              {/* Receipt URL */}\n              {mongoData.receiptUrl && (\n                <div className=\"p-4 bg-gray-50 border border-gray-200 rounded-lg dark:bg-gray-950/50 dark:border-gray-800\">\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <FileText className=\"h-4 w-4 text-gray-600 dark:text-gray-400\" />\n                    <span className=\"font-medium text-gray-900 dark:text-gray-100\">Receipt</span>\n                  </div>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => window.open(mongoData.receiptUrl, '_blank')}\n                    className=\"gap-2\"\n                  >\n                    <FileText className=\"h-3 w-3\" />\n                    View Stripe Receipt\n                  </Button>\n                </div>\n              )}\n\n              {/* Sippy Data Comparison */}\n              <div className=\"border-t pt-6\">\n                <h4 className=\"font-semibold flex items-center gap-2 mb-3\">\n                  <Info className=\"h-4 w-4 text-muted-foreground\" />\n                  Basic Payment Information\n                </h4>\n                <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg dark:bg-blue-950/50 dark:border-blue-800\">\n                  <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 text-sm\">\n                    <div className=\"min-w-0\">\n                      <span className=\"text-blue-700 dark:text-blue-300 font-medium\">Payment ID:</span>\n                      <div className=\"font-mono truncate\">{payment.i_payment}</div>\n                    </div>\n                    <div className=\"min-w-0\">\n                      <span className=\"text-blue-700 dark:text-blue-300 font-medium\">Amount:</span>\n                      <div className={`truncate ${payment.amount >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                        {payment.tx_result === 2 || payment._isFailedPayment ? (\n                          // Failed transaction - no plus sign, with failure symbol\n                          <div className=\"flex items-center gap-1\">\n                            <XCircle className=\"h-3 w-3 text-red-600 flex-shrink-0\" />\n                            {Math.abs(payment.amount).toFixed(2)}{payment.currency === 'EUR' ? '€' : payment.currency === 'USD' ? '$' : payment.currency === 'GBP' ? '£' : payment.currency}\n                          </div>\n                        ) : (\n                          // Successful transaction with icons\n                          <div className=\"flex items-center gap-1\">\n                            {payment.amount >= 0 ? (\n                              <TrendingUp className=\"h-3 w-3 text-green-600 flex-shrink-0\" />\n                            ) : (\n                              <TrendingDown className=\"h-3 w-3 text-red-600 flex-shrink-0\" />\n                            )}\n                            {Math.abs(payment.amount).toFixed(2)}{payment.currency === 'EUR' ? '€' : payment.currency === 'USD' ? '$' : payment.currency === 'GBP' ? '£' : payment.currency}\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"min-w-0\">\n                      <span className=\"text-blue-700 dark:text-blue-300 font-medium\">Result:</span>\n                      <div className=\"truncate\">{payment.tx_result === 1 ? 'Success (1)' : `Failed (${payment.tx_result})`}</div>\n                    </div>\n                    <div className=\"min-w-0\">\n                      <span className=\"text-blue-700 dark:text-blue-300 font-medium\">Payment Method:</span>\n                      <div className=\"truncate\">\n                        {getPaymentMethod(payment, enhancedPaymentData)}\n                      </div>\n                    </div>\n                    <div className=\"min-w-0\">\n                      <span className=\"text-blue-700 dark:text-blue-300 font-medium\">Transaction ID:</span>\n                      <div className=\"font-mono truncate\">{payment.tx_id || 'N/A'}</div>\n                    </div>\n                    <div className=\"min-w-0\">\n                      <span className=\"text-blue-700 dark:text-blue-300 font-medium\">Account ID:</span>\n                      <div className=\"font-mono truncate\">{payment.i_account}</div>\n                    </div>\n                  </div>\n                  \n                  {payment.tx_error && (\n                    <div className=\"mt-3 pt-3 border-t border-blue-300 dark:border-blue-700\">\n                      <span className=\"text-blue-700 dark:text-blue-300 font-medium\">Error:</span>\n                      <div className=\"text-red-600 dark:text-red-400 text-sm break-words\">{payment.tx_error}</div>\n                    </div>\n                  )}\n                  \n                  <div className=\"mt-3 p-3 bg-yellow-50 border border-yellow-200 rounded dark:bg-yellow-950/50 dark:border-yellow-800\">\n                    <div className=\"text-xs text-yellow-800 dark:text-yellow-300\">\n                      ⚠️ Limited data available. Enhanced payment details with fees, card info, and receipts are only available for payments processed through MongoDB integration.\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </>\n          ) : receiptData ? (\n            <>\n              {/* Receipt Data Display */}\n              <div className={`p-4 rounded-lg border ${\n                isSuccess \n                  ? 'bg-green-50 border-green-200 dark:bg-green-950/50 dark:border-green-800' \n                  : 'bg-red-50 border-red-200 dark:bg-red-950/50 dark:border-red-800'\n              }`}>\n                <div className=\"flex items-center gap-3\">\n                  <div className={`p-2 rounded-full ${\n                    isSuccess ? 'bg-green-100 dark:bg-green-900' : 'bg-red-100 dark:bg-red-900'\n                  }`}>\n                    {isSuccess ? (\n                      <CheckCircle className=\"h-5 w-5 text-green-600 dark:text-green-400\" />\n                    ) : (\n                      <XCircle className=\"h-5 w-5 text-red-600 dark:text-red-400\" />\n                    )}\n                  </div>\n                  <div>\n                    <h4 className={`font-medium ${\n                      isSuccess ? 'text-green-900 dark:text-green-100' : 'text-red-900 dark:text-red-100'\n                    }`}>\n                      Payment {isSuccess ? 'Successful' : 'Failed'}\n                    </h4>\n                    <p className={`text-sm ${\n                      isSuccess ? 'text-green-700 dark:text-green-300' : 'text-red-700 dark:text-red-300'\n                    }`}>\n                      Receipt available from enhanced data\n                    </p>\n                  </div>\n                </div>\n              </div>\n\n              {/* Show receipt data with fallback to Sippy data */}\n              {/* Add receipt data display logic here - similar to the old enhanced data section */}\n              <div className=\"p-4 bg-yellow-50 border border-yellow-200 rounded-lg dark:bg-yellow-950/50 dark:border-yellow-800\">\n                <div className=\"text-sm text-yellow-800 dark:text-yellow-300\">\n                  Receipt data available but limited. Consider upgrading to MongoDB payment records for full details.\n                </div>\n              </div>\n            </>\n          ) : (\n            <>\n              {/* Sippy Data Only */}\n              <div className={`p-4 rounded-lg border ${\n                isSuccess \n                  ? 'bg-green-50 border-green-200 dark:bg-green-950/50 dark:border-green-800' \n                  : 'bg-red-50 border-red-200 dark:bg-red-950/50 dark:border-red-800'\n              }`}>\n                <div className=\"flex items-center gap-3\">\n                  <div className={`p-2 rounded-full ${\n                    isSuccess ? 'bg-green-100 dark:bg-green-900' : 'bg-red-100 dark:bg-red-900'\n                  }`}>\n                    {isSuccess ? (\n                      <CheckCircle className=\"h-5 w-5 text-green-600 dark:text-green-400\" />\n                    ) : (\n                      <XCircle className=\"h-5 w-5 text-red-600 dark:text-red-400\" />\n                    )}\n                  </div>\n                  <div>\n                    <h4 className={`font-medium ${\n                      isSuccess ? 'text-green-900 dark:text-green-100' : 'text-red-900 dark:text-red-100'\n                    }`}>\n                      Payment {isSuccess ? 'Successful' : 'Failed'}\n                    </h4>\n                    <p className={`text-sm ${\n                      isSuccess ? 'text-green-700 dark:text-green-300' : 'text-red-700 dark:text-red-300'\n                    }`}>\n                      {payment.amount >= 0 ? 'Credit' : 'Debit'} of {Math.abs(payment.amount).toFixed(2)}{payment.currency === 'EUR' ? '€' : payment.currency === 'USD' ? '$' : payment.currency === 'GBP' ? '£' : payment.currency}\n                    </p>\n                  </div>\n                </div>\n              </div>\n\n              {/* Basic Sippy Data */}\n              <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg dark:bg-blue-950/50 dark:border-blue-800\">\n                <div className=\"flex items-center gap-2 mb-3\">\n                  <Info className=\"h-4 w-4 text-blue-600 dark:text-blue-400\" />\n                  <span className=\"font-medium text-blue-900 dark:text-blue-100\">Basic Payment Information</span>\n                </div>\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 text-sm\">\n                  <div className=\"min-w-0\">\n                    <span className=\"text-blue-700 dark:text-blue-300 font-medium\">Payment ID:</span>\n                    <div className=\"font-mono truncate\">{payment.i_payment}</div>\n                  </div>\n                  <div className=\"min-w-0\">\n                    <span className=\"text-blue-700 dark:text-blue-300 font-medium\">Amount:</span>\n                    <div className={`truncate ${payment.amount >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                      {payment.tx_result === 2 || payment._isFailedPayment ? (\n                        // Failed transaction - no plus sign, with failure symbol\n                        <div className=\"flex items-center gap-1\">\n                          <XCircle className=\"h-3 w-3 text-red-600 flex-shrink-0\" />\n                          {Math.abs(payment.amount).toFixed(2)}{payment.currency === 'EUR' ? '€' : payment.currency === 'USD' ? '$' : payment.currency === 'GBP' ? '£' : payment.currency}\n                        </div>\n                      ) : (\n                        // Successful transaction with icons\n                        <div className=\"flex items-center gap-1\">\n                          {payment.amount >= 0 ? (\n                            <TrendingUp className=\"h-3 w-3 text-green-600 flex-shrink-0\" />\n                          ) : (\n                            <TrendingDown className=\"h-3 w-3 text-red-600 flex-shrink-0\" />\n                          )}\n                          {Math.abs(payment.amount).toFixed(2)}{payment.currency === 'EUR' ? '€' : payment.currency === 'USD' ? '$' : payment.currency === 'GBP' ? '£' : payment.currency}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                  <div className=\"min-w-0\">\n                    <span className=\"text-blue-700 dark:text-blue-300 font-medium\">Transaction ID:</span>\n                    <div className=\"font-mono truncate\">{payment.tx_id || 'N/A'}</div>\n                  </div>\n                  <div className=\"min-w-0\">\n                    <span className=\"text-blue-700 dark:text-blue-300 font-medium\">Account ID:</span>\n                    <div className=\"font-mono truncate\">{payment.i_account}</div>\n                  </div>\n                </div>\n                \n                {payment.tx_error && (\n                  <div className=\"mt-3 pt-3 border-t border-blue-300 dark:border-blue-700\">\n                    <span className=\"text-blue-700 dark:text-blue-300 font-medium\">Error:</span>\n                    <div className=\"text-red-600 dark:text-red-400 text-sm break-words\">{payment.tx_error}</div>\n                  </div>\n                )}\n                \n                <div className=\"mt-3 p-3 bg-yellow-50 border border-yellow-200 rounded dark:bg-yellow-950/50 dark:border-yellow-800\">\n                  <div className=\"text-xs text-yellow-800 dark:text-yellow-300\">\n                    ⚠️ Limited data available. Enhanced payment details with fees, card info, and receipts are only available for payments processed through MongoDB integration.\n                  </div>\n                </div>\n              </div>\n            </>\n          )}\n\n          {/* Actions */}\n          <div className=\"flex gap-2 pt-4\">\n            <Button\n              onClick={() => {\n                const dataToExport = mongoData || receiptData || payment;\n                copyToClipboard(JSON.stringify(dataToExport, null, 2), 'Payment data');\n              }}\n              variant=\"outline\"\n              className=\"flex-1 gap-2\"\n            >\n              <Copy className=\"h-4 w-4\" />\n              Copy Data\n            </Button>\n            {mongoData?.receiptUrl && (\n              <Button\n                onClick={() => window.open(mongoData.receiptUrl, '_blank')}\n                variant=\"outline\"\n                className=\"flex-1 gap-2\"\n              >\n                <Receipt className=\"h-4 w-4\" />\n                View Receipt\n              </Button>\n            )}\n            <Button\n              onClick={onClose}\n              className=\"flex-1\"\n              style={{ backgroundColor: colors.primary }}\n            >\n              Close\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog> \n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/payments/BalanceTopup.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":692,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":692,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23066,23069],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23066,23069],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":819,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":819,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[28186,28189],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[28186,28189],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { loadStripe } from '@stripe/stripe-js';\nimport {\n  Elements,\n  CardElement,\n  useStripe,\n  useElements\n} from '@stripe/react-stripe-js';\n\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Badge } from '@/components/ui/badge';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Separator } from '@/components/ui/separator';\nimport { \n  CreditCard, \n  Plus, \n  Loader2, \n  DollarSign,\n  AlertCircle,\n  CheckCircle,\n  Info,\n  Copy,\n  CreditCard as CardIcon,\n  XCircle,\n  ChevronRight,\n  RefreshCw\n} from 'lucide-react';\nimport { toast } from 'sonner';\nimport { useBranding } from '@/hooks/useBranding';\n\ninterface PaymentGateway {\n  _id: string;\n  name: string;\n  provider: string;\n  settings: {\n    allowedCurrencies: string[];\n    minimumAmount: number;\n    maximumAmount: number;\n    processingFee: number;\n    fixedFee: number;\n  };\n}\n\ninterface PaymentIntentResponse {\n  clientSecret: string;\n  publishableKey: string;\n  amount: number;\n  topupAmount: number;\n  processingFee: number;\n  fixedFee: number;\n  currency: string;\n  gatewayName: string;\n}\n\ninterface PaymentSuccessData {\n  paymentIntentId: string;\n  amount: number;\n  topupAmount: number;\n  processingFee: number;\n  fixedFee: number;\n  currency: string;\n  gatewayName: string;\n  timestamp: string;\n  cardBrand?: string;\n  cardLast4?: string;\n}\n\ninterface PaymentFailureData {\n  error: string;\n  errorCode?: string;\n  errorType?: string;\n  amount: number;\n  currency: string;\n  timestamp: string;\n  paymentIntentId?: string;\n  cardBrand?: string;\n  cardLast4?: string;\n}\n\ninterface BalanceTopupProps {\n  onPaymentSuccess?: () => void;\n}\n\n// Helper function to convert currency code to symbol\nconst getCurrencySymbol = (currency: string): string => {\n  switch (currency) {\n    case 'EUR': return '€';\n    case 'USD': return '$';\n    case 'GBP': return '£';\n    default: return currency;\n  }\n};\n\n// Helper function to get detailed error information\nconst getPaymentErrorDetails = (error: string, errorCode?: string) => {\n  const errorLower = error.toLowerCase();\n  const code = errorCode?.toLowerCase();\n\n  // Card declined errors\n  if (errorLower.includes('card was declined') || code === 'card_declined') {\n    if (errorLower.includes('insufficient funds') || code === 'insufficient_funds') {\n      return {\n        title: 'Insufficient Funds',\n        description: 'Your card does not have sufficient funds to complete this transaction.',\n        icon: '💳',\n        color: 'red',\n        suggestions: [\n          'Check your account balance',\n          'Try a different payment method',\n          'Contact your bank for assistance'\n        ]\n      };\n    }\n    \n    if (errorLower.includes('lost card') || code === 'lost_card') {\n      return {\n        title: 'Card Reported Lost',\n        description: 'This card has been reported as lost and cannot be used for payments.',\n        icon: '🔒',\n        color: 'red',\n        suggestions: [\n          'Use a different payment method',\n          'Contact your bank to get a replacement card',\n          'Verify the card details are correct'\n        ]\n      };\n    }\n    \n    if (errorLower.includes('stolen card') || code === 'stolen_card') {\n      return {\n        title: 'Card Reported Stolen',\n        description: 'This card has been reported as stolen and cannot be used for payments.',\n        icon: '🚫',\n        color: 'red',\n        suggestions: [\n          'Use a different payment method',\n          'Contact your bank immediately',\n          'Verify you are using the correct card'\n        ]\n      };\n    }\n    \n    return {\n      title: 'Card Declined',\n      description: 'Your card was declined by your bank.',\n      icon: '❌',\n      color: 'red',\n      suggestions: [\n        'Check your card details are correct',\n        'Try a different payment method',\n        'Contact your bank for more information'\n      ]\n    };\n  }\n\n  // Expired card\n  if (errorLower.includes('expired') || code === 'expired_card') {\n    return {\n      title: 'Card Expired',\n      description: 'The card you are trying to use has expired.',\n      icon: '📅',\n      color: 'orange',\n      suggestions: [\n        'Check the expiry date on your card',\n        'Use a different payment method',\n        'Contact your bank for a replacement card'\n      ]\n    };\n  }\n\n  // Incorrect CVC\n  if (errorLower.includes('cvc') || errorLower.includes('security code') || code === 'incorrect_cvc') {\n    return {\n      title: 'Incorrect Security Code',\n      description: 'The CVC/CVV security code you entered is incorrect.',\n      icon: '🔢',\n      color: 'orange',\n      suggestions: [\n        'Check the 3-digit code on the back of your card',\n        'For Amex cards, use the 4-digit code on the front',\n        'Make sure you are entering the correct card details'\n      ]\n    };\n  }\n\n  // Processing error\n  if (errorLower.includes('processing error') || code === 'processing_error') {\n    return {\n      title: 'Processing Error',\n      description: 'There was an error processing your payment. This is usually temporary.',\n      icon: '⚠️',\n      color: 'yellow',\n      suggestions: [\n        'Please try again in a few minutes',\n        'Check your internet connection',\n        'Contact support if the problem persists'\n      ]\n    };\n  }\n\n  // Authentication required (3D Secure)\n  if (errorLower.includes('authentication') || code === 'authentication_required') {\n    return {\n      title: 'Authentication Required',\n      description: 'Your bank requires additional authentication for this payment.',\n      icon: '🔐',\n      color: 'blue',\n      suggestions: [\n        'Complete the authentication with your bank',\n        'Try the payment again',\n        'Contact your bank if authentication fails'\n      ]\n    };\n  }\n\n  // Network/connection errors\n  if (errorLower.includes('network') || errorLower.includes('connection')) {\n    return {\n      title: 'Connection Error',\n      description: 'There was a problem connecting to the payment processor.',\n      icon: '🌐',\n      color: 'gray',\n      suggestions: [\n        'Check your internet connection',\n        'Try again in a few moments',\n        'Contact support if the problem continues'\n      ]\n    };\n  }\n\n  // Generic error\n  return {\n    title: 'Payment Failed',\n    description: error || 'An unexpected error occurred while processing your payment.',\n    icon: '❌',\n    color: 'red',\n    suggestions: [\n      'Please try again',\n      'Check your payment details',\n      'Contact support if the problem persists'\n    ]\n  };\n};\n\n// Payment Failure Dialog Component\nfunction PaymentFailureDialog({ \n  failureData, \n  isOpen, \n  onClose,\n  onRetry \n}: { \n  failureData: PaymentFailureData;\n  isOpen: boolean;\n  onClose: () => void;\n  onRetry: () => void;\n}) {\n  const { colors } = useBranding();\n  const errorDetails = getPaymentErrorDetails(failureData.error, failureData.errorCode);\n\n  const getColorClasses = (color: string) => {\n    switch (color) {\n      case 'red':\n        return {\n          bg: 'bg-red-50 dark:bg-red-950/50',\n          border: 'border-red-200 dark:border-red-800',\n          text: 'text-red-900 dark:text-red-100',\n          subtext: 'text-red-700 dark:text-red-300',\n          iconBg: 'bg-red-100 dark:bg-red-900'\n        };\n      case 'orange':\n        return {\n          bg: 'bg-orange-50 dark:bg-orange-950/50',\n          border: 'border-orange-200 dark:border-orange-800',\n          text: 'text-orange-900 dark:text-orange-100',\n          subtext: 'text-orange-700 dark:text-orange-300',\n          iconBg: 'bg-orange-100 dark:bg-orange-900'\n        };\n      case 'yellow':\n        return {\n          bg: 'bg-yellow-50 dark:bg-yellow-950/50',\n          border: 'border-yellow-200 dark:border-yellow-800',\n          text: 'text-yellow-900 dark:text-yellow-100',\n          subtext: 'text-yellow-700 dark:text-yellow-300',\n          iconBg: 'bg-yellow-100 dark:bg-yellow-900'\n        };\n      case 'blue':\n        return {\n          bg: 'bg-blue-50 dark:bg-blue-950/50',\n          border: 'border-blue-200 dark:border-blue-800',\n          text: 'text-blue-900 dark:text-blue-100',\n          subtext: 'text-blue-700 dark:text-blue-300',\n          iconBg: 'bg-blue-100 dark:bg-blue-900'\n        };\n      default:\n        return {\n          bg: 'bg-gray-50 dark:bg-gray-950/50',\n          border: 'border-gray-200 dark:border-gray-800',\n          text: 'text-gray-900 dark:text-gray-100',\n          subtext: 'text-gray-700 dark:text-gray-300',\n          iconBg: 'bg-gray-100 dark:bg-gray-900'\n        };\n    }\n  };\n\n  const colorClasses = getColorClasses(errorDetails.color);\n\n  const copyErrorDetails = () => {\n    const errorInfo = {\n      error: failureData.error,\n      errorCode: failureData.errorCode,\n      errorType: failureData.errorType,\n      timestamp: failureData.timestamp,\n      amount: failureData.amount,\n      currency: failureData.currency\n    };\n    navigator.clipboard.writeText(JSON.stringify(errorInfo, null, 2));\n    toast.success('Error details copied to clipboard');\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={(open) => !open && onClose()}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <XCircle className=\"h-6 w-6 text-red-600\" />\n            Payment Failed\n          </DialogTitle>\n          <DialogDescription>\n            We were unable to process your payment. Please review the details below.\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Error Status Card */}\n          <div className={`p-4 rounded-lg border ${colorClasses.bg} ${colorClasses.border}`}>\n            <div className=\"flex items-center gap-3\">\n              <div className={`p-2 rounded-full ${colorClasses.iconBg} text-xl`}>\n                {errorDetails.icon}\n              </div>\n              <div>\n                <h4 className={`font-medium ${colorClasses.text}`}>\n                  {errorDetails.title}\n                </h4>\n                <p className={`text-sm ${colorClasses.subtext}`}>\n                  {errorDetails.description}\n                </p>\n              </div>\n            </div>\n          </div>\n\n          {/* Payment Details */}\n          <div className=\"space-y-4\">\n            <h4 className=\"font-medium\">Payment Details</h4>\n            \n            <div className=\"space-y-3 text-sm\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Amount:</span>\n                <span className=\"font-medium\">\n                  {failureData.amount.toFixed(2)} {getCurrencySymbol(failureData.currency)}\n                </span>\n              </div>\n              \n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Time:</span>\n                <span>{new Date(failureData.timestamp).toLocaleString()}</span>\n              </div>\n              \n              {failureData.errorCode && (\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Error Code:</span>\n                  <span className=\"font-mono text-xs bg-muted px-2 py-1 rounded\">\n                    {failureData.errorCode}\n                  </span>\n                </div>\n              )}\n\n              {failureData.cardBrand && failureData.cardLast4 && (\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Card:</span>\n                  <div className=\"flex items-center gap-2\">\n                    <CardIcon className=\"h-3 w-3\" />\n                    <span className=\"capitalize\">{failureData.cardBrand}</span>\n                    <span>****{failureData.cardLast4}</span>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Suggestions */}\n          <div className=\"space-y-4\">\n            <h4 className=\"font-medium\">What you can do:</h4>\n            <ul className=\"space-y-2\">\n              {errorDetails.suggestions.map((suggestion, index) => (\n                <li key={index} className=\"flex items-start gap-2 text-sm\">\n                  <span className=\"text-blue-600 mt-1\">•</span>\n                  <span>{suggestion}</span>\n                </li>\n              ))}\n            </ul>\n          </div>\n\n          {/* Technical Details (Collapsible) */}\n          <details className=\"group\">\n            <summary className=\"cursor-pointer text-sm text-muted-foreground hover:text-foreground flex items-center gap-2\">\n              <span>Technical Details</span>\n              <ChevronRight className=\"h-3 w-3 transition-transform group-open:rotate-90\" />\n            </summary>\n            <div className=\"mt-2 p-3 bg-muted/30 rounded text-xs font-mono space-y-1\">\n              <div><strong>Error:</strong> {failureData.error}</div>\n              {failureData.errorCode && <div><strong>Code:</strong> {failureData.errorCode}</div>}\n              {failureData.errorType && <div><strong>Type:</strong> {failureData.errorType}</div>}\n              {failureData.paymentIntentId && <div><strong>Payment ID:</strong> {failureData.paymentIntentId}</div>}\n              <div><strong>Timestamp:</strong> {failureData.timestamp}</div>\n            </div>\n          </details>\n\n          {/* Action Buttons */}\n          <div className=\"flex gap-2 pt-4\">\n            <Button\n              onClick={onRetry}\n              className=\"flex-1 gap-2\"\n              style={{ backgroundColor: colors.primary }}\n            >\n              <RefreshCw className=\"h-4 w-4\" />\n              Try Again\n            </Button>\n            <Button\n              variant=\"outline\"\n              onClick={copyErrorDetails}\n              className=\"gap-2\"\n            >\n              <Copy className=\"h-4 w-4\" />\n              Copy Details\n            </Button>\n            <Button\n              variant=\"outline\"\n              onClick={onClose}\n            >\n              Close\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\n// Success Dialog Component\nfunction PaymentSuccessDialog({ \n  paymentData, \n  isOpen, \n  onClose,\n  onPaymentSuccess \n}: { \n  paymentData: PaymentSuccessData;\n  isOpen: boolean;\n  onClose: () => void;\n  onPaymentSuccess?: () => void;\n}) {\n  const { colors } = useBranding();\n\n  // Debug effect to track dialog rendering\n  useEffect(() => {\n    // Dialog state tracking removed for cleaner logs\n  }, [isOpen, paymentData]);\n\n  const copyPaymentId = () => {\n    navigator.clipboard.writeText(paymentData.paymentIntentId);\n    toast.success('Payment ID copied to clipboard');\n  };\n\n  const handleFinish = () => {\n    onClose();\n    // Call the payment success callback to refresh payments list\n    if (onPaymentSuccess) {\n      onPaymentSuccess();\n    } else {\n      // Fallback: refresh the page if no callback provided\n      window.location.reload();\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={(open) => !open && onClose()}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <CheckCircle className=\"h-6 w-6 text-green-600\" />\n            Payment Successful!\n          </DialogTitle>\n          <DialogDescription>\n            Your payment has been processed successfully and your account balance will be updated shortly.\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Payment Status Card */}\n          <div className=\"p-4 bg-green-50 border border-green-200 rounded-lg dark:bg-green-950/50 dark:border-green-800\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"p-2 bg-green-100 rounded-full dark:bg-green-900\">\n                <CheckCircle className=\"h-5 w-5 text-green-600 dark:text-green-400\" />\n              </div>\n              <div>\n                <h4 className=\"font-medium text-green-900 dark:text-green-100\">Payment Completed</h4>\n                <p className=\"text-sm text-green-700 dark:text-green-300\">\n                  Balance top-up of {paymentData.topupAmount.toFixed(2)} {getCurrencySymbol(paymentData.currency)}\n                </p>\n              </div>\n            </div>\n          </div>\n\n          {/* Payment Summary */}\n          <div className=\"space-y-4\">\n            <h4 className=\"font-medium\">Payment Summary</h4>\n            \n            <div className=\"space-y-3\">\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-muted-foreground\">Top-up Amount:</span>\n                <span className=\"font-medium text-green-600\">\n                  +{paymentData.topupAmount.toFixed(2)} {getCurrencySymbol(paymentData.currency)}\n                </span>\n              </div>\n              \n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-muted-foreground\">Processing Fee:</span>\n                <span>{paymentData.processingFee.toFixed(2)} {getCurrencySymbol(paymentData.currency)}</span>\n              </div>\n              \n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-muted-foreground\">Fixed Fee:</span>\n                <span>{paymentData.fixedFee.toFixed(2)} {getCurrencySymbol(paymentData.currency)}</span>\n              </div>\n              \n              <Separator />\n              \n              <div className=\"flex justify-between font-medium\">\n                <span>Total Charged:</span>\n                <span>{paymentData.amount.toFixed(2)} {getCurrencySymbol(paymentData.currency)}</span>\n              </div>\n            </div>\n          </div>\n\n          {/* Payment Details */}\n          <div className=\"space-y-4\">\n            <h4 className=\"font-medium\">Payment Details</h4>\n            \n            <div className=\"space-y-3 text-sm\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-muted-foreground\">Payment ID:</span>\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"font-mono text-xs bg-muted px-2 py-1 rounded\">\n                    {paymentData.paymentIntentId.slice(-12)}\n                  </span>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={copyPaymentId}\n                    className=\"h-6 w-6 p-0\"\n                  >\n                    <Copy className=\"h-3 w-3\" />\n                  </Button>\n                </div>\n              </div>\n              \n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Gateway:</span>\n                <Badge variant=\"secondary\">{paymentData.gatewayName}</Badge>\n              </div>\n              \n              {paymentData.cardBrand && paymentData.cardLast4 && (\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Payment Method:</span>\n                  <div className=\"flex items-center gap-2\">\n                    <CardIcon className=\"h-3 w-3\" />\n                    <span className=\"capitalize\">{paymentData.cardBrand}</span>\n                    <span>****{paymentData.cardLast4}</span>\n                  </div>\n                </div>\n              )}\n              \n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Date & Time:</span>\n                <span>{new Date(paymentData.timestamp).toLocaleString()}</span>\n              </div>\n            </div>\n          </div>\n\n          {/* Next Steps */}\n          <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg dark:bg-blue-950/50 dark:border-blue-800\">\n            <div className=\"flex items-start gap-3\">\n              <Info className=\"h-4 w-4 text-blue-600 dark:text-blue-400 mt-0.5\" />\n              <div className=\"text-sm\">\n                <p className=\"font-medium text-blue-900 dark:text-blue-100 mb-1\">What happens next?</p>\n                <ul className=\"text-blue-700 dark:text-blue-300 space-y-1\">\n                  <li>• Your account balance will be updated within minutes</li>\n                  <li>• The transaction will appear in your payment history</li>\n                  <li>• You can start using the funds immediately</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n\n          <Button \n            onClick={handleFinish}\n            className=\"w-full\"\n            style={{ backgroundColor: colors.primary }}\n          >\n            Go to Payments\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\n// Payment Form Component\nfunction PaymentForm({ \n  paymentIntent, \n  onSuccess, \n  onError \n}: { \n  paymentIntent: PaymentIntentResponse;\n  onSuccess: (paymentData: PaymentSuccessData) => void;\n  onError: (error: string, errorCode?: string, errorType?: string, paymentIntentId?: string, cardBrand?: string, cardLast4?: string) => void;\n}) {\n  const stripe = useStripe();\n  const elements = useElements();\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      return;\n    }\n\n    setIsProcessing(true);\n\n    const cardElement = elements.getElement(CardElement);\n    if (!cardElement) {\n      onError('Card element not found', 'card_element_missing', 'validation_error', undefined, undefined, undefined);\n      setIsProcessing(false);\n      return;\n    }\n\n    try {\n      const { error, paymentIntent: confirmedPayment } = await stripe.confirmCardPayment(\n        paymentIntent.clientSecret,\n        {\n          payment_method: {\n            card: cardElement,\n          }\n        }\n      );\n\n      if (error && (error.message || error.code || error.type)) {\n        // Extract detailed error information\n        const errorMessage = error.message || 'Payment failed';\n        const errorCode = error.code;\n        const errorType = error.type;\n        const paymentIntentId = error.payment_intent?.id || paymentIntent.clientSecret.split('_secret')[0];\n        \n        // Get card details if available for error reporting\n        let cardBrand, cardLast4;\n        if (error.payment_method?.card) {\n          cardBrand = error.payment_method.card.brand;\n          cardLast4 = error.payment_method.card.last4;\n        }\n        \n        // Try to get card details from the card element if not available in error\n        if (!cardBrand || !cardLast4) {\n          try {\n            const cardElementValue = (cardElement as any)._element;\n            if (cardElementValue && cardElementValue.card) {\n              cardBrand = cardBrand || cardElementValue.card.brand;\n              cardLast4 = cardLast4 || cardElementValue.card.last4;\n            }\n          } catch {\n            // Ignore errors getting card details from element\n          }\n        }\n        \n        onError(errorMessage, errorCode, errorType, paymentIntentId, cardBrand, cardLast4);\n      } else if (confirmedPayment?.status === 'succeeded') {\n        // Extract payment method details\n        const paymentMethod = confirmedPayment.payment_method;\n        const cardDetails = typeof paymentMethod === 'object' ? paymentMethod?.card : undefined;\n        \n        const successData: PaymentSuccessData = {\n          paymentIntentId: confirmedPayment.id,\n          amount: paymentIntent.amount,\n          topupAmount: paymentIntent.topupAmount,\n          processingFee: paymentIntent.processingFee,\n          fixedFee: paymentIntent.fixedFee,\n          currency: paymentIntent.currency,\n          gatewayName: paymentIntent.gatewayName,\n          timestamp: new Date().toISOString(),\n          cardBrand: cardDetails?.brand,\n          cardLast4: cardDetails?.last4\n        };\n        \n        onSuccess(successData);\n      } else if (error) {\n        // Handle empty or malformed error objects\n        onError('Payment failed due to an unknown error', 'unknown_error', 'stripe_error');\n      } else {\n        // Handle unexpected payment states\n        onError('Payment completed with unexpected status', 'unexpected_status', 'stripe_error');\n      }\n    } catch (err) {\n      console.error('Payment exception:', err);\n      const errorMessage = err instanceof Error ? err.message : 'Payment failed';\n      onError(errorMessage, 'exception', 'api_error', undefined, undefined, undefined);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-6\">\n      <div className=\"space-y-4\">\n        <div className=\"p-4 bg-muted/30 rounded-lg\">\n          <h4 className=\"font-medium mb-2\">Payment Summary</h4>\n          <div className=\"space-y-2 text-sm\">\n            <div className=\"flex justify-between\">\n              <span>Top-up Amount:</span>\n              <span className=\"font-medium\">\n                {paymentIntent.topupAmount.toFixed(2)} {getCurrencySymbol(paymentIntent.currency)}\n              </span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Processing Fee:</span>\n              <span>{paymentIntent.processingFee.toFixed(2)} {getCurrencySymbol(paymentIntent.currency)}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Fixed Fee:</span>\n              <span>{paymentIntent.fixedFee.toFixed(2)} {getCurrencySymbol(paymentIntent.currency)}</span>\n            </div>\n            <div className=\"flex justify-between font-medium border-t pt-2\">\n              <span>Total Charge:</span>\n              <span>{paymentIntent.amount.toFixed(2)} {getCurrencySymbol(paymentIntent.currency)}</span>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label>Card Details</Label>\n          <div className=\"p-3 border rounded-md\">\n            <CardElement\n              options={{\n                style: {\n                  base: {\n                    fontSize: '16px',\n                    color: '#424770',\n                    '::placeholder': {\n                      color: '#aab7c4',\n                    },\n                  },\n                },\n              }}\n            />\n          </div>\n        </div>\n      </div>\n\n      <Button \n        type=\"submit\" \n        disabled={!stripe || isProcessing}\n        className=\"w-full gap-2\"\n      >\n        {isProcessing ? (\n          <>\n            <Loader2 className=\"h-4 w-4 animate-spin\" />\n            Processing Payment...\n          </>\n        ) : (\n          <>\n            <CreditCard className=\"h-4 w-4\" />\n            Pay {paymentIntent.amount.toFixed(2)} {getCurrencySymbol(paymentIntent.currency)}\n          </>\n        )}\n      </Button>\n    </form>\n  );\n}\n\nexport function BalanceTopup({ onPaymentSuccess }: BalanceTopupProps = {}) {\n  const { colors } = useBranding();\n  const [showDialog, setShowDialog] = useState(false);\n  const [showSuccessDialog, setShowSuccessDialog] = useState(false);\n  const [showFailureDialog, setShowFailureDialog] = useState(false);\n  const [paymentSuccessData, setPaymentSuccessData] = useState<PaymentSuccessData | null>(null);\n  const [paymentFailureData, setPaymentFailureData] = useState<PaymentFailureData | null>(null);\n  const [gateways, setGateways] = useState<PaymentGateway[]>([]);\n  const [selectedGateway, setSelectedGateway] = useState<PaymentGateway | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [amount, setAmount] = useState('');\n  const [currency, setCurrency] = useState('EUR');\n  const [paymentIntent, setPaymentIntent] = useState<PaymentIntentResponse | null>(null);\n  const [stripePromise, setStripePromise] = useState<Promise<any> | null>(null);\n\n  // Fetch available payment gateways\n  useEffect(() => {\n    if (showDialog) {\n      fetchGateways();\n    }\n  }, [showDialog]);\n\n  const fetchGateways = async () => {\n    try {\n      const response = await fetch('/api/payment-gateways/available');\n      if (!response.ok) throw new Error('Failed to fetch gateways');\n      \n      const data = await response.json();\n      const activeGateways = data.gateways?.filter((g: PaymentGateway) => g.provider === 'stripe') || [];\n      setGateways(activeGateways);\n      \n      if (activeGateways.length > 0) {\n        setSelectedGateway(activeGateways[0]);\n      }\n    } catch (error) {\n      console.error('Error fetching gateways:', error);\n      toast.error('Failed to load payment gateways');\n    }\n  };\n\n  const createPaymentIntent = async () => {\n    if (!selectedGateway || !amount) return;\n\n    const amountValue = parseFloat(amount);\n    if (isNaN(amountValue) || amountValue <= 0) {\n      toast.error('Please enter a valid amount');\n      return;\n    }\n\n    if (amountValue < selectedGateway.settings.minimumAmount) {\n      toast.error(`Minimum amount is ${selectedGateway.settings.minimumAmount} ${getCurrencySymbol(currency)}`);\n      return;\n    }\n\n    if (amountValue > selectedGateway.settings.maximumAmount) {\n      toast.error(`Maximum amount is ${selectedGateway.settings.maximumAmount} ${getCurrencySymbol(currency)}`);\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n      \n      const response = await fetch('/api/payments/create-intent', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          amount: amountValue,\n          currency,\n          provider: 'stripe'\n        })\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to create payment intent');\n      }\n\n      const data: PaymentIntentResponse = await response.json();\n      setPaymentIntent(data);\n      \n      // Initialize Stripe with the publishable key\n      setStripePromise(loadStripe(data.publishableKey));\n      \n    } catch (error) {\n      console.error('Error creating payment intent:', error);\n      toast.error(error instanceof Error ? error.message : 'Failed to create payment intent');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handlePaymentSuccess = (paymentData: PaymentSuccessData) => {\n    setPaymentSuccessData(paymentData);\n    setShowDialog(false);\n    setShowSuccessDialog(true);\n  };\n\n  const handlePaymentError = (error: string, errorCode?: string, errorType?: string, paymentIntentId?: string, cardBrand?: string, cardLast4?: string) => {\n    setPaymentFailureData({\n      error,\n      errorCode,\n      errorType,\n      amount: paymentIntent?.amount || 0,\n      currency: paymentIntent?.currency || 'EUR',\n      timestamp: new Date().toISOString(),\n      paymentIntentId,\n      cardBrand,\n      cardLast4\n    });\n    setShowDialog(false);\n    setShowFailureDialog(true);\n\n    // Also record this failed payment\n    recordFailedPayment(error, errorCode, errorType, paymentIntentId, cardBrand, cardLast4);\n  };\n\n  const recordFailedPayment = async (error: string, errorCode?: string, errorType?: string, paymentIntentId?: string, cardBrand?: string, cardLast4?: string) => {\n    try {\n      // Get user agent and IP address for security analysis\n      const userAgent = navigator.userAgent;\n      \n      // Get client IP (this will be the user's IP as seen by the server)\n      let ipAddress = 'unknown';\n      try {\n        const ipResponse = await fetch('https://api.ipify.org?format=json');\n        const ipData = await ipResponse.json();\n        ipAddress = ipData.ip;\n      } catch (ipError) {\n        console.warn('Could not get client IP:', ipError);\n      }\n\n      const failureData = {\n        paymentIntentId: paymentIntentId || 'unknown',\n        error,\n        errorCode,\n        errorType,\n        amount: paymentIntent?.amount || 0,\n        currency: paymentIntent?.currency || 'EUR',\n        cardBrand: cardBrand,\n        cardLast4: cardLast4,\n        gatewayName: paymentIntent?.gatewayName || 'Stripe',\n        userAgent,\n        ipAddress\n      };\n\n      const response = await fetch('/api/payments/record-failure', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(failureData)\n      });\n\n      if (response.ok) {\n        await response.json();\n      } else {\n        // Failed to record payment failure to server\n      }\n    } catch {\n      // Don't throw - we don't want to break the user experience if recording fails\n    }\n  };\n\n  const handleFailureDialogClose = () => {\n    setShowFailureDialog(false);\n    setPaymentFailureData(null);\n  };\n\n  const handleRetryPayment = () => {\n    setShowFailureDialog(false);\n    setPaymentFailureData(null);\n    setShowDialog(true);\n  };\n\n  const resetDialog = () => {\n    setPaymentIntent(null);\n    setAmount('');\n    setCurrency('EUR');\n    setSelectedGateway(null);\n  };\n\n  const handleSuccessDialogClose = () => {\n    setShowSuccessDialog(false);\n    setPaymentSuccessData(null);\n  };\n\n  return (\n    <>\n      {/* Success Dialog */}\n      {paymentSuccessData && (\n        <PaymentSuccessDialog\n          paymentData={paymentSuccessData}\n          isOpen={showSuccessDialog}\n          onClose={handleSuccessDialogClose}\n          onPaymentSuccess={onPaymentSuccess}\n        />\n      )}\n\n      {/* Failure Dialog */}\n      {paymentFailureData && (\n        <PaymentFailureDialog\n          failureData={paymentFailureData}\n          isOpen={showFailureDialog}\n          onClose={handleFailureDialogClose}\n          onRetry={handleRetryPayment}\n        />\n      )}\n\n      {/* Main Top-up Dialog */}\n      <Dialog open={showDialog} onOpenChange={(open) => {\n        setShowDialog(open);\n        if (!open) resetDialog();\n      }}>\n        <DialogTrigger asChild>\n          <Button \n            className=\"gap-2 hover:shadow-lg hover:scale-105 transition-all duration-200 hover:brightness-110\" \n            style={{ backgroundColor: colors.primary }}\n          >\n            <Plus className=\"h-4 w-4\" />\n            Top Up Balance\n          </Button>\n        </DialogTrigger>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <DollarSign className=\"h-5 w-5\" style={{ color: colors.primary }} />\n              Top Up Balance\n            </DialogTitle>\n            <DialogDescription>\n              Add funds to your account using a secure payment method\n            </DialogDescription>\n          </DialogHeader>\n\n          {!paymentIntent ? (\n            // Payment setup form\n            <div className=\"space-y-4\">\n              {gateways.length === 0 ? (\n                <div className=\"text-center py-6\">\n                  <AlertCircle className=\"h-8 w-8 text-amber-500 mx-auto mb-2\" />\n                  <p className=\"text-sm text-muted-foreground\">\n                    No payment gateways are currently available.\n                  </p>\n                </div>\n              ) : (\n                <>\n                  <div className=\"space-y-2\">\n                    <Label>Amount</Label>\n                    <div className=\"relative\">\n                      <div className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\">\n                        {getCurrencySymbol(currency)}\n                      </div>\n                      <Input\n                        type=\"number\"\n                        step=\"0.01\"\n                        min={selectedGateway?.settings.minimumAmount || 0}\n                        max={selectedGateway?.settings.maximumAmount || 10000}\n                        value={amount}\n                        onChange={(e) => setAmount(e.target.value)}\n                        placeholder=\"Enter amount\"\n                        className=\"pl-8\"\n                      />\n                    </div>\n                    {selectedGateway && (\n                      <p className=\"text-xs text-muted-foreground\">\n                        Min: {selectedGateway.settings.minimumAmount} {getCurrencySymbol(currency)} • \n                        Max: {selectedGateway.settings.maximumAmount} {getCurrencySymbol(currency)} • \n                        Fee: {selectedGateway.settings.processingFee}% + {selectedGateway.settings.fixedFee} {getCurrencySymbol(currency)}\n                      </p>\n                    )}\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label>Currency</Label>\n                    <Select value={currency} onValueChange={setCurrency}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {selectedGateway?.settings.allowedCurrencies.map(curr => (\n                          <SelectItem key={curr} value={curr}>{curr}</SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  {selectedGateway && (\n                    <div className=\"p-3 bg-blue-50 border border-blue-200 rounded-lg dark:bg-blue-950/50 dark:border-blue-800\">\n                      <div className=\"flex items-center gap-2 text-sm\">\n                        <Info className=\"h-4 w-4 text-blue-600 dark:text-blue-400\" />\n                        <span className=\"font-medium\">Payment Gateway:</span>\n                        <Badge variant=\"secondary\">{selectedGateway.name}</Badge>\n                      </div>\n                    </div>\n                  )}\n\n                  <Button \n                    onClick={createPaymentIntent}\n                    disabled={isLoading || !amount || !selectedGateway}\n                    className=\"w-full gap-2\"\n                    style={{ backgroundColor: colors.primary }}\n                  >\n                    {isLoading ? (\n                      <>\n                        <Loader2 className=\"h-4 w-4 animate-spin\" />\n                        Setting up payment...\n                      </>\n                    ) : (\n                      <>\n                        <CreditCard className=\"h-4 w-4\" />\n                        Continue to Payment\n                      </>\n                    )}\n                  </Button>\n                </>\n              )}\n            </div>\n          ) : (\n            // Payment form with Stripe Elements\n            stripePromise && (\n              <Elements stripe={stripePromise}>\n                <PaymentForm\n                  paymentIntent={paymentIntent}\n                  onSuccess={handlePaymentSuccess}\n                  onError={handlePaymentError}\n                />\n              </Elements>\n            )\n          )}\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/payments/PhoneNumberBillingSection.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchBillings'. Either include it or remove the dependency array.","line":205,"column":6,"nodeType":"ArrayExpression","endLine":205,"endColumn":19,"suggestions":[{"desc":"Update the dependencies array to be: [fetchBillings, showSection]","fix":{"range":[5258,5271],"text":"[fetchBillings, showSection]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchBillings'. Either include it or remove the dependency array.","line":216,"column":6,"nodeType":"ArrayExpression","endLine":216,"endColumn":19,"suggestions":[{"desc":"Update the dependencies array to be: [fetchBillings, showSection]","fix":{"range":[5565,5578],"text":"[fetchBillings, showSection]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchBillings'. Either include it or remove the dependency array.","line":220,"column":6,"nodeType":"ArrayExpression","endLine":220,"endColumn":28,"suggestions":[{"desc":"Update the dependencies array to be: [currentPage, fetchBillings, filters]","fix":{"range":[5628,5650],"text":"[currentPage, fetchBillings, filters]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchBillings'. Either include it or remove the dependency array.","line":226,"column":6,"nodeType":"ArrayExpression","endLine":226,"endColumn":15,"suggestions":[{"desc":"Update the dependencies array to be: [fetchBillings, isAdmin]","fix":{"range":[5727,5736],"text":"[fetchBillings, isAdmin]"}}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":589,"column":44,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[20628,20828],"text":"\n              This will charge the customer&apos;s Sippy account using the accountDebit API.\n              Based on billing policy: full monthly rate, no proration, negative balance handling.\n            "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[20628,20828],"text":"\n              This will charge the customer&lsquo;s Sippy account using the accountDebit API.\n              Based on billing policy: full monthly rate, no proration, negative balance handling.\n            "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[20628,20828],"text":"\n              This will charge the customer&#39;s Sippy account using the accountDebit API.\n              Based on billing policy: full monthly rate, no proration, negative balance handling.\n            "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[20628,20828],"text":"\n              This will charge the customer&rsquo;s Sippy account using the accountDebit API.\n              Based on billing policy: full monthly rate, no proration, negative balance handling.\n            "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\n\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport { \n  ChevronLeft,\n  ChevronRight,\n  Eye,\n  Info, \n  Loader2,\n  Phone,\n  Receipt, \n  RefreshCw,\n  X,\n  XCircle,\n  Zap\n} from 'lucide-react';\n\nimport { toast } from 'sonner';\nimport { format } from 'date-fns';\n\ninterface PhoneNumberBilling {\n  _id: string;\n  phoneNumberId: string;\n  phoneNumber: {\n    _id: string;\n    number: string;\n    numberType: string;\n    monthlyRate: number;\n    currency: string;\n    country: string;\n    countryCode: string;\n  };\n  userId: string;\n  user: {\n    _id: string;\n    name: string;\n    email: string;\n    company?: string;\n    onboarding?: {\n      companyName?: string;\n    };\n  };\n  assignmentId: string;\n  assignment: {\n    _id: string;\n    assignedAt: string;\n    unassignedAt?: string;\n  };\n  billingPeriodStart: string;\n  billingPeriodEnd: string;\n  amount: number;\n  currency: string;\n  status: 'pending' | 'paid' | 'failed' | 'cancelled' | 'refunded';\n  billingDate: string;\n  paidDate?: string;\n  failureReason?: string;\n  transactionType: 'monthly_fee' | 'setup_fee' | 'prorated_fee' | 'refund';\n  sippyTransactionId?: string;\n  processedBy?: string;\n  notes?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface PhoneNumberBillingsResponse {\n  billings: PhoneNumberBilling[];\n  total: number;\n  page: number;\n  limit: number;\n  totalPages: number;\n}\n\ninterface PhoneNumberBillingSectionProps {\n  isAdmin: boolean;\n  colors: {\n    primary: string;\n    secondary: string;\n    accent: string;\n  };\n}\n\nexport function PhoneNumberBillingSection({ isAdmin, colors }: PhoneNumberBillingSectionProps) {\n  const [billingsData, setBillingsData] = useState<PhoneNumberBillingsResponse | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [showSection, setShowSection] = useState(false);\n  \n  // Pagination and filters\n  const [currentPage, setCurrentPage] = useState(1);\n  const [filters, setFilters] = useState({\n    status: 'all',\n    transactionType: 'all',\n    userId: 'all',\n    startDate: '',\n    endDate: '',\n  });\n\n  // Process billing state\n  const [showProcessDialog, setShowProcessDialog] = useState(false);\n  const [showDetailsModal, setShowDetailsModal] = useState(false);\n  const [selectedBilling, setSelectedBilling] = useState<PhoneNumberBilling | null>(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const fetchBillings = async () => {\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      const params = new URLSearchParams({\n        page: currentPage.toString(),\n        limit: '20',\n        ...(filters.status !== 'all' && { status: filters.status }),\n        ...(filters.transactionType !== 'all' && { transactionType: filters.transactionType }),\n        ...(filters.userId !== 'all' && { userId: filters.userId }),\n        ...(filters.startDate && { startDate: filters.startDate }),\n        ...(filters.endDate && { endDate: filters.endDate }),\n      });\n\n      const response = await fetch(`/api/phone-numbers/billing?${params}`);\n      \n      if (!response.ok) {\n        throw new Error('Failed to fetch phone number billings');\n      }\n\n      const data = await response.json();\n      setBillingsData(data);\n    } catch (error) {\n      console.error('Error fetching phone number billings:', error);\n      setError(error instanceof Error ? error.message : 'Failed to fetch billing data');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const processBilling = async (billingId: string) => {\n    try {\n      setIsProcessing(true);\n\n      const response = await fetch('/api/phone-numbers/billing', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          billingId,\n        }),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to process billing');\n      }\n\n      toast.success('Billing processed successfully');\n      setShowProcessDialog(false);\n      setSelectedBilling(null);\n      \n      // Add a small delay to ensure database is updated, then refresh\n      setTimeout(() => {\n        fetchBillings();\n      }, 1000);\n      \n    } catch (error) {\n      console.error('Error processing billing:', error);\n      toast.error(error instanceof Error ? error.message : 'Failed to process billing');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  // Auto-refresh effect when section becomes visible\n  useEffect(() => {\n    if (showSection) {\n      fetchBillings();\n    }\n  }, [showSection]);\n\n  // Auto-refresh every 60 seconds when section is visible to catch changes\n  useEffect(() => {\n    if (!showSection) return;\n    \n    const interval = setInterval(() => {\n      fetchBillings();\n    }, 60000); // Refresh every 60 seconds\n    \n    return () => clearInterval(interval);\n  }, [showSection]);\n\n  useEffect(() => {\n    fetchBillings();\n  }, [currentPage, filters]);\n\n  useEffect(() => {\n    if (isAdmin) {\n      fetchBillings();\n    }\n  }, [isAdmin]);\n\n  const formatCurrency = (amount: number, currency: string = 'EUR') => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: currency,\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    }).format(amount);\n  };\n\n  const formatDate = (dateString: string) => {\n    try {\n      return format(new Date(dateString), 'MMM dd, yyyy HH:mm');\n    } catch {\n      return 'Invalid Date';\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'paid':\n        return <Badge className=\"bg-green-100 text-green-800 border-green-200\">Paid</Badge>;\n      case 'pending':\n        return <Badge className=\"bg-yellow-100 text-yellow-800 border-yellow-200\">Pending</Badge>;\n      case 'failed':\n        return <Badge variant=\"destructive\">Failed</Badge>;\n      case 'cancelled':\n        return <Badge variant=\"secondary\">Cancelled</Badge>;\n      case 'refunded':\n        return <Badge className=\"bg-blue-100 text-blue-800 border-blue-200\">Refunded</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  const getTransactionTypeBadge = (type: string) => {\n    switch (type) {\n      case 'monthly_fee':\n        return <Badge variant=\"outline\" className=\"bg-blue-50 text-blue-700 border-blue-200\">Monthly Fee</Badge>;\n      case 'setup_fee':\n        return <Badge variant=\"outline\" className=\"bg-purple-50 text-purple-700 border-purple-200\">Setup Fee</Badge>;\n      case 'prorated_fee':\n        return <Badge variant=\"outline\" className=\"bg-orange-50 text-orange-700 border-orange-200\">Prorated Fee</Badge>;\n      case 'refund':\n        return <Badge variant=\"outline\" className=\"bg-green-50 text-green-700 border-green-200\">Refund</Badge>;\n      default:\n        return <Badge variant=\"outline\">{type}</Badge>;\n    }\n  };\n\n  return (\n    <>\n      {/* Phone Number Billing Toggle Card */}\n      <Card className=\"border-0 shadow-sm\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <div \n                className=\"p-2 rounded-lg\"\n                style={{ backgroundColor: `${colors.primary}20` }}\n              >\n                <Phone className=\"h-5 w-5\" style={{ color: colors.primary }} />\n              </div>\n              <div>\n                <h3 className=\"font-semibold\" style={{ color: colors.primary }}>\n                  Phone Number Billing Traceability\n                </h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Track phone number charges and billing history with Sippy integration\n                </p>\n              </div>\n            </div>\n            <Button\n              onClick={() => setShowSection(!showSection)}\n              variant=\"outline\"\n              className=\"gap-2\"\n              style={{ \n                borderColor: colors.primary,\n                color: colors.primary \n              }}\n            >\n              {showSection ? (\n                <>\n                  <X className=\"h-4 w-4\" />\n                  Hide Billing\n                </>\n              ) : (\n                <>\n                  <Eye className=\"h-4 w-4\" />\n                  Show Billing\n                </>\n              )}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Phone Number Billing Section */}\n      {showSection && (\n        <Card className=\"border-0 shadow-xl rounded-xl overflow-hidden\">\n          <div \n            className=\"h-2 rounded-t-xl\"\n            style={{ background: `linear-gradient(90deg, ${colors.primary}, ${colors.secondary}, ${colors.accent})` }}\n          />\n          <CardHeader className=\"pb-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <CardTitle className=\"flex items-center gap-2\" style={{ color: colors.primary }}>\n                  <Phone className=\"h-5 w-5\" />\n                  Phone Number Billing Records\n                </CardTitle>\n                <CardDescription>\n                  {isAdmin \n                    ? 'Manage and process phone number billing charges via Sippy accountDebit API'\n                    : 'View your phone number billing history and charges'\n                  }\n                </CardDescription>\n              </div>\n              <Button\n                onClick={fetchBillings}\n                disabled={isLoading}\n                variant=\"outline\"\n                className=\"gap-2\"\n              >\n                <RefreshCw className={`h-4 w-4 ${isLoading ? 'animate-spin' : ''}`} />\n                Refresh\n              </Button>\n            </div>\n          </CardHeader>\n\n          <CardContent className=\"space-y-4\">\n            {/* Filters */}\n            <div className=\"grid grid-cols-1 md:grid-cols-5 gap-3\">\n              <div>\n                <Label>Status</Label>\n                <Select value={filters.status} onValueChange={(value) => setFilters(prev => ({ ...prev, status: value }))}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Statuses</SelectItem>\n                    <SelectItem value=\"pending\">Pending</SelectItem>\n                    <SelectItem value=\"paid\">Paid</SelectItem>\n                    <SelectItem value=\"failed\">Failed</SelectItem>\n                    <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                    <SelectItem value=\"refunded\">Refunded</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label>Type</Label>\n                <Select value={filters.transactionType} onValueChange={(value) => setFilters(prev => ({ ...prev, transactionType: value }))}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Types</SelectItem>\n                    <SelectItem value=\"monthly_fee\">Monthly Fee</SelectItem>\n                    <SelectItem value=\"setup_fee\">Setup Fee</SelectItem>\n                    <SelectItem value=\"prorated_fee\">Prorated Fee</SelectItem>\n                    <SelectItem value=\"refund\">Refund</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label>Start Date</Label>\n                <Input\n                  type=\"date\"\n                  value={filters.startDate}\n                  onChange={(e) => setFilters(prev => ({ ...prev, startDate: e.target.value }))}\n                />\n              </div>\n\n              <div>\n                <Label>End Date</Label>\n                <Input\n                  type=\"date\"\n                  value={filters.endDate}\n                  onChange={(e) => setFilters(prev => ({ ...prev, endDate: e.target.value }))}\n                />\n              </div>\n\n              <div className=\"flex items-end\">\n                <Button\n                  onClick={() => setFilters({\n                    status: 'all',\n                    transactionType: 'all',\n                    userId: 'all',\n                    startDate: '',\n                    endDate: '',\n                  })}\n                  variant=\"outline\"\n                  className=\"w-full\"\n                >\n                  Clear Filters\n                </Button>\n              </div>\n            </div>\n\n            {/* Billing Table */}\n            {isLoading ? (\n              <div className=\"text-center py-8\">\n                <Loader2 className=\"h-8 w-8 animate-spin mx-auto mb-4\" style={{ color: colors.primary }} />\n                <p className=\"text-muted-foreground\">Loading billing records...</p>\n              </div>\n            ) : error ? (\n              <div className=\"text-center py-8\">\n                <XCircle className=\"h-8 w-8 mx-auto mb-4 text-red-500\" />\n                <p className=\"text-red-600 mb-4\">{error}</p>\n                <Button onClick={fetchBillings} variant=\"outline\">\n                  Try Again\n                </Button>\n              </div>\n            ) : !billingsData?.billings?.length ? (\n              <div className=\"text-center py-8\">\n                <Phone className=\"h-8 w-8 mx-auto mb-4 text-muted-foreground\" />\n                <p className=\"text-muted-foreground\">No billing records found</p>\n              </div>\n            ) : (\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Phone Number</TableHead>\n                      <TableHead>Country</TableHead>\n                      <TableHead>User</TableHead>\n                      <TableHead>Amount</TableHead>\n                      <TableHead>Type</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Billing Date</TableHead>\n                      {isAdmin && <TableHead>Actions</TableHead>}\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {billingsData.billings.map((billing) => (\n                      <TableRow key={billing._id}>\n                        <TableCell>\n                          <div>\n                            <div className=\"font-medium\">{billing.phoneNumber.number}</div>\n                            <div className=\"text-sm text-muted-foreground\">\n                              {billing.phoneNumber.numberType}\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div>\n                            <div className=\"font-medium\">{billing.phoneNumber.country}</div>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div>\n                            <div className=\"font-medium\">{billing.user.name || billing.user.email}</div>\n                            {(billing.user.onboarding?.companyName || billing.user.company) && (\n                              <div className=\"text-sm text-muted-foreground\">\n                                {billing.user.onboarding?.companyName || billing.user.company}\n                              </div>\n                            )}\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"font-medium\">\n                            {formatCurrency(billing.amount, billing.currency)}\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          {getTransactionTypeBadge(billing.transactionType)}\n                        </TableCell>\n                        <TableCell>\n                          {getStatusBadge(billing.status)}\n                        </TableCell>\n                        <TableCell>\n                          <div>\n                            <div className=\"font-medium\">{formatDate(billing.billingDate)}</div>\n                            {billing.paidDate && (\n                              <div className=\"text-sm text-muted-foreground\">\n                                Paid: {formatDate(billing.paidDate)}\n                              </div>\n                            )}\n                          </div>\n                        </TableCell>\n                        {isAdmin && (\n                          <TableCell>\n                            <div className=\"flex gap-2\">\n                              <Button\n                                onClick={() => {\n                                  setSelectedBilling(billing);\n                                  setShowDetailsModal(true);\n                                }}\n                                variant=\"outline\"\n                                size=\"sm\"\n                                className=\"gap-2\"\n                              >\n                                <Eye className=\"h-3 w-3\" />\n                                View details\n                              </Button>\n                              \n                              {billing.status === 'pending' && (\n                                <Button\n                                  onClick={() => {\n                                    setSelectedBilling(billing);\n                                    setShowProcessDialog(true);\n                                  }}\n                                  size=\"sm\"\n                                  className=\"gap-2\"\n                                  style={{ backgroundColor: colors.primary }}\n                                >\n                                  <Zap className=\"h-3 w-3\" />\n                                  Process\n                                </Button>\n                              )}\n                            </div>\n                          </TableCell>\n                        )}\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n            )}\n\n            {/* Pagination */}\n            {billingsData && billingsData.totalPages > 1 && (\n              <div className=\"flex items-center justify-between\">\n                <div className=\"text-sm text-muted-foreground\">\n                  Page {billingsData.page} of {billingsData.totalPages} \n                  ({billingsData.total} total records)\n                </div>\n                <div className=\"flex gap-2\">\n                  <Button\n                    onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n                    disabled={currentPage === 1}\n                    variant=\"outline\"\n                    size=\"sm\"\n                  >\n                    <ChevronLeft className=\"h-4 w-4\" />\n                  </Button>\n                  <Button\n                    onClick={() => setCurrentPage(prev => Math.min(billingsData.totalPages, prev + 1))}\n                    disabled={currentPage === billingsData.totalPages}\n                    variant=\"outline\"\n                    size=\"sm\"\n                  >\n                    <ChevronRight className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Process Billing Dialog */}\n      <Dialog open={showProcessDialog} onOpenChange={setShowProcessDialog}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <Zap className=\"h-5 w-5\" style={{ color: colors.primary }} />\n              Process Billing Charge\n            </DialogTitle>\n            <DialogDescription>\n              This will charge the customer's Sippy account using the accountDebit API.\n              Based on billing policy: full monthly rate, no proration, negative balance handling.\n            </DialogDescription>\n          </DialogHeader>\n\n          {selectedBilling && (\n            <div className=\"space-y-4\">\n              <div className=\"p-4 bg-muted/30 rounded-lg\">\n                <div className=\"grid grid-cols-2 gap-3 text-sm\">\n                  <div>\n                    <strong>Phone Number:</strong> {selectedBilling.phoneNumber.number}\n                  </div>\n                  <div>\n                    <strong>Country:</strong> {selectedBilling.phoneNumber.country}\n                  </div>\n                  <div>\n                    <strong>User:</strong> {selectedBilling.user.name || selectedBilling.user.email}\n                    {(selectedBilling.user.onboarding?.companyName || selectedBilling.user.company) && \n                      ` (${selectedBilling.user.onboarding?.companyName || selectedBilling.user.company})`}\n                  </div>\n                  <div>\n                    <strong>Amount:</strong> {formatCurrency(selectedBilling.amount, selectedBilling.currency)}\n                  </div>\n                  <div>\n                    <strong>Type:</strong> {selectedBilling.transactionType}\n                  </div>\n                </div>\n                {selectedBilling.notes && (\n                  <div className=\"mt-3 text-sm\">\n                    <strong>Notes:</strong> {selectedBilling.notes}\n                  </div>\n                )}\n              </div>\n\n              <div className=\"p-4 bg-yellow-50 border border-yellow-200 rounded-lg\">\n                <div className=\"flex items-start gap-2\">\n                  <Info className=\"h-4 w-4 text-yellow-600 mt-0.5\" />\n                  <div className=\"text-sm text-yellow-800\">\n                    <strong>Billing Policy:</strong> This charge follows the no-proration policy. \n                    If the account has insufficient funds, the number will be suspended and the \n                    charge will be marked as failed.\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex gap-2 pt-4\">\n                <Button\n                  onClick={() => processBilling(selectedBilling._id)}\n                  disabled={isProcessing}\n                  className=\"flex-1 gap-2\"\n                  style={{ backgroundColor: colors.primary }}\n                >\n                  {isProcessing ? (\n                    <>\n                      <Loader2 className=\"h-4 w-4 animate-spin\" />\n                      Processing...\n                    </>\n                  ) : (\n                    <>\n                      <Zap className=\"h-4 w-4\" />\n                      Process Charge\n                    </>\n                  )}\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setShowProcessDialog(false)}\n                  disabled={isProcessing}\n                >\n                  Cancel\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Billing Details Modal */}\n      <Dialog open={showDetailsModal} onOpenChange={setShowDetailsModal}>\n        <DialogContent className=\"max-w-3xl\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <Receipt className=\"h-5 w-5\" style={{ color: colors.primary }} />\n              Billing Transaction Details\n            </DialogTitle>\n            <DialogDescription>\n              Complete information about this billing transaction\n            </DialogDescription>\n          </DialogHeader>\n\n          {selectedBilling && (\n            <div className=\"space-y-6 max-h-96 overflow-y-auto\">\n              {/* Transaction Overview */}\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label className=\"text-sm font-medium\">Transaction ID</Label>\n                  <p className=\"font-mono text-sm\">{selectedBilling._id}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium\">Status</Label>\n                  <div className=\"mt-1\">\n                    {getStatusBadge(selectedBilling.status)}\n                  </div>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium\">Amount</Label>\n                  <p className=\"text-lg font-semibold\">\n                    {formatCurrency(selectedBilling.amount, selectedBilling.currency)}\n                  </p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium\">Type</Label>\n                  <div className=\"mt-1\">\n                    {getTransactionTypeBadge(selectedBilling.transactionType)}\n                  </div>\n                </div>\n              </div>\n\n              {/* Phone Number Information */}\n              <div>\n                <Label className=\"text-sm font-medium\">Phone Number Details</Label>\n                <div className=\"mt-2 p-3 bg-muted/30 rounded-lg\">\n                  <div className=\"grid grid-cols-2 gap-3 text-sm\">\n                    <div>\n                      <strong>Number:</strong> {selectedBilling.phoneNumber.number}\n                    </div>\n                    <div>\n                      <strong>Country:</strong> {selectedBilling.phoneNumber.country}\n                    </div>\n                    <div>\n                      <strong>Type:</strong> {selectedBilling.phoneNumber.numberType}\n                    </div>\n                    <div>\n                      <strong>Monthly Rate:</strong> {formatCurrency(selectedBilling.phoneNumber.monthlyRate, selectedBilling.phoneNumber.currency)}\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* User Information */}\n              <div>\n                <Label className=\"text-sm font-medium\">User Details</Label>\n                <div className=\"mt-2 p-3 bg-muted/30 rounded-lg\">\n                  <div className=\"grid grid-cols-2 gap-3 text-sm\">\n                    <div>\n                      <strong>Name:</strong> {selectedBilling.user.name || selectedBilling.user.email}\n                    </div>\n                    <div>\n                      <strong>Email:</strong> {selectedBilling.user.email}\n                    </div>\n                    {(selectedBilling.user.onboarding?.companyName || selectedBilling.user.company) && (\n                      <div className=\"col-span-2\">\n                        <strong>Company:</strong> {selectedBilling.user.onboarding?.companyName || selectedBilling.user.company}\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              {/* Billing Period */}\n              <div>\n                <Label className=\"text-sm font-medium\">Billing Period</Label>\n                <div className=\"mt-2 p-3 bg-muted/30 rounded-lg\">\n                  <div className=\"grid grid-cols-2 gap-3 text-sm\">\n                    <div>\n                      <strong>Period Start:</strong> {formatDate(selectedBilling.billingPeriodStart)}\n                    </div>\n                    <div>\n                      <strong>Period End:</strong> {formatDate(selectedBilling.billingPeriodEnd)}\n                    </div>\n                    <div>\n                      <strong>Billing Date:</strong> {formatDate(selectedBilling.billingDate)}\n                    </div>\n                    {selectedBilling.paidDate && (\n                      <div>\n                        <strong>Paid Date:</strong> {formatDate(selectedBilling.paidDate)}\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              {/* Payment Information */}\n              {(selectedBilling.sippyTransactionId || selectedBilling.failureReason) && (\n                <div>\n                  <Label className=\"text-sm font-medium\">Payment Information</Label>\n                  <div className=\"mt-2 p-3 bg-muted/30 rounded-lg\">\n                    <div className=\"space-y-2 text-sm\">\n                      {selectedBilling.sippyTransactionId && (\n                        <div>\n                          <strong>Sippy Transaction ID:</strong>\n                          <p className=\"font-mono text-xs mt-1\">{selectedBilling.sippyTransactionId}</p>\n                        </div>\n                      )}\n                      {selectedBilling.failureReason && (\n                        <div>\n                          <strong>Failure Reason:</strong>\n                          <p className=\"text-red-600 mt-1\">{selectedBilling.failureReason}</p>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {/* Assignment Information */}\n              <div>\n                <Label className=\"text-sm font-medium\">Assignment Details</Label>\n                <div className=\"mt-2 p-3 bg-muted/30 rounded-lg\">\n                  <div className=\"grid grid-cols-2 gap-3 text-sm\">\n                    <div>\n                      <strong>Assigned:</strong> {formatDate(selectedBilling.assignment.assignedAt)}\n                    </div>\n                    {selectedBilling.assignment.unassignedAt && (\n                      <div>\n                        <strong>Unassigned:</strong> {formatDate(selectedBilling.assignment.unassignedAt)}\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              {/* Administrative Information */}\n              <div>\n                <Label className=\"text-sm font-medium\">Administrative Details</Label>\n                <div className=\"mt-2 p-3 bg-muted/30 rounded-lg\">\n                  <div className=\"grid grid-cols-2 gap-3 text-sm\">\n                    <div>\n                      <strong>Created:</strong> {formatDate(selectedBilling.createdAt)}\n                    </div>\n                    <div>\n                      <strong>Updated:</strong> {formatDate(selectedBilling.updatedAt)}\n                    </div>\n                    {selectedBilling.processedBy && (\n                      <div className=\"col-span-2\">\n                        <strong>Processed By:</strong> {selectedBilling.processedBy}\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              {/* Notes */}\n              {selectedBilling.notes && (\n                <div>\n                  <Label className=\"text-sm font-medium\">Notes</Label>\n                  <div className=\"mt-2 p-3 bg-muted/30 rounded-lg\">\n                    <p className=\"text-sm\">{selectedBilling.notes}</p>\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n\n          <div className=\"flex justify-end pt-4\">\n            <Button\n              variant=\"outline\"\n              onClick={() => setShowDetailsModal(false)}\n            >\n              Close\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/providers/ThemeProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/rates/AccountRates.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchRates'. Either include it or remove the dependency array.","line":499,"column":6,"nodeType":"ArrayExpression","endLine":499,"endColumn":23,"suggestions":[{"desc":"Update the dependencies array to be: [fetchRates, targetAccountId]","fix":{"range":[13366,13383],"text":"[fetchRates, targetAccountId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n/*\n * AccountRates Component - Color Usage Philosophy:\n * \n * - Brand colors (colors.primary, colors.secondary, colors.accent): Used for icons, backgrounds, and accents\n * - Theme-aware text colors (.text-brand): Used for main stat values for readability\n * - Tailwind semantic colors (.text-muted-foreground): Used for secondary text\n * \n * This ensures brand identity is maintained while text remains readable in both light and dark modes.\n */\n\nimport { useState, useEffect } from 'react';\nimport { \n  Card, \n  CardContent, \n  CardDescription, \n  CardHeader, \n  CardTitle \n} from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\n// import { Badge } from '@/components/ui/badge'; // Unused\nimport { \n  Loader2, \n  RefreshCw, \n  Download,\n  DollarSign,\n  Search,\n  X,\n  Filter,\n  ChevronLeft,\n  ChevronRight,\n  Info,\n  TrendingUp,\n  MapPin,\n  // ChevronDown, // Unused\n  // ChevronUp, // Unused\n  Phone,\n  Eye\n} from 'lucide-react';\nimport { toast } from 'sonner';\nimport { format } from 'date-fns';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useAuth } from '@/lib/AuthContext';\nimport { useBranding } from '@/hooks/useBranding';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport {\n  Dialog,\n  DialogContent,\n  // DialogDescription, // Unused\n  DialogHeader,\n  DialogTitle,\n  // DialogTrigger, // Unused\n} from '@/components/ui/dialog';\nimport React from 'react';\n\n// Function to get country flag emoji based on country name\nconst getCountryFlag = (countryName: string): string => {\n  const countryFlags: Record<string, string> = {\n    'United States': '🇺🇸',\n    'USA': '🇺🇸',\n    'US': '🇺🇸',\n    'United Kingdom': '🇬🇧',\n    'UK': '🇬🇧',\n    'Great Britain': '🇬🇧',\n    'Canada': '🇨🇦',\n    'France': '🇫🇷',\n    'Germany': '🇩🇪',\n    'Italy': '🇮🇹',\n    'Spain': '🇪🇸',\n    'Netherlands': '🇳🇱',\n    'Belgium': '🇧🇪',\n    'Switzerland': '🇨🇭',\n    'Austria': '🇦🇹',\n    'Sweden': '🇸🇪',\n    'Norway': '🇳🇴',\n    'Denmark': '🇩🇰',\n    'Finland': '🇫🇮',\n    'Poland': '🇵🇱',\n    'Czech Republic': '🇨🇿',\n    'Hungary': '🇭🇺',\n    'Romania': '🇷🇴',\n    'Bulgaria': '🇧🇬',\n    'Greece': '🇬🇷',\n    'Portugal': '🇵🇹',\n    'Ireland': '🇮🇪',\n    'Luxembourg': '🇱🇺',\n    'Slovenia': '🇸🇮',\n    'Slovakia': '🇸🇰',\n    'Croatia': '🇭🇷',\n    'Estonia': '🇪🇪',\n    'Latvia': '🇱🇻',\n    'Lithuania': '🇱🇹',\n    'Malta': '🇲🇹',\n    'Cyprus': '🇨🇾',\n    'Australia': '🇦🇺',\n    'New Zealand': '🇳🇿',\n    'Japan': '🇯🇵',\n    'South Korea': '🇰🇷',\n    'China': '🇨🇳',\n    'India': '🇮🇳',\n    'Brazil': '🇧🇷',\n    'Mexico': '🇲🇽',\n    'Argentina': '🇦🇷',\n    'Chile': '🇨🇱',\n    'Colombia': '🇨🇴',\n    'Peru': '🇵🇪',\n    'Venezuela': '🇻🇪',\n    'South Africa': '🇿🇦',\n    'Egypt': '🇪🇬',\n    'Nigeria': '🇳🇬',\n    'Kenya': '🇰🇪',\n    'Morocco': '🇲🇦',\n    'Israel': '🇮🇱',\n    'Turkey': '🇹🇷',\n    'Russia': '🇷🇺',\n    'Ukraine': '🇺🇦',\n    'Belarus': '🇧🇾',\n    'Kazakhstan': '🇰🇿',\n    'Thailand': '🇹🇭',\n    'Vietnam': '🇻🇳',\n    'Singapore': '🇸🇬',\n    'Malaysia': '🇲🇾',\n    'Indonesia': '🇮🇩',\n    'Philippines': '🇵🇭',\n    'Hong Kong': '🇭🇰',\n    'Taiwan': '🇹🇼',\n    'Macau': '🇲🇴',\n    'Saudi Arabia': '🇸🇦',\n    'United Arab Emirates': '🇦🇪',\n    'UAE': '🇦🇪',\n    'Qatar': '🇶🇦',\n    'Kuwait': '🇰🇼',\n    'Bahrain': '🇧🇭',\n    'Oman': '🇴🇲',\n    'Jordan': '🇯🇴',\n    'Lebanon': '🇱🇧',\n    'Syria': '🇸🇾',\n    'Iraq': '🇮🇶',\n    'Iran': '🇮🇷',\n    'Pakistan': '🇵🇰',\n    'Bangladesh': '🇧🇩',\n    'Sri Lanka': '🇱🇰',\n    'Nepal': '🇳🇵',\n    'Afghanistan': '🇦🇫',\n    'Myanmar': '🇲🇲',\n    'Cambodia': '🇰🇭',\n    'Laos': '🇱🇦',\n    'Mongolia': '🇲🇳',\n    'North Korea': '🇰🇵',\n  };\n\n  // Try exact match first\n  if (countryFlags[countryName]) {\n    return countryFlags[countryName];\n  }\n\n  // Try case-insensitive match\n  const lowerCountryName = countryName.toLowerCase();\n  for (const [key, flag] of Object.entries(countryFlags)) {\n    if (key.toLowerCase() === lowerCountryName) {\n      return flag;\n    }\n  }\n\n  // Try partial match for common variations\n  for (const [key, flag] of Object.entries(countryFlags)) {\n    if (key.toLowerCase().includes(lowerCountryName) || lowerCountryName.includes(key.toLowerCase())) {\n      return flag;\n    }\n  }\n\n  // Default to globe emoji if no flag found\n  return '🌍';\n};\n\ninterface Rate {\n  prefix: string;\n  country: string;\n  description: string;\n  rate: number;\n  local_rate: number;\n}\n\ninterface RatesData {\n  result: string;\n  currency: string;\n  rates: Rate[];\n  count: number;\n  requestDuration?: number;\n}\n\ninterface CountryGroup {\n  country: string;\n  flag: string;\n  rates: Rate[];\n  avgRate: number;\n  minRate: number;\n  maxRate: number;\n  totalPrefixes: number;\n}\n\ninterface RatesStats {\n  total: number;\n  avgRate: number;\n  minRate: number;\n  maxRate: number;\n  uniqueCountries: number;\n  currency: string;\n}\n\ninterface AccountRatesProps {\n  accountId?: number;\n}\n\nexport function AccountRates({ accountId }: AccountRatesProps) {\n  const { user, isLoading: authLoading } = useAuth();\n  const { colors } = useBranding();\n  // const { company, getGradientStyle, features } = useBranding(); // Unused\n  const [ratesData, setRatesData] = useState<RatesData | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [lastRefresh, setLastRefresh] = useState<Date | null>(null);\n  \n  // View mode state\n  const [viewMode, setViewMode] = useState<'country' | 'table'>('country');\n  \n  // Pagination state\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalRecords, setTotalRecords] = useState(0);\n  const [recordsPerPage, setRecordsPerPage] = useState(200); // Increased for better country grouping\n  \n  // Filter state\n  const [showFilters, setShowFilters] = useState(false);\n  const [filters, setFilters] = useState({\n    prefix: '',\n    country: '',\n  });\n\n  // Country dialog state\n  const [selectedCountry, setSelectedCountry] = useState<CountryGroup | null>(null);\n  const [isCountryDialogOpen, setIsCountryDialogOpen] = useState(false);\n\n  // Use provided accountId or user's account ID\n  const targetAccountId = accountId || user?.sippyAccountId;\n\n  // Group rates by country\n  const groupRatesByCountry = (rates: Rate[]): CountryGroup[] => {\n    const countryMap = new Map<string, Rate[]>();\n    \n    rates.forEach(rate => {\n      const country = rate.country || 'Unknown';\n      if (!countryMap.has(country)) {\n        countryMap.set(country, []);\n      }\n      countryMap.get(country)!.push(rate);\n    });\n\n    const countryGroups: CountryGroup[] = [];\n    \n    countryMap.forEach((countryRates, country) => {\n      const rateValues = countryRates.map(r => r.rate).filter(r => r > 0);\n      const minRate = rateValues.length > 0 ? Math.min(...rateValues) : 0;\n      const maxRate = rateValues.length > 0 ? Math.max(...rateValues) : 0;\n      \n      countryGroups.push({\n        country,\n        flag: getCountryFlag(country),\n        rates: countryRates.sort((a, b) => a.prefix.localeCompare(b.prefix)),\n        avgRate: 0, // Not useful for mobile/landline rates\n        minRate,\n        maxRate,\n        totalPrefixes: countryRates.length\n      });\n    });\n\n    // Sort countries by name\n    return countryGroups.sort((a, b) => a.country.localeCompare(b.country));\n  };\n\n  // Calculate rates statistics\n  const calculateStats = (rates: Rate[], currency: string): RatesStats => {\n    const stats: RatesStats = {\n      total: rates.length,\n      avgRate: 0, // Not useful for mobile/landline rates\n      minRate: 0,\n      maxRate: 0,\n      uniqueCountries: 0,\n      currency\n    };\n\n    if (rates.length === 0) return stats;\n\n    const rateValues = rates.map(r => r.rate).filter(r => r > 0);\n    const countries = new Set(rates.map(r => r.country).filter(c => c));\n\n    if (rateValues.length > 0) {\n      stats.minRate = Math.min(...rateValues);\n      stats.maxRate = Math.max(...rateValues);\n    }\n\n    stats.uniqueCountries = countries.size;\n\n    return stats;\n  };\n\n  const stats = ratesData ? calculateStats(ratesData.rates, ratesData.currency) : {\n    total: 0,\n    avgRate: 0,\n    minRate: 0,\n    maxRate: 0,\n    uniqueCountries: 0,\n    currency: ''\n  };\n\n  const countryGroups = ratesData ? groupRatesByCountry(ratesData.rates) : [];\n\n  // Check if any rates have local rates\n  const hasLocalRates = ratesData?.rates.some(rate => rate.local_rate > 0) || false;\n\n  const fetchRates = async (page: number = currentPage, customRecordsPerPage?: number) => {\n    // Don't fetch if auth is still loading\n    if (authLoading) {\n      return;\n    }\n    \n    if (!targetAccountId) {\n      setError('No Sippy account ID available');\n      setIsLoading(false);\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      const limit = customRecordsPerPage || recordsPerPage;\n      const offset = (page - 1) * limit;\n\n      const queryParams = new URLSearchParams({\n        offset: offset.toString(),\n        limit: limit.toString(),\n        ...(filters.prefix && { prefix: filters.prefix }),\n      });\n\n      console.log('Fetching rates with params:', { limit, offset, page, customRecordsPerPage, recordsPerPage });\n      \n      const response = await fetch(`/api/sippy/account/${targetAccountId}/rates?${queryParams}`, {\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({ error: 'Unknown error' }));\n        throw new Error(errorData.error || `HTTP ${response.status}: Failed to fetch rates`);\n      }\n\n      const data: RatesData = await response.json();\n      console.log('Rates API response:', { rateCount: data.rates?.length, currency: data.currency });\n      \n      setRatesData(data);\n      setLastRefresh(new Date());\n      \n      // Update total records for pagination\n      const currentRecords = data.rates?.length || 0;\n      const effectiveLimit = customRecordsPerPage || recordsPerPage;\n      \n      if (currentRecords === effectiveLimit) {\n        // If we got a full page, there might be more records\n        setTotalRecords((page + 10) * effectiveLimit);\n      } else {\n        // If we got less than a full page, this is the last page\n        setTotalRecords(offset + currentRecords);\n      }\n    } catch (err) {\n      console.error('Error fetching rates:', err);\n      \n      let errorMessage = 'Failed to fetch rates';\n      if (err instanceof Error) {\n        errorMessage = err.message;\n      }\n      \n      setError(errorMessage);\n      toast.error(errorMessage);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleFilterChange = (key: string, value: string) => {\n    setFilters(prev => ({ ...prev, [key]: value }));\n  };\n\n  const clearFilters = () => {\n    setFilters({\n      prefix: '',\n      country: '',\n    });\n    setCurrentPage(1);\n  };\n\n  const applyFilters = () => {\n    setCurrentPage(1);\n    fetchRates(1);\n  };\n\n  const handlePageChange = (newPage: number) => {\n    setCurrentPage(newPage);\n    fetchRates(newPage);\n  };\n\n  const handleLimitChange = (value: string) => {\n    const newLimit = parseInt(value);\n    setRecordsPerPage(newLimit);\n    setCurrentPage(1);\n    fetchRates(1, newLimit);\n  };\n\n  const formatCurrency = (amount: number, currency: string = '') => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: currency || 'USD',\n      minimumFractionDigits: 4,\n      maximumFractionDigits: 6,\n    }).format(amount);\n  };\n\n  const exportToCsv = () => {\n    if (!ratesData?.rates) return;\n\n    const headers = [\n      'Country',\n      'Prefix',\n      'Description',\n      'Rate',\n      'Local Rate',\n      'Currency'\n    ];\n\n    const csvContent = [\n      headers.join(','),\n      ...ratesData.rates.map(rate => [\n        rate.country || '',\n        rate.prefix || '',\n        rate.description || '',\n        rate.rate || '',\n        rate.local_rate || '',\n        ratesData.currency || ''\n      ].join(','))\n    ].join('\\n');\n\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n    const link = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n    link.setAttribute('href', url);\n    link.setAttribute('download', `account_rates_${targetAccountId}_${format(new Date(), 'yyyy-MM-dd')}.csv`);\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  // Unused functions - commented out to fix ESLint warnings\n  // const toggleCountryExpansion = (country: string) => {\n  //   setSelectedCountry(countryGroups.find(group => group.country === country) || null);\n  //   setIsCountryDialogOpen(true);\n  // };\n\n  // const expandAllCountries = () => {\n  //   setSelectedCountry(null);\n  //   setIsCountryDialogOpen(true);\n  // };\n\n  // const collapseAllCountries = () => {\n  //   setSelectedCountry(null);\n  //   setIsCountryDialogOpen(false);\n  // };\n\n  useEffect(() => {\n    // Fetch rates when we have a target account ID (auth handled by page)\n    if (targetAccountId) {\n      fetchRates(1);\n    }\n  }, [targetAccountId]);\n\n  const totalPages = Math.ceil(totalRecords / recordsPerPage);\n  const startRecord = (currentPage - 1) * recordsPerPage + 1;\n  const endRecord = Math.min(currentPage * recordsPerPage, totalRecords);\n\n  // Function to open country dialog\n  const openCountryDialog = (country: CountryGroup) => {\n    setSelectedCountry(country);\n    setIsCountryDialogOpen(true);\n  };\n\n  // CountryRatesDialog component\n  const CountryRatesDialog = () => (\n    <Dialog open={isCountryDialogOpen} onOpenChange={setIsCountryDialogOpen}>\n      <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-hidden\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-3\">\n            {selectedCountry && (\n              <>\n                <span className=\"text-2xl\">{selectedCountry.flag}</span>\n                <div>\n                  <span style={{ color: colors.primary }}>{selectedCountry.country}</span>\n                  <p className=\"text-sm text-muted-foreground font-normal\">\n                    {selectedCountry.totalPrefixes} prefix{selectedCountry.totalPrefixes !== 1 ? 'es' : ''} • \n                    {formatCurrency(selectedCountry.minRate, stats.currency)} - {formatCurrency(selectedCountry.maxRate, stats.currency)}\n                  </p>\n                </div>\n              </>\n            )}\n          </DialogTitle>\n        </DialogHeader>\n        <div className=\"overflow-auto\">\n          {selectedCountry && (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Prefix</TableHead>\n                  <TableHead>Description</TableHead>\n                  <TableHead className=\"text-right\">Rate</TableHead>\n                  {selectedCountry.rates.some(r => r.local_rate > 0) && (\n                    <TableHead className=\"text-right\">Local Rate</TableHead>\n                  )}\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {selectedCountry.rates.map((rate, index) => (\n                  <TableRow key={`${rate.prefix}-${index}`}>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <div \n                          className=\"w-6 h-6 rounded flex items-center justify-center text-xs font-bold text-white bg-gray-600 dark:bg-gray-500\"\n                        >\n                          +\n                        </div>\n                        <span className=\"font-mono font-semibold\">\n                          {rate.prefix || 'N/A'}\n                        </span>\n                      </div>\n                    </TableCell>\n                    <TableCell>{rate.description || 'No description'}</TableCell>\n                    <TableCell className=\"text-right\">\n                      <span \n                        className=\"font-semibold\"\n                        style={{ color: colors.secondary }}\n                      >\n                        {formatCurrency(rate.rate, stats.currency)}\n                      </span>\n                    </TableCell>\n                    {selectedCountry.rates.some(r => r.local_rate > 0) && (\n                      <TableCell className=\"text-right\">\n                        {rate.local_rate > 0 ? (\n                          <span className=\"font-semibold\">\n                            {formatCurrency(rate.local_rate, stats.currency)}\n                          </span>\n                        ) : (\n                          <span className=\"text-muted-foreground\">-</span>\n                        )}\n                      </TableCell>\n                    )}\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n\n  // Show loading state while fetching rates (auth already handled by page)\n  if (isLoading && !ratesData) {\n    return (\n      <div className=\"min-h-[400px] flex items-center justify-center\">\n        <div className=\"text-center space-y-4\">\n          <div \n            className=\"mx-auto w-16 h-16 rounded-2xl flex items-center justify-center shadow-lg\"\n            style={{ background: `linear-gradient(135deg, ${colors.primary}, ${colors.secondary})` }}\n          >\n            <Loader2 className=\"h-8 w-8 animate-spin text-white\" />\n          </div>\n          <div>\n            <h3 className=\"text-lg font-semibold\" style={{ color: colors.primary }}>\n              Loading Call Rates\n            </h3>\n            <p className=\"text-muted-foreground\">\n              Fetching your call rates from Sippy...\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <Card className=\"border-destructive\">\n        <CardHeader>\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 rounded-lg bg-red-50 flex items-center justify-center\">\n              <Phone className=\"h-5 w-5 text-red-600\" />\n            </div>\n            <div>\n              <CardTitle className=\"text-destructive\">Error Loading Call Rates</CardTitle>\n              <CardDescription>There was an error loading your call rates data</CardDescription>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-sm text-destructive mb-4\">{error}</p>\n          <Button \n            variant=\"outline\" \n            onClick={() => fetchRates()}\n            className=\"gap-2\"\n          >\n            <RefreshCw className=\"h-4 w-4\" />\n            Try Again\n          </Button>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header with Actions */}\n      <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-4\">\n        <div>\n          <div className=\"flex items-center gap-2 mb-1\">\n            <div \n              className=\"inline-flex items-center gap-2 px-3 py-1.5 rounded-full text-sm font-medium\"\n              style={{ backgroundColor: `${colors.primary}20`, color: colors.primary }}\n            >\n              <Phone className=\"h-4 w-4\" />\n              Call Rates\n            </div>\n          </div>\n          <p className=\"text-muted-foreground\">\n            {stats.total} rate{stats.total !== 1 ? 's' : ''} • {stats.uniqueCountries} countries\n            {lastRefresh && (\n              <span className=\"ml-2\">\n                • Last updated {format(lastRefresh, 'HH:mm:ss')}\n              </span>\n            )}\n          </p>\n        </div>\n        \n        <div className=\"flex items-center gap-2\">\n          {/* View Mode Toggle */}\n          <div className=\"flex items-center gap-1 p-1 bg-muted rounded-lg\">\n            <Button\n              variant={viewMode === 'country' ? 'default' : 'ghost'}\n              size=\"sm\"\n              onClick={() => setViewMode('country')}\n              className=\"h-8 px-3\"\n              style={viewMode === 'country' ? { backgroundColor: colors.primary } : {}}\n            >\n              Countries\n            </Button>\n            <Button\n              variant={viewMode === 'table' ? 'default' : 'ghost'}\n              size=\"sm\"\n              onClick={() => setViewMode('table')}\n              className=\"h-8 px-3\"\n              style={viewMode === 'table' ? { backgroundColor: colors.primary } : {}}\n            >\n              Table\n            </Button>\n          </div>\n          \n          <Button \n            variant=\"outline\" \n            size=\"sm\"\n            onClick={() => setShowFilters(!showFilters)}\n            className=\"gap-2\"\n          >\n            <Filter className=\"h-4 w-4\" />\n            Filters\n          </Button>\n          <Button \n            variant=\"outline\" \n            size=\"sm\"\n            onClick={() => fetchRates()}\n            disabled={isLoading}\n            className=\"gap-2\"\n          >\n            <RefreshCw className={`h-4 w-4 ${isLoading ? 'animate-spin' : ''}`} />\n            Refresh\n          </Button>\n          <Button \n            variant=\"outline\" \n            size=\"sm\"\n            onClick={exportToCsv}\n            disabled={!ratesData?.rates || ratesData.rates.length === 0}\n            className=\"gap-2\"\n          >\n            <Download className=\"h-4 w-4\" />\n            Export CSV\n          </Button>\n        </div>\n      </div>\n\n      {/* Statistics Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        {/* Total Rates */}\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Total Destinations</p>\n                <p className=\"text-2xl font-bold text-brand\">\n                  {stats.total}\n                </p>\n                <p className=\"text-xs text-muted-foreground\">\n                  {stats.uniqueCountries} countries\n                </p>\n              </div>\n              <div \n                className=\"w-12 h-12 rounded-xl flex items-center justify-center\"\n                style={{ backgroundColor: `${colors.primary}20` }}\n              >\n                <Phone className=\"h-6 w-6\" style={{ color: colors.primary }} />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Cheapest Rate */}\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Cheapest Rate</p>\n                <p className=\"text-2xl font-bold text-brand\">\n                  {formatCurrency(stats.minRate, stats.currency)}\n                </p>\n                <p className=\"text-xs text-muted-foreground\">\n                  per minute\n                </p>\n              </div>\n              <div \n                className=\"w-12 h-12 rounded-xl flex items-center justify-center\"\n                style={{ backgroundColor: `${colors.accent}20` }}\n              >\n                <TrendingUp className=\"h-6 w-6\" style={{ color: colors.accent }} />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Most Expensive Rate */}\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Most Expensive</p>\n                <p className=\"text-2xl font-bold text-brand\">\n                  {formatCurrency(stats.maxRate, stats.currency)}\n                </p>\n                <p className=\"text-xs text-muted-foreground\">\n                  per minute\n                </p>\n              </div>\n              <div \n                className=\"w-12 h-12 rounded-xl flex items-center justify-center\"\n                style={{ backgroundColor: `${colors.secondary}20` }}\n              >\n                <DollarSign className=\"h-6 w-6\" style={{ color: colors.secondary }} />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Currency & Local Rates */}\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Currency</p>\n                <p className=\"text-2xl font-bold text-brand\">\n                  {stats.currency || 'USD'}\n                </p>\n                <p className=\"text-xs text-muted-foreground\">\n                  {hasLocalRates ? 'Local rates available' : 'Standard rates only'}\n                </p>\n              </div>\n              <div \n                className=\"w-12 h-12 rounded-xl flex items-center justify-center\"\n                style={{ backgroundColor: `${colors.primary}20` }}\n              >\n                <MapPin className=\"h-6 w-6\" style={{ color: colors.primary }} />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters Panel */}\n      {showFilters && (\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-base flex items-center gap-2\">\n                <Filter className=\"h-5 w-5\" style={{ color: colors.primary }} />\n                Filters\n              </CardTitle>\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                onClick={() => setShowFilters(false)}\n                className=\"h-8 w-8 p-0\"\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label>Prefix</Label>\n                <Input\n                  value={filters.prefix}\n                  onChange={(e) => handleFilterChange('prefix', e.target.value)}\n                  placeholder=\"Filter by prefix (e.g., 1, 44, 49)\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label>Country</Label>\n                <Input\n                  value={filters.country}\n                  onChange={(e) => handleFilterChange('country', e.target.value)}\n                  placeholder=\"Filter by country\"\n                />\n              </div>\n            </div>\n            \n            <div className=\"flex gap-2 mt-4\">\n              <Button \n                onClick={applyFilters}\n                disabled={isLoading}\n                className=\"gap-2\"\n                style={{ backgroundColor: colors.primary }}\n              >\n                {isLoading ? (\n                  <>\n                    <Loader2 className=\"h-4 w-4 animate-spin\" />\n                    Searching...\n                  </>\n                ) : (\n                  <>\n                    <Search className=\"h-4 w-4\" />\n                    Apply Filters\n                  </>\n                )}\n              </Button>\n              <Button \n                variant=\"outline\"\n                onClick={clearFilters}\n                disabled={isLoading}\n                className=\"gap-2\"\n              >\n                <X className=\"h-4 w-4\" />\n                Clear Filters\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Main Content */}\n      {stats.total === 0 ? (\n        <Card>\n          <CardContent className=\"text-center py-12\">\n            <div className=\"space-y-4\">\n              <div \n                className=\"mx-auto w-16 h-16 rounded-2xl flex items-center justify-center shadow-lg\"\n                style={{ background: `linear-gradient(135deg, ${colors.primary}, ${colors.secondary})` }}\n              >\n                <Phone className=\"h-8 w-8 text-white\" />\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold\" style={{ color: colors.primary }}>\n                  No Rates Found\n                </h3>\n                <p className=\"text-muted-foreground\">\n                  No rates found for account {targetAccountId}. Try adjusting your filters.\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      ) : viewMode === 'country' ? (\n        /* Country View */\n        <div className=\"space-y-6\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <div \n                className=\"w-10 h-10 rounded-xl flex items-center justify-center shadow-lg\"\n                style={{ background: `linear-gradient(135deg, ${colors.primary}, ${colors.secondary})` }}\n              >\n                <MapPin className=\"h-5 w-5 text-white\" />\n              </div>\n              <div>\n                <h2 className=\"text-xl font-bold\" style={{ color: colors.primary }}>\n                  Rates by Country\n                </h2>\n                <p className=\"text-sm text-muted-foreground\">\n                  Click on any country card to view detailed rates\n                </p>\n              </div>\n            </div>\n          </div>\n\n          {/* Country Cards Grid */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n            {countryGroups.map((group) => (\n              <Card \n                key={group.country}\n                className=\"cursor-pointer hover:shadow-lg transition-all duration-300 border-0 overflow-hidden group\"\n                onClick={() => openCountryDialog(group)}\n              >\n                <div \n                  className=\"h-1\"\n                  style={{ background: `linear-gradient(90deg, ${colors.primary}, ${colors.secondary})` }}\n                />\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-start justify-between mb-3\">\n                    <div className=\"flex items-center gap-3\">\n                      <div \n                        className=\"w-12 h-12 rounded-xl flex items-center justify-center shadow-sm group-hover:shadow-md transition-shadow\"\n                        style={{ \n                          background: `linear-gradient(135deg, ${colors.primary}15, ${colors.secondary}15)`,\n                          border: `1px solid ${colors.primary}20`\n                        }}\n                      >\n                        <span className=\"text-2xl\">{group.flag}</span>\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <h3 className=\"font-semibold text-base truncate\" style={{ color: colors.primary }}>\n                          {group.country}\n                        </h3>\n                        <p className=\"text-xs text-muted-foreground\">\n                          Destination country\n                        </p>\n                      </div>\n                    </div>\n                    <div \n                      className=\"w-8 h-8 rounded-lg flex items-center justify-center group-hover:scale-110 transition-transform\"\n                      style={{ backgroundColor: `${colors.accent}20` }}\n                    >\n                      <Eye className=\"h-4 w-4\" style={{ color: colors.accent }} />\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-3\">\n                    {/* Prefixes */}\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-muted-foreground\">Prefixes</span>\n                      <div className=\"flex items-center gap-2\">\n                        <div \n                          className=\"w-6 h-6 rounded flex items-center justify-center text-xs font-bold text-white bg-gray-600 dark:bg-gray-500\"\n                        >\n                          {group.totalPrefixes}\n                        </div>\n                        <span className=\"text-sm font-medium\">\n                          {group.totalPrefixes} available\n                        </span>\n                      </div>\n                    </div>\n\n                    {/* Rate Range */}\n                    <div className=\"space-y-1\">\n                      <span className=\"text-sm text-muted-foreground\">Rate Range</span>\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <div \n                            className=\"font-bold text-lg\"\n                            style={{ color: colors.secondary }}\n                          >\n                            {formatCurrency(group.minRate, stats.currency)}\n                          </div>\n                          <div className=\"text-xs text-muted-foreground\">\n                            Cheapest\n                          </div>\n                        </div>\n                        <div className=\"text-muted-foreground\">-</div>\n                        <div className=\"text-right\">\n                          <div \n                            className=\"font-bold text-lg\"\n                            style={{ color: colors.secondary }}\n                          >\n                            {formatCurrency(group.maxRate, stats.currency)}\n                          </div>\n                          <div className=\"text-xs text-muted-foreground\">\n                            Most expensive\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Local Rates Indicator */}\n                    {group.rates.some(r => r.local_rate > 0) && (\n                      <div className=\"flex items-center gap-2 pt-2 border-t border-muted/30\">\n                        <div \n                          className=\"w-2 h-2 rounded-full bg-gray-600 dark:bg-gray-500\"\n                        />\n                        <span className=\"text-xs text-muted-foreground\">\n                          Local rates available\n                        </span>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      ) : (\n        /* Table View */\n        <div className=\"space-y-6\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <div \n                className=\"w-10 h-10 rounded-xl flex items-center justify-center shadow-lg\"\n                style={{ background: `linear-gradient(135deg, ${colors.primary}, ${colors.secondary})` }}\n              >\n                <DollarSign className=\"h-5 w-5 text-white\" />\n              </div>\n              <div>\n                <h2 className=\"text-xl font-bold\" style={{ color: colors.primary }}>\n                  All Rates Table\n                </h2>\n                <p className=\"text-sm text-muted-foreground\">\n                  Complete list of all available rates with detailed information\n                </p>\n              </div>\n            </div>\n            <div className=\"text-right\">\n              <div className=\"text-sm font-medium\" style={{ color: colors.secondary }}>\n                Showing {startRecord}-{endRecord} of {totalRecords}\n              </div>\n              <div className=\"text-xs text-muted-foreground\">\n                Total rates available\n              </div>\n            </div>\n          </div>\n\n          {/* Enhanced Table */}\n          <Card className=\"border-0 shadow-xl overflow-hidden\">\n            <div \n              className=\"h-2\"\n              style={{ background: `linear-gradient(90deg, ${colors.primary}, ${colors.secondary}, ${colors.accent})` }}\n            />\n            <CardContent className=\"p-0\">\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow className=\"border-b-0\">\n                      <TableHead \n                        className=\"bg-muted/40 font-bold text-foreground border-r border-muted/50 py-4\"\n                        style={{ color: colors.primary }}\n                      >\n                        <div className=\"flex items-center gap-2\">\n                          <MapPin className=\"h-4 w-4\" />\n                          Country\n                        </div>\n                      </TableHead>\n                      <TableHead \n                        className=\"bg-muted/40 font-bold text-foreground border-r border-muted/50 py-4\"\n                        style={{ color: colors.primary }}\n                      >\n                        <div className=\"flex items-center gap-2\">\n                          <Phone className=\"h-4 w-4\" />\n                          Prefix\n                        </div>\n                      </TableHead>\n                      <TableHead \n                        className=\"bg-muted/40 font-bold text-foreground border-r border-muted/50 py-4\"\n                        style={{ color: colors.primary }}\n                      >\n                        <div className=\"flex items-center gap-2\">\n                          <Info className=\"h-4 w-4\" />\n                          Description\n                        </div>\n                      </TableHead>\n                      <TableHead \n                        className=\"bg-muted/40 font-bold text-foreground border-r border-muted/50 py-4\"\n                        style={{ color: colors.primary }}\n                      >\n                        <div className=\"flex items-center gap-2\">\n                          <DollarSign className=\"h-4 w-4\" />\n                          Rate\n                        </div>\n                      </TableHead>\n                      {hasLocalRates && (\n                        <TableHead \n                          className=\"bg-muted/40 font-bold text-foreground py-4\"\n                          style={{ color: colors.primary }}\n                        >\n                          <div className=\"flex items-center gap-2\">\n                            <TrendingUp className=\"h-4 w-4\" />\n                            Local Rate\n                          </div>\n                        </TableHead>\n                      )}\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {ratesData?.rates.map((rate, index) => (\n                      <TableRow \n                        key={`${rate.prefix}-${index}`} \n                        className=\"hover:bg-muted/30 transition-all duration-200 border-b border-muted/30 group\"\n                      >\n                        <TableCell className=\"border-r border-muted/30 py-4\">\n                          <div className=\"flex items-center gap-3\">\n                            <div \n                              className=\"w-10 h-10 rounded-xl flex items-center justify-center shadow-sm group-hover:shadow-md transition-shadow\"\n                              style={{ \n                                background: `linear-gradient(135deg, ${colors.primary}15, ${colors.secondary}15)`,\n                                border: `1px solid ${colors.primary}20`\n                              }}\n                            >\n                              <span className=\"text-xl\">{getCountryFlag(rate.country)}</span>\n                            </div>\n                            <div>\n                              <div className=\"font-semibold text-sm\" style={{ color: colors.primary }}>\n                                {rate.country || 'Unknown'}\n                              </div>\n                              <div className=\"text-xs text-muted-foreground\">\n                                Destination\n                              </div>\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell className=\"border-r border-muted/30 py-4\">\n                          <div className=\"flex items-center gap-2\">\n                            <div \n                              className=\"w-8 h-8 rounded-lg flex items-center justify-center text-xs font-bold text-white shadow-sm bg-gray-600 dark:bg-gray-500\"\n                            >\n                              +\n                            </div>\n                            <div>\n                              <div className=\"font-mono font-bold text-lg\">\n                                {rate.prefix || 'N/A'}\n                              </div>\n                              <div className=\"text-xs text-muted-foreground\">\n                                Dialing code\n                              </div>\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell className=\"border-r border-muted/30 py-4\">\n                          <div className=\"max-w-xs\">\n                            <div className=\"font-medium text-sm leading-relaxed\">\n                              {rate.description || 'No description available'}\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell className={`py-4 ${hasLocalRates ? 'border-r border-muted/30' : ''}`}>\n                          <div className=\"text-right\">\n                            <div className=\"font-bold text-lg text-brand\">\n                              {formatCurrency(rate.rate, ratesData?.currency)}\n                            </div>\n                            <div className=\"text-xs text-muted-foreground\">\n                              per minute\n                            </div>\n                          </div>\n                        </TableCell>\n                        {hasLocalRates && (\n                          <TableCell className=\"py-4\">\n                            <div className=\"text-right\">\n                              {rate.local_rate > 0 ? (\n                                <>\n                                  <div className=\"font-semibold text-lg text-foreground\">\n                                    {formatCurrency(rate.local_rate, ratesData?.currency)}\n                                  </div>\n                                  <div className=\"text-xs text-muted-foreground\">\n                                    local rate\n                                  </div>\n                                </>\n                              ) : (\n                                <div className=\"text-center\">\n                                  <div className=\"text-muted-foreground italic text-sm\">\n                                    No local rate\n                                  </div>\n                                  <div className=\"text-xs text-muted-foreground\">\n                                    available\n                                  </div>\n                                </div>\n                              )}\n                            </div>\n                          </TableCell>\n                        )}\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n            </CardContent>\n            \n            {/* Enhanced Pagination */}\n            <div \n              className=\"border-t bg-muted/20 px-6 py-4\"\n              style={{ borderColor: `${colors.primary}20` }}\n            >\n              <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-4\">\n                <div className=\"flex items-center gap-6\">\n                  <div className=\"flex items-center gap-2\">\n                    <div \n                      className=\"w-8 h-8 rounded-lg flex items-center justify-center\"\n                      style={{ backgroundColor: `${colors.primary}20` }}\n                    >\n                      <Info className=\"h-4 w-4\" style={{ color: colors.primary }} />\n                    </div>\n                    <div>\n                      <div className=\"text-sm font-medium\">\n                        {startRecord}-{endRecord} of {totalRecords}\n                      </div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        Rates displayed\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-3\">\n                    <span className=\"text-sm font-medium text-muted-foreground\">Rows:</span>\n                    <Select\n                      value={recordsPerPage.toString()}\n                      onValueChange={handleLimitChange}\n                    >\n                      <SelectTrigger \n                        className=\"w-[80px] h-9 border-0 shadow-md\"\n                        style={{ backgroundColor: `${colors.primary}10` }}\n                      >\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"50\">50</SelectItem>\n                        <SelectItem value=\"100\">100</SelectItem>\n                        <SelectItem value=\"200\">200</SelectItem>\n                        <SelectItem value=\"500\">500</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center gap-4\">\n                  <div className=\"text-sm font-medium\" style={{ color: colors.secondary }}>\n                    Page {currentPage} of {totalPages}\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handlePageChange(currentPage - 1)}\n                      disabled={currentPage === 1 || isLoading}\n                      className=\"h-9 w-9 p-0 shadow-md hover:shadow-lg transition-all\"\n                      style={{ \n                        borderColor: colors.primary,\n                        color: colors.primary\n                      }}\n                    >\n                      <ChevronLeft className=\"h-4 w-4\" />\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handlePageChange(currentPage + 1)}\n                      disabled={currentPage === totalPages || isLoading}\n                      className=\"h-9 w-9 p-0 shadow-md hover:shadow-lg transition-all\"\n                      style={{ \n                        borderColor: colors.primary,\n                        color: colors.primary\n                      }}\n                    >\n                      <ChevronRight className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </Card>\n        </div>\n      )}\n\n      {/* Country Rates Dialog */}\n      <CountryRatesDialog />\n    </div>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/rates/NumberRateManagement.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":99,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2174,2177],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2174,2177],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":100,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2231,2234],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2231,2234],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'fetchRateDeckInfo' and 'fetchRates'. Either include them or remove the dependency array.","line":435,"column":6,"nodeType":"ArrayExpression","endLine":435,"endColumn":18,"suggestions":[{"desc":"Update the dependencies array to be: [fetchRateDeckInfo, fetchRates, rateDeckId]","fix":{"range":[12247,12259],"text":"[fetchRateDeckInfo, fetchRates, rateDeckId]"}}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":1011,"column":67,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[36097,36165],"text":"\n              Are you sure you want to delete the rate for prefix &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[36097,36165],"text":"\n              Are you sure you want to delete the rate for prefix &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[36097,36165],"text":"\n              Are you sure you want to delete the rate for prefix &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[36097,36165],"text":"\n              Are you sure you want to delete the rate for prefix &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":1011,"column":90,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[36187,36190],"text":"&quot; ("},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[36187,36190],"text":"&ldquo; ("},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[36187,36190],"text":"&#34; ("},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[36187,36190],"text":"&rdquo; ("},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { \n  Card, \n  CardContent, \n  // CardDescription, // Unused \n  CardHeader, \n  CardTitle \n} from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { \n  Loader2, \n  RefreshCw, \n  Download,\n  Hash,\n  Globe,\n  Search,\n  X,\n  Filter,\n  ChevronLeft,\n  ChevronRight,\n  Plus,\n  Edit,\n  Trash2,\n  ArrowLeft,\n  Phone\n} from 'lucide-react';\nimport { toast } from 'sonner';\nimport { format } from 'date-fns';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useAuth } from '@/lib/AuthContext';\nimport { useBranding } from '@/hooks/useBranding';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog';\n// import { Textarea } from '@/components/ui/textarea'; // Unused\nimport Link from 'next/link';\n\ninterface NumberRate {\n  id: string;\n  prefix: string;\n  country: string;\n  description: string;\n  rate: number;\n  setupFee: number;\n  type: 'Geographic/Local' | 'Mobile' | 'National' | 'Toll-free' | 'Shared Cost' | 'NPV (Verified Numbers)';\n  effectiveDate: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface NumberRateData {\n  rates: NumberRate[];\n  total: number;\n}\n\ninterface NumberRateStats {\n  total: number;\n  avgRate: number;\n  minRate: number;\n  maxRate: number;\n  uniqueCountries: number;\n  byType: Record<string, number>;\n}\n\ninterface NumberRateManagementProps {\n  rateDeckId: string;\n}\n\nexport function NumberRateManagement({ rateDeckId }: NumberRateManagementProps) {\n  const { user } = useAuth();\n  const { colors } = useBranding();\n  // const { company, getGradientStyle, features } = useBranding(); // Unused\n  const [rateData, setRateData] = useState<NumberRateData | null>(null);\n  const [rateDeckInfo, setRateDeckInfo] = useState<any>(null);\n  const [countries, setCountries] = useState<any[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [lastRefresh, setLastRefresh] = useState<Date | null>(null);\n  \n  // Pagination state\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalRecords, setTotalRecords] = useState(0);\n  const [recordsPerPage, setRecordsPerPage] = useState(50);\n  \n  // Filter state\n  const [showFilters, setShowFilters] = useState(false);\n  const [filters, setFilters] = useState({\n    prefix: '',\n    country: '',\n    type: 'all',\n    minRate: '',\n    maxRate: '',\n  });\n\n  // Form state for add/edit rate\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const [editingRate, setEditingRate] = useState<NumberRate | null>(null);\n  const [formData, setFormData] = useState({\n    prefix: '',\n    country: '',\n    description: '',\n    rate: '',\n    setupFee: '',\n    type: 'Geographic/Local' as NumberRate['type'],\n    effectiveDate: new Date().toISOString().split('T')[0],\n  });\n\n  // Delete confirmation state\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [rateToDelete, setRateToDelete] = useState<NumberRate | null>(null);\n\n  const isAdmin = user?.role === 'admin';\n\n  // Calculate rates statistics\n  const calculateStats = (rates: NumberRate[]): NumberRateStats => {\n    const stats: NumberRateStats = {\n      total: rates.length,\n      avgRate: 0,\n      minRate: 0,\n      maxRate: 0,\n      uniqueCountries: 0,\n      byType: {},\n    };\n\n    if (rates.length === 0) return stats;\n\n    const rateValues = rates.map(r => r.rate).filter(r => r > 0);\n    const countries = new Set(rates.map(r => r.country).filter(c => c));\n\n    if (rateValues.length > 0) {\n      stats.avgRate = rateValues.reduce((sum, rate) => sum + rate, 0) / rateValues.length;\n      stats.minRate = Math.min(...rateValues);\n      stats.maxRate = Math.max(...rateValues);\n    }\n\n    stats.uniqueCountries = countries.size;\n\n    // Count by type\n    rates.forEach(rate => {\n      stats.byType[rate.type] = (stats.byType[rate.type] || 0) + 1;\n    });\n\n    return stats;\n  };\n\n  const stats = rateData ? calculateStats(rateData.rates) : {\n    total: 0,\n    avgRate: 0,\n    minRate: 0,\n    maxRate: 0,\n    uniqueCountries: 0,\n    byType: {},\n  };\n\n  const fetchRateDeckInfo = async () => {\n    try {\n      const response = await fetch(`/api/rates/numbers/decks/${rateDeckId}`);\n      \n      if (!response.ok) {\n        if (response.status === 404) {\n          // Rate deck not found, but don't set this as an error\n          // Just leave rateDeckInfo as null and continue\n          console.warn(`Rate deck ${rateDeckId} not found`);\n          return;\n        }\n        throw new Error('Failed to fetch rate deck information');\n      }\n\n      const data = await response.json();\n      setRateDeckInfo(data);\n    } catch (error) {\n      console.error('Error fetching rate deck info:', error);\n      // Don't set this as a blocking error, just log it\n      console.warn('Could not fetch rate deck information, continuing without it');\n    }\n  };\n\n  const fetchCountries = async () => {\n    try {\n      const response = await fetch('/api/admin/countries?isActive=true&limit=1000');\n      if (response.ok) {\n        const data = await response.json();\n        setCountries(data.countries || []);\n      }\n    } catch (error) {\n      console.error('Error fetching countries:', error);\n    }\n  };\n\n  const fetchRates = async (page: number = currentPage) => {\n    if (!rateDeckId) return;\n    \n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      const offset = (page - 1) * recordsPerPage;\n      const queryParams = new URLSearchParams({\n        offset: offset.toString(),\n        limit: recordsPerPage.toString(),\n        ...Object.fromEntries(\n          Object.entries(filters).filter(([, value]) => value && value !== 'all')\n        ),\n      });\n\n      const response = await fetch(`/api/rates/numbers/decks/${rateDeckId}/rates?${queryParams}`);\n      \n      if (!response.ok) {\n        if (response.status === 404) {\n          // API doesn't exist yet, show empty state\n          setRateData({ rates: [], total: 0 });\n          setTotalRecords(0);\n          setLastRefresh(new Date());\n          return;\n        }\n        throw new Error('Failed to fetch number rates');\n      }\n\n      const data = await response.json();\n      setRateData(data);\n      setTotalRecords(data.total);\n      setCurrentPage(page);\n      setLastRefresh(new Date());\n    } catch (error) {\n      console.error('Error fetching number rates:', error);\n      const errorMessage = error instanceof Error ? error.message : 'Failed to fetch number rates';\n      setError(errorMessage);\n      toast.error(errorMessage);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleFilterChange = (key: string, value: string) => {\n    setFilters(prev => ({ ...prev, [key]: value }));\n  };\n\n  const applyFilters = () => {\n    setCurrentPage(1);\n    fetchRates(1);\n  };\n\n  const clearFilters = () => {\n    setFilters({\n      prefix: '',\n      country: '',\n      type: 'all',\n      minRate: '',\n      maxRate: '',\n    });\n    setCurrentPage(1);\n    fetchRates(1);\n  };\n\n  const handlePageChange = (page: number) => {\n    fetchRates(page);\n  };\n\n  const handleLimitChange = (newLimit: string) => {\n    setRecordsPerPage(parseInt(newLimit));\n    setCurrentPage(1);\n    fetchRates(1);\n  };\n\n  const formatCurrency = (amount: number, currency: string = 'USD') => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: currency,\n      minimumFractionDigits: 4,\n      maximumFractionDigits: 4,\n    }).format(amount);\n  };\n\n  const exportToCsv = () => {\n    if (!rateData?.rates || rateData.rates.length === 0) {\n      toast.error('No data to export');\n      return;\n    }\n\n    const headers = ['Prefix', 'Country', 'Description', 'Rate', 'Setup Fee', 'Type', 'Effective Date'];\n    const csvContent = [\n      headers.join(','),\n      ...rateData.rates.map(rate => [\n        rate.prefix,\n        `\"${rate.country}\"`,\n        `\"${rate.description}\"`,\n        rate.rate.toFixed(4),\n        rate.setupFee.toFixed(4),\n        `\"${rate.type}\"`,\n        rate.effectiveDate,\n      ].join(','))\n    ].join('\\n');\n\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n    const link = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n    link.setAttribute('href', url);\n    link.setAttribute('download', `number-rates-${rateDeckId}-${format(new Date(), 'yyyy-MM-dd')}.csv`);\n    link.style.visibility = 'hidden';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  const handleFormSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    try {\n      const url = editingRate \n        ? `/api/rates/numbers/decks/${rateDeckId}/rates/${editingRate.id}`\n        : `/api/rates/numbers/decks/${rateDeckId}/rates`;\n      \n      const method = editingRate ? 'PUT' : 'POST';\n      \n      const response = await fetch(url, {\n        method,\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          ...formData,\n          rate: parseFloat(formData.rate),\n          setupFee: parseFloat(formData.setupFee) || 0,\n        }),\n      });\n\n      if (!response.ok) {\n        if (response.status === 404) {\n          throw new Error(`API endpoint not implemented yet. Please implement ${method} ${url} to manage individual rates.`);\n        }\n        \n        const errorData = await response.json().catch(() => ({ error: 'Unknown error' }));\n        throw new Error(errorData.error || `Failed to ${editingRate ? 'update' : 'create'} number rate`);\n      }\n\n      toast.success(`Number rate ${editingRate ? 'updated' : 'created'} successfully`);\n      setIsFormOpen(false);\n      setEditingRate(null);\n      setFormData({\n        prefix: '',\n        country: '',\n        description: '',\n        rate: '',\n        setupFee: '',\n        type: 'Geographic/Local',\n        effectiveDate: new Date().toISOString().split('T')[0],\n      });\n      fetchRates();\n    } catch (error) {\n      console.error('Error saving number rate:', error);\n      const errorMessage = error instanceof Error ? error.message : 'Failed to save number rate';\n      toast.error(errorMessage);\n    }\n  };\n\n  const handleEdit = (rate: NumberRate) => {\n    setEditingRate(rate);\n    setFormData({\n      prefix: rate.prefix,\n      country: rate.country,\n      description: rate.description,\n      rate: rate.rate.toString(),\n      setupFee: rate.setupFee.toString(),\n      type: rate.type,\n      effectiveDate: rate.effectiveDate,\n    });\n    setIsFormOpen(true);\n  };\n\n  const handleDeleteClick = (rate: NumberRate) => {\n    setRateToDelete(rate);\n    setDeleteDialogOpen(true);\n  };\n\n  const handleDeleteConfirm = async () => {\n    if (!rateToDelete) return;\n    \n    try {\n      const response = await fetch(`/api/rates/numbers/decks/${rateDeckId}/rates/${rateToDelete.id}`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        if (response.status === 404) {\n          throw new Error(`API endpoint not implemented yet. Please implement DELETE /api/rates/numbers/decks/{deckId}/rates/{id} to delete individual rates.`);\n        }\n        \n        const errorData = await response.json().catch(() => ({ error: 'Unknown error' }));\n        throw new Error(errorData.error || 'Failed to delete number rate');\n      }\n\n      toast.success('Number rate deleted successfully');\n      setDeleteDialogOpen(false);\n      setRateToDelete(null);\n      fetchRates();\n    } catch (error) {\n      console.error('Error deleting number rate:', error);\n      const errorMessage = error instanceof Error ? error.message : 'Failed to delete number rate';\n      toast.error(errorMessage);\n    }\n  };\n\n  useEffect(() => {\n    fetchRateDeckInfo();\n    fetchCountries();\n    fetchRates(1);\n  }, [rateDeckId]);\n\n  // Calculate pagination\n  const totalPages = Math.ceil(totalRecords / recordsPerPage);\n  const startRecord = totalRecords === 0 ? 0 : (currentPage - 1) * recordsPerPage + 1;\n  const endRecord = Math.min(currentPage * recordsPerPage, totalRecords);\n\n  if (error && !rateData) {\n    return (\n      <Card>\n        <CardContent className=\"flex flex-col items-center justify-center py-12\">\n          <div className=\"text-center\">\n            <h3 className=\"text-lg font-semibold text-destructive mb-2\">Error Loading Rates</h3>\n            <p className=\"text-muted-foreground mb-4\">{error}</p>\n            <Button onClick={() => fetchRates()} variant=\"outline\">\n              <RefreshCw className=\"h-4 w-4 mr-2\" />\n              Try Again\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Back Navigation */}\n      <div className=\"flex items-center gap-4\">\n        <Link href=\"/rates?tab=numbers\">\n          <Button variant=\"outline\" size=\"sm\" className=\"gap-2\">\n            <ArrowLeft className=\"h-4 w-4\" />\n            Back to Rate Decks\n          </Button>\n        </Link>\n        <div>\n          <h2 className=\"text-xl font-semibold\">\n            {rateDeckInfo ? rateDeckInfo.name : `Rate Deck ${rateDeckId}`}\n          </h2>\n          <p className=\"text-sm text-muted-foreground\">\n            {rateDeckInfo ? rateDeckInfo.description : 'Manage individual number rates within this rate deck'}\n          </p>\n        </div>\n      </div>\n\n      {/* Statistics Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Total Rates</p>\n                <p className=\"text-2xl font-bold\">{stats.total.toLocaleString()}</p>\n              </div>\n              <Hash className=\"h-8 w-8 text-muted-foreground\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Average Rate</p>\n                <p className=\"text-2xl font-bold\">{formatCurrency(stats.avgRate, rateDeckInfo?.currency)}</p>\n              </div>\n              <Phone className=\"h-8 w-8 text-muted-foreground\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Countries</p>\n                <p className=\"text-2xl font-bold\">{stats.uniqueCountries}</p>\n              </div>\n              <Globe className=\"h-8 w-8 text-muted-foreground\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Rate Range</p>\n                <p className=\"text-lg font-bold\">\n                  {formatCurrency(stats.minRate, rateDeckInfo?.currency)} - {formatCurrency(stats.maxRate, rateDeckInfo?.currency)}\n                </p>\n              </div>\n              <div className=\"text-right\">\n                <div className=\"text-xs text-muted-foreground\">Min - Max</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Header with Actions */}\n      <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-4\">\n        <div>\n          <div className=\"flex items-center gap-2 mb-1\">\n            <div \n              className=\"inline-flex items-center gap-2 px-3 py-1.5 rounded-full text-sm font-medium\"\n              style={{ backgroundColor: `${colors.primary}20`, color: colors.primary }}\n            >\n              <Hash className=\"h-4 w-4\" />\n              Number Rates\n            </div>\n          </div>\n          <p className=\"text-muted-foreground\">\n            {stats.total} rate{stats.total !== 1 ? 's' : ''} in this deck\n            {lastRefresh && (\n              <span className=\"ml-2\">\n                • Last updated {format(lastRefresh, 'HH:mm:ss')}\n              </span>\n            )}\n          </p>\n        </div>\n        \n        <div className=\"flex items-center gap-2\">\n          <Button \n            variant=\"outline\" \n            size=\"sm\"\n            onClick={() => setShowFilters(!showFilters)}\n            className=\"gap-2\"\n          >\n            <Filter className=\"h-4 w-4\" />\n            Filters\n          </Button>\n          <Button \n            variant=\"outline\" \n            size=\"sm\"\n            onClick={() => fetchRates()}\n            disabled={isLoading}\n            className=\"gap-2\"\n          >\n            <RefreshCw className={`h-4 w-4 ${isLoading ? 'animate-spin' : ''}`} />\n            Refresh\n          </Button>\n          <Button \n            variant=\"outline\" \n            size=\"sm\"\n            onClick={exportToCsv}\n            disabled={!rateData?.rates || rateData.rates.length === 0}\n            className=\"gap-2\"\n          >\n            <Download className=\"h-4 w-4\" />\n            Export CSV\n          </Button>\n          {isAdmin && (\n            <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n              <DialogTrigger asChild>\n                <Button \n                  size=\"sm\"\n                  className=\"gap-2\"\n                  style={{ backgroundColor: colors.primary }}\n                >\n                  <Plus className=\"h-4 w-4\" />\n                  Add Rate\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"sm:max-w-[500px]\">\n                <form onSubmit={handleFormSubmit}>\n                  <DialogHeader>\n                    <DialogTitle>\n                      {editingRate ? 'Edit Number Rate' : 'Add Number Rate'}\n                    </DialogTitle>\n                    <DialogDescription>\n                      {editingRate ? 'Update the rate details.' : 'Add a new number rate to this deck.'}\n                    </DialogDescription>\n                  </DialogHeader>\n                  \n                  <div className=\"grid gap-4 py-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"prefix\">Prefix *</Label>\n                        <Input\n                          id=\"prefix\"\n                          value={formData.prefix}\n                          onChange={(e) => setFormData(prev => ({ ...prev, prefix: e.target.value }))}\n                          placeholder=\"e.g., 1, 44, 49\"\n                          required\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"country\">Country *</Label>\n                        <Select\n                          value={formData.country}\n                          onValueChange={(value) => setFormData(prev => ({ ...prev, country: value }))}\n                        >\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select a country\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {countries.map((country) => (\n                              <SelectItem key={country._id} value={country.name}>\n                                {country.name} (+{country.phoneCode})\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"description\">Description</Label>\n                      <Input\n                        id=\"description\"\n                        value={formData.description}\n                        onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n                        placeholder=\"e.g., Mobile networks\"\n                      />\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"rate\">Rate ({rateDeckInfo?.currency || 'USD'}) *</Label>\n                        <Input\n                          id=\"rate\"\n                          type=\"number\"\n                          step=\"0.0001\"\n                          min=\"0\"\n                          value={formData.rate}\n                          onChange={(e) => setFormData(prev => ({ ...prev, rate: e.target.value }))}\n                          placeholder=\"0.0150\"\n                          required\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"setupFee\">Setup Fee ({rateDeckInfo?.currency || 'USD'})</Label>\n                        <Input\n                          id=\"setupFee\"\n                          type=\"number\"\n                          step=\"0.0001\"\n                          min=\"0\"\n                          value={formData.setupFee}\n                          onChange={(e) => setFormData(prev => ({ ...prev, setupFee: e.target.value }))}\n                          placeholder=\"0.0000\"\n                        />\n                      </div>\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"type\">Type *</Label>\n                      <Select\n                        value={formData.type}\n                        onValueChange={(value) => setFormData(prev => ({ ...prev, type: value as NumberRate['type'] }))}\n                      >\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"Geographic/Local\">Geographic/Local</SelectItem>\n                          <SelectItem value=\"Mobile\">Mobile</SelectItem>\n                          <SelectItem value=\"National\">National</SelectItem>\n                          <SelectItem value=\"Toll-free\">Toll-free</SelectItem>\n                          <SelectItem value=\"Shared Cost\">Shared Cost</SelectItem>\n                          <SelectItem value=\"NPV (Verified Numbers)\">NPV (Verified Numbers)</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"effectiveDate\">Effective Date *</Label>\n                      <Input\n                        id=\"effectiveDate\"\n                        type=\"date\"\n                        value={formData.effectiveDate}\n                        onChange={(e) => setFormData(prev => ({ ...prev, effectiveDate: e.target.value }))}\n                        required\n                      />\n                    </div>\n                  </div>\n                  \n                  <DialogFooter>\n                    <Button type=\"button\" variant=\"outline\" onClick={() => setIsFormOpen(false)}>\n                      Cancel\n                    </Button>\n                    <Button type=\"submit\" style={{ backgroundColor: colors.primary }}>\n                      {editingRate ? 'Update Rate' : 'Add Rate'}\n                    </Button>\n                  </DialogFooter>\n                </form>\n              </DialogContent>\n            </Dialog>\n          )}\n        </div>\n      </div>\n\n      {/* Filters */}\n      {showFilters && (\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-base\">Filters</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              <div className=\"space-y-2\">\n                <Label>Prefix</Label>\n                <Input\n                  value={filters.prefix}\n                  onChange={(e) => handleFilterChange('prefix', e.target.value)}\n                  placeholder=\"Filter by prefix\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label>Country</Label>\n                <Select\n                  value={filters.country || 'all'}\n                  onValueChange={(value) => handleFilterChange('country', value === 'all' ? '' : value)}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"All countries\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All countries</SelectItem>\n                    {countries.map((country) => (\n                      <SelectItem key={country._id} value={country.name}>\n                        {country.name} (+{country.phoneCode})\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"space-y-2\">\n                <Label>Type</Label>\n                <Select\n                  value={filters.type}\n                  onValueChange={(value) => handleFilterChange('type', value)}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Types</SelectItem>\n                    <SelectItem value=\"Geographic/Local\">Geographic/Local</SelectItem>\n                    <SelectItem value=\"Mobile\">Mobile</SelectItem>\n                    <SelectItem value=\"National\">National</SelectItem>\n                    <SelectItem value=\"Toll-free\">Toll-free</SelectItem>\n                    <SelectItem value=\"Shared Cost\">Shared Cost</SelectItem>\n                    <SelectItem value=\"NPV (Verified Numbers)\">NPV (Verified Numbers)</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"space-y-2\">\n                <Label>Min Rate</Label>\n                <Input\n                  type=\"number\"\n                  step=\"0.0001\"\n                  min=\"0\"\n                  value={filters.minRate}\n                  onChange={(e) => handleFilterChange('minRate', e.target.value)}\n                  placeholder=\"0.0000\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label>Max Rate</Label>\n                <Input\n                  type=\"number\"\n                  step=\"0.0001\"\n                  min=\"0\"\n                  value={filters.maxRate}\n                  onChange={(e) => handleFilterChange('maxRate', e.target.value)}\n                  placeholder=\"1.0000\"\n                />\n              </div>\n            </div>\n            \n            <div className=\"flex gap-2 mt-4\">\n              <Button \n                onClick={applyFilters}\n                disabled={isLoading}\n                className=\"gap-2\"\n                style={{ backgroundColor: colors.primary }}\n              >\n                {isLoading ? (\n                  <>\n                    <Loader2 className=\"h-4 w-4 animate-spin\" />\n                    Searching...\n                  </>\n                ) : (\n                  <>\n                    <Search className=\"h-4 w-4\" />\n                    Apply Filters\n                  </>\n                )}\n              </Button>\n              <Button \n                variant=\"outline\"\n                onClick={clearFilters}\n                disabled={isLoading}\n                className=\"gap-2\"\n              >\n                <X className=\"h-4 w-4\" />\n                Clear Filters\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Rates Table */}\n      {isLoading && !rateData ? (\n        <Card>\n          <CardContent className=\"flex items-center justify-center py-12\">\n            <div className=\"flex items-center gap-2\">\n              <Loader2 className=\"h-6 w-6 animate-spin\" />\n              <span>Loading number rates...</span>\n            </div>\n          </CardContent>\n        </Card>\n      ) : !rateData?.rates || rateData.rates.length === 0 ? (\n        <Card>\n          <CardContent className=\"flex flex-col items-center justify-center py-12\">\n            <Hash className=\"h-12 w-12 text-muted-foreground mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">No Rates Found</h3>\n            <p className=\"text-muted-foreground text-center mb-4\">\n              {error ? \n                'The rate management API is not yet implemented. Individual rate management will be available once the backend APIs are created.' :\n                'This rate deck doesn\\'t have any rates yet. Add your first rate to get started.'\n              }\n            </p>\n            {isAdmin && !error && (\n              <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n                <DialogTrigger asChild>\n                  <Button style={{ backgroundColor: colors.primary }}>\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Add First Rate\n                  </Button>\n                </DialogTrigger>\n              </Dialog>\n            )}\n          </CardContent>\n        </Card>\n      ) : (\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-base flex items-center gap-2\">\n                <Hash className=\"h-5 w-5\" style={{ color: colors.primary }} />\n                Number Rates\n              </CardTitle>\n              <div className=\"text-sm text-muted-foreground\">\n                Showing {startRecord}-{endRecord} of {totalRecords} rates\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent className=\"p-0\">\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Prefix</TableHead>\n                    <TableHead>Country</TableHead>\n                    <TableHead>Description</TableHead>\n                    <TableHead>Rate</TableHead>\n                    <TableHead>Setup Fee</TableHead>\n                    <TableHead>Type</TableHead>\n                    <TableHead>Effective Date</TableHead>\n                    {isAdmin && <TableHead>Actions</TableHead>}\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {rateData?.rates.map((rate) => (\n                    <TableRow key={rate.id} className=\"hover:bg-muted/50\">\n                      <TableCell className=\"font-mono\">{rate.prefix}</TableCell>\n                      <TableCell>{rate.country}</TableCell>\n                      <TableCell>{rate.description || '-'}</TableCell>\n                      <TableCell className=\"font-mono\">\n                        {formatCurrency(rate.rate, rateDeckInfo?.currency)}\n                      </TableCell>\n                      <TableCell className=\"font-mono\">\n                        {formatCurrency(rate.setupFee, rateDeckInfo?.currency)}\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {rate.type}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>{format(new Date(rate.effectiveDate), 'MMM dd, yyyy')}</TableCell>\n                      \n                      {isAdmin && (\n                        <TableCell>\n                          <div className=\"flex items-center gap-1\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleEdit(rate)}\n                              className=\"h-8 w-8 p-0\"\n                              title=\"Edit\"\n                            >\n                              <Edit className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleDeleteClick(rate)}\n                              className=\"h-8 w-8 p-0 text-destructive hover:text-destructive\"\n                              title=\"Delete\"\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </TableCell>\n                      )}\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          </CardContent>\n          \n          {/* Pagination */}\n          <CardContent className=\"pt-4\">\n            <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-4\">\n              <div className=\"flex items-center gap-4\">\n                <div className=\"text-sm text-muted-foreground\">\n                  Showing {startRecord}-{endRecord} of {totalRecords} rates\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"text-sm text-muted-foreground\">Rates per page:</span>\n                  <Select\n                    value={recordsPerPage.toString()}\n                    onValueChange={handleLimitChange}\n                  >\n                    <SelectTrigger className=\"w-[100px] h-8\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"25\">25</SelectItem>\n                      <SelectItem value=\"50\">50</SelectItem>\n                      <SelectItem value=\"100\">100</SelectItem>\n                      <SelectItem value=\"200\">200</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center gap-2\">\n                <div className=\"text-sm text-muted-foreground\">\n                  Page {currentPage} of {totalPages}\n                </div>\n                <div className=\"flex items-center gap-1\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => handlePageChange(currentPage - 1)}\n                    disabled={currentPage === 1 || isLoading}\n                    className=\"h-8 w-8 p-0\"\n                  >\n                    <ChevronLeft className=\"h-4 w-4\" />\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => handlePageChange(currentPage + 1)}\n                    disabled={currentPage === totalPages || isLoading}\n                    className=\"h-8 w-8 p-0\"\n                  >\n                    <ChevronRight className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Delete Confirmation Dialog */}\n      <Dialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Delete Number Rate</DialogTitle>\n            <DialogDescription>\n              Are you sure you want to delete the rate for prefix \"{rateToDelete?.prefix}\" ({rateToDelete?.country})?\n              This action cannot be undone.\n            </DialogDescription>\n          </DialogHeader>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setDeleteDialogOpen(false)}>\n              Cancel\n            </Button>\n            <Button variant=\"destructive\" onClick={handleDeleteConfirm}>\n              Delete Rate\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/rates/NumberRates.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/rates/RatesTabs.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useAuth' is defined but never used.","line":10,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useBranding' is defined but never used.","line":11,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":21},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'activeTab' and 'getCurrentTab'. Either include them or remove the dependency array.","line":36,"column":6,"nodeType":"ArrayExpression","endLine":36,"endColumn":31,"suggestions":[{"desc":"Update the dependencies array to be: [activeTab, getCurrentTab]","fix":{"range":[1168,1193],"text":"[activeTab, getCurrentTab]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","line":36,"column":7,"nodeType":"CallExpression","endLine":36,"endColumn":30}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { AccountRates } from './AccountRates';\nimport { NumberRates } from './NumberRates';\nimport { SmsRates } from './SmsRates';\nimport { Phone, Hash, MessageSquare } from 'lucide-react';\nimport { useAuth } from '@/lib/AuthContext';\nimport { useBranding } from '@/hooks/useBranding';\n\nexport function RatesTabs() {\n  const router = useRouter();\n  const searchParams = useSearchParams();\n  \n  // Get current tab from URL or default to 'calls'\n  const getCurrentTab = () => {\n    try {\n      const tabFromUrl = searchParams.get('tab');\n      const validTabs = ['calls', 'numbers', 'sms'];\n      return validTabs.includes(tabFromUrl || '') ? tabFromUrl! : 'calls';\n    } catch {\n      return 'calls';\n    }\n  };\n\n  const [activeTab, setActiveTab] = useState(() => getCurrentTab());\n\n  // Sync state with URL changes (browser back/forward)\n  useEffect(() => {\n    const urlTab = getCurrentTab();\n    if (urlTab !== activeTab) {\n      setActiveTab(urlTab);\n    }\n  }, [searchParams.get('tab')]);\n\n  // Update URL when tab changes\n  const handleTabChange = (newTab: string) => {\n    setActiveTab(newTab);\n    const params = new URLSearchParams(searchParams.toString());\n    params.set('tab', newTab);\n    router.replace(`/rates?${params.toString()}`, { scroll: false });\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Tabs value={activeTab} onValueChange={handleTabChange} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-3 mb-6\">\n          <TabsTrigger \n            value=\"calls\" \n            className=\"flex items-center gap-2 data-[state=active]:bg-primary data-[state=active]:text-primary-foreground\"\n          >\n            <Phone className=\"h-4 w-4\" />\n            Call Rates\n          </TabsTrigger>\n          <TabsTrigger \n            value=\"numbers\" \n            className=\"flex items-center gap-2 data-[state=active]:bg-primary data-[state=active]:text-primary-foreground\"\n          >\n            <Hash className=\"h-4 w-4\" />\n            Number Rates\n          </TabsTrigger>\n          <TabsTrigger \n            value=\"sms\" \n            className=\"flex items-center gap-2 data-[state=active]:bg-primary data-[state=active]:text-primary-foreground\"\n          >\n            <MessageSquare className=\"h-4 w-4\" />\n            SMS Rates\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"calls\" className=\"space-y-6\">\n          <AccountRates />\n        </TabsContent>\n\n        <TabsContent value=\"numbers\" className=\"space-y-6\">\n          <NumberRates />\n        </TabsContent>\n\n        <TabsContent value=\"sms\" className=\"space-y-6\">\n          <SmsRates />\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/rates/SmsRateManagement.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":96,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2009,2012],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2009,2012],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'fetchRateDeckInfo' and 'fetchRates'. Either include them or remove the dependency array.","line":400,"column":6,"nodeType":"ArrayExpression","endLine":400,"endColumn":18,"suggestions":[{"desc":"Update the dependencies array to be: [fetchRateDeckInfo, fetchRates, rateDeckId]","fix":{"range":[11060,11072],"text":"[fetchRateDeckInfo, fetchRates, rateDeckId]"}}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":894,"column":67,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[30760,30828],"text":"\n              Are you sure you want to delete the rate for prefix &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[30760,30828],"text":"\n              Are you sure you want to delete the rate for prefix &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[30760,30828],"text":"\n              Are you sure you want to delete the rate for prefix &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[30760,30828],"text":"\n              Are you sure you want to delete the rate for prefix &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":894,"column":90,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[30850,30853],"text":"&quot; ("},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[30850,30853],"text":"&ldquo; ("},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[30850,30853],"text":"&#34; ("},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[30850,30853],"text":"&rdquo; ("},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { \n  Card, \n  CardContent, \n  // CardDescription, // Unused \n  CardHeader, \n  CardTitle \n} from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\n// import { Badge } from '@/components/ui/badge'; // Unused\nimport { \n  Loader2, \n  RefreshCw, \n  Download,\n  MessageSquare,\n  Globe,\n  Search,\n  X,\n  Filter,\n  ChevronLeft,\n  ChevronRight,\n  Plus,\n  Edit,\n  Trash2,\n  ArrowLeft,\n  Phone\n} from 'lucide-react';\nimport { toast } from 'sonner';\nimport { format } from 'date-fns';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useAuth } from '@/lib/AuthContext';\nimport { useBranding } from '@/hooks/useBranding';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog';\n// import { Textarea } from '@/components/ui/textarea'; // Unused\nimport Link from 'next/link';\n\ninterface SmsRate {\n  id: string;\n  prefix: string;\n  country: string;\n  description: string;\n  rate: number;\n  effectiveDate: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface SmsRateData {\n  rates: SmsRate[];\n  total: number;\n}\n\ninterface SmsRateStats {\n  total: number;\n  avgRate: number;\n  minRate: number;\n  maxRate: number;\n  uniqueCountries: number;\n}\n\ninterface SmsRateManagementProps {\n  rateDeckId: string;\n}\n\nexport function SmsRateManagement({ rateDeckId }: SmsRateManagementProps) {\n  const { user } = useAuth();\n  const { colors } = useBranding();\n  // const { company, getGradientStyle, features } = useBranding(); // Unused\n  const [rateData, setRateData] = useState<SmsRateData | null>(null);\n  const [rateDeckInfo, setRateDeckInfo] = useState<any>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [lastRefresh, setLastRefresh] = useState<Date | null>(null);\n  \n  // Pagination state\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalRecords, setTotalRecords] = useState(0);\n  const [recordsPerPage, setRecordsPerPage] = useState(50);\n  \n  // Filter state\n  const [showFilters, setShowFilters] = useState(false);\n  const [filters, setFilters] = useState({\n    prefix: '',\n    country: '',\n    minRate: '',\n    maxRate: '',\n  });\n\n  // Form state for add/edit rate\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const [editingRate, setEditingRate] = useState<SmsRate | null>(null);\n  const [formData, setFormData] = useState({\n    prefix: '',\n    country: '',\n    description: '',\n    rate: '',\n    effectiveDate: new Date().toISOString().split('T')[0],\n  });\n\n  // Delete confirmation state\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [rateToDelete, setRateToDelete] = useState<SmsRate | null>(null);\n\n  const isAdmin = user?.role === 'admin';\n\n  // Calculate rates statistics\n  const calculateStats = (rates: SmsRate[]): SmsRateStats => {\n    const stats: SmsRateStats = {\n      total: rates.length,\n      avgRate: 0,\n      minRate: 0,\n      maxRate: 0,\n      uniqueCountries: 0,\n    };\n\n    if (rates.length === 0) return stats;\n\n    const rateValues = rates.map(r => r.rate).filter(r => r > 0);\n    const countries = new Set(rates.map(r => r.country).filter(c => c));\n\n    if (rateValues.length > 0) {\n      stats.avgRate = rateValues.reduce((sum, rate) => sum + rate, 0) / rateValues.length;\n      stats.minRate = Math.min(...rateValues);\n      stats.maxRate = Math.max(...rateValues);\n    }\n\n    stats.uniqueCountries = countries.size;\n\n    return stats;\n  };\n\n  const stats = rateData ? calculateStats(rateData.rates) : {\n    total: 0,\n    avgRate: 0,\n    minRate: 0,\n    maxRate: 0,\n    uniqueCountries: 0,\n  };\n\n  const fetchRateDeckInfo = async () => {\n    try {\n      const response = await fetch(`/api/rates/sms/decks/${rateDeckId}`);\n      \n      if (!response.ok) {\n        if (response.status === 404) {\n          // Rate deck not found, but don't set this as an error\n          // Just leave rateDeckInfo as null and continue\n          console.warn(`Rate deck ${rateDeckId} not found`);\n          return;\n        }\n        throw new Error('Failed to fetch rate deck information');\n      }\n\n      const data = await response.json();\n      setRateDeckInfo(data);\n    } catch (error) {\n      console.error('Error fetching rate deck info:', error);\n      // Don't set this as a blocking error, just log it\n      console.warn('Could not fetch rate deck information, continuing without it');\n    }\n  };\n\n  const fetchRates = async (page: number = currentPage) => {\n    if (!rateDeckId) return;\n    \n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      const offset = (page - 1) * recordsPerPage;\n      const queryParams = new URLSearchParams({\n        offset: offset.toString(),\n        limit: recordsPerPage.toString(),\n        ...Object.fromEntries(\n          Object.entries(filters).filter(([, value]) => value && value !== 'all')\n        ),\n      });\n\n      const response = await fetch(`/api/rates/sms/decks/${rateDeckId}/rates?${queryParams}`);\n      \n      if (!response.ok) {\n        if (response.status === 404) {\n          // API doesn't exist yet, show empty state\n          setRateData({ rates: [], total: 0 });\n          setTotalRecords(0);\n          setLastRefresh(new Date());\n          return;\n        }\n        throw new Error('Failed to fetch SMS rates');\n      }\n\n      const data = await response.json();\n      setRateData(data);\n      setTotalRecords(data.total);\n      setCurrentPage(page);\n      setLastRefresh(new Date());\n    } catch (error) {\n      console.error('Error fetching SMS rates:', error);\n      const errorMessage = error instanceof Error ? error.message : 'Failed to fetch SMS rates';\n      setError(errorMessage);\n      toast.error(errorMessage);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleFilterChange = (key: string, value: string) => {\n    setFilters(prev => ({ ...prev, [key]: value }));\n  };\n\n  const applyFilters = () => {\n    setCurrentPage(1);\n    fetchRates(1);\n  };\n\n  const clearFilters = () => {\n    setFilters({\n      prefix: '',\n      country: '',\n      minRate: '',\n      maxRate: '',\n    });\n    setCurrentPage(1);\n    fetchRates(1);\n  };\n\n  const handlePageChange = (page: number) => {\n    fetchRates(page);\n  };\n\n  const handleLimitChange = (newLimit: string) => {\n    setRecordsPerPage(parseInt(newLimit));\n    setCurrentPage(1);\n    fetchRates(1);\n  };\n\n  const formatCurrency = (amount: number, currency: string = 'USD') => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: currency,\n      minimumFractionDigits: 4,\n      maximumFractionDigits: 4,\n    }).format(amount);\n  };\n\n  const exportToCsv = () => {\n    if (!rateData?.rates || rateData.rates.length === 0) {\n      toast.error('No data to export');\n      return;\n    }\n\n    const headers = ['Prefix', 'Country', 'Description', 'Rate', 'Effective Date'];\n    const csvContent = [\n      headers.join(','),\n      ...rateData.rates.map(rate => [\n        rate.prefix,\n        `\"${rate.country}\"`,\n        `\"${rate.description}\"`,\n        rate.rate.toFixed(4),\n        rate.effectiveDate,\n      ].join(','))\n    ].join('\\n');\n\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n    const link = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n    link.setAttribute('href', url);\n    link.setAttribute('download', `sms-rates-${rateDeckId}-${format(new Date(), 'yyyy-MM-dd')}.csv`);\n    link.style.visibility = 'hidden';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  const handleFormSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    try {\n      const url = editingRate \n        ? `/api/rates/sms/decks/${rateDeckId}/rates/${editingRate.id}`\n        : `/api/rates/sms/decks/${rateDeckId}/rates`;\n      \n      const method = editingRate ? 'PUT' : 'POST';\n      \n      const response = await fetch(url, {\n        method,\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          ...formData,\n          rate: parseFloat(formData.rate),\n        }),\n      });\n\n      if (!response.ok) {\n        if (response.status === 404) {\n          throw new Error(`API endpoint not implemented yet. Please implement ${method} ${url} to manage individual SMS rates.`);\n        }\n        \n        const errorData = await response.json().catch(() => ({ error: 'Unknown error' }));\n        throw new Error(errorData.error || `Failed to ${editingRate ? 'update' : 'create'} SMS rate`);\n      }\n\n      toast.success(`SMS rate ${editingRate ? 'updated' : 'created'} successfully`);\n      setIsFormOpen(false);\n      setEditingRate(null);\n      setFormData({\n        prefix: '',\n        country: '',\n        description: '',\n        rate: '',\n        effectiveDate: new Date().toISOString().split('T')[0],\n      });\n      fetchRates();\n    } catch (error) {\n      console.error('Error saving SMS rate:', error);\n      const errorMessage = error instanceof Error ? error.message : 'Failed to save SMS rate';\n      toast.error(errorMessage);\n    }\n  };\n\n  const handleEdit = (rate: SmsRate) => {\n    setEditingRate(rate);\n    setFormData({\n      prefix: rate.prefix,\n      country: rate.country,\n      description: rate.description,\n      rate: rate.rate.toString(),\n      effectiveDate: rate.effectiveDate,\n    });\n    setIsFormOpen(true);\n  };\n\n  const handleDeleteClick = (rate: SmsRate) => {\n    setRateToDelete(rate);\n    setDeleteDialogOpen(true);\n  };\n\n  const handleDeleteConfirm = async () => {\n    if (!rateToDelete) return;\n    \n    try {\n      const response = await fetch(`/api/rates/sms/decks/${rateDeckId}/rates/${rateToDelete.id}`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        if (response.status === 404) {\n          throw new Error(`API endpoint not implemented yet. Please implement DELETE /api/rates/sms/decks/{deckId}/rates/{id} to delete individual SMS rates.`);\n        }\n        \n        const errorData = await response.json().catch(() => ({ error: 'Unknown error' }));\n        throw new Error(errorData.error || 'Failed to delete SMS rate');\n      }\n\n      toast.success('SMS rate deleted successfully');\n      setDeleteDialogOpen(false);\n      setRateToDelete(null);\n      fetchRates();\n    } catch (error) {\n      console.error('Error deleting SMS rate:', error);\n      const errorMessage = error instanceof Error ? error.message : 'Failed to delete SMS rate';\n      toast.error(errorMessage);\n    }\n  };\n\n  useEffect(() => {\n    fetchRateDeckInfo();\n    fetchRates(1);\n  }, [rateDeckId]);\n\n  // Calculate pagination\n  const totalPages = Math.ceil(totalRecords / recordsPerPage);\n  const startRecord = totalRecords === 0 ? 0 : (currentPage - 1) * recordsPerPage + 1;\n  const endRecord = Math.min(currentPage * recordsPerPage, totalRecords);\n\n  if (error && !rateData) {\n    return (\n      <Card>\n        <CardContent className=\"flex flex-col items-center justify-center py-12\">\n          <div className=\"text-center\">\n            <h3 className=\"text-lg font-semibold text-destructive mb-2\">Error Loading Rates</h3>\n            <p className=\"text-muted-foreground mb-4\">{error}</p>\n            <Button onClick={() => fetchRates()} variant=\"outline\">\n              <RefreshCw className=\"h-4 w-4 mr-2\" />\n              Try Again\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Back Navigation */}\n      <div className=\"flex items-center gap-4\">\n        <Link href=\"/rates?tab=sms\">\n          <Button variant=\"outline\" size=\"sm\" className=\"gap-2\">\n            <ArrowLeft className=\"h-4 w-4\" />\n            Back to Rate Decks\n          </Button>\n        </Link>\n        <div>\n          <h2 className=\"text-xl font-semibold\">\n            {rateDeckInfo ? rateDeckInfo.name : `SMS Rate Deck ${rateDeckId}`}\n          </h2>\n          <p className=\"text-sm text-muted-foreground\">\n            {rateDeckInfo ? rateDeckInfo.description : 'Manage individual SMS rates within this rate deck'}\n          </p>\n        </div>\n      </div>\n\n      {/* Statistics Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Total Rates</p>\n                <p className=\"text-2xl font-bold\">{stats.total.toLocaleString()}</p>\n              </div>\n              <MessageSquare className=\"h-8 w-8 text-muted-foreground\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Average Rate</p>\n                <p className=\"text-2xl font-bold\">{formatCurrency(stats.avgRate, rateDeckInfo?.currency)}</p>\n              </div>\n              <Phone className=\"h-8 w-8 text-muted-foreground\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Countries</p>\n                <p className=\"text-2xl font-bold\">{stats.uniqueCountries}</p>\n              </div>\n              <Globe className=\"h-8 w-8 text-muted-foreground\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Rate Range</p>\n                <p className=\"text-lg font-bold\">\n                  {formatCurrency(stats.minRate, rateDeckInfo?.currency)} - {formatCurrency(stats.maxRate, rateDeckInfo?.currency)}\n                </p>\n              </div>\n              <div className=\"text-right\">\n                <div className=\"text-xs text-muted-foreground\">Min - Max</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Header with Actions */}\n      <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-4\">\n        <div>\n          <div className=\"flex items-center gap-2 mb-1\">\n            <div \n              className=\"inline-flex items-center gap-2 px-3 py-1.5 rounded-full text-sm font-medium\"\n              style={{ backgroundColor: `${colors.primary}20`, color: colors.primary }}\n            >\n              <MessageSquare className=\"h-4 w-4\" />\n              SMS Rates\n            </div>\n          </div>\n          <p className=\"text-muted-foreground\">\n            {stats.total} rate{stats.total !== 1 ? 's' : ''} in this deck\n            {lastRefresh && (\n              <span className=\"ml-2\">\n                • Last updated {format(lastRefresh, 'HH:mm:ss')}\n              </span>\n            )}\n          </p>\n        </div>\n        \n        <div className=\"flex items-center gap-2\">\n          <Button \n            variant=\"outline\" \n            size=\"sm\"\n            onClick={() => setShowFilters(!showFilters)}\n            className=\"gap-2\"\n          >\n            <Filter className=\"h-4 w-4\" />\n            Filters\n          </Button>\n          <Button \n            variant=\"outline\" \n            size=\"sm\"\n            onClick={() => fetchRates()}\n            disabled={isLoading}\n            className=\"gap-2\"\n          >\n            <RefreshCw className={`h-4 w-4 ${isLoading ? 'animate-spin' : ''}`} />\n            Refresh\n          </Button>\n          <Button \n            variant=\"outline\" \n            size=\"sm\"\n            onClick={exportToCsv}\n            disabled={!rateData?.rates || rateData.rates.length === 0}\n            className=\"gap-2\"\n          >\n            <Download className=\"h-4 w-4\" />\n            Export CSV\n          </Button>\n          {isAdmin && (\n            <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n              <DialogTrigger asChild>\n                <Button \n                  size=\"sm\"\n                  className=\"gap-2\"\n                  style={{ backgroundColor: colors.primary }}\n                >\n                  <Plus className=\"h-4 w-4\" />\n                  Add Rate\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"sm:max-w-[500px]\">\n                <form onSubmit={handleFormSubmit}>\n                  <DialogHeader>\n                    <DialogTitle>\n                      {editingRate ? 'Edit SMS Rate' : 'Add SMS Rate'}\n                    </DialogTitle>\n                    <DialogDescription>\n                      {editingRate ? 'Update the rate details.' : 'Add a new SMS rate to this deck.'}\n                    </DialogDescription>\n                  </DialogHeader>\n                  \n                  <div className=\"grid gap-4 py-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"prefix\">Prefix *</Label>\n                        <Input\n                          id=\"prefix\"\n                          value={formData.prefix}\n                          onChange={(e) => setFormData(prev => ({ ...prev, prefix: e.target.value }))}\n                          placeholder=\"e.g., 1, 44, 49\"\n                          required\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"country\">Country *</Label>\n                        <Input\n                          id=\"country\"\n                          value={formData.country}\n                          onChange={(e) => setFormData(prev => ({ ...prev, country: e.target.value }))}\n                          placeholder=\"e.g., United States\"\n                          required\n                        />\n                      </div>\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"description\">Description</Label>\n                      <Input\n                        id=\"description\"\n                        value={formData.description}\n                        onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n                        placeholder=\"e.g., Mobile networks\"\n                      />\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"rate\">Rate ({rateDeckInfo?.currency || 'USD'}) *</Label>\n                        <Input\n                          id=\"rate\"\n                          type=\"number\"\n                          step=\"0.0001\"\n                          min=\"0\"\n                          value={formData.rate}\n                          onChange={(e) => setFormData(prev => ({ ...prev, rate: e.target.value }))}\n                          placeholder=\"0.0150\"\n                          required\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"effectiveDate\">Effective Date *</Label>\n                        <Input\n                          id=\"effectiveDate\"\n                          type=\"date\"\n                          value={formData.effectiveDate}\n                          onChange={(e) => setFormData(prev => ({ ...prev, effectiveDate: e.target.value }))}\n                          required\n                        />\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <DialogFooter>\n                    <Button type=\"button\" variant=\"outline\" onClick={() => setIsFormOpen(false)}>\n                      Cancel\n                    </Button>\n                    <Button type=\"submit\" style={{ backgroundColor: colors.primary }}>\n                      {editingRate ? 'Update Rate' : 'Add Rate'}\n                    </Button>\n                  </DialogFooter>\n                </form>\n              </DialogContent>\n            </Dialog>\n          )}\n        </div>\n      </div>\n\n      {/* Filters */}\n      {showFilters && (\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-base\">Filters</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              <div className=\"space-y-2\">\n                <Label>Prefix</Label>\n                <Input\n                  value={filters.prefix}\n                  onChange={(e) => handleFilterChange('prefix', e.target.value)}\n                  placeholder=\"Filter by prefix\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label>Country</Label>\n                <Input\n                  value={filters.country}\n                  onChange={(e) => handleFilterChange('country', e.target.value)}\n                  placeholder=\"Filter by country\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label>Min Rate</Label>\n                <Input\n                  type=\"number\"\n                  step=\"0.0001\"\n                  min=\"0\"\n                  value={filters.minRate}\n                  onChange={(e) => handleFilterChange('minRate', e.target.value)}\n                  placeholder=\"0.0000\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label>Max Rate</Label>\n                <Input\n                  type=\"number\"\n                  step=\"0.0001\"\n                  min=\"0\"\n                  value={filters.maxRate}\n                  onChange={(e) => handleFilterChange('maxRate', e.target.value)}\n                  placeholder=\"1.0000\"\n                />\n              </div>\n            </div>\n            \n            <div className=\"flex gap-2 mt-4\">\n              <Button \n                onClick={applyFilters}\n                disabled={isLoading}\n                className=\"gap-2\"\n                style={{ backgroundColor: colors.primary }}\n              >\n                {isLoading ? (\n                  <>\n                    <Loader2 className=\"h-4 w-4 animate-spin\" />\n                    Searching...\n                  </>\n                ) : (\n                  <>\n                    <Search className=\"h-4 w-4\" />\n                    Apply Filters\n                  </>\n                )}\n              </Button>\n              <Button \n                variant=\"outline\"\n                onClick={clearFilters}\n                disabled={isLoading}\n                className=\"gap-2\"\n              >\n                <X className=\"h-4 w-4\" />\n                Clear Filters\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Rates Table */}\n      {isLoading && !rateData ? (\n        <Card>\n          <CardContent className=\"flex items-center justify-center py-12\">\n            <div className=\"flex items-center gap-2\">\n              <Loader2 className=\"h-6 w-6 animate-spin\" />\n              <span>Loading SMS rates...</span>\n            </div>\n          </CardContent>\n        </Card>\n      ) : !rateData?.rates || rateData.rates.length === 0 ? (\n        <Card>\n          <CardContent className=\"flex flex-col items-center justify-center py-12\">\n            <MessageSquare className=\"h-12 w-12 text-muted-foreground mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">No Rates Found</h3>\n            <p className=\"text-muted-foreground text-center mb-4\">\n              {error ? \n                'The rate management API is not yet implemented. Individual rate management will be available once the backend APIs are created.' :\n                'This rate deck doesn\\'t have any rates yet. Add your first rate to get started.'\n              }\n            </p>\n            {isAdmin && !error && (\n              <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n                <DialogTrigger asChild>\n                  <Button style={{ backgroundColor: colors.primary }}>\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Add First Rate\n                  </Button>\n                </DialogTrigger>\n              </Dialog>\n            )}\n          </CardContent>\n        </Card>\n      ) : (\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-base flex items-center gap-2\">\n                <MessageSquare className=\"h-5 w-5\" style={{ color: colors.primary }} />\n                SMS Rates\n              </CardTitle>\n              <div className=\"text-sm text-muted-foreground\">\n                Showing {startRecord}-{endRecord} of {totalRecords} rates\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent className=\"p-0\">\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Prefix</TableHead>\n                    <TableHead>Country</TableHead>\n                    <TableHead>Description</TableHead>\n                    <TableHead>Rate</TableHead>\n                    <TableHead>Effective Date</TableHead>\n                    {isAdmin && <TableHead>Actions</TableHead>}\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {rateData?.rates.map((rate) => (\n                    <TableRow key={rate.id} className=\"hover:bg-muted/50\">\n                      <TableCell className=\"font-mono\">{rate.prefix}</TableCell>\n                      <TableCell>{rate.country}</TableCell>\n                      <TableCell>{rate.description || '-'}</TableCell>\n                      <TableCell className=\"font-mono\">\n                        {formatCurrency(rate.rate, rateDeckInfo?.currency)}\n                      </TableCell>\n                      <TableCell>{format(new Date(rate.effectiveDate), 'MMM dd, yyyy')}</TableCell>\n                      \n                      {isAdmin && (\n                        <TableCell>\n                          <div className=\"flex items-center gap-1\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleEdit(rate)}\n                              className=\"h-8 w-8 p-0\"\n                              title=\"Edit\"\n                            >\n                              <Edit className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleDeleteClick(rate)}\n                              className=\"h-8 w-8 p-0 text-destructive hover:text-destructive\"\n                              title=\"Delete\"\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </TableCell>\n                      )}\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          </CardContent>\n          \n          {/* Pagination */}\n          <CardContent className=\"pt-4\">\n            <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-4\">\n              <div className=\"flex items-center gap-4\">\n                <div className=\"text-sm text-muted-foreground\">\n                  Showing {startRecord}-{endRecord} of {totalRecords} rates\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"text-sm text-muted-foreground\">Rates per page:</span>\n                  <Select\n                    value={recordsPerPage.toString()}\n                    onValueChange={handleLimitChange}\n                  >\n                    <SelectTrigger className=\"w-[100px] h-8\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"25\">25</SelectItem>\n                      <SelectItem value=\"50\">50</SelectItem>\n                      <SelectItem value=\"100\">100</SelectItem>\n                      <SelectItem value=\"200\">200</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center gap-2\">\n                <div className=\"text-sm text-muted-foreground\">\n                  Page {currentPage} of {totalPages}\n                </div>\n                <div className=\"flex items-center gap-1\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => handlePageChange(currentPage - 1)}\n                    disabled={currentPage === 1 || isLoading}\n                    className=\"h-8 w-8 p-0\"\n                  >\n                    <ChevronLeft className=\"h-4 w-4\" />\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => handlePageChange(currentPage + 1)}\n                    disabled={currentPage === totalPages || isLoading}\n                    className=\"h-8 w-8 p-0\"\n                  >\n                    <ChevronRight className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Delete Confirmation Dialog */}\n      <Dialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Delete SMS Rate</DialogTitle>\n            <DialogDescription>\n              Are you sure you want to delete the rate for prefix \"{rateToDelete?.prefix}\" ({rateToDelete?.country})?\n              This action cannot be undone.\n            </DialogDescription>\n          </DialogHeader>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setDeleteDialogOpen(false)}>\n              Cancel\n            </Button>\n            <Button variant=\"destructive\" onClick={handleDeleteConfirm}>\n              Delete Rate\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/rates/SmsRates.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/rates/UserAssignmentDialog.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'fetchAssignedUsers' and 'fetchAvailableUsers'. Either include them or remove the dependency array.","line":202,"column":6,"nodeType":"ArrayExpression","endLine":202,"endColumn":28,"suggestions":[{"desc":"Update the dependencies array to be: [fetchAssignedUsers, fetchAvailableUsers, open, rateDeck, user]","fix":{"range":[5881,5903],"text":"[fetchAssignedUsers, fetchAvailableUsers, open, rateDeck, user]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":256,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":256,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7662,7665],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7662,7665],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":318,"column":55,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[9733,9789],"text":"\n            Manage user assignments for the rate deck &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[9733,9789],"text":"\n            Manage user assignments for the rate deck &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[9733,9789],"text":"\n            Manage user assignments for the rate deck &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[9733,9789],"text":"\n            Manage user assignments for the rate deck &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":318,"column":71,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[9804,9860],"text":"&quot;. Users assigned to this deck will use these rates for "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[9804,9860],"text":"&ldquo;. Users assigned to this deck will use these rates for "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[9804,9860],"text":"&#34;. Users assigned to this deck will use these rates for "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[9804,9860],"text":"&rdquo;. Users assigned to this deck will use these rates for "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { toast } from 'sonner';\nimport { useAuth } from '@/lib/AuthContext';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Badge } from '@/components/ui/badge';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { \n  Search, \n  Users, \n  UserPlus, \n  UserMinus, \n  Loader2,\n  // CheckCircle, // Unused\n  // XCircle, // Unused\n  // AlertCircle, // Unused\n} from 'lucide-react';\n\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n  role: string;\n  sippyAccountId?: number;\n  createdAt: string;\n}\n\ninterface AssignedUser extends User {\n  userId: string;\n  assignedBy: string;\n  assignedAt: string;\n}\n\ninterface RateDeck {\n  id: string;\n  name: string;\n  description: string;\n}\n\ninterface UserAssignmentDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  rateDeck: RateDeck | null;\n  rateDeckType: 'number' | 'sms';\n  onAssignmentComplete: () => void;\n}\n\nexport function UserAssignmentDialog({\n  open,\n  onOpenChange,\n  rateDeck,\n  rateDeckType,\n  onAssignmentComplete,\n}: UserAssignmentDialogProps) {\n  const { user } = useAuth();\n  const [activeTab, setActiveTab] = useState('assign');\n  const [isLoading, setIsLoading] = useState(false);\n  const [isAssigning, setIsAssigning] = useState(false);\n  \n  // Available users state\n  const [availableUsers, setAvailableUsers] = useState<User[]>([]);\n  const [filteredUsers, setFilteredUsers] = useState<User[]>([]);\n  const [selectedUserIds, setSelectedUserIds] = useState<string[]>([]);\n  const [userSearch, setUserSearch] = useState('');\n  const [userRoleFilter, setUserRoleFilter] = useState('all');\n  // Assigned users state\n  const [assignedUsers, setAssignedUsers] = useState<AssignedUser[]>([]);\n  const [assignedUsersLoading, setAssignedUsersLoading] = useState(false);\n\n  // Fetch available users\n  const fetchAvailableUsers = async () => {\n    try {\n      setIsLoading(true);\n      const params = new URLSearchParams({\n        search: userSearch,\n        role: userRoleFilter,\n        limit: '100',\n      });\n\n      console.log('Fetching available users with params:', params.toString());\n      const response = await fetch(`/api/users?${params}`);\n      console.log('Users API response status:', response.status);\n      \n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Users API Error Response:', errorText);\n        throw new Error(`Failed to fetch users: ${response.status} ${errorText}`);\n      }\n\n      const data = await response.json();\n      console.log('Available users data:', data);\n      setAvailableUsers(data.users || []);\n    } catch (error) {\n      console.error('Error fetching users:', error);\n      toast.error(`Failed to fetch users: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Fetch assigned users\n  const fetchAssignedUsers = async () => {\n    if (!rateDeck) return;\n    \n    try {\n      setAssignedUsersLoading(true);\n      console.log('Fetching assigned users for:', rateDeck.id, rateDeckType);\n      \n      const apiPath = rateDeckType === 'number' ? 'numbers' : 'sms';\n      const response = await fetch(`/api/rates/${apiPath}/decks/${rateDeck.id}/assignments`);\n      console.log('Response status:', response.status);\n      \n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('API Error Response:', errorText);\n        throw new Error(`Failed to fetch assigned users: ${response.status} ${errorText}`);\n      }\n\n      const data = await response.json();\n      console.log('Assigned users data:', data);\n      setAssignedUsers(data.assignedUsers || []);\n    } catch (error) {\n      console.error('Error fetching assigned users:', error);\n      toast.error(`Failed to fetch assigned users: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    } finally {\n      setAssignedUsersLoading(false);\n    }\n  };\n\n  // Filter users based on search and role\n  useEffect(() => {\n    let filtered = availableUsers;\n\n    if (userSearch) {\n      filtered = filtered.filter(user =>\n        user.name.toLowerCase().includes(userSearch.toLowerCase()) ||\n        user.email.toLowerCase().includes(userSearch.toLowerCase())\n      );\n    }\n\n    if (userRoleFilter !== 'all') {\n      filtered = filtered.filter(user => user.role === userRoleFilter);\n    }\n\n    // Exclude already assigned users to this rate deck\n    const assignedUserIds = assignedUsers.map(u => u.userId);\n    filtered = filtered.filter(user => !assignedUserIds.includes(user.id));\n\n    setFilteredUsers(filtered);\n  }, [availableUsers, userSearch, userRoleFilter, assignedUsers]);\n\n  // Fetch data when dialog opens\n  useEffect(() => {\n    if (open && rateDeck) {\n      console.log('Dialog opened with rate deck:', rateDeck);\n      console.log('Current user:', user);\n      \n      if (!user) {\n        toast.error('You must be logged in to assign users');\n        return;\n      }\n      \n      if (user.role !== 'admin') {\n        toast.error('You must be an admin to assign users');\n        return;\n      }\n      \n      fetchAvailableUsers();\n      fetchAssignedUsers();\n      setSelectedUserIds([]);\n      setUserSearch('');\n      setUserRoleFilter('all');\n      setActiveTab('assign');\n    }\n  }, [open, rateDeck, user]);\n\n  // Handle user selection\n  const handleUserSelect = (userId: string, checked: boolean) => {\n    if (checked) {\n      setSelectedUserIds(prev => [...prev, userId]);\n    } else {\n      setSelectedUserIds(prev => prev.filter(id => id !== userId));\n    }\n  };\n\n  const handleSelectAll = (checked: boolean) => {\n    if (checked) {\n      setSelectedUserIds(filteredUsers.map(user => user.id));\n    } else {\n      setSelectedUserIds([]);\n    }\n  };\n\n  // Assign users\n  const handleAssignUsers = async () => {\n    if (!rateDeck || selectedUserIds.length === 0) return;\n\n    try {\n      setIsAssigning(true);\n      const apiPath = rateDeckType === 'number' ? 'numbers' : 'sms';\n      const response = await fetch(`/api/rates/${apiPath}/decks/${rateDeck.id}/assignments`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ userIds: selectedUserIds }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({ error: 'Unknown error' }));\n        throw new Error(errorData.error || 'Failed to assign users');\n      }\n\n      const result = await response.json();\n      \n      // Show detailed feedback based on results\n      if (result.results) {\n        const { assigned, alreadyAssigned, errors } = result.results;\n        \n        if (assigned.length > 0) {\n          toast.success(`Successfully assigned ${assigned.length} user${assigned.length !== 1 ? 's' : ''}`);\n        }\n        \n        if (alreadyAssigned.length > 0) {\n          toast.info(`${alreadyAssigned.length} user${alreadyAssigned.length !== 1 ? 's were' : ' was'} already assigned`);\n        }\n        \n        if (errors.length > 0) {\n          errors.forEach((error: any) => {\n            toast.error(`${error.name || error.email}: ${error.error}`, {\n              duration: 6000, // Longer duration for error messages\n            });\n          });\n        }\n      } else {\n        toast.success(result.message);\n      }\n\n      // Refresh data\n      setSelectedUserIds([]);\n      await Promise.all([fetchAvailableUsers(), fetchAssignedUsers()]);\n      setActiveTab('assigned');\n      onAssignmentComplete();\n    } catch (error) {\n      console.error('Error assigning users:', error);\n      const errorMessage = error instanceof Error ? error.message : 'Failed to assign users';\n      toast.error(errorMessage);\n    } finally {\n      setIsAssigning(false);\n    }\n  };\n\n  // Remove user assignment\n  const handleRemoveUser = async (userId: string) => {\n    if (!rateDeck) return;\n\n    try {\n      const apiPath = rateDeckType === 'number' ? 'numbers' : 'sms';\n      const response = await fetch(`/api/rates/${apiPath}/decks/${rateDeck.id}/assignments/${userId}`, {\n        method: 'DELETE',\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({ error: 'Unknown error' }));\n        throw new Error(errorData.error || 'Failed to remove user assignment');\n      }\n\n      toast.success('User assignment removed successfully');\n      \n      // Refresh data\n      await Promise.all([fetchAvailableUsers(), fetchAssignedUsers()]);\n      onAssignmentComplete();\n    } catch (error) {\n      console.error('Error removing user assignment:', error);\n      const errorMessage = error instanceof Error ? error.message : 'Failed to remove user assignment';\n      toast.error(errorMessage);\n    }\n  };\n\n  if (!rateDeck) return null;\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[800px] max-h-[80vh] overflow-hidden flex flex-col\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Users className=\"h-5 w-5\" />\n            Assign Users to Rate Deck\n          </DialogTitle>\n          <DialogDescription>\n            Manage user assignments for the rate deck \"{rateDeck.name}\". Users assigned to this deck will use these rates for {rateDeckType} services.\n            <br />\n            <span className=\"text-amber-600 dark:text-amber-400 font-medium\">\n              Note: Each user can only be assigned to one {rateDeckType} rate deck at a time.\n            </span>\n          </DialogDescription>\n        </DialogHeader>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"flex-1 flex flex-col overflow-hidden\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"assign\" className=\"flex items-center gap-2\">\n              <UserPlus className=\"h-4 w-4\" />\n              Assign Users\n            </TabsTrigger>\n            <TabsTrigger value=\"assigned\" className=\"flex items-center gap-2\">\n              <Users className=\"h-4 w-4\" />\n              Assigned Users ({assignedUsers.length})\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"assign\" className=\"flex-1 flex flex-col overflow-hidden space-y-4\">\n            {/* Search and Filters */}\n            <div className=\"flex gap-4\">\n              <div className=\"flex-1\">\n                <Label htmlFor=\"user-search\">Search Users</Label>\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    id=\"user-search\"\n                    placeholder=\"Search by name or email...\"\n                    value={userSearch}\n                    onChange={(e) => setUserSearch(e.target.value)}\n                    className=\"pl-10\"\n                  />\n                </div>\n              </div>\n              <div className=\"w-40\">\n                <Label htmlFor=\"role-filter\">Role</Label>\n                <Select value={userRoleFilter} onValueChange={setUserRoleFilter}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Roles</SelectItem>\n                    <SelectItem value=\"client\">Client</SelectItem>\n                    <SelectItem value=\"admin\">Admin</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            {/* Users Table */}\n            <div className=\"flex-1 overflow-auto border rounded-lg\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead className=\"w-12\">\n                      <Checkbox\n                        checked={filteredUsers.length > 0 && selectedUserIds.length === filteredUsers.length}\n                        onCheckedChange={handleSelectAll}\n                        disabled={filteredUsers.length === 0}\n                      />\n                    </TableHead>\n                    <TableHead>Name</TableHead>\n                    <TableHead>Email</TableHead>\n                    <TableHead>Role</TableHead>\n                    <TableHead>Sippy Account</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {isLoading ? (\n                    <TableRow>\n                      <TableCell colSpan={5} className=\"text-center py-8\">\n                        <div className=\"flex items-center justify-center gap-2\">\n                          <Loader2 className=\"h-4 w-4 animate-spin\" />\n                          Loading users...\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ) : filteredUsers.length === 0 ? (\n                    <TableRow>\n                      <TableCell colSpan={5} className=\"text-center py-8 text-muted-foreground\">\n                        {userSearch || userRoleFilter !== 'all' \n                          ? 'No users found matching your criteria'\n                          : 'No available users to assign'\n                        }\n                      </TableCell>\n                    </TableRow>\n                  ) : (\n                    filteredUsers.map((user) => (\n                      <TableRow key={user.id}>\n                        <TableCell>\n                          <Checkbox\n                            checked={selectedUserIds.includes(user.id)}\n                            onCheckedChange={(checked) => handleUserSelect(user.id, checked as boolean)}\n                          />\n                        </TableCell>\n                        <TableCell className=\"font-medium\">{user.name}</TableCell>\n                        <TableCell>{user.email}</TableCell>\n                        <TableCell>\n                          <Badge variant={user.role === 'admin' ? 'default' : 'secondary'}>\n                            {user.role}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          {user.sippyAccountId ? `#${user.sippyAccountId}` : '-'}\n                        </TableCell>\n                      </TableRow>\n                    ))\n                  )}\n                </TableBody>\n              </Table>\n            </div>\n\n            {/* Assignment Actions */}\n            <div className=\"flex items-center justify-between pt-4 border-t\">\n              <div className=\"text-sm text-muted-foreground\">\n                {selectedUserIds.length} user{selectedUserIds.length !== 1 ? 's' : ''} selected\n              </div>\n              <Button\n                onClick={handleAssignUsers}\n                disabled={selectedUserIds.length === 0 || isAssigning}\n                className=\"gap-2\"\n              >\n                {isAssigning ? (\n                  <Loader2 className=\"h-4 w-4 animate-spin\" />\n                ) : (\n                  <UserPlus className=\"h-4 w-4\" />\n                )}\n                Assign Selected Users\n              </Button>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"assigned\" className=\"flex-1 flex flex-col overflow-hidden space-y-4\">\n            <div className=\"flex-1 overflow-auto border rounded-lg\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Name</TableHead>\n                    <TableHead>Email</TableHead>\n                    <TableHead>Role</TableHead>\n                    <TableHead>Assigned By</TableHead>\n                    <TableHead>Assigned At</TableHead>\n                    <TableHead className=\"w-12\"></TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {assignedUsersLoading ? (\n                    <TableRow>\n                      <TableCell colSpan={6} className=\"text-center py-8\">\n                        <div className=\"flex items-center justify-center gap-2\">\n                          <Loader2 className=\"h-4 w-4 animate-spin\" />\n                          Loading assigned users...\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ) : assignedUsers.length === 0 ? (\n                    <TableRow>\n                      <TableCell colSpan={6} className=\"text-center py-8 text-muted-foreground\">\n                        No users assigned to this rate deck\n                      </TableCell>\n                    </TableRow>\n                  ) : (\n                    assignedUsers.map((user) => (\n                      <TableRow key={user.id}>\n                        <TableCell className=\"font-medium\">{user.name}</TableCell>\n                        <TableCell>{user.email}</TableCell>\n                        <TableCell>\n                          <Badge variant={user.role === 'admin' ? 'default' : 'secondary'}>\n                            {user.role}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>{user.assignedBy}</TableCell>\n                        <TableCell>\n                          {new Date(user.assignedAt).toLocaleDateString()}\n                        </TableCell>\n                        <TableCell>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleRemoveUser(user.userId)}\n                            className=\"h-8 w-8 p-0 text-destructive hover:text-destructive\"\n                            title=\"Remove Assignment\"\n                          >\n                            <UserMinus className=\"h-4 w-4\" />\n                          </Button>\n                        </TableCell>\n                      </TableRow>\n                    ))\n                  )}\n                </TableBody>\n              </Table>\n            </div>\n          </TabsContent>\n        </Tabs>\n\n        <DialogFooter>\n          <Button variant=\"outline\" onClick={() => onOpenChange(false)}>\n            Close\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/rates/UserNumberRates.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useAuth' is defined but never used.","line":33,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":17},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchUserRates'. Either include it or remove the dependency array.","line":398,"column":6,"nodeType":"ArrayExpression","endLine":398,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchUserRates]","fix":{"range":[10270,10272],"text":"[fetchUserRates]"}}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":463,"column":39,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[12551,12612],"text":"You don&apos;t have any number rate decks assigned to your account"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[12551,12612],"text":"You don&lsquo;t have any number rate decks assigned to your account"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[12551,12612],"text":"You don&#39;t have any number rate decks assigned to your account"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[12551,12612],"text":"You don&rsquo;t have any number rate decks assigned to your account"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { \n  Card, \n  CardContent, \n  CardDescription, \n  CardHeader, \n  CardTitle \n} from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { \n  Loader2, \n  RefreshCw, \n  Download,\n  Hash,\n  Filter,\n  ChevronLeft,\n  ChevronRight,\n  Phone\n} from 'lucide-react';\nimport { toast } from 'sonner';\nimport { format } from 'date-fns';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { useAuth } from '@/lib/AuthContext';\nimport { useBranding } from '@/hooks/useBranding';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\n\n// Function to get country flag emoji based on country name\nconst getCountryFlag = (countryName: string): string => {\n  const countryFlags: Record<string, string> = {\n    'United States': '🇺🇸',\n    'USA': '🇺🇸',\n    'US': '🇺🇸',\n    'United Kingdom': '🇬🇧',\n    'UK': '🇬🇧',\n    'Great Britain': '🇬🇧',\n    'Canada': '🇨🇦',\n    'France': '🇫🇷',\n    'Germany': '🇩🇪',\n    'Italy': '🇮🇹',\n    'Spain': '🇪🇸',\n    'Netherlands': '🇳🇱',\n    'Belgium': '🇧🇪',\n    'Switzerland': '🇨🇭',\n    'Austria': '🇦🇹',\n    'Sweden': '🇸🇪',\n    'Norway': '🇳🇴',\n    'Denmark': '🇩🇰',\n    'Finland': '🇫🇮',\n    'Poland': '🇵🇱',\n    'Czech Republic': '🇨🇿',\n    'Hungary': '🇭🇺',\n    'Romania': '🇷🇴',\n    'Bulgaria': '🇧🇬',\n    'Greece': '🇬🇷',\n    'Portugal': '🇵🇹',\n    'Ireland': '🇮🇪',\n    'Luxembourg': '🇱🇺',\n    'Slovenia': '🇸🇮',\n    'Slovakia': '🇸🇰',\n    'Croatia': '🇭🇷',\n    'Estonia': '🇪🇪',\n    'Latvia': '🇱🇻',\n    'Lithuania': '🇱🇹',\n    'Malta': '🇲🇹',\n    'Cyprus': '🇨🇾',\n    'Australia': '🇦🇺',\n    'New Zealand': '🇳🇿',\n    'Japan': '🇯🇵',\n    'South Korea': '🇰🇷',\n    'China': '🇨🇳',\n    'India': '🇮🇳',\n    'Brazil': '🇧🇷',\n    'Mexico': '🇲🇽',\n    'Argentina': '🇦🇷',\n    'Chile': '🇨🇱',\n    'Colombia': '🇨🇴',\n    'Peru': '🇵🇪',\n    'Venezuela': '🇻🇪',\n    'South Africa': '🇿🇦',\n    'Egypt': '🇪🇬',\n    'Nigeria': '🇳🇬',\n    'Kenya': '🇰🇪',\n    'Morocco': '🇲🇦',\n    'Israel': '🇮🇱',\n    'Turkey': '🇹🇷',\n    'Russia': '🇷🇺',\n    'Ukraine': '🇺🇦',\n    'Belarus': '🇧🇾',\n    'Kazakhstan': '🇰🇿',\n    'Thailand': '🇹🇭',\n    'Vietnam': '🇻🇳',\n    'Singapore': '🇸🇬',\n    'Malaysia': '🇲🇾',\n    'Indonesia': '🇮🇩',\n    'Philippines': '🇵🇭',\n    'Hong Kong': '🇭🇰',\n    'Taiwan': '🇹🇼',\n    'Macau': '🇲🇴',\n    'Saudi Arabia': '🇸🇦',\n    'United Arab Emirates': '🇦🇪',\n    'UAE': '🇦🇪',\n    'Qatar': '🇶🇦',\n    'Kuwait': '🇰🇼',\n    'Bahrain': '🇧🇭',\n    'Oman': '🇴🇲',\n    'Jordan': '🇯🇴',\n    'Lebanon': '🇱🇧',\n    'Syria': '🇸🇾',\n    'Iraq': '🇮🇶',\n    'Iran': '🇮🇷',\n    'Pakistan': '🇵🇰',\n    'Bangladesh': '🇧🇩',\n    'Sri Lanka': '🇱🇰',\n    'Nepal': '🇳🇵',\n    'Afghanistan': '🇦🇫',\n    'Myanmar': '🇲🇲',\n    'Cambodia': '🇰🇭',\n    'Laos': '🇱🇦',\n    'Mongolia': '🇲🇳',\n    'North Korea': '🇰🇵',\n  };\n\n  // Try exact match first\n  if (countryFlags[countryName]) {\n    return countryFlags[countryName];\n  }\n\n  // Try case-insensitive match\n  const lowerCountryName = countryName.toLowerCase();\n  for (const [key, flag] of Object.entries(countryFlags)) {\n    if (key.toLowerCase() === lowerCountryName) {\n      return flag;\n    }\n  }\n\n  // Try partial match for common variations\n  for (const [key, flag] of Object.entries(countryFlags)) {\n    if (key.toLowerCase().includes(lowerCountryName) || lowerCountryName.includes(key.toLowerCase())) {\n      return flag;\n    }\n  }\n\n  // Default to globe emoji if no flag found\n  return '🌍';\n};\n\ninterface NumberRate {\n  id: string;\n  prefix: string;\n  country: string;\n  description: string;\n  rate: number;\n  type: 'Geographic/Local' | 'Mobile' | 'National' | 'Toll-free' | 'Shared Cost' | 'NPV (Verified Numbers)';\n  effectiveDate: string;\n  rateDeckName: string;\n  rateDeckId: string;\n  currency: string;\n}\n\ninterface UserNumberRatesData {\n  rates: NumberRate[];\n  total: number;\n  rateDecks: Array<{\n    id: string;\n    name: string;\n    currency: string;\n  }>;\n}\n\ninterface NumberRateStats {\n  total: number;\n  avgRate: number;\n  minRate: number;\n  maxRate: number;\n  uniqueCountries: number;\n  byType: Record<string, number>;\n  byRateDeck: Record<string, number>;\n}\n\nexport function UserNumberRates() {\n  const { colors } = useBranding();\n  // const { company, getGradientStyle, features } = useBranding(); // Unused\n  const [rateData, setRateData] = useState<UserNumberRatesData | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [lastRefresh, setLastRefresh] = useState<Date | null>(null);\n  \n  // Pagination state\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalRecords, setTotalRecords] = useState(0);\n  const [recordsPerPage, setRecordsPerPage] = useState(50);\n  \n  // Filter state\n  const [showFilters, setShowFilters] = useState(false);\n  const [filters, setFilters] = useState({\n    prefix: '',\n    country: '',\n    type: 'all',\n    rateDeck: 'all',\n    minRate: '',\n    maxRate: '',\n  });\n\n  // Calculate rates statistics\n  const calculateStats = (rates: NumberRate[]): NumberRateStats => {\n    const stats: NumberRateStats = {\n      total: rates.length,\n      avgRate: 0,\n      minRate: 0,\n      maxRate: 0,\n      uniqueCountries: 0,\n      byType: {},\n      byRateDeck: {},\n    };\n\n    if (rates.length === 0) return stats;\n\n    const rateValues = rates.map(r => r.rate).filter(r => r > 0);\n    const countries = new Set(rates.map(r => r.country).filter(c => c));\n\n    if (rateValues.length > 0) {\n      stats.avgRate = rateValues.reduce((sum, rate) => sum + rate, 0) / rateValues.length;\n      stats.minRate = Math.min(...rateValues);\n      stats.maxRate = Math.max(...rateValues);\n    }\n\n    stats.uniqueCountries = countries.size;\n\n    // Count by type\n    rates.forEach(rate => {\n      stats.byType[rate.type] = (stats.byType[rate.type] || 0) + 1;\n      stats.byRateDeck[rate.rateDeckName] = (stats.byRateDeck[rate.rateDeckName] || 0) + 1;\n    });\n\n    return stats;\n  };\n\n  const stats = rateData ? calculateStats(rateData.rates) : {\n    total: 0,\n    avgRate: 0,\n    minRate: 0,\n    maxRate: 0,\n    uniqueCountries: 0,\n    byType: {},\n    byRateDeck: {},\n  };\n\n  const fetchUserRates = async (page: number = currentPage) => {\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      const limit = recordsPerPage;\n      const offset = (page - 1) * limit;\n\n      const queryParams = new URLSearchParams({\n        offset: offset.toString(),\n        limit: limit.toString(),\n        ...(filters.prefix && { prefix: filters.prefix }),\n        ...(filters.country && { country: filters.country }),\n        ...(filters.type !== 'all' && { type: filters.type }),\n        ...(filters.rateDeck !== 'all' && { rateDeckId: filters.rateDeck }),\n        ...(filters.minRate && { minRate: filters.minRate }),\n        ...(filters.maxRate && { maxRate: filters.maxRate }),\n      });\n\n      const response = await fetch(`/api/rates/numbers/user-rates?${queryParams}`, {\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({ error: 'Unknown error' }));\n        throw new Error(errorData.error || `HTTP ${response.status}: Failed to fetch your number rates`);\n      }\n\n      const data: UserNumberRatesData = await response.json();\n      console.log('User number rates API response:', { rateCount: data.rates?.length });\n      \n      setRateData(data);\n      setTotalRecords(data.total || data.rates?.length || 0);\n      setLastRefresh(new Date());\n    } catch (err) {\n      console.error('Error fetching user number rates:', err);\n      \n      let errorMessage = 'Failed to fetch your number rates';\n      if (err instanceof Error) {\n        errorMessage = err.message;\n      }\n      \n      setError(errorMessage);\n      toast.error(errorMessage);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleFilterChange = (key: string, value: string) => {\n    setFilters(prev => ({ ...prev, [key]: value }));\n  };\n\n  const clearFilters = () => {\n    setFilters({\n      prefix: '',\n      country: '',\n      type: 'all',\n      rateDeck: 'all',\n      minRate: '',\n      maxRate: '',\n    });\n    setCurrentPage(1);\n  };\n\n  const applyFilters = () => {\n    setCurrentPage(1);\n    fetchUserRates(1);\n  };\n\n  const handlePageChange = (newPage: number) => {\n    setCurrentPage(newPage);\n    fetchUserRates(newPage);\n  };\n\n  const handleLimitChange = (value: string) => {\n    const newLimit = parseInt(value);\n    setRecordsPerPage(newLimit);\n    setCurrentPage(1);\n    fetchUserRates(1);\n  };\n\n  const formatCurrency = (amount: number, currency: string = 'USD') => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: currency,\n      minimumFractionDigits: 4,\n      maximumFractionDigits: 6,\n    }).format(amount);\n  };\n\n  const exportToCsv = () => {\n    if (!rateData?.rates) return;\n\n    const headers = [\n      'Prefix',\n      'Country',\n      'Description',\n      'Rate',\n      'Currency',\n      'Type',\n      'Rate Deck',\n      'Effective Date'\n    ];\n\n    const csvContent = [\n      headers.join(','),\n      ...rateData.rates.map(rate => [\n        rate.prefix || '',\n        rate.country || '',\n        rate.description || '',\n        rate.rate || '',\n        rate.currency || '',\n        rate.type || '',\n        rate.rateDeckName || '',\n        rate.effectiveDate ? format(new Date(rate.effectiveDate), 'yyyy-MM-dd') : ''\n      ].join(','))\n    ].join('\\n');\n\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n    const link = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n    link.setAttribute('href', url);\n    link.setAttribute('download', `my_number_rates_${format(new Date(), 'yyyy-MM-dd')}.csv`);\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  useEffect(() => {\n    fetchUserRates(1);\n  }, []);\n\n  if (isLoading && !rateData) {\n    return (\n      <div className=\"min-h-[400px] flex items-center justify-center\">\n        <div className=\"text-center space-y-4\">\n          <div \n            className=\"mx-auto w-16 h-16 rounded-2xl flex items-center justify-center shadow-lg\"\n            style={{ background: `linear-gradient(135deg, ${colors.primary}, ${colors.secondary})` }}\n          >\n            <Loader2 className=\"h-8 w-8 animate-spin text-white\" />\n          </div>\n          <div>\n            <h3 className=\"text-lg font-semibold\" style={{ color: colors.primary }}>\n              Loading Your Number Rates\n            </h3>\n            <p className=\"text-muted-foreground\">Fetching your assigned number rates...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <Card className=\"border-destructive\">\n        <CardHeader>\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 rounded-lg bg-red-50 flex items-center justify-center\">\n              <Hash className=\"h-5 w-5 text-red-600\" />\n            </div>\n            <div>\n              <CardTitle className=\"text-destructive\">Error Loading Your Number Rates</CardTitle>\n              <CardDescription>There was an error loading your number rates data</CardDescription>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-sm text-destructive mb-4\">{error}</p>\n          <Button \n            variant=\"outline\" \n            onClick={() => fetchUserRates()}\n            className=\"gap-2\"\n          >\n            <RefreshCw className=\"h-4 w-4\" />\n            Try Again\n          </Button>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!rateData || rateData.rates.length === 0) {\n    return (\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center space-x-3\">\n            <div \n              className=\"w-10 h-10 rounded-lg flex items-center justify-center\"\n              style={{ backgroundColor: `${colors.primary}20` }}\n            >\n              <Hash className=\"h-5 w-5\" style={{ color: colors.primary }} />\n            </div>\n            <div>\n              <CardTitle>No Number Rates Assigned</CardTitle>\n              <CardDescription>You don't have any number rate decks assigned to your account</CardDescription>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-sm text-muted-foreground mb-4\">\n            Contact your administrator to get number rate decks assigned to your account.\n          </p>\n          <Button \n            variant=\"outline\" \n            onClick={() => fetchUserRates()}\n            className=\"gap-2\"\n          >\n            <RefreshCw className=\"h-4 w-4\" />\n            Refresh\n          </Button>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const totalPages = Math.ceil(totalRecords / recordsPerPage);\n  const startRecord = (currentPage - 1) * recordsPerPage + 1;\n  const endRecord = Math.min(currentPage * recordsPerPage, totalRecords);\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header with Actions */}\n      <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-4\">\n        <div>\n          <div className=\"flex items-center gap-2 mb-1\">\n            <div \n              className=\"inline-flex items-center gap-2 px-3 py-1.5 rounded-full text-sm font-medium\"\n              style={{ backgroundColor: `${colors.primary}20`, color: colors.primary }}\n            >\n              <Phone className=\"h-4 w-4\" />\n              My Number Rates\n            </div>\n          </div>\n          <p className=\"text-muted-foreground\">\n            {stats.total} rate{stats.total !== 1 ? 's' : ''} • {stats.uniqueCountries} countries • Avg: {formatCurrency(stats.avgRate)}\n            {lastRefresh && (\n              <span className=\"ml-2\">\n                • Last updated {format(lastRefresh, 'HH:mm:ss')}\n              </span>\n            )}\n          </p>\n        </div>\n        \n        <div className=\"flex items-center gap-2\">\n          <Button \n            variant=\"outline\" \n            size=\"sm\"\n            onClick={() => setShowFilters(!showFilters)}\n            className=\"gap-2\"\n          >\n            <Filter className=\"h-4 w-4\" />\n            Filters\n          </Button>\n          <Button \n            variant=\"outline\" \n            size=\"sm\"\n            onClick={() => fetchUserRates()}\n            disabled={isLoading}\n            className=\"gap-2\"\n          >\n            <RefreshCw className={`h-4 w-4 ${isLoading ? 'animate-spin' : ''}`} />\n            Refresh\n          </Button>\n          <Button \n            variant=\"outline\" \n            size=\"sm\"\n            onClick={exportToCsv}\n            disabled={!rateData?.rates || rateData.rates.length === 0}\n            className=\"gap-2\"\n          >\n            <Download className=\"h-4 w-4\" />\n            Export CSV\n          </Button>\n        </div>\n      </div>\n\n      {/* Statistics Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">Total Rates</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats.total}</div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">Countries</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats.uniqueCountries}</div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">Average Rate</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{formatCurrency(stats.avgRate)}</div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">Rate Range</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-sm\">\n              <div>Min: {formatCurrency(stats.minRate)}</div>\n              <div>Max: {formatCurrency(stats.maxRate)}</div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      {showFilters && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base\">Filters</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium\">Prefix</label>\n                <Input\n                  placeholder=\"e.g., 1, 44, 33\"\n                  value={filters.prefix}\n                  onChange={(e) => handleFilterChange('prefix', e.target.value)}\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium\">Country</label>\n                <Input\n                  placeholder=\"e.g., United States, UK\"\n                  value={filters.country}\n                  onChange={(e) => handleFilterChange('country', e.target.value)}\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium\">Type</label>\n                <Select\n                  value={filters.type}\n                  onValueChange={(value) => handleFilterChange('type', value)}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Types</SelectItem>\n                    <SelectItem value=\"Geographic/Local\">Geographic/Local</SelectItem>\n                    <SelectItem value=\"Mobile\">Mobile</SelectItem>\n                    <SelectItem value=\"National\">National</SelectItem>\n                    <SelectItem value=\"Toll-free\">Toll-free</SelectItem>\n                    <SelectItem value=\"Shared Cost\">Shared Cost</SelectItem>\n                    <SelectItem value=\"NPV (Verified Numbers)\">NPV (Verified Numbers)</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium\">Rate Deck</label>\n                <Select\n                  value={filters.rateDeck}\n                  onValueChange={(value) => handleFilterChange('rateDeck', value)}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Rate Decks</SelectItem>\n                    {rateData?.rateDecks.map((deck) => (\n                      <SelectItem key={deck.id} value={deck.id}>\n                        {deck.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium\">Min Rate</label>\n                <Input\n                  type=\"number\"\n                  step=\"0.0001\"\n                  placeholder=\"0.0000\"\n                  value={filters.minRate}\n                  onChange={(e) => handleFilterChange('minRate', e.target.value)}\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium\">Max Rate</label>\n                <Input\n                  type=\"number\"\n                  step=\"0.0001\"\n                  placeholder=\"1.0000\"\n                  value={filters.maxRate}\n                  onChange={(e) => handleFilterChange('maxRate', e.target.value)}\n                />\n              </div>\n            </div>\n            \n            <div className=\"flex items-center gap-2 mt-4\">\n              <Button onClick={applyFilters} size=\"sm\">\n                Apply Filters\n              </Button>\n              <Button variant=\"outline\" onClick={clearFilters} size=\"sm\">\n                Clear All\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Rates Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Number Rates</CardTitle>\n          <CardDescription>\n            Your assigned number rates from {Object.keys(stats.byRateDeck).length} rate deck{Object.keys(stats.byRateDeck).length !== 1 ? 's' : ''}\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"rounded-md border\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Prefix</TableHead>\n                  <TableHead>Country</TableHead>\n                  <TableHead>Description</TableHead>\n                  <TableHead>Rate</TableHead>\n                  <TableHead>Type</TableHead>\n                  <TableHead>Effective Date</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {rateData?.rates.map((rate) => (\n                  <TableRow key={rate.id} className=\"hover:bg-muted/50\">\n                    <TableCell>\n                      <div className=\"font-mono font-medium\">\n                        {rate.prefix}\n                      </div>\n                    </TableCell>\n                    \n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <span className=\"text-lg\">{getCountryFlag(rate.country)}</span>\n                        <span className=\"font-medium\">{rate.country}</span>\n                      </div>\n                    </TableCell>\n                    \n                    <TableCell>\n                      <div className=\"text-sm text-muted-foreground max-w-[200px] truncate\">\n                        {rate.description || 'No description'}\n                      </div>\n                    </TableCell>\n                    \n                    <TableCell>\n                      <div className=\"font-mono font-medium\">\n                        {formatCurrency(rate.rate, rate.currency)}/month\n                      </div>\n                    </TableCell>\n                    \n                    <TableCell>\n                      <Badge variant=\"outline\">\n                        {rate.type}\n                      </Badge>\n                    </TableCell>\n                    \n                    <TableCell>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {rate.effectiveDate ? format(new Date(rate.effectiveDate), 'MMM dd, yyyy') : 'N/A'}\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n        \n        {/* Pagination */}\n        <CardContent className=\"pt-4\">\n          <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-4\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"text-sm text-muted-foreground\">\n                Showing {startRecord}-{endRecord} of {totalRecords} rates\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-sm text-muted-foreground\">Rates per page:</span>\n                <Select\n                  value={recordsPerPage.toString()}\n                  onValueChange={handleLimitChange}\n                >\n                  <SelectTrigger className=\"w-[100px] h-8\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"25\">25</SelectItem>\n                    <SelectItem value=\"50\">50</SelectItem>\n                    <SelectItem value=\"100\">100</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center gap-2\">\n              <div className=\"text-sm text-muted-foreground\">\n                Page {currentPage} of {totalPages}\n              </div>\n              <div className=\"flex items-center gap-1\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => handlePageChange(currentPage - 1)}\n                  disabled={currentPage === 1 || isLoading}\n                  className=\"h-8 w-8 p-0\"\n                >\n                  <ChevronLeft className=\"h-4 w-4\" />\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => handlePageChange(currentPage + 1)}\n                  disabled={currentPage === totalPages || isLoading}\n                  className=\"h-8 w-8 p-0\"\n                >\n                  <ChevronRight className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/rates/UserSmsRates.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useAuth' is defined but never used.","line":33,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":17},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchUserRates'. Either include it or remove the dependency array.","line":278,"column":6,"nodeType":"ArrayExpression","endLine":278,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchUserRates]","fix":{"range":[7293,7295],"text":"[fetchUserRates]"}}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":343,"column":39,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[9577,9635],"text":"You don&apos;t have any SMS rate decks assigned to your account"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[9577,9635],"text":"You don&lsquo;t have any SMS rate decks assigned to your account"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[9577,9635],"text":"You don&#39;t have any SMS rate decks assigned to your account"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[9577,9635],"text":"You don&rsquo;t have any SMS rate decks assigned to your account"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { \n  Card, \n  CardContent, \n  CardDescription, \n  CardHeader, \n  CardTitle \n} from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { \n  Loader2, \n  RefreshCw, \n  Download,\n  MessageSquare,\n  Globe,\n  Filter,\n  ChevronLeft,\n  ChevronRight\n} from 'lucide-react';\nimport { toast } from 'sonner';\nimport { format } from 'date-fns';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { useAuth } from '@/lib/AuthContext';\nimport { useBranding } from '@/hooks/useBranding';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\n\ninterface SmsRate {\n  id: string;\n  prefix: string;\n  country: string;\n  description: string;\n  rate: number;\n  type: 'Geographic/Local' | 'Mobile' | 'National' | 'Toll-free' | 'Shared Cost' | 'NPV (Verified Numbers)';\n  effectiveDate: string;\n  rateDeckName: string;\n  rateDeckId: string;\n  currency: string;\n}\n\ninterface UserSmsRatesData {\n  rates: SmsRate[];\n  total: number;\n  rateDecks: Array<{\n    id: string;\n    name: string;\n    currency: string;\n  }>;\n}\n\ninterface SmsRateStats {\n  total: number;\n  avgRate: number;\n  minRate: number;\n  maxRate: number;\n  uniqueCountries: number;\n  byType: Record<string, number>;\n  byRateDeck: Record<string, number>;\n}\n\nexport function UserSmsRates() {\n  const { colors } = useBranding();\n  // const { company, getGradientStyle, features } = useBranding(); // Unused\n  const [rateData, setRateData] = useState<UserSmsRatesData | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [lastRefresh, setLastRefresh] = useState<Date | null>(null);\n  \n  // Pagination state\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalRecords, setTotalRecords] = useState(0);\n  const [recordsPerPage, setRecordsPerPage] = useState(50);\n  \n  // Filter state\n  const [showFilters, setShowFilters] = useState(false);\n  const [filters, setFilters] = useState({\n    prefix: '',\n    country: '',\n    type: 'all',\n    rateDeck: 'all',\n    minRate: '',\n    maxRate: '',\n  });\n\n  // Calculate rates statistics\n  const calculateStats = (rates: SmsRate[]): SmsRateStats => {\n    const stats: SmsRateStats = {\n      total: rates.length,\n      avgRate: 0,\n      minRate: 0,\n      maxRate: 0,\n      uniqueCountries: 0,\n      byType: {},\n      byRateDeck: {},\n    };\n\n    if (rates.length === 0) return stats;\n\n    const rateValues = rates.map(r => r.rate).filter(r => r > 0);\n    const countries = new Set(rates.map(r => r.country).filter(c => c));\n\n    if (rateValues.length > 0) {\n      stats.avgRate = rateValues.reduce((sum, rate) => sum + rate, 0) / rateValues.length;\n      stats.minRate = Math.min(...rateValues);\n      stats.maxRate = Math.max(...rateValues);\n    }\n\n    stats.uniqueCountries = countries.size;\n\n    // Count by type\n    rates.forEach(rate => {\n      stats.byType[rate.type] = (stats.byType[rate.type] || 0) + 1;\n      stats.byRateDeck[rate.rateDeckName] = (stats.byRateDeck[rate.rateDeckName] || 0) + 1;\n    });\n\n    return stats;\n  };\n\n  const stats = rateData ? calculateStats(rateData.rates) : {\n    total: 0,\n    avgRate: 0,\n    minRate: 0,\n    maxRate: 0,\n    uniqueCountries: 0,\n    byType: {},\n    byRateDeck: {},\n  };\n\n  const fetchUserRates = async (page: number = currentPage) => {\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      const limit = recordsPerPage;\n      const offset = (page - 1) * limit;\n\n      const queryParams = new URLSearchParams({\n        offset: offset.toString(),\n        limit: limit.toString(),\n        ...(filters.prefix && { prefix: filters.prefix }),\n        ...(filters.country && { country: filters.country }),\n        ...(filters.type !== 'all' && { type: filters.type }),\n        ...(filters.rateDeck !== 'all' && { rateDeckId: filters.rateDeck }),\n        ...(filters.minRate && { minRate: filters.minRate }),\n        ...(filters.maxRate && { maxRate: filters.maxRate }),\n      });\n\n      const response = await fetch(`/api/rates/sms/user-rates?${queryParams}`, {\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({ error: 'Unknown error' }));\n        throw new Error(errorData.error || `HTTP ${response.status}: Failed to fetch your SMS rates`);\n      }\n\n      const data: UserSmsRatesData = await response.json();\n      console.log('User SMS rates API response:', { rateCount: data.rates?.length });\n      \n      setRateData(data);\n      setTotalRecords(data.total || data.rates?.length || 0);\n      setLastRefresh(new Date());\n    } catch (err) {\n      console.error('Error fetching user SMS rates:', err);\n      \n      let errorMessage = 'Failed to fetch your SMS rates';\n      if (err instanceof Error) {\n        errorMessage = err.message;\n      }\n      \n      setError(errorMessage);\n      toast.error(errorMessage);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleFilterChange = (key: string, value: string) => {\n    setFilters(prev => ({ ...prev, [key]: value }));\n  };\n\n  const clearFilters = () => {\n    setFilters({\n      prefix: '',\n      country: '',\n      type: 'all',\n      rateDeck: 'all',\n      minRate: '',\n      maxRate: '',\n    });\n    setCurrentPage(1);\n  };\n\n  const applyFilters = () => {\n    setCurrentPage(1);\n    fetchUserRates(1);\n  };\n\n  const handlePageChange = (newPage: number) => {\n    setCurrentPage(newPage);\n    fetchUserRates(newPage);\n  };\n\n  const handleLimitChange = (value: string) => {\n    const newLimit = parseInt(value);\n    setRecordsPerPage(newLimit);\n    setCurrentPage(1);\n    fetchUserRates(1);\n  };\n\n  const formatCurrency = (amount: number, currency: string = 'USD') => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: currency,\n      minimumFractionDigits: 4,\n      maximumFractionDigits: 6,\n    }).format(amount);\n  };\n\n  const exportToCsv = () => {\n    if (!rateData?.rates) return;\n\n    const headers = [\n      'Prefix',\n      'Country',\n      'Description',\n      'Rate',\n      'Currency',\n      'Type',\n      'Rate Deck',\n      'Effective Date'\n    ];\n\n    const csvContent = [\n      headers.join(','),\n      ...rateData.rates.map(rate => [\n        rate.prefix || '',\n        rate.country || '',\n        rate.description || '',\n        rate.rate || '',\n        rate.currency || '',\n        rate.type || '',\n        rate.rateDeckName || '',\n        rate.effectiveDate ? format(new Date(rate.effectiveDate), 'yyyy-MM-dd') : ''\n      ].join(','))\n    ].join('\\n');\n\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n    const link = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n    link.setAttribute('href', url);\n    link.setAttribute('download', `my_sms_rates_${format(new Date(), 'yyyy-MM-dd')}.csv`);\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  useEffect(() => {\n    fetchUserRates(1);\n  }, []);\n\n  if (isLoading && !rateData) {\n    return (\n      <div className=\"min-h-[400px] flex items-center justify-center\">\n        <div className=\"text-center space-y-4\">\n          <div \n            className=\"mx-auto w-16 h-16 rounded-2xl flex items-center justify-center shadow-lg\"\n            style={{ background: `linear-gradient(135deg, ${colors.primary}, ${colors.secondary})` }}\n          >\n            <Loader2 className=\"h-8 w-8 animate-spin text-white\" />\n          </div>\n          <div>\n            <h3 className=\"text-lg font-semibold\" style={{ color: colors.primary }}>\n              Loading Your SMS Rates\n            </h3>\n            <p className=\"text-muted-foreground\">Fetching your assigned SMS rates...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <Card className=\"border-destructive\">\n        <CardHeader>\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 rounded-lg bg-red-50 flex items-center justify-center\">\n              <MessageSquare className=\"h-5 w-5 text-red-600\" />\n            </div>\n            <div>\n              <CardTitle className=\"text-destructive\">Error Loading Your SMS Rates</CardTitle>\n              <CardDescription>There was an error loading your SMS rates data</CardDescription>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-sm text-destructive mb-4\">{error}</p>\n          <Button \n            variant=\"outline\" \n            onClick={() => fetchUserRates()}\n            className=\"gap-2\"\n          >\n            <RefreshCw className=\"h-4 w-4\" />\n            Try Again\n          </Button>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!rateData || rateData.rates.length === 0) {\n    return (\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center space-x-3\">\n            <div \n              className=\"w-10 h-10 rounded-lg flex items-center justify-center\"\n              style={{ backgroundColor: `${colors.primary}20` }}\n            >\n              <MessageSquare className=\"h-5 w-5\" style={{ color: colors.primary }} />\n            </div>\n            <div>\n              <CardTitle>No SMS Rates Assigned</CardTitle>\n              <CardDescription>You don't have any SMS rate decks assigned to your account</CardDescription>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-sm text-muted-foreground mb-4\">\n            Contact your administrator to get SMS rate decks assigned to your account.\n          </p>\n          <Button \n            variant=\"outline\" \n            onClick={() => fetchUserRates()}\n            className=\"gap-2\"\n          >\n            <RefreshCw className=\"h-4 w-4\" />\n            Refresh\n          </Button>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const totalPages = Math.ceil(totalRecords / recordsPerPage);\n  const startRecord = (currentPage - 1) * recordsPerPage + 1;\n  const endRecord = Math.min(currentPage * recordsPerPage, totalRecords);\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header with Actions */}\n      <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-4\">\n        <div>\n          <div className=\"flex items-center gap-2 mb-1\">\n            <div \n              className=\"inline-flex items-center gap-2 px-3 py-1.5 rounded-full text-sm font-medium\"\n              style={{ backgroundColor: `${colors.primary}20`, color: colors.primary }}\n            >\n              <MessageSquare className=\"h-4 w-4\" />\n              My SMS Rates\n            </div>\n          </div>\n          <p className=\"text-muted-foreground\">\n            {stats.total} rate{stats.total !== 1 ? 's' : ''} • {stats.uniqueCountries} countries • Avg: {formatCurrency(stats.avgRate)}\n            {lastRefresh && (\n              <span className=\"ml-2\">\n                • Last updated {format(lastRefresh, 'HH:mm:ss')}\n              </span>\n            )}\n          </p>\n        </div>\n        \n        <div className=\"flex items-center gap-2\">\n          <Button \n            variant=\"outline\" \n            size=\"sm\"\n            onClick={() => setShowFilters(!showFilters)}\n            className=\"gap-2\"\n          >\n            <Filter className=\"h-4 w-4\" />\n            Filters\n          </Button>\n          <Button \n            variant=\"outline\" \n            size=\"sm\"\n            onClick={() => fetchUserRates()}\n            disabled={isLoading}\n            className=\"gap-2\"\n          >\n            <RefreshCw className={`h-4 w-4 ${isLoading ? 'animate-spin' : ''}`} />\n            Refresh\n          </Button>\n          <Button \n            variant=\"outline\" \n            size=\"sm\"\n            onClick={exportToCsv}\n            disabled={!rateData?.rates || rateData.rates.length === 0}\n            className=\"gap-2\"\n          >\n            <Download className=\"h-4 w-4\" />\n            Export CSV\n          </Button>\n        </div>\n      </div>\n\n      {/* Statistics Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">Total Rates</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats.total}</div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">Countries</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats.uniqueCountries}</div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">Average Rate</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{formatCurrency(stats.avgRate)}</div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">Rate Range</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-sm\">\n              <div>Min: {formatCurrency(stats.minRate)}</div>\n              <div>Max: {formatCurrency(stats.maxRate)}</div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      {showFilters && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base\">Filters</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium\">Prefix</label>\n                <Input\n                  placeholder=\"e.g., 1, 44, 33\"\n                  value={filters.prefix}\n                  onChange={(e) => handleFilterChange('prefix', e.target.value)}\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium\">Country</label>\n                <Input\n                  placeholder=\"e.g., United States, UK\"\n                  value={filters.country}\n                  onChange={(e) => handleFilterChange('country', e.target.value)}\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium\">Type</label>\n                <Select\n                  value={filters.type}\n                  onValueChange={(value) => handleFilterChange('type', value)}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Types</SelectItem>\n                    <SelectItem value=\"Geographic/Local\">Geographic/Local</SelectItem>\n                    <SelectItem value=\"Mobile\">Mobile</SelectItem>\n                    <SelectItem value=\"National\">National</SelectItem>\n                    <SelectItem value=\"Toll-free\">Toll-free</SelectItem>\n                    <SelectItem value=\"Shared Cost\">Shared Cost</SelectItem>\n                    <SelectItem value=\"NPV (Verified Numbers)\">NPV (Verified Numbers)</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium\">Rate Deck</label>\n                <Select\n                  value={filters.rateDeck}\n                  onValueChange={(value) => handleFilterChange('rateDeck', value)}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Rate Decks</SelectItem>\n                    {rateData?.rateDecks.map((deck) => (\n                      <SelectItem key={deck.id} value={deck.id}>\n                        {deck.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium\">Min Rate</label>\n                <Input\n                  type=\"number\"\n                  step=\"0.0001\"\n                  placeholder=\"0.0000\"\n                  value={filters.minRate}\n                  onChange={(e) => handleFilterChange('minRate', e.target.value)}\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium\">Max Rate</label>\n                <Input\n                  type=\"number\"\n                  step=\"0.0001\"\n                  placeholder=\"1.0000\"\n                  value={filters.maxRate}\n                  onChange={(e) => handleFilterChange('maxRate', e.target.value)}\n                />\n              </div>\n            </div>\n            \n            <div className=\"flex items-center gap-2 mt-4\">\n              <Button onClick={applyFilters} size=\"sm\">\n                Apply Filters\n              </Button>\n              <Button variant=\"outline\" onClick={clearFilters} size=\"sm\">\n                Clear All\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Rates Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>SMS Rates</CardTitle>\n          <CardDescription>\n            Your assigned SMS rates from {Object.keys(stats.byRateDeck).length} rate deck{Object.keys(stats.byRateDeck).length !== 1 ? 's' : ''}\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"rounded-md border\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Prefix</TableHead>\n                  <TableHead>Country</TableHead>\n                  <TableHead>Description</TableHead>\n                  <TableHead>Rate</TableHead>\n                  <TableHead>Type</TableHead>\n                  <TableHead>Rate Deck</TableHead>\n                  <TableHead>Effective Date</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {rateData?.rates.map((rate) => (\n                  <TableRow key={rate.id} className=\"hover:bg-muted/50\">\n                    <TableCell>\n                      <div className=\"font-mono font-medium\">\n                        {rate.prefix}\n                      </div>\n                    </TableCell>\n                    \n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <Globe className=\"h-4 w-4 text-muted-foreground\" />\n                        <span className=\"font-medium\">{rate.country}</span>\n                      </div>\n                    </TableCell>\n                    \n                    <TableCell>\n                      <div className=\"text-sm text-muted-foreground max-w-[200px] truncate\">\n                        {rate.description || 'No description'}\n                      </div>\n                    </TableCell>\n                    \n                    <TableCell>\n                      <div className=\"font-mono font-medium\">\n                        {formatCurrency(rate.rate, rate.currency)}\n                      </div>\n                    </TableCell>\n                    \n                    <TableCell>\n                      <Badge variant=\"outline\">\n                        {rate.type}\n                      </Badge>\n                    </TableCell>\n                    \n                    <TableCell>\n                      <div className=\"text-sm\">\n                        <div className=\"font-medium\">{rate.rateDeckName}</div>\n                        <div className=\"text-muted-foreground\">{rate.currency}</div>\n                      </div>\n                    </TableCell>\n                    \n                    <TableCell>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {rate.effectiveDate ? format(new Date(rate.effectiveDate), 'MMM dd, yyyy') : 'N/A'}\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n        \n        {/* Pagination */}\n        <CardContent className=\"pt-4\">\n          <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-4\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"text-sm text-muted-foreground\">\n                Showing {startRecord}-{endRecord} of {totalRecords} rates\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-sm text-muted-foreground\">Rates per page:</span>\n                <Select\n                  value={recordsPerPage.toString()}\n                  onValueChange={handleLimitChange}\n                >\n                  <SelectTrigger className=\"w-[100px] h-8\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"25\">25</SelectItem>\n                    <SelectItem value=\"50\">50</SelectItem>\n                    <SelectItem value=\"100\">100</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center gap-2\">\n              <div className=\"text-sm text-muted-foreground\">\n                Page {currentPage} of {totalPages}\n              </div>\n              <div className=\"flex items-center gap-1\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => handlePageChange(currentPage - 1)}\n                  disabled={currentPage === 1 || isLoading}\n                  className=\"h-8 w-8 p-0\"\n                >\n                  <ChevronLeft className=\"h-4 w-4\" />\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => handlePageChange(currentPage + 1)}\n                  disabled={currentPage === totalPages || isLoading}\n                  className=\"h-8 w-8 p-0\"\n                >\n                  <ChevronRight className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/settings/BrandingSettings.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":291,"column":19,"nodeType":"JSXOpeningElement","endLine":295,"endColumn":21},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":329,"column":19,"nodeType":"JSXOpeningElement","endLine":333,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useRef } from 'react';\nimport { toast } from 'sonner';\nimport { \n  Upload, \n  Palette, \n  Type, \n  Layout, \n  Eye, \n  EyeOff, \n  Save,\n  RotateCcw,\n  Image as ImageIcon,\n  Loader2,\n  Link as LinkIcon,\n  Mail\n} from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Switch } from '@/components/ui/switch';\nimport { Separator } from '@/components/ui/separator';\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { \n  Card, \n  CardContent, \n  CardDescription, \n  CardHeader, \n  CardTitle \n} from '@/components/ui/card';\nimport { useBranding } from '@/lib/BrandingContext';\n\nexport function BrandingSettings() {\n  const { settings, updateSettings, isLoading } = useBranding();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [previewMode, setPreviewMode] = useState(false);\n  const [uploadingLogo, setUploadingLogo] = useState(false);\n  const [uploadingFavicon, setUploadingFavicon] = useState(false);\n  \n  const logoFileRef = useRef<HTMLInputElement>(null);\n  const faviconFileRef = useRef<HTMLInputElement>(null);\n\n  // Local form state\n  const [formData, setFormData] = useState({\n    companyName: settings.companyName || '',\n    companySlogan: settings.companySlogan || '',\n    logoUrl: settings.logoUrl || '',\n    faviconUrl: settings.faviconUrl || '',\n    logoAltText: settings.logoAltText || '',\n    primaryColor: settings.primaryColor || '#7c3aed',\n    secondaryColor: settings.secondaryColor || '#a855f7',\n    accentColor: settings.accentColor || '#06b6d4',\n    backgroundColor: settings.backgroundColor || '#ffffff',\n    textColor: settings.textColor || '#1f2937',\n    surfaceColor: settings.surfaceColor || '#f9fafb',\n    \n    // Dark Mode Colors\n    darkPrimaryColor: settings.darkPrimaryColor || '#a78bfa',\n    darkSecondaryColor: settings.darkSecondaryColor || '#c084fc',\n    darkAccentColor: settings.darkAccentColor || '#22d3ee',\n    darkBackgroundColor: settings.darkBackgroundColor || '#0f172a',\n    darkTextColor: settings.darkTextColor || '#f1f5f9',\n    darkSurfaceColor: settings.darkSurfaceColor || '#1e293b',\n    \n    gradientStartColor: settings.gradientStartColor || '#7c3aed',\n    gradientMiddleColor: settings.gradientMiddleColor || '#a855f7',\n    gradientEndColor: settings.gradientEndColor || '#3b82f6',\n    \n    // Auth Form Background Colors\n    authFormBackgroundColor: settings.authFormBackgroundColor || '#ffffff',\n    darkAuthFormBackgroundColor: settings.darkAuthFormBackgroundColor || '#0f172a',\n    \n    fontFamily: settings.fontFamily || 'Inter, sans-serif',\n    headingFontFamily: settings.headingFontFamily || 'Inter, sans-serif',\n    borderRadius: settings.borderRadius || '0.75rem',\n    shadowIntensity: settings.shadowIntensity || 'medium',\n    contactEmail: settings.contactEmail || '',\n    supportEmail: settings.supportEmail || '',\n    websiteUrl: settings.websiteUrl || '',\n    socialLinks: {\n      twitter: settings.socialLinks?.twitter || '',\n      linkedin: settings.socialLinks?.linkedin || '',\n      facebook: settings.socialLinks?.facebook || '',\n      instagram: settings.socialLinks?.instagram || '',\n    },\n    customCss: settings.customCss || '',\n    enableAnimations: settings.enableAnimations !== false,\n    enableGlassMorphism: settings.enableGlassMorphism !== false,\n    enableGradientBackground: settings.enableGradientBackground !== false,\n  });\n\n  // Handle file upload\n  const handleFileUpload = async (file: File, type: 'logo' | 'favicon') => {\n    if (type === 'logo') setUploadingLogo(true);\n    else setUploadingFavicon(true);\n\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      formData.append('type', type);\n\n      const response = await fetch('/api/settings/branding/upload', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Upload failed');\n      }\n\n      const result = await response.json();\n      \n      if (type === 'logo') {\n        setFormData(prev => ({ ...prev, logoUrl: result.url }));\n      } else {\n        setFormData(prev => ({ ...prev, faviconUrl: result.url }));\n      }\n\n      toast.success(`${type === 'logo' ? 'Logo' : 'Favicon'} uploaded successfully!`);\n    } catch (error) {\n      console.error('Upload error:', error);\n      toast.error(error instanceof Error ? error.message : 'Upload failed');\n    } finally {\n      if (type === 'logo') setUploadingLogo(false);\n      else setUploadingFavicon(false);\n    }\n  };\n\n  // Handle form submission\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n\n    try {\n      await updateSettings(formData);\n      toast.success('Branding settings updated successfully!');\n    } catch (error) {\n      console.error('Error updating settings:', error);\n      toast.error(error instanceof Error ? error.message : 'Failed to update settings');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  // Reset to defaults\n  const handleReset = () => {\n    setFormData({\n      companyName: 'Sippy Communications',\n      companySlogan: 'Powerful Communication Management Platform',\n      logoUrl: '',\n      faviconUrl: '',\n      logoAltText: 'Company Logo',\n      primaryColor: '#7c3aed',\n      secondaryColor: '#a855f7',\n      accentColor: '#06b6d4',\n      backgroundColor: '#ffffff',\n      textColor: '#1f2937',\n      surfaceColor: '#f9fafb',\n      darkPrimaryColor: '#a78bfa',\n      darkSecondaryColor: '#c084fc',\n      darkAccentColor: '#22d3ee',\n      darkBackgroundColor: '#0f172a',\n      darkTextColor: '#f1f5f9',\n      darkSurfaceColor: '#1e293b',\n      gradientStartColor: '#7c3aed',\n      gradientMiddleColor: '#a855f7',\n      gradientEndColor: '#3b82f6',\n      authFormBackgroundColor: '#ffffff',\n      darkAuthFormBackgroundColor: '#0f172a',\n      fontFamily: 'Inter, sans-serif',\n      headingFontFamily: 'Inter, sans-serif',\n      borderRadius: '0.75rem',\n      shadowIntensity: 'medium' as const,\n      contactEmail: '',\n      supportEmail: '',\n      websiteUrl: '',\n      socialLinks: {\n        twitter: '',\n        linkedin: '',\n        facebook: '',\n        instagram: '',\n      },\n      customCss: '',\n      enableAnimations: true,\n      enableGlassMorphism: true,\n      enableGradientBackground: true,\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center p-8\">\n        <Loader2 className=\"h-8 w-8 animate-spin\" />\n      </div>\n    );\n  }\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-8\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold\">Branding Settings</h2>\n          <p className=\"text-muted-foreground\">\n            Customize your application&apos;s brand identity and visual appearance.\n          </p>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            onClick={() => setPreviewMode(!previewMode)}\n            className=\"flex items-center space-x-2\"\n          >\n            {previewMode ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n            <span>{previewMode ? 'Exit Preview' : 'Preview'}</span>\n          </Button>\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            onClick={handleReset}\n            className=\"flex items-center space-x-2\"\n          >\n            <RotateCcw className=\"h-4 w-4\" />\n            <span>Reset</span>\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        {/* Company Information */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Type className=\"h-5 w-5\" />\n              <span>Company Information</span>\n            </CardTitle>\n            <CardDescription>\n              Basic company details and messaging\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"companyName\">Company Name</Label>\n              <Input\n                id=\"companyName\"\n                value={formData.companyName}\n                onChange={(e) => setFormData(prev => ({ ...prev, companyName: e.target.value }))}\n                placeholder=\"Your Company Name\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"companySlogan\">Company Slogan</Label>\n              <Input\n                id=\"companySlogan\"\n                value={formData.companySlogan}\n                onChange={(e) => setFormData(prev => ({ ...prev, companySlogan: e.target.value }))}\n                placeholder=\"Your company slogan or tagline\"\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Visual Assets */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <ImageIcon className=\"h-5 w-5\" />\n              <span>Visual Assets</span>\n            </CardTitle>\n            <CardDescription>\n              Upload and manage your logo and favicon\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {/* Logo Upload */}\n            <div>\n              <Label>Logo</Label>\n              <div className=\"flex items-center space-x-4\">\n                {formData.logoUrl && (\n                  <img\n                    src={formData.logoUrl}\n                    alt=\"Current logo\"\n                    className=\"h-12 w-12 object-contain border rounded\"\n                  />\n                )}\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => logoFileRef.current?.click()}\n                  disabled={uploadingLogo}\n                  className=\"flex items-center space-x-2\"\n                >\n                  {uploadingLogo ? (\n                    <Loader2 className=\"h-4 w-4 animate-spin\" />\n                  ) : (\n                    <Upload className=\"h-4 w-4\" />\n                  )}\n                  <span>Upload Logo</span>\n                </Button>\n                <input\n                  ref={logoFileRef}\n                  type=\"file\"\n                  accept=\"image/*\"\n                  className=\"hidden\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    const file = e.target.files?.[0];\n                    if (file) handleFileUpload(file, 'logo');\n                  }}\n                />\n              </div>\n            </div>\n\n            {/* Favicon Upload */}\n            <div>\n              <Label>Favicon</Label>\n              <div className=\"flex items-center space-x-4\">\n                {formData.faviconUrl && (\n                  <img\n                    src={formData.faviconUrl}\n                    alt=\"Current favicon\"\n                    className=\"h-8 w-8 object-contain border rounded\"\n                  />\n                )}\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => faviconFileRef.current?.click()}\n                  disabled={uploadingFavicon}\n                  className=\"flex items-center space-x-2\"\n                >\n                  {uploadingFavicon ? (\n                    <Loader2 className=\"h-4 w-4 animate-spin\" />\n                  ) : (\n                    <Upload className=\"h-4 w-4\" />\n                  )}\n                  <span>Upload Favicon</span>\n                </Button>\n                <input\n                  ref={faviconFileRef}\n                  type=\"file\"\n                  accept=\"image/*,.ico\"\n                  className=\"hidden\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    const file = e.target.files?.[0];\n                    if (file) handleFileUpload(file, 'favicon');\n                  }}\n                />\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"logoAltText\">Logo Alt Text</Label>\n              <Input\n                id=\"logoAltText\"\n                value={formData.logoAltText}\n                onChange={(e) => setFormData(prev => ({ ...prev, logoAltText: e.target.value }))}\n                placeholder=\"Descriptive text for accessibility\"\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Color Scheme */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Palette className=\"h-5 w-5\" />\n              <span>Color Scheme</span>\n            </CardTitle>\n            <CardDescription>\n              Define your brand colors and gradients\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"primaryColor\">Primary Color</Label>\n                <div className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"color\"\n                    id=\"primaryColor\"\n                    value={formData.primaryColor}\n                    onChange={(e) => setFormData(prev => ({ ...prev, primaryColor: e.target.value }))}\n                    className=\"w-12 h-12 rounded border cursor-pointer\"\n                  />\n                  <Input\n                    value={formData.primaryColor}\n                    onChange={(e) => setFormData(prev => ({ ...prev, primaryColor: e.target.value }))}\n                    placeholder=\"#7c3aed\"\n                  />\n                </div>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"secondaryColor\">Secondary Color</Label>\n                <div className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"color\"\n                    id=\"secondaryColor\"\n                    value={formData.secondaryColor}\n                    onChange={(e) => setFormData(prev => ({ ...prev, secondaryColor: e.target.value }))}\n                    className=\"w-12 h-12 rounded border cursor-pointer\"\n                  />\n                  <Input\n                    value={formData.secondaryColor}\n                    onChange={(e) => setFormData(prev => ({ ...prev, secondaryColor: e.target.value }))}\n                    placeholder=\"#a855f7\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"accentColor\">Accent Color</Label>\n                <div className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"color\"\n                    id=\"accentColor\"\n                    value={formData.accentColor}\n                    onChange={(e) => setFormData(prev => ({ ...prev, accentColor: e.target.value }))}\n                    className=\"w-12 h-12 rounded border cursor-pointer\"\n                  />\n                  <Input\n                    value={formData.accentColor}\n                    onChange={(e) => setFormData(prev => ({ ...prev, accentColor: e.target.value }))}\n                    placeholder=\"#06b6d4\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"backgroundColor\">Background Color</Label>\n                <div className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"color\"\n                    id=\"backgroundColor\"\n                    value={formData.backgroundColor}\n                    onChange={(e) => setFormData(prev => ({ ...prev, backgroundColor: e.target.value }))}\n                    className=\"w-12 h-12 rounded border cursor-pointer\"\n                  />\n                  <Input\n                    value={formData.backgroundColor}\n                    onChange={(e) => setFormData(prev => ({ ...prev, backgroundColor: e.target.value }))}\n                    placeholder=\"#ffffff\"\n                  />\n                </div>\n              </div>\n            </div>\n\n            <Separator />\n            \n            <div>\n              <Label className=\"text-sm font-medium\">Dark Mode Colors</Label>\n              <p className=\"text-xs text-muted-foreground mb-3\">\n                Colors that will be used specifically in dark mode\n              </p>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"darkPrimaryColor\" className=\"text-xs\">Dark Primary</Label>\n                  <div className=\"flex items-center space-x-2\">\n                    <input\n                      type=\"color\"\n                      id=\"darkPrimaryColor\"\n                      value={formData.darkPrimaryColor}\n                      onChange={(e) => setFormData(prev => ({ ...prev, darkPrimaryColor: e.target.value }))}\n                      className=\"w-10 h-10 rounded border cursor-pointer\"\n                    />\n                    <Input\n                      value={formData.darkPrimaryColor}\n                      onChange={(e) => setFormData(prev => ({ ...prev, darkPrimaryColor: e.target.value }))}\n                      placeholder=\"#a78bfa\"\n                      className=\"text-xs\"\n                    />\n                  </div>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"darkSecondaryColor\" className=\"text-xs\">Dark Secondary</Label>\n                  <div className=\"flex items-center space-x-2\">\n                    <input\n                      type=\"color\"\n                      id=\"darkSecondaryColor\"\n                      value={formData.darkSecondaryColor}\n                      onChange={(e) => setFormData(prev => ({ ...prev, darkSecondaryColor: e.target.value }))}\n                      className=\"w-10 h-10 rounded border cursor-pointer\"\n                    />\n                    <Input\n                      value={formData.darkSecondaryColor}\n                      onChange={(e) => setFormData(prev => ({ ...prev, darkSecondaryColor: e.target.value }))}\n                      placeholder=\"#c084fc\"\n                      className=\"text-xs\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"darkAccentColor\" className=\"text-xs\">Dark Accent</Label>\n                  <div className=\"flex items-center space-x-2\">\n                    <input\n                      type=\"color\"\n                      id=\"darkAccentColor\"\n                      value={formData.darkAccentColor}\n                      onChange={(e) => setFormData(prev => ({ ...prev, darkAccentColor: e.target.value }))}\n                      className=\"w-10 h-10 rounded border cursor-pointer\"\n                    />\n                    <Input\n                      value={formData.darkAccentColor}\n                      onChange={(e) => setFormData(prev => ({ ...prev, darkAccentColor: e.target.value }))}\n                      placeholder=\"#22d3ee\"\n                      className=\"text-xs\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"darkTextColor\" className=\"text-xs\">Dark Text</Label>\n                  <div className=\"flex items-center space-x-2\">\n                    <input\n                      type=\"color\"\n                      id=\"darkTextColor\"\n                      value={formData.darkTextColor}\n                      onChange={(e) => setFormData(prev => ({ ...prev, darkTextColor: e.target.value }))}\n                      className=\"w-10 h-10 rounded border cursor-pointer\"\n                    />\n                    <Input\n                      value={formData.darkTextColor}\n                      onChange={(e) => setFormData(prev => ({ ...prev, darkTextColor: e.target.value }))}\n                      placeholder=\"#f1f5f9\"\n                      className=\"text-xs\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"darkBackgroundColor\" className=\"text-xs\">Dark Background</Label>\n                  <div className=\"flex items-center space-x-2\">\n                    <input\n                      type=\"color\"\n                      id=\"darkBackgroundColor\"\n                      value={formData.darkBackgroundColor}\n                      onChange={(e) => setFormData(prev => ({ ...prev, darkBackgroundColor: e.target.value }))}\n                      className=\"w-10 h-10 rounded border cursor-pointer\"\n                    />\n                    <Input\n                      value={formData.darkBackgroundColor}\n                      onChange={(e) => setFormData(prev => ({ ...prev, darkBackgroundColor: e.target.value }))}\n                      placeholder=\"#0f172a\"\n                      className=\"text-xs\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"darkSurfaceColor\" className=\"text-xs\">Dark Surface</Label>\n                  <div className=\"flex items-center space-x-2\">\n                    <input\n                      type=\"color\"\n                      id=\"darkSurfaceColor\"\n                      value={formData.darkSurfaceColor}\n                      onChange={(e) => setFormData(prev => ({ ...prev, darkSurfaceColor: e.target.value }))}\n                      className=\"w-10 h-10 rounded border cursor-pointer\"\n                    />\n                    <Input\n                      value={formData.darkSurfaceColor}\n                      onChange={(e) => setFormData(prev => ({ ...prev, darkSurfaceColor: e.target.value }))}\n                      placeholder=\"#1e293b\"\n                      className=\"text-xs\"\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <Separator />\n\n            <div>\n              <Label className=\"text-sm font-medium\">Gradient Colors (for auth pages)</Label>\n              <div className=\"grid grid-cols-3 gap-4 mt-2\">\n                <div>\n                  <Label htmlFor=\"gradientStartColor\" className=\"text-xs\">Start</Label>\n                  <div className=\"flex items-center space-x-2\">\n                    <input\n                      type=\"color\"\n                      id=\"gradientStartColor\"\n                      value={formData.gradientStartColor}\n                      onChange={(e) => setFormData(prev => ({ ...prev, gradientStartColor: e.target.value }))}\n                      className=\"w-10 h-10 rounded border cursor-pointer\"\n                    />\n                    <Input\n                      value={formData.gradientStartColor}\n                      onChange={(e) => setFormData(prev => ({ ...prev, gradientStartColor: e.target.value }))}\n                      className=\"text-xs\"\n                    />\n                  </div>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"gradientMiddleColor\" className=\"text-xs\">Middle</Label>\n                  <div className=\"flex items-center space-x-2\">\n                    <input\n                      type=\"color\"\n                      id=\"gradientMiddleColor\"\n                      value={formData.gradientMiddleColor}\n                      onChange={(e) => setFormData(prev => ({ ...prev, gradientMiddleColor: e.target.value }))}\n                      className=\"w-10 h-10 rounded border cursor-pointer\"\n                    />\n                    <Input\n                      value={formData.gradientMiddleColor}\n                      onChange={(e) => setFormData(prev => ({ ...prev, gradientMiddleColor: e.target.value }))}\n                      className=\"text-xs\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"gradientEndColor\" className=\"text-xs\">End</Label>\n                  <div className=\"flex items-center space-x-2\">\n                    <input\n                      type=\"color\"\n                      id=\"gradientEndColor\"\n                      value={formData.gradientEndColor}\n                      onChange={(e) => setFormData(prev => ({ ...prev, gradientEndColor: e.target.value }))}\n                      className=\"w-10 h-10 rounded border cursor-pointer\"\n                    />\n                    <Input\n                      value={formData.gradientEndColor}\n                      onChange={(e) => setFormData(prev => ({ ...prev, gradientEndColor: e.target.value }))}\n                      className=\"text-xs\"\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            <Separator />\n            \n            <div>\n              <Label className=\"text-sm font-medium\">Auth Form Background Colors</Label>\n              <p className=\"text-xs text-muted-foreground mb-3\">\n                Background colors for the form side of authentication pages\n              </p>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"authFormBackgroundColor\" className=\"text-xs\">Light Mode</Label>\n                  <div className=\"flex items-center space-x-2\">\n                    <input\n                      type=\"color\"\n                      id=\"authFormBackgroundColor\"\n                      value={formData.authFormBackgroundColor}\n                      onChange={(e) => setFormData(prev => ({ ...prev, authFormBackgroundColor: e.target.value }))}\n                      className=\"w-10 h-10 rounded border cursor-pointer\"\n                    />\n                    <Input\n                      value={formData.authFormBackgroundColor}\n                      onChange={(e) => setFormData(prev => ({ ...prev, authFormBackgroundColor: e.target.value }))}\n                      placeholder=\"#ffffff\"\n                      className=\"text-xs\"\n                    />\n                  </div>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"darkAuthFormBackgroundColor\" className=\"text-xs\">Dark Mode</Label>\n                  <div className=\"flex items-center space-x-2\">\n                    <input\n                      type=\"color\"\n                      id=\"darkAuthFormBackgroundColor\"\n                      value={formData.darkAuthFormBackgroundColor}\n                      onChange={(e) => setFormData(prev => ({ ...prev, darkAuthFormBackgroundColor: e.target.value }))}\n                      className=\"w-10 h-10 rounded border cursor-pointer\"\n                    />\n                    <Input\n                      value={formData.darkAuthFormBackgroundColor}\n                      onChange={(e) => setFormData(prev => ({ ...prev, darkAuthFormBackgroundColor: e.target.value }))}\n                      placeholder=\"#0f172a\"\n                      className=\"text-xs\"\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <Separator />\n          </CardContent>\n        </Card>\n\n        {/* Typography & Layout */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Layout className=\"h-5 w-5\" />\n              <span>Typography & Layout</span>\n            </CardTitle>\n            <CardDescription>\n              Font families and design properties\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"fontFamily\">Font Family</Label>\n              <Input\n                id=\"fontFamily\"\n                value={formData.fontFamily}\n                onChange={(e) => setFormData(prev => ({ ...prev, fontFamily: e.target.value }))}\n                placeholder=\"Inter, sans-serif\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"headingFontFamily\">Heading Font Family</Label>\n              <Input\n                id=\"headingFontFamily\"\n                value={formData.headingFontFamily}\n                onChange={(e) => setFormData(prev => ({ ...prev, headingFontFamily: e.target.value }))}\n                placeholder=\"Inter, sans-serif\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"borderRadius\">Border Radius</Label>\n              <Input\n                id=\"borderRadius\"\n                value={formData.borderRadius}\n                onChange={(e) => setFormData(prev => ({ ...prev, borderRadius: e.target.value }))}\n                placeholder=\"0.75rem\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"shadowIntensity\">Shadow Intensity</Label>\n              <Select\n                value={formData.shadowIntensity}\n                onValueChange={(value: 'light' | 'medium' | 'heavy') => \n                  setFormData(prev => ({ ...prev, shadowIntensity: value }))\n                }\n              >\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"light\">Light</SelectItem>\n                  <SelectItem value=\"medium\">Medium</SelectItem>\n                  <SelectItem value=\"heavy\">Heavy</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Contact Information */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Mail className=\"h-5 w-5\" />\n              <span>Contact Information</span>\n            </CardTitle>\n            <CardDescription>\n              Business contact details\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"contactEmail\">Contact Email</Label>\n              <Input\n                id=\"contactEmail\"\n                type=\"email\"\n                value={formData.contactEmail}\n                onChange={(e) => setFormData(prev => ({ ...prev, contactEmail: e.target.value }))}\n                placeholder=\"contact@yourcompany.com\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"supportEmail\">Support Email</Label>\n              <Input\n                id=\"supportEmail\"\n                type=\"email\"\n                value={formData.supportEmail}\n                onChange={(e) => setFormData(prev => ({ ...prev, supportEmail: e.target.value }))}\n                placeholder=\"support@yourcompany.com\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"websiteUrl\">Website URL</Label>\n              <Input\n                id=\"websiteUrl\"\n                type=\"url\"\n                value={formData.websiteUrl}\n                onChange={(e) => setFormData(prev => ({ ...prev, websiteUrl: e.target.value }))}\n                placeholder=\"https://yourcompany.com\"\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Social Media */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <LinkIcon className=\"h-5 w-5\" />\n              <span>Social Media</span>\n            </CardTitle>\n            <CardDescription>\n              Social media profile links\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"twitter\">Twitter</Label>\n              <Input\n                id=\"twitter\"\n                type=\"url\"\n                value={formData.socialLinks.twitter}\n                onChange={(e) => setFormData(prev => ({ \n                  ...prev, \n                  socialLinks: { ...prev.socialLinks, twitter: e.target.value }\n                }))}\n                placeholder=\"https://twitter.com/yourcompany\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"linkedin\">LinkedIn</Label>\n              <Input\n                id=\"linkedin\"\n                type=\"url\"\n                value={formData.socialLinks.linkedin}\n                onChange={(e) => setFormData(prev => ({ \n                  ...prev, \n                  socialLinks: { ...prev.socialLinks, linkedin: e.target.value }\n                }))}\n                placeholder=\"https://linkedin.com/company/yourcompany\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"facebook\">Facebook</Label>\n              <Input\n                id=\"facebook\"\n                type=\"url\"\n                value={formData.socialLinks.facebook}\n                onChange={(e) => setFormData(prev => ({ \n                  ...prev, \n                  socialLinks: { ...prev.socialLinks, facebook: e.target.value }\n                }))}\n                placeholder=\"https://facebook.com/yourcompany\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"instagram\">Instagram</Label>\n              <Input\n                id=\"instagram\"\n                type=\"url\"\n                value={formData.socialLinks.instagram}\n                onChange={(e) => setFormData(prev => ({ \n                  ...prev, \n                  socialLinks: { ...prev.socialLinks, instagram: e.target.value }\n                }))}\n                placeholder=\"https://instagram.com/yourcompany\"\n              />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Design Options */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Design Options</CardTitle>\n          <CardDescription>\n            Toggle various design features\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <Label>Enable Animations</Label>\n              <p className=\"text-sm text-muted-foreground\">Smooth transitions and micro-interactions</p>\n            </div>\n            <Switch\n              checked={formData.enableAnimations}\n              onCheckedChange={(checked) => setFormData(prev => ({ ...prev, enableAnimations: checked }))}\n            />\n          </div>\n\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <Label>Enable Glass Morphism</Label>\n              <p className=\"text-sm text-muted-foreground\">Semi-transparent glass-like effects</p>\n            </div>\n            <Switch\n              checked={formData.enableGlassMorphism}\n              onCheckedChange={(checked) => setFormData(prev => ({ ...prev, enableGlassMorphism: checked }))}\n            />\n          </div>\n\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <Label>Enable Gradient Backgrounds</Label>\n              <p className=\"text-sm text-muted-foreground\">Colorful gradient backgrounds on auth pages</p>\n            </div>\n            <Switch\n              checked={formData.enableGradientBackground}\n              onCheckedChange={(checked) => setFormData(prev => ({ ...prev, enableGradientBackground: checked }))}\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Custom CSS */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Custom CSS</CardTitle>\n          <CardDescription>\n            Add custom CSS for advanced styling (use with caution)\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Textarea\n            value={formData.customCss}\n            onChange={(e) => setFormData(prev => ({ ...prev, customCss: e.target.value }))}\n            placeholder=\"/* Custom CSS rules */\"\n            rows={8}\n            className=\"font-mono text-sm\"\n          />\n        </CardContent>\n      </Card>\n\n      {/* Submit Button */}\n      <div className=\"flex justify-end space-x-4\">\n        <Button\n          type=\"submit\"\n          disabled={isSubmitting}\n          className=\"flex items-center space-x-2\"\n        >\n          {isSubmitting ? (\n            <Loader2 className=\"h-4 w-4 animate-spin\" />\n          ) : (\n            <Save className=\"h-4 w-4\" />\n          )}\n          <span>{isSubmitting ? 'Saving...' : 'Save Changes'}</span>\n        </Button>\n      </div>\n    </form>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/settings/DataSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/settings/LowBalanceSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/settings/NotificationSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/settings/PaymentGatewaySettings.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":356,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":356,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10722,10725],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10722,10725],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Badge } from '@/components/ui/badge';\nimport { Switch } from '@/components/ui/switch';\n\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport { \n  CreditCard, \n  Plus, \n  Settings, \n  Trash2, \n  Edit3, \n  Loader2, \n  Shield,\n  DollarSign,\n  AlertCircle,\n  CheckCircle,\n  Eye,\n  EyeOff\n} from 'lucide-react';\nimport { toast } from 'sonner';\nimport { useBranding } from '@/hooks/useBranding';\nimport { IPaymentGateway } from '@/models/PaymentGateway';\n\ninterface PaymentGatewayFormData {\n  name: string;\n  provider: 'stripe' | 'paypal' | 'square' | 'razorpay';\n  configuration: {\n    publishableKey?: string;\n    secretKey?: string;\n    webhookSecret?: string;\n    clientId?: string;\n    clientSecret?: string;\n    applicationId?: string;\n    accessToken?: string;\n    keyId?: string;\n    keySecret?: string;\n  };\n  settings: {\n    allowedCurrencies: string[];\n    minimumAmount: number;\n    maximumAmount: number;\n    processingFee: number;\n    fixedFee: number;\n  };\n  isActive: boolean;\n}\n\nconst PROVIDER_CONFIGS = {\n  stripe: {\n    name: 'Stripe',\n    icon: '💳',\n    description: 'Accept credit cards, bank transfers, and more',\n    fields: [\n      { key: 'publishableKey', label: 'Publishable Key', type: 'text', required: true, public: true },\n      { key: 'secretKey', label: 'Secret Key', type: 'password', required: true, public: false },\n      { key: 'webhookSecret', label: 'Webhook Secret', type: 'password', required: false, public: false }\n    ]\n  },\n  paypal: {\n    name: 'PayPal',\n    icon: '🅿️',\n    description: 'Accept PayPal payments and credit cards',\n    fields: [\n      { key: 'clientId', label: 'Client ID', type: 'text', required: true, public: true },\n      { key: 'clientSecret', label: 'Client Secret', type: 'password', required: true, public: false }\n    ]\n  },\n  square: {\n    name: 'Square',\n    icon: '⬜',\n    description: 'Accept payments with Square',\n    fields: [\n      { key: 'applicationId', label: 'Application ID', type: 'text', required: true, public: true },\n      { key: 'accessToken', label: 'Access Token', type: 'password', required: true, public: false }\n    ]\n  },\n  razorpay: {\n    name: 'Razorpay',\n    icon: '🇮🇳',\n    description: 'Accept payments in India with Razorpay',\n    fields: [\n      { key: 'keyId', label: 'Key ID', type: 'text', required: true, public: true },\n      { key: 'keySecret', label: 'Key Secret', type: 'password', required: true, public: false }\n    ]\n  }\n};\n\nconst CURRENCY_OPTIONS = [\n  'USD', 'EUR', 'GBP', 'CAD', 'AUD', 'JPY', 'CHF', 'SEK', 'NOK', 'DKK', 'INR'\n];\n\nexport function PaymentGatewaySettings() {\n  const { colors } = useBranding();\n  const [gateways, setGateways] = useState<IPaymentGateway[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [showDialog, setShowDialog] = useState(false);\n  const [editingGateway, setEditingGateway] = useState<IPaymentGateway | null>(null);\n  const [showSecrets, setShowSecrets] = useState<Record<string, boolean>>({});\n  const [formData, setFormData] = useState<PaymentGatewayFormData>({\n    name: '',\n    provider: 'stripe',\n    configuration: {},\n    settings: {\n      allowedCurrencies: ['USD'],\n      minimumAmount: 10,\n      maximumAmount: 10000,\n      processingFee: 2.9,\n      fixedFee: 0.30\n    },\n    isActive: false\n  });\n\n  const fetchGateways = async () => {\n    try {\n      setIsLoading(true);\n      const response = await fetch('/api/payment-gateways');\n      if (!response.ok) throw new Error('Failed to fetch gateways');\n      \n      const data = await response.json();\n      setGateways(data.gateways || []);\n    } catch (error) {\n      console.error('Error fetching payment gateways:', error);\n      toast.error('Failed to load payment gateways');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchGateways();\n  }, []);\n\n  const resetForm = () => {\n    setFormData({\n      name: '',\n      provider: 'stripe',\n      configuration: {},\n      settings: {\n        allowedCurrencies: ['USD'],\n        minimumAmount: 10,\n        maximumAmount: 10000,\n        processingFee: 2.9,\n        fixedFee: 0.30\n      },\n      isActive: false\n    });\n    setEditingGateway(null);\n  };\n\n  const handleEdit = (gateway: IPaymentGateway) => {\n    setEditingGateway(gateway);\n    setFormData({\n      name: gateway.name,\n      provider: gateway.provider,\n      configuration: gateway.configuration,\n      settings: gateway.settings,\n      isActive: gateway.isActive\n    });\n    setShowDialog(true);\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    try {\n      const url = editingGateway \n        ? `/api/payment-gateways/${editingGateway._id}`\n        : '/api/payment-gateways';\n      \n      const method = editingGateway ? 'PUT' : 'POST';\n      \n      const response = await fetch(url, {\n        method,\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(formData)\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to save gateway');\n      }\n\n      const result = await response.json();\n      toast.success(result.message);\n      \n      setShowDialog(false);\n      resetForm();\n      fetchGateways();\n    } catch (error) {\n      console.error('Error saving gateway:', error);\n      toast.error(error instanceof Error ? error.message : 'Failed to save gateway');\n    }\n  };\n\n  const handleDelete = async (id: string) => {\n    if (!confirm('Are you sure you want to delete this payment gateway?')) {\n      return;\n    }\n\n    try {\n      const response = await fetch(`/api/payment-gateways/${id}`, {\n        method: 'DELETE'\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to delete gateway');\n      }\n\n      toast.success('Payment gateway deleted successfully');\n      fetchGateways();\n    } catch (error) {\n      console.error('Error deleting gateway:', error);\n      toast.error(error instanceof Error ? error.message : 'Failed to delete gateway');\n    }\n  };\n\n  const toggleSecret = (fieldKey: string) => {\n    setShowSecrets(prev => ({\n      ...prev,\n      [fieldKey]: !prev[fieldKey]\n    }));\n  };\n\n  const renderConfigurationFields = () => {\n    const config = PROVIDER_CONFIGS[formData.provider];\n    \n    return config.fields.map(field => (\n      <div key={field.key} className=\"space-y-2\">\n        <Label className=\"flex items-center gap-2\">\n          {field.label}\n          {field.required && <span className=\"text-red-500\">*</span>}\n          {!field.public && <Shield className=\"h-3 w-3 text-amber-500\" />}\n        </Label>\n        <div className=\"relative\">\n          <Input\n            type={field.type === 'password' && !showSecrets[field.key] ? 'password' : 'text'}\n            value={formData.configuration[field.key as keyof typeof formData.configuration] || ''}\n            onChange={(e) => setFormData(prev => ({\n              ...prev,\n              configuration: {\n                ...prev.configuration,\n                [field.key]: e.target.value\n              }\n            }))}\n            placeholder={`Enter ${field.label.toLowerCase()}`}\n            required={field.required}\n          />\n          {field.type === 'password' && (\n            <Button\n              type=\"button\"\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"absolute right-2 top-1/2 -translate-y-1/2 h-6 w-6 p-0\"\n              onClick={() => toggleSecret(field.key)}\n            >\n              {showSecrets[field.key] ? (\n                <EyeOff className=\"h-3 w-3\" />\n              ) : (\n                <Eye className=\"h-3 w-3\" />\n              )}\n            </Button>\n          )}\n        </div>\n        {!field.public && (\n          <p className=\"text-xs text-amber-600 flex items-center gap-1\">\n            <Shield className=\"h-3 w-3\" />\n            This field will be encrypted and hidden\n          </p>\n        )}\n      </div>\n    ));\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <Loader2 className=\"h-8 w-8 animate-spin\" style={{ color: colors.primary }} />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h3 className=\"text-lg font-semibold\">Payment Gateways</h3>\n          <p className=\"text-sm text-muted-foreground\">\n            Configure payment processors for balance top-ups\n          </p>\n        </div>\n        <Dialog open={showDialog} onOpenChange={(open) => {\n          setShowDialog(open);\n          if (!open) resetForm();\n        }}>\n          <DialogTrigger asChild>\n            <Button className=\"gap-2\" style={{ backgroundColor: colors.primary }}>\n              <Plus className=\"h-4 w-4\" />\n              Add Gateway\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingGateway ? 'Edit Payment Gateway' : 'Add Payment Gateway'}\n              </DialogTitle>\n              <DialogDescription>\n                Configure a payment processor to accept balance top-ups from users.\n              </DialogDescription>\n            </DialogHeader>\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label>Gateway Name *</Label>\n                  <Input\n                    value={formData.name}\n                    onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                    placeholder=\"My Stripe Gateway\"\n                    required\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label>Provider *</Label>\n                  <Select\n                    value={formData.provider}\n                    onValueChange={(value) => setFormData(prev => ({ \n                      ...prev, \n                      provider: value as any,\n                      configuration: {} // Reset configuration when provider changes\n                    }))}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {Object.entries(PROVIDER_CONFIGS).map(([key, config]) => (\n                        <SelectItem key={key} value={key}>\n                          <div className=\"flex items-center gap-2\">\n                            <span>{config.icon}</span>\n                            <span>{config.name}</span>\n                          </div>\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"space-y-4\">\n                <h4 className=\"font-medium flex items-center gap-2\">\n                  <Settings className=\"h-4 w-4\" />\n                  {PROVIDER_CONFIGS[formData.provider].name} Configuration\n                </h4>\n                <div className=\"grid grid-cols-1 gap-4\">\n                  {renderConfigurationFields()}\n                </div>\n              </div>\n\n              <div className=\"space-y-4\">\n                <h4 className=\"font-medium flex items-center gap-2\">\n                  <DollarSign className=\"h-4 w-4\" />\n                  Payment Settings\n                </h4>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label>Minimum Amount</Label>\n                    <Input\n                      type=\"number\"\n                      step=\"0.01\"\n                      min=\"0\"\n                      value={formData.settings.minimumAmount}\n                      onChange={(e) => setFormData(prev => ({\n                        ...prev,\n                        settings: { ...prev.settings, minimumAmount: parseFloat(e.target.value) || 0 }\n                      }))}\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label>Maximum Amount</Label>\n                    <Input\n                      type=\"number\"\n                      step=\"0.01\"\n                      min=\"0\"\n                      value={formData.settings.maximumAmount}\n                      onChange={(e) => setFormData(prev => ({\n                        ...prev,\n                        settings: { ...prev.settings, maximumAmount: parseFloat(e.target.value) || 0 }\n                      }))}\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label>Processing Fee (%)</Label>\n                    <Input\n                      type=\"number\"\n                      step=\"0.01\"\n                      min=\"0\"\n                      max=\"100\"\n                      value={formData.settings.processingFee}\n                      onChange={(e) => setFormData(prev => ({\n                        ...prev,\n                        settings: { ...prev.settings, processingFee: parseFloat(e.target.value) || 0 }\n                      }))}\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label>Fixed Fee ($)</Label>\n                    <Input\n                      type=\"number\"\n                      step=\"0.01\"\n                      min=\"0\"\n                      value={formData.settings.fixedFee}\n                      onChange={(e) => setFormData(prev => ({\n                        ...prev,\n                        settings: { ...prev.settings, fixedFee: parseFloat(e.target.value) || 0 }\n                      }))}\n                    />\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label>Allowed Currencies</Label>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {CURRENCY_OPTIONS.map(currency => (\n                      <label key={currency} className=\"flex items-center gap-1 cursor-pointer\">\n                        <input\n                          type=\"checkbox\"\n                          checked={formData.settings.allowedCurrencies.includes(currency)}\n                          onChange={(e) => {\n                            const currencies = e.target.checked\n                              ? [...formData.settings.allowedCurrencies, currency]\n                              : formData.settings.allowedCurrencies.filter(c => c !== currency);\n                            setFormData(prev => ({\n                              ...prev,\n                              settings: { ...prev.settings, allowedCurrencies: currencies }\n                            }));\n                          }}\n                          className=\"rounded\"\n                        />\n                        <span className=\"text-sm\">{currency}</span>\n                      </label>\n                    ))}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex items-center space-x-2\">\n                <Switch\n                  id=\"active\"\n                  checked={formData.isActive}\n                  onCheckedChange={(checked) => setFormData(prev => ({ ...prev, isActive: checked }))}\n                />\n                <Label htmlFor=\"active\">Active Gateway</Label>\n              </div>\n\n              <div className=\"flex gap-2 pt-4\">\n                <Button type=\"submit\" className=\"flex-1\" style={{ backgroundColor: colors.primary }}>\n                  {editingGateway ? 'Update Gateway' : 'Create Gateway'}\n                </Button>\n                <Button type=\"button\" variant=\"outline\" onClick={() => setShowDialog(false)}>\n                  Cancel\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {gateways.length === 0 ? (\n        <Card>\n          <CardContent className=\"text-center py-12\">\n            <div className=\"space-y-4\">\n              <div \n                className=\"mx-auto w-16 h-16 rounded-2xl flex items-center justify-center\"\n                style={{ backgroundColor: `${colors.primary}20` }}\n              >\n                <CreditCard className=\"h-8 w-8\" style={{ color: colors.primary }} />\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold\">No Payment Gateways</h3>\n                <p className=\"text-muted-foreground\">\n                  Add a payment gateway to enable balance top-ups for users.\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      ) : (\n        <Card>\n          <CardContent className=\"p-0\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Gateway</TableHead>\n                  <TableHead>Provider</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Settings</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {gateways.map((gateway) => {\n                  const config = PROVIDER_CONFIGS[gateway.provider];\n                  return (\n                    <TableRow key={gateway._id}>\n                      <TableCell>\n                        <div>\n                          <div className=\"font-medium\">{gateway.name}</div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            Created {new Date(gateway.createdAt).toLocaleDateString()}\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center gap-2\">\n                          <span className=\"text-lg\">{config.icon}</span>\n                          <span>{config.name}</span>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        {gateway.isActive ? (\n                          <Badge className=\"bg-green-100 text-green-800\">\n                            <CheckCircle className=\"h-3 w-3 mr-1\" />\n                            Active\n                          </Badge>\n                        ) : (\n                          <Badge variant=\"secondary\">\n                            <AlertCircle className=\"h-3 w-3 mr-1\" />\n                            Inactive\n                          </Badge>\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"text-sm space-y-1\">\n                          <div>Min: {gateway.settings.minimumAmount}</div>\n                          <div>Max: {gateway.settings.maximumAmount}</div>\n                          <div>Fee: {gateway.settings.processingFee}% + {gateway.settings.fixedFee}</div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center gap-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleEdit(gateway)}\n                            className=\"h-8 w-8 p-0\"\n                          >\n                            <Edit3 className=\"h-3 w-3\" />\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleDelete(gateway._id)}\n                            className=\"h-8 w-8 p-0 text-red-600 hover:text-red-700\"\n                          >\n                            <Trash2 className=\"h-3 w-3\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  );\n                })}\n              </TableBody>\n            </Table>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/settings/SchedulerSettings.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":155,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":155,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5529,5532],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5529,5532],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Switch } from '@/components/ui/switch';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Separator } from '@/components/ui/separator';\nimport { Clock, Settings, Globe, Calendar, CheckCircle, Zap, RefreshCw } from 'lucide-react';\nimport { toast } from 'sonner';\n\ninterface SchedulerSettings {\n  enabled: boolean;\n  checkInterval: number; // in minutes\n  timezone: string;\n  lastCheck?: string;\n  nextCheck?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface TimeOption {\n  value: number; // in minutes\n  label: string;\n  description: string;\n}\n\nconst TIME_OPTIONS: TimeOption[] = [\n  { value: 30, label: '30 minutes', description: 'Very frequent checks' },\n  { value: 60, label: '1 hour', description: 'Frequent checks' },\n  { value: 120, label: '2 hours', description: 'Regular checks' },\n  { value: 180, label: '3 hours', description: 'Regular checks' },\n  { value: 240, label: '4 hours', description: 'Standard checks' },\n  { value: 360, label: '6 hours', description: 'Recommended for most users' },\n  { value: 480, label: '8 hours', description: 'Standard checks' },\n  { value: 720, label: '12 hours', description: 'Twice daily' },\n  { value: 1440, label: '24 hours', description: 'Daily checks' },\n  { value: 2880, label: '48 hours', description: 'Every 2 days' },\n];\n\nconst TIMEZONE_OPTIONS = [\n  { value: 'Europe/London', label: 'London (GMT/BST)' },\n  { value: 'Europe/Paris', label: 'Paris (CET/CEST)' },\n  { value: 'Europe/Berlin', label: 'Berlin (CET/CEST)' },\n  { value: 'Europe/Madrid', label: 'Madrid (CET/CEST)' },\n  { value: 'Europe/Rome', label: 'Rome (CET/CEST)' },\n  { value: 'Europe/Amsterdam', label: 'Amsterdam (CET/CEST)' },\n  { value: 'America/New_York', label: 'New York (EST/EDT)' },\n  { value: 'America/Los_Angeles', label: 'Los Angeles (PST/PDT)' },\n  { value: 'America/Chicago', label: 'Chicago (CST/CDT)' },\n  { value: 'America/Toronto', label: 'Toronto (EST/EDT)' },\n  { value: 'Asia/Tokyo', label: 'Tokyo (JST)' },\n  { value: 'Asia/Shanghai', label: 'Shanghai (CST)' },\n  { value: 'Asia/Dubai', label: 'Dubai (GST)' },\n  { value: 'Asia/Kolkata', label: 'Mumbai (IST)' },\n  { value: 'Australia/Sydney', label: 'Sydney (AEST/AEDT)' },\n  { value: 'UTC', label: 'UTC (Coordinated Universal Time)' },\n];\n\nexport function SchedulerSettings() {\n  const [settings, setSettings] = useState<SchedulerSettings | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isSaving, setIsSaving] = useState(false);\n  const [isTriggeringCheck, setIsTriggeringCheck] = useState(false);\n\n  const fetchSettings = async () => {\n    try {\n      const response = await fetch('/api/settings/scheduler');\n      if (response.ok) {\n        const data = await response.json();\n        setSettings(data);\n      } else {\n        toast.error('Failed to fetch scheduler settings');\n      }\n    } catch (error) {\n      console.error('Error fetching scheduler settings:', error);\n      toast.error('Failed to fetch scheduler settings');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchSettings();\n  }, []);\n\n  const handleSave = async () => {\n    if (!settings) return;\n\n    try {\n      setIsSaving(true);\n      const response = await fetch('/api/settings/scheduler', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          enabled: settings.enabled,\n          checkInterval: settings.checkInterval,\n          timezone: settings.timezone,\n        }),\n      });\n\n      const result = await response.json();\n      \n      if (response.ok) {\n        toast.success(result.message || 'Settings saved successfully');\n        await fetchSettings(); // Refresh settings\n      } else {\n        toast.error(result.error || 'Failed to save settings');\n      }\n    } catch (error) {\n      console.error('Error saving settings:', error);\n      toast.error('Failed to save settings');\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const handleTriggerCheck = async () => {\n    try {\n      setIsTriggeringCheck(true);\n      toast.info('Starting manual balance check...');\n      \n      const response = await fetch('/api/admin/scheduler', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          action: 'trigger_check'\n        }),\n      });\n\n      const result = await response.json();\n      \n      if (response.ok) {\n        toast.success(result.message || 'Balance check completed successfully');\n        \n        // Refresh settings to update last check time after a short delay\n        setTimeout(async () => {\n          await fetchSettings();\n          toast.info('Status information refreshed');\n        }, 2000);\n      } else {\n        toast.error(result.error || 'Failed to trigger balance check');\n        console.error('Trigger check error:', result);\n      }\n    } catch (error) {\n      console.error('Error triggering balance check:', error);\n      toast.error('Failed to trigger balance check - check console for details');\n    } finally {\n      setIsTriggeringCheck(false);\n    }\n  };\n\n  const updateSetting = (key: keyof SchedulerSettings, value: any) => {\n    if (!settings) return;\n    setSettings({ ...settings, [key]: value });\n  };\n\n  const getSelectedTimeOption = () => {\n    return TIME_OPTIONS.find(option => option.value === settings?.checkInterval) || TIME_OPTIONS[5]; // Default to 6 hours\n  };\n\n  const getSelectedTimezone = () => {\n    return TIMEZONE_OPTIONS.find(tz => tz.value === settings?.timezone) || TIMEZONE_OPTIONS[0]; // Default to London\n  };\n\n  const formatDateTime = (dateString?: string) => {\n    if (!dateString) return 'Never';\n    const date = new Date(dateString);\n    return date.toLocaleString();\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-center\">\n            <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary\"></div>\n            <span className=\"ml-2\">Loading scheduler settings...</span>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!settings) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"text-center text-muted-foreground\">\n            Failed to load scheduler settings\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Clock className=\"h-5 w-5\" />\n            <span>Automatic Balance Checking</span>\n          </CardTitle>\n          <CardDescription>\n            Configure when and how often the system checks user balances for notifications\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {/* Enable/Disable Toggle */}\n          <div className=\"flex items-center justify-between\">\n            <div className=\"space-y-1\">\n              <Label className=\"text-base font-medium\">Enable Automatic Checks</Label>\n              <p className=\"text-sm text-muted-foreground\">\n                Turn on to automatically monitor user balances and send notifications\n              </p>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Switch\n                checked={settings.enabled}\n                onCheckedChange={(checked) => updateSetting('enabled', checked)}\n              />\n              <Badge variant={settings.enabled ? 'default' : 'secondary'}>\n                {settings.enabled ? 'Enabled' : 'Disabled'}\n              </Badge>\n            </div>\n          </div>\n\n          <Separator />\n\n          {/* Check Interval */}\n          <div className=\"space-y-4\">\n            <div className=\"space-y-1\">\n              <Label className=\"text-base font-medium\">Check Frequency</Label>\n              <p className=\"text-sm text-muted-foreground\">\n                How often should the system check all user balances\n              </p>\n            </div>\n            \n            <Select\n              value={settings.checkInterval.toString()}\n              onValueChange={(value) => updateSetting('checkInterval', parseInt(value))}\n              disabled={!settings.enabled}\n            >\n              <SelectTrigger className=\"w-full\">\n                <SelectValue>\n                  <div className=\"flex items-center justify-between w-full\">\n                    <span>{getSelectedTimeOption().label}</span>\n                    <span className=\"text-muted-foreground text-sm\">{getSelectedTimeOption().description}</span>\n                  </div>\n                </SelectValue>\n              </SelectTrigger>\n              <SelectContent>\n                {TIME_OPTIONS.map((option) => (\n                  <SelectItem key={option.value} value={option.value.toString()}>\n                    <div className=\"flex items-center justify-between w-full\">\n                      <span>{option.label}</span>\n                      <span className=\"text-muted-foreground text-sm ml-4\">{option.description}</span>\n                    </div>\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <Separator />\n\n          {/* Timezone */}\n          <div className=\"space-y-4\">\n            <div className=\"space-y-1\">\n              <Label className=\"text-base font-medium flex items-center space-x-2\">\n                <Globe className=\"h-4 w-4\" />\n                <span>Timezone</span>\n              </Label>\n              <p className=\"text-sm text-muted-foreground\">\n                The timezone used for scheduling balance checks\n              </p>\n            </div>\n            \n            <Select\n              value={settings.timezone}\n              onValueChange={(value) => updateSetting('timezone', value)}\n              disabled={!settings.enabled}\n            >\n              <SelectTrigger className=\"w-full\">\n                <SelectValue>\n                  {getSelectedTimezone().label}\n                </SelectValue>\n              </SelectTrigger>\n              <SelectContent>\n                {TIMEZONE_OPTIONS.map((tz) => (\n                  <SelectItem key={tz.value} value={tz.value}>\n                    {tz.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <Separator />\n\n          {/* Status Information */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <Label className=\"text-base font-medium flex items-center space-x-2\">\n                <Calendar className=\"h-4 w-4\" />\n                <span>Status Information</span>\n              </Label>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={fetchSettings}\n                disabled={isLoading}\n                className=\"flex items-center space-x-1\"\n              >\n                <RefreshCw className={`h-3 w-3 ${isLoading ? 'animate-spin' : ''}`} />\n                <span>Refresh</span>\n              </Button>\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"p-3 bg-muted rounded-lg\">\n                <div className=\"flex items-center space-x-2 mb-1\">\n                  <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                  <span className=\"font-medium text-sm\">Last Check</span>\n                </div>\n                <p className=\"text-sm text-muted-foreground\">\n                  {formatDateTime(settings.lastCheck)}\n                </p>\n              </div>\n              \n              <div className=\"p-3 bg-muted rounded-lg\">\n                <div className=\"flex items-center space-x-2 mb-1\">\n                  <Clock className=\"h-4 w-4 text-blue-600\" />\n                  <span className=\"font-medium text-sm\">Next Check</span>\n                </div>\n                <p className=\"text-sm text-muted-foreground\">\n                  {settings.enabled ? formatDateTime(settings.nextCheck) : 'Disabled'}\n                </p>\n              </div>\n            </div>\n          </div>\n\n          <Separator />\n\n          {/* Action Buttons */}\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-end\">\n            <Button \n              onClick={handleTriggerCheck} \n              disabled={isTriggeringCheck || !settings.enabled}\n              variant=\"outline\"\n              className=\"flex items-center space-x-2\"\n            >\n              {isTriggeringCheck ? (\n                <>\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-current\"></div>\n                  <span>Checking...</span>\n                </>\n              ) : (\n                <>\n                  <Zap className=\"h-4 w-4\" />\n                  <span>Check Now</span>\n                </>\n              )}\n            </Button>\n            \n            <Button \n              onClick={handleSave} \n              disabled={isSaving}\n              className=\"flex items-center space-x-2\"\n            >\n              {isSaving ? (\n                <>\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                  <span>Saving...</span>\n                </>\n              ) : (\n                <>\n                  <Settings className=\"h-4 w-4\" />\n                  <span>Save Settings</span>\n                </>\n              )}\n            </Button>\n          </div>\n\n          {/* Help Text */}\n          <div className=\"text-sm text-muted-foreground bg-muted/50 p-3 rounded-lg\">\n            <p className=\"font-medium mb-1\">💡 Quick Actions:</p>\n            <ul className=\"space-y-1 text-xs\">\n              <li><strong>Check Now:</strong> Manually trigger a balance check for all users (only available when scheduler is enabled)</li>\n              <li><strong>Save Settings:</strong> Apply new schedule and timezone settings to the automatic scheduler</li>\n            </ul>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/settings/SippyApiSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/settings/SmtpSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/settings/SupportSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/tickets/CreateTicketForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":227,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":227,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6710,6713],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6710,6713],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":249,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":249,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7379,7382],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7379,7382],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":249,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":249,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7402,7405],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7402,7405],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"jsx-a11y/alt-text","severity":1,"message":"Image elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","line":268,"column":14,"nodeType":"JSXOpeningElement","endLine":268,"endColumn":43},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":299,"column":54,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[9166,9237],"text":"We&apos;re here to help! Describe your issue and we'll get back to you soon."},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[9166,9237],"text":"We&lsquo;re here to help! Describe your issue and we'll get back to you soon."},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[9166,9237],"text":"We&#39;re here to help! Describe your issue and we'll get back to you soon."},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[9166,9237],"text":"We&rsquo;re here to help! Describe your issue and we'll get back to you soon."},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":299,"column":98,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[9166,9237],"text":"We're here to help! Describe your issue and we&apos;ll get back to you soon."},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[9166,9237],"text":"We're here to help! Describe your issue and we&lsquo;ll get back to you soon."},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[9166,9237],"text":"We're here to help! Describe your issue and we&#39;ll get back to you soon."},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[9166,9237],"text":"We're here to help! Describe your issue and we&rsquo;ll get back to you soon."},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":320,"column":23,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[10017,10054],"text":"\n                  What&apos;s the issue? "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[10017,10054],"text":"\n                  What&lsquo;s the issue? "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[10017,10054],"text":"\n                  What&#39;s the issue? "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[10017,10054],"text":"\n                  What&rsquo;s the issue? "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":583,"column":73,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[23794,23918],"text":"\n                          Reference these numbers in your ticket if they&apos;re related to your issue:\n                        "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[23794,23918],"text":"\n                          Reference these numbers in your ticket if they&lsquo;re related to your issue:\n                        "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[23794,23918],"text":"\n                          Reference these numbers in your ticket if they&#39;re related to your issue:\n                        "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[23794,23918],"text":"\n                          Reference these numbers in your ticket if they&rsquo;re related to your issue:\n                        "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":596,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":596,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[24713,24716],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[24713,24716],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":599,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":599,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[24938,24941],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[24938,24941],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":745,"column":38,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[32221,32312],"text":"\n                  Ready to submit? We&apos;ll get back to you within 24 hours.\n                "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[32221,32312],"text":"\n                  Ready to submit? We&lsquo;ll get back to you within 24 hours.\n                "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[32221,32312],"text":"\n                  Ready to submit? We&#39;ll get back to you within 24 hours.\n                "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[32221,32312],"text":"\n                  Ready to submit? We&rsquo;ll get back to you within 24 hours.\n                "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { useTickets } from '@/hooks/useTickets';\nimport { \n  TicketService, \n  TicketPriority, \n  SERVICE_LABELS, \n  PRIORITY_LABELS,\n  TicketAttachment,\n  OutboundCallData,\n  AssignedNumber\n} from '@/types/ticket';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Label } from '@/components/ui/label';\nimport { \n  Select, \n  SelectContent, \n  SelectItem, \n  SelectTrigger, \n  SelectValue \n} from '@/components/ui/select';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { \n  Upload, \n  X, \n  FileText, \n  Image,\n  AlertCircle,\n  CheckCircle2,\n  Loader2,\n  PaperclipIcon,\n  Sparkles,\n  Zap,\n  Phone,\n  PhoneCall,\n  Plus,\n  Trash2,\n  Globe,\n  Hash\n} from 'lucide-react';\n\ninterface CreateTicketFormProps {\n  onSuccess?: (ticketId: string) => void;\n  onCancel?: () => void;\n}\n\n// Common countries for telecom services\nconst COUNTRIES = [\n  { code: 'US', name: 'United States' },\n  { code: 'CA', name: 'Canada' },\n  { code: 'GB', name: 'United Kingdom' },\n  { code: 'DE', name: 'Germany' },\n  { code: 'FR', name: 'France' },\n  { code: 'IT', name: 'Italy' },\n  { code: 'ES', name: 'Spain' },\n  { code: 'NL', name: 'Netherlands' },\n  { code: 'AU', name: 'Australia' },\n  { code: 'JP', name: 'Japan' },\n  { code: 'SG', name: 'Singapore' },\n  { code: 'HK', name: 'Hong Kong' },\n  { code: 'IN', name: 'India' },\n  { code: 'BR', name: 'Brazil' },\n  { code: 'MX', name: 'Mexico' },\n];\n\n// Services that require country selection\nconst SERVICES_REQUIRING_COUNTRY = ['outbound_calls', 'inbound_calls', 'did_numbers', 'sms'];\n\nexport default function CreateTicketForm({ onSuccess, onCancel }: CreateTicketFormProps) {\n  const router = useRouter();\n  const { createTicket, uploadFiles, loading, error, clearError } = useTickets();\n\n  const [formData, setFormData] = useState({\n    title: '',\n    description: '',\n    service: '' as TicketService,\n    priority: 'medium' as TicketPriority,\n    country: '',\n  });\n\n  const [attachments, setAttachments] = useState<TicketAttachment[]>([]);\n  const [uploadingFiles, setUploadingFiles] = useState(false);\n  const [validationErrors, setValidationErrors] = useState<Record<string, string>>({});\n\n  // Service-specific data\n  const [outboundCallData, setOutboundCallData] = useState<OutboundCallData>({\n    examples: [{ number: '', callDate: '', description: '' }]\n  });\n  const [assignedNumbers, setAssignedNumbers] = useState<AssignedNumber[]>([]);\n  const [loadingNumbers, setLoadingNumbers] = useState(false);\n\n  // Fetch assigned numbers when service is numbers or inbound\n  useEffect(() => {\n    if (formData.service === 'did_numbers' || formData.service === 'inbound_calls') {\n      fetchAssignedNumbers();\n    }\n  }, [formData.service]);\n\n  const fetchAssignedNumbers = async () => {\n    setLoadingNumbers(true);\n    try {\n      const response = await fetch('/api/users/assigned-numbers');\n      if (response.ok) {\n        const data = await response.json();\n        setAssignedNumbers(data.assignedNumbers || []);\n      }\n    } catch (error) {\n      console.error('Error fetching assigned numbers:', error);\n    } finally {\n      setLoadingNumbers(false);\n    }\n  };\n\n  const validateForm = () => {\n    const errors: Record<string, string> = {};\n\n    if (!formData.title.trim()) {\n      errors.title = 'Title is required';\n    } else if (formData.title.length > 200) {\n      errors.title = 'Title must be 200 characters or less';\n    }\n\n    if (!formData.description.trim()) {\n      errors.description = 'Description is required';\n    } else if (formData.description.length > 2000) {\n      errors.description = 'Description must be 2000 characters or less';\n    }\n\n    if (!formData.service) {\n      errors.service = 'Service is required';\n    }\n\n    if (!formData.priority) {\n      errors.priority = 'Priority is required';\n    }\n\n    // Country validation for specific services\n    if (SERVICES_REQUIRING_COUNTRY.includes(formData.service) && !formData.country) {\n      errors.country = 'Country is required for this service';\n    }\n\n    // Outbound call data validation\n    if (formData.service === 'outbound_calls') {\n      const hasValidExample = outboundCallData.examples.some(\n        example => example.number.trim() && (typeof example.callDate === 'string' ? example.callDate.trim() : example.callDate)\n      );\n      if (!hasValidExample) {\n        errors.outboundCallData = 'At least one call example with number and date is required';\n      }\n    }\n\n    setValidationErrors(errors);\n    return Object.keys(errors).length === 0;\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    \n    // Clear validation error when user starts typing\n    if (validationErrors[field]) {\n      setValidationErrors(prev => ({ ...prev, [field]: '' }));\n    }\n\n    // Clear country when service changes to one that doesn't require it\n    if (field === 'service' && !SERVICES_REQUIRING_COUNTRY.includes(value as TicketService)) {\n      setFormData(prev => ({ ...prev, country: '' }));\n    }\n  };\n\n  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = event.target.files;\n    if (!files || files.length === 0) return;\n\n    setUploadingFiles(true);\n    clearError();\n\n    try {\n      const uploadedFiles = await uploadFiles(files);\n      setAttachments(prev => [...prev, ...uploadedFiles]);\n    } catch (err) {\n      console.error('File upload error:', err);\n    } finally {\n      setUploadingFiles(false);\n      event.target.value = '';\n    }\n  };\n\n  const removeAttachment = (index: number) => {\n    setAttachments(prev => prev.filter((_, i) => i !== index));\n  };\n\n  // Outbound call data handlers\n  const addCallExample = () => {\n    setOutboundCallData(prev => ({\n      examples: [...prev.examples, { number: '', callDate: '', description: '' }]\n    }));\n  };\n\n  const removeCallExample = (index: number) => {\n    setOutboundCallData(prev => ({\n      examples: prev.examples.filter((_, i) => i !== index)\n    }));\n  };\n\n  const updateCallExample = (index: number, field: string, value: string) => {\n    setOutboundCallData(prev => ({\n      examples: prev.examples.map((example, i) => \n        i === index ? { ...example, [field]: value } : example\n      )\n    }));\n  };\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n    \n    if (!validateForm()) {\n      return;\n    }\n\n    clearError();\n\n    const ticketData: any = {\n      ...formData,\n      attachments,\n    };\n\n    // Add country if required\n    if (SERVICES_REQUIRING_COUNTRY.includes(formData.service) && formData.country) {\n      ticketData.country = formData.country;\n    }\n\n    // Add outbound call data if applicable\n    if (formData.service === 'outbound_calls') {\n      ticketData.outboundCallData = {\n        examples: outboundCallData.examples.filter(\n          example => example.number.trim() && (typeof example.callDate === 'string' ? example.callDate.trim() : example.callDate)\n        )\n      };\n    }\n\n    const result = await createTicket(ticketData);\n    \n    if (result) {\n      const ticketId = (result as any)._id || (result as any).id;\n      if (onSuccess) {\n        onSuccess(ticketId);\n      } else {\n        router.push(`/support/tickets/${ticketId}`);\n      }\n    }\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const getFileIcon = (mimeType: string) => {\n    if (mimeType.startsWith('image/')) {\n      return <Image className=\"h-4 w-4\" />;\n    }\n    return <FileText className=\"h-4 w-4\" />;\n  };\n\n  const getPriorityIcon = (priority: TicketPriority) => {\n    switch (priority) {\n      case 'urgent':\n        return <Zap className=\"h-4 w-4 text-red-500\" />;\n      case 'high':\n        return <AlertCircle className=\"h-4 w-4 text-orange-500\" />;\n      case 'medium':\n        return <CheckCircle2 className=\"h-4 w-4 text-blue-500\" />;\n      case 'low':\n        return <CheckCircle2 className=\"h-4 w-4 text-green-500\" />;\n      default:\n        return <CheckCircle2 className=\"h-4 w-4 text-blue-500\" />;\n    }\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Hero Section */}\n      <Card className=\"border-0 bg-gradient-to-br from-primary/5 via-primary/3 to-transparent dark:from-primary/10 dark:via-primary/5 dark:to-transparent\">\n        <CardContent className=\"p-8\">\n          <div className=\"flex items-center gap-4 mb-4\">\n            <div className=\"p-3 bg-primary/10 rounded-xl\">\n              <Sparkles className=\"h-6 w-6 text-primary\" />\n            </div>\n            <div>\n              <h2 className=\"text-2xl font-bold text-foreground\">Create Support Ticket</h2>\n              <p className=\"text-muted-foreground\">We're here to help! Describe your issue and we'll get back to you soon.</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <form onSubmit={handleSubmit} className=\"space-y-8\">\n        {error && (\n          <Alert variant=\"destructive\" className=\"border-0 bg-destructive/5 dark:bg-destructive/10\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription>{error}</AlertDescription>\n          </Alert>\n        )}\n\n        {/* Title Section */}\n        <Card className=\"border-0 bg-card/50 backdrop-blur-sm shadow-lg\">\n          <CardContent className=\"p-6\">\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center gap-2\">\n                <div className=\"w-2 h-2 bg-primary rounded-full\"></div>\n                <Label htmlFor=\"title\" className=\"text-lg font-semibold\">\n                  What's the issue? <span className=\"text-destructive\">*</span>\n                </Label>\n              </div>\n              <Input\n                id=\"title\"\n                type=\"text\"\n                value={formData.title}\n                onChange={(e) => handleInputChange('title', e.target.value)}\n                placeholder=\"Brief, clear summary of your issue...\"\n                className={`h-12 text-base border-0 bg-background/60 backdrop-blur-sm hover:bg-background/80 focus:bg-background transition-all duration-200 ${\n                  validationErrors.title ? 'ring-2 ring-destructive' : ''\n                }`}\n              />\n              {validationErrors.title && (\n                <div className=\"flex items-center gap-2 text-sm text-destructive\">\n                  <AlertCircle className=\"h-4 w-4\" />\n                  {validationErrors.title}\n                </div>\n              )}\n              <div className=\"flex justify-between items-center text-sm\">\n                <p className=\"text-muted-foreground\">Keep it concise but descriptive</p>\n                <span className={`font-mono ${formData.title.length > 180 ? 'text-destructive' : 'text-muted-foreground'}`}>\n                  {formData.title.length}/200\n                </span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Service and Priority Section */}\n        <Card className=\"border-0 bg-card/50 backdrop-blur-sm shadow-lg\">\n          <CardContent className=\"p-6\">\n            <div className=\"space-y-6\">\n              <div className=\"flex items-center gap-2\">\n                <div className=\"w-2 h-2 bg-primary rounded-full\"></div>\n                <h3 className=\"text-lg font-semibold\">Categorize Your Request</h3>\n              </div>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {/* Service */}\n                <div className=\"space-y-3\">\n                  <Label htmlFor=\"service\" className=\"text-base font-medium\">\n                    Related Service <span className=\"text-destructive\">*</span>\n                  </Label>\n                  <Select\n                    value={formData.service}\n                    onValueChange={(value) => handleInputChange('service', value)}\n                  >\n                    <SelectTrigger className={`h-12 border-0 bg-background/60 backdrop-blur-sm hover:bg-background/80 transition-all duration-200 ${\n                      validationErrors.service ? 'ring-2 ring-destructive' : ''\n                    }`}>\n                      <SelectValue placeholder=\"Choose the service this relates to...\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {Object.entries(SERVICE_LABELS).map(([value, label]) => (\n                        <SelectItem key={value} value={value} className=\"py-3\">\n                          <div className=\"flex items-center gap-3\">\n                            <div className=\"w-2 h-2 bg-primary/60 rounded-full\"></div>\n                            {label}\n                          </div>\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  {validationErrors.service && (\n                    <div className=\"flex items-center gap-2 text-sm text-destructive\">\n                      <AlertCircle className=\"h-4 w-4\" />\n                      {validationErrors.service}\n                    </div>\n                  )}\n                </div>\n\n                {/* Priority */}\n                <div className=\"space-y-3\">\n                  <Label htmlFor=\"priority\" className=\"text-base font-medium\">\n                    Priority Level <span className=\"text-destructive\">*</span>\n                  </Label>\n                  <Select\n                    value={formData.priority}\n                    onValueChange={(value) => handleInputChange('priority', value as TicketPriority)}\n                  >\n                    <SelectTrigger className={`h-12 border-0 bg-background/60 backdrop-blur-sm hover:bg-background/80 transition-all duration-200 ${\n                      validationErrors.priority ? 'ring-2 ring-destructive' : ''\n                    }`}>\n                      <SelectValue placeholder=\"How urgent is this issue?\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {Object.entries(PRIORITY_LABELS).map(([value, label]) => (\n                        <SelectItem key={value} value={value} className=\"py-3\">\n                          <div className=\"flex items-center gap-3\">\n                            {getPriorityIcon(value as TicketPriority)}\n                            {label}\n                          </div>\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  {validationErrors.priority && (\n                    <div className=\"flex items-center gap-2 text-sm text-destructive\">\n                      <AlertCircle className=\"h-4 w-4\" />\n                      {validationErrors.priority}\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Service-Specific Fields */}\n        {(SERVICES_REQUIRING_COUNTRY.includes(formData.service) || \n          formData.service === 'outbound_calls' || \n          formData.service === 'did_numbers' || \n          formData.service === 'inbound_calls') && (\n          <Card className=\"border-0 bg-card/50 backdrop-blur-sm shadow-lg\">\n            <CardContent className=\"p-6\">\n              <div className=\"space-y-6\">\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-2 h-2 bg-primary rounded-full\"></div>\n                  <h3 className=\"text-lg font-semibold\">Service-Specific Information</h3>\n                </div>\n\n                {/* Country Selection */}\n                {SERVICES_REQUIRING_COUNTRY.includes(formData.service) && (\n                  <div className=\"space-y-3\">\n                    <Label htmlFor=\"country\" className=\"text-base font-medium\">\n                      <Globe className=\"h-4 w-4 inline mr-2\" />\n                      Country <span className=\"text-destructive\">*</span>\n                    </Label>\n                    <Select\n                      value={formData.country}\n                      onValueChange={(value) => handleInputChange('country', value)}\n                    >\n                      <SelectTrigger className={`h-12 border-0 bg-background/60 backdrop-blur-sm hover:bg-background/80 transition-all duration-200 ${\n                        validationErrors.country ? 'ring-2 ring-destructive' : ''\n                      }`}>\n                        <SelectValue placeholder=\"Select the country for this service...\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {COUNTRIES.map((country) => (\n                          <SelectItem key={country.code} value={country.code} className=\"py-3\">\n                            <div className=\"flex items-center gap-3\">\n                              <span className=\"text-xs font-mono bg-muted px-2 py-1 rounded\">\n                                {country.code}\n                              </span>\n                              {country.name}\n                            </div>\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    {validationErrors.country && (\n                      <div className=\"flex items-center gap-2 text-sm text-destructive\">\n                        <AlertCircle className=\"h-4 w-4\" />\n                        {validationErrors.country}\n                      </div>\n                    )}\n                  </div>\n                )}\n\n                {/* Outbound Call Examples */}\n                {formData.service === 'outbound_calls' && (\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <Label className=\"text-base font-medium\">\n                        <PhoneCall className=\"h-4 w-4 inline mr-2\" />\n                        Call Examples <span className=\"text-destructive\">*</span>\n                      </Label>\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={addCallExample}\n                        className=\"border-0 bg-background/60 hover:bg-background/80\"\n                      >\n                        <Plus className=\"h-4 w-4 mr-2\" />\n                        Add Example\n                      </Button>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Please provide examples of numbers you tried to call and when, to help us troubleshoot.\n                    </p>\n                    \n                    <div className=\"space-y-4\">\n                      {outboundCallData.examples.map((example, index) => (\n                        <div key={index} className=\"p-4 bg-background/30 rounded-xl border border-border/50\">\n                          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                            <div className=\"space-y-2\">\n                              <Label className=\"text-sm font-medium\">Phone Number</Label>\n                              <Input\n                                value={example.number}\n                                onChange={(e) => updateCallExample(index, 'number', e.target.value)}\n                                placeholder=\"+1234567890\"\n                                className=\"h-10 border-0 bg-background/60\"\n                              />\n                            </div>\n                            <div className=\"space-y-2\">\n                              <Label className=\"text-sm font-medium\">Call Date & Time</Label>\n                              <Input\n                                type=\"datetime-local\"\n                                value={typeof example.callDate === 'string' ? example.callDate : example.callDate?.toISOString().slice(0, 16) || ''}\n                                onChange={(e) => updateCallExample(index, 'callDate', e.target.value)}\n                                className=\"h-10 border-0 bg-background/60\"\n                              />\n                            </div>\n                            <div className=\"space-y-2\">\n                              <Label className=\"text-sm font-medium\">Description (Optional)</Label>\n                              <div className=\"flex gap-2\">\n                                <Input\n                                  value={example.description}\n                                  onChange={(e) => updateCallExample(index, 'description', e.target.value)}\n                                  placeholder=\"Call outcome, error message...\"\n                                  className=\"h-10 border-0 bg-background/60\"\n                                />\n                                {outboundCallData.examples.length > 1 && (\n                                  <Button\n                                    type=\"button\"\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    onClick={() => removeCallExample(index)}\n                                    className=\"text-muted-foreground hover:text-destructive\"\n                                  >\n                                    <Trash2 className=\"h-4 w-4\" />\n                                  </Button>\n                                )}\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                    {validationErrors.outboundCallData && (\n                      <div className=\"flex items-center gap-2 text-sm text-destructive\">\n                        <AlertCircle className=\"h-4 w-4\" />\n                        {validationErrors.outboundCallData}\n                      </div>\n                    )}\n                  </div>\n                )}\n\n                {/* Assigned Numbers Display */}\n                {(formData.service === 'did_numbers' || formData.service === 'inbound_calls') && (\n                  <div className=\"space-y-4\">\n                    <Label className=\"text-base font-medium\">\n                      <Hash className=\"h-4 w-4 inline mr-2\" />\n                      Your Assigned Numbers\n                    </Label>\n                    \n                    {loadingNumbers ? (\n                      <div className=\"flex items-center justify-center gap-3 p-8 bg-muted/20 rounded-xl\">\n                        <Loader2 className=\"h-5 w-5 animate-spin text-primary\" />\n                        <span className=\"text-sm text-muted-foreground\">Loading your numbers...</span>\n                      </div>\n                    ) : assignedNumbers.length === 0 ? (\n                      <div className=\"p-8 bg-muted/20 rounded-xl text-center\">\n                        <Phone className=\"h-8 w-8 text-muted-foreground mx-auto mb-3\" />\n                        <p className=\"text-sm text-muted-foreground\">\n                          No numbers assigned to your account. Contact support if you need numbers assigned.\n                        </p>\n                      </div>\n                    ) : (\n                      <div className=\"space-y-3\">\n                        <p className=\"text-sm text-muted-foreground\">\n                          Reference these numbers in your ticket if they're related to your issue:\n                        </p>\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3 max-h-60 overflow-y-auto\">\n                          {assignedNumbers.map((number, index) => (\n                            <div key={index} className=\"p-3 bg-background/60 rounded-lg border border-border/50\">\n                              <div className=\"font-mono text-sm font-medium text-foreground\">\n                                {number.number}\n                              </div>\n                              {number.description && (\n                                <div className=\"text-xs text-muted-foreground mt-1\">\n                                  {number.description}\n                                </div>\n                              )}\n                              {(number as any).country && (\n                                <div className=\"text-xs text-muted-foreground mt-1\">\n                                  <Globe className=\"h-3 w-3 inline mr-1\" />\n                                  {(number as any).country}\n                                </div>\n                              )}\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Description Section */}\n        <Card className=\"border-0 bg-card/50 backdrop-blur-sm shadow-lg\">\n          <CardContent className=\"p-6\">\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center gap-2\">\n                <div className=\"w-2 h-2 bg-primary rounded-full\"></div>\n                <Label htmlFor=\"description\" className=\"text-lg font-semibold\">\n                  Tell us more about the issue <span className=\"text-destructive\">*</span>\n                </Label>\n              </div>\n              <Textarea\n                id=\"description\"\n                value={formData.description}\n                onChange={(e) => handleInputChange('description', e.target.value)}\n                placeholder=\"Please provide as much detail as possible:&#10;• What were you trying to do?&#10;• What happened instead?&#10;• When did this start?&#10;• Are there any error messages?&#10;• Steps to reproduce the issue...\"\n                rows={8}\n                className={`text-base border-0 bg-background/60 backdrop-blur-sm hover:bg-background/80 focus:bg-background transition-all duration-200 resize-none ${\n                  validationErrors.description ? 'ring-2 ring-destructive' : ''\n                }`}\n              />\n              {validationErrors.description && (\n                <div className=\"flex items-center gap-2 text-sm text-destructive\">\n                  <AlertCircle className=\"h-4 w-4\" />\n                  {validationErrors.description}\n                </div>\n              )}\n              <div className=\"flex justify-between items-center text-sm\">\n                <p className=\"text-muted-foreground\">The more details you provide, the faster we can help!</p>\n                <span className={`font-mono ${formData.description.length > 1800 ? 'text-destructive' : 'text-muted-foreground'}`}>\n                  {formData.description.length}/2000\n                </span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* File Upload Section */}\n        <Card className=\"border-0 bg-card/50 backdrop-blur-sm shadow-lg\">\n          <CardContent className=\"p-6\">\n            <div className=\"space-y-6\">\n              <div className=\"flex items-center gap-2\">\n                <div className=\"w-2 h-2 bg-primary rounded-full\"></div>\n                <Label className=\"text-lg font-semibold\">Attachments</Label>\n                <span className=\"text-sm text-muted-foreground\">(Optional)</span>\n              </div>\n              \n              <div className=\"border-2 border-dashed border-border/50 rounded-xl p-8 bg-gradient-to-br from-muted/20 to-muted/5 hover:from-muted/30 hover:to-muted/10 transition-all duration-300 group\">\n                <div className=\"text-center\">\n                  <div className=\"mx-auto flex h-16 w-16 items-center justify-center rounded-full bg-primary/10 group-hover:bg-primary/20 transition-colors duration-200\">\n                    <Upload className=\"h-8 w-8 text-primary\" />\n                  </div>\n                  <div className=\"mt-6\">\n                    <label htmlFor=\"file-upload\" className=\"cursor-pointer\">\n                      <span className=\"text-lg font-semibold text-foreground group-hover:text-primary transition-colors duration-200\">\n                        Drop files here or click to upload\n                      </span>\n                      <input\n                        id=\"file-upload\"\n                        name=\"file-upload\"\n                        type=\"file\"\n                        multiple\n                        accept=\"image/*,.pdf,.doc,.docx,.txt,.xls,.xlsx\"\n                        className=\"sr-only\"\n                        onChange={handleFileUpload}\n                        disabled={uploadingFiles}\n                      />\n                    </label>\n                    <p className=\"mt-2 text-sm text-muted-foreground\">\n                      Screenshots, documents, logs, etc. • PNG, JPG, PDF, DOC, TXT • Up to 10MB each • Max 5 files\n                    </p>\n                  </div>\n                </div>\n              </div>\n\n              {uploadingFiles && (\n                <div className=\"flex items-center justify-center gap-3 p-4 bg-primary/5 rounded-xl\">\n                  <Loader2 className=\"h-5 w-5 animate-spin text-primary\" />\n                  <span className=\"text-sm font-medium text-primary\">Uploading files...</span>\n                </div>\n              )}\n\n              {/* Enhanced Attachment List */}\n              {attachments.length > 0 && (\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center gap-2\">\n                    <PaperclipIcon className=\"h-4 w-4 text-primary\" />\n                    <span className=\"text-base font-medium\">Uploaded Files ({attachments.length})</span>\n                  </div>\n                  <div className=\"grid gap-3\">\n                    {attachments.map((attachment, index) => (\n                      <div\n                        key={index}\n                        className=\"flex items-center justify-between p-4 bg-background/60 backdrop-blur-sm rounded-xl border border-border/50 hover:bg-background/80 transition-all duration-200\"\n                      >\n                        <div className=\"flex items-center space-x-4\">\n                          <div className=\"p-2 bg-muted/50 rounded-lg\">\n                            {getFileIcon(attachment.mimeType)}\n                          </div>\n                          <div>\n                            <p className=\"text-sm font-medium text-foreground\">\n                              {attachment.originalName}\n                            </p>\n                            <p className=\"text-xs text-muted-foreground\">\n                              {formatFileSize(attachment.size)}\n                            </p>\n                          </div>\n                        </div>\n                        <Button\n                          type=\"button\"\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => removeAttachment(index)}\n                          className=\"text-muted-foreground hover:text-destructive transition-colors duration-200\"\n                        >\n                          <X className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Enhanced Submit Section */}\n        <Card className=\"border-0 bg-gradient-to-r from-card/50 to-muted/20 backdrop-blur-sm\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex flex-col sm:flex-row justify-between items-center gap-4\">\n              <div className=\"text-center sm:text-left\">\n                <p className=\"text-sm text-muted-foreground\">\n                  Ready to submit? We'll get back to you within 24 hours.\n                </p>\n              </div>\n              <div className=\"flex items-center gap-4\">\n                {onCancel && (\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={onCancel}\n                    disabled={loading || uploadingFiles}\n                    className=\"min-w-[100px] border-0 bg-background/60 hover:bg-background/80\"\n                  >\n                    Cancel\n                  </Button>\n                )}\n                <Button\n                  type=\"submit\"\n                  disabled={loading || uploadingFiles}\n                  size=\"lg\"\n                  className=\"min-w-[140px] bg-primary hover:bg-primary/90 text-primary-foreground shadow-lg hover:shadow-xl transition-all duration-200\"\n                >\n                  {loading ? (\n                    <div className=\"flex items-center gap-2\">\n                      <Loader2 className=\"h-4 w-4 animate-spin\" />\n                      Creating...\n                    </div>\n                  ) : (\n                    <div className=\"flex items-center gap-2\">\n                      <CheckCircle2 className=\"h-4 w-4\" />\n                      Create Ticket\n                    </div>\n                  )}\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </form>\n    </div>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/tickets/TicketDetail.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":84,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2279,2282],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2279,2282],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":179,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":179,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4824,4827],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4824,4827],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":222,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":222,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6045,6048],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6045,6048],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":249,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":249,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6820,6823],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6820,6823],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":254,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":254,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6941,6944],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6941,6944],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":576,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":576,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16113,16116],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16113,16116],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":641,"column":80,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[19250,19316],"text":"This ticket doesn&apos;t exist or you don't have permission to view it."},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[19250,19316],"text":"This ticket doesn&lsquo;t exist or you don't have permission to view it."},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[19250,19316],"text":"This ticket doesn&#39;t exist or you don't have permission to view it."},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[19250,19316],"text":"This ticket doesn&rsquo;t exist or you don't have permission to view it."},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":641,"column":99,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[19250,19316],"text":"This ticket doesn't exist or you don&apos;t have permission to view it."},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[19250,19316],"text":"This ticket doesn't exist or you don&lsquo;t have permission to view it."},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[19250,19316],"text":"This ticket doesn't exist or you don&#39;t have permission to view it."},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[19250,19316],"text":"This ticket doesn't exist or you don&rsquo;t have permission to view it."},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { useTickets } from '@/hooks/useTickets';\nimport { \n  TicketReply,\n  SERVICE_LABELS, \n  PRIORITY_LABELS, \n  STATUS_LABELS,\n  PRIORITY_COLORS,\n  STATUS_COLORS,\n  TicketAttachment,\n  canReopenTicket,\n  canReRateTicket,\n  getTimeRemaining,\n  ACTION_RESTRICTIONS\n} from '@/types/ticket';\nimport { Button } from '@/components/ui/button';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\n\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { \n  MessageCircle, \n  Paperclip, \n  Download, \n  Clock,\n  User,\n  FileText,\n  Image as ImageIcon,\n  Upload,\n  X,\n  Star,\n  AlertCircle,\n  CheckCircle2,\n  Loader2,\n  Send,\n  Archive,\n  RefreshCw,\n  Timer,\n  CircleDot,\n  Heart,\n  Sparkles,\n  MessageSquare,\n  Building,\n  Tag,\n  Settings,\n  Info,\n  Eye\n} from 'lucide-react';\nimport { motion } from 'framer-motion';\nimport WysiwygEditor from '@/components/ui/WysiwygEditor';\nimport AttachmentPreview from '@/components/ui/AttachmentPreview';\n\ninterface TicketDetailProps {\n  ticketId: string;\n}\n\nexport default function TicketDetail({ ticketId }: TicketDetailProps) {\n  const { \n    ticket, \n    loading, \n    error, \n    fetchTicket, \n    updateTicket, \n    uploadFiles,\n    clearError,\n    clearTicket\n  } = useTickets();\n\n  const [newReply, setNewReply] = useState('');\n  const [replyAttachments, setReplyAttachments] = useState<File[]>([]);\n  const [isSubmittingReply, setIsSubmittingReply] = useState(false);\n  const [uploadingFiles, setUploadingFiles] = useState(false);\n  const [showSatisfactionRating, setShowSatisfactionRating] = useState(false);\n  const [rating, setRating] = useState(0);\n  const [ratingComment, setRatingComment] = useState('');\n  const [isSubmittingRating, setIsSubmittingRating] = useState(false);\n  const [isDialogShaking, setIsDialogShaking] = useState(false);\n  const [previewAttachment, setPreviewAttachment] = useState<any>(null);\n  const [showPreview, setShowPreview] = useState(false);\n\n  // Check restrictions\n  const reopenCheck = ticket ? canReopenTicket(ticket) : { allowed: false };\n  const reRateCheck = ticket ? canReRateTicket(ticket) : { allowed: false };\n\n  useEffect(() => {\n    if (ticketId) {\n      clearError();\n      clearTicket();\n      setNewReply('');\n      setReplyAttachments([]);\n      setShowSatisfactionRating(false);\n      fetchTicket(ticketId);\n    }\n  }, [ticketId, fetchTicket, clearError, clearTicket]);\n\n  useEffect(() => {\n    return () => {\n      clearError();\n    };\n  }, [clearError]);\n\n  // File upload with drag and drop\n  const onDrop = useCallback((acceptedFiles: File[]) => {\n    setReplyAttachments(prev => [...prev, ...acceptedFiles].slice(0, 5));\n  }, []);\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n    accept: {\n      'image/*': ['.png', '.jpg', '.jpeg', '.gif'],\n      'application/pdf': ['.pdf'],\n      'application/msword': ['.doc'],\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document': ['.docx'],\n      'text/plain': ['.txt']\n    },\n    maxFiles: 5,\n    maxSize: 10 * 1024 * 1024, // 10MB\n    disabled: uploadingFiles\n  });\n\n  const removeAttachment = (index: number) => {\n    setReplyAttachments(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const handleReplySubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!newReply.trim()) return;\n\n    setIsSubmittingReply(true);\n    clearError();\n\n    try {\n      let attachments: TicketAttachment[] = [];\n      \n      if (replyAttachments.length > 0) {\n        setUploadingFiles(true);\n        const fileList = new DataTransfer();\n        replyAttachments.forEach(file => fileList.items.add(file));\n        attachments = await uploadFiles(fileList.files);\n      }\n\n      const success = await updateTicket(ticketId, {\n        action: 'add_reply',\n        content: newReply,\n        attachments,\n      });\n\n      if (success) {\n        setNewReply('');\n        setReplyAttachments([]);\n      }\n    } catch (err) {\n      console.error('Reply submission error:', err);\n    } finally {\n      setIsSubmittingReply(false);\n      setUploadingFiles(false);\n    }\n  };\n\n\n\n  const handleReopenTicket = async () => {\n    // Check if reopening is allowed\n    if (!reopenCheck.allowed) {\n      console.warn('Reopening not allowed:', reopenCheck.reason);\n      return;\n    }\n    \n    try {\n      await updateTicket(ticketId, {\n        action: 'reopen_ticket',\n      });\n    } catch (error: any) {\n      // Handle specific error codes from API\n      if (error?.code === 'REOPEN_TIME_EXPIRED') {\n        console.error('Reopen time expired:', error.message);\n        // The UI will automatically update to show the restriction\n      } else {\n        console.error('Error reopening ticket:', error);\n      }\n    }\n  };\n\n  const handleMarkResolved = async () => {\n    const success = await updateTicket(ticketId, {\n      action: 'update_status',\n      status: 'resolved',\n    });\n    \n    if (success) {\n      // Show satisfaction rating modal when ticket is marked as resolved\n      setShowSatisfactionRating(true);\n    }\n  };\n\n  const handleSatisfactionRating = async (selectedRating: number) => {\n    setRating(selectedRating);\n    \n    // If rating is 2 or less, don't submit yet - let user add comment\n    if (selectedRating <= 2) {\n      return; // Keep dialog open for comment\n    }\n    \n    // For ratings 3+, submit immediately\n    setIsSubmittingRating(true);\n    \n    try {\n      await updateTicket(ticketId, {\n        action: 'rate_satisfaction',\n        rating: selectedRating,\n      });\n      \n      setShowSatisfactionRating(false);\n      setRating(0);\n      setRatingComment('');\n    } catch (error: any) {\n      // Handle specific error codes from API\n      if (error?.code === 'RERATING_TIME_EXPIRED') {\n        console.error('Re-rating time expired:', error.message);\n        setShowSatisfactionRating(false);\n        setRating(0);\n        setRatingComment('');\n      } else {\n        console.error('Error submitting rating:', error);\n      }\n    } finally {\n      setIsSubmittingRating(false);\n    }\n  };\n\n  const handleSubmitRatingWithComment = async () => {\n    if (rating <= 2 && !ratingComment.trim()) {\n      return; // Don't submit if comment is required but empty\n    }\n    \n    setIsSubmittingRating(true);\n    \n    try {\n      await updateTicket(ticketId, {\n        action: 'rate_satisfaction',\n        rating: rating,\n        comment: ratingComment,\n      } as any);\n      \n      setShowSatisfactionRating(false);\n      setRating(0);\n      setRatingComment('');\n    } catch (error: any) {\n      // Handle specific error codes from API\n      if (error?.code === 'RERATING_TIME_EXPIRED') {\n        console.error('Re-rating time expired:', error.message);\n        setShowSatisfactionRating(false);\n        setRating(0);\n        setRatingComment('');\n      } else {\n        console.error('Error submitting rating with comment:', error);\n      }\n    } finally {\n      setIsSubmittingRating(false);\n    }\n  };\n\n  const handleCancelRating = () => {\n    setShowSatisfactionRating(false);\n    setRating(0);\n    setRatingComment('');\n    setIsDialogShaking(false);\n  };\n\n  const handleReRate = () => {\n    // Check if re-rating is allowed\n    if (!reRateCheck.allowed) {\n      // Could show a toast or error message here\n      console.warn('Re-rating not allowed:', reRateCheck.reason);\n      return;\n    }\n    \n    // Reset all rating states for a fresh rating experience\n    setRating(0);\n    setRatingComment('');\n    setIsDialogShaking(false);\n    setShowSatisfactionRating(true);\n  };\n\n\n\n  // Utility functions\n  const formatDate = (date: Date | string) => {\n    return new Date(date).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n    });\n  };\n\n  const getTimeAgo = (date: Date | string) => {\n    const now = new Date();\n    const past = new Date(date);\n    const diffInMinutes = Math.floor((now.getTime() - past.getTime()) / (1000 * 60));\n\n    if (diffInMinutes < 1) return 'Just now';\n    if (diffInMinutes < 60) return `${diffInMinutes}m ago`;\n    if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)}h ago`;\n    return `${Math.floor(diffInMinutes / 1440)}d ago`;\n  };\n\n  // Helper function to extract plain text from HTML content\n  const getPlainTextFromHtml = (html: string): string => {\n    if (typeof window !== 'undefined') {\n      const tempDiv = document.createElement('div');\n      tempDiv.innerHTML = html;\n      return tempDiv.textContent || tempDiv.innerText || '';\n    }\n    // Fallback for server-side rendering\n    return html.replace(/<[^>]*>/g, '').trim();\n  };\n\n  // Helper function to identify system messages\n  const isSystemMessage = (reply: TicketReply) => {\n    const systemMessages = [\n      '✅ Customer marked this ticket as resolved.',\n      '🔄 Customer reopened this ticket.',\n      '🔄 Support team changed status to',\n      '👤 Ticket assigned to',\n      '👤 Ticket unassigned.',\n      '⚡ Support team changed priority to',\n      '⭐', // Rating messages contain star emojis\n      'Status changed to',\n      'Priority changed to',\n      'Ticket closed'\n    ];\n    return systemMessages.some(msg => reply.content.includes(msg));\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'open': return <AlertCircle className=\"h-4 w-4\" />;\n      case 'in_progress': return <CircleDot className=\"h-4 w-4\" />;\n      case 'waiting_admin': return <Timer className=\"h-4 w-4\" />;\n      case 'resolved': return <CheckCircle2 className=\"h-4 w-4\" />;\n      case 'closed': return <Archive className=\"h-4 w-4\" />;\n      default: return <AlertCircle className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getFileIcon = (mimeType: string) => {\n    if (mimeType.startsWith('image/')) {\n      return <ImageIcon className=\"h-4 w-4\" />;\n    }\n    return <FileText className=\"h-4 w-4\" />;\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const getUserInitials = (email: string, firstName?: string, lastName?: string, name?: string) => {\n    // If name field exists, extract initials from it\n    if (name) {\n      const nameParts = name.trim().split(' ');\n      if (nameParts.length >= 2) {\n        return `${nameParts[0][0]}${nameParts[nameParts.length - 1][0]}`.toUpperCase();\n      }\n      return name[0].toUpperCase();\n    }\n    \n    // Fallback to firstName/lastName\n    if (firstName && lastName) {\n      return `${firstName[0]}${lastName[0]}`.toUpperCase();\n    }\n    if (firstName) {\n      return firstName[0].toUpperCase();\n    }\n    return email[0].toUpperCase();\n  };\n\n  const formatAssignedUser = (assignedTo: string | { _id: string; email: string; firstName?: string; lastName?: string; name?: string; role?: string; }) => {\n    if (typeof assignedTo === 'string') {\n      return assignedTo; // Just the ID string\n    }\n    \n    // If it's an object with user details\n    const { firstName, lastName, name, email, role } = assignedTo;\n    \n    // Prioritize the 'name' field (from database)\n    if (name && name.trim()) {\n      return name.trim();\n    }\n    \n    // Fallback to firstName/lastName combination\n    if (firstName && lastName) {\n      return `${firstName} ${lastName}`;\n    }\n    if (firstName && firstName.trim()) {\n      return firstName.trim();\n    }\n    if (lastName && lastName.trim()) {\n      return lastName.trim();\n    }\n    \n    // Instead of showing email, show a role-based name\n    if (role === 'admin') {\n      return 'Support Agent';\n    }\n    \n    // Extract first part of email as friendly name\n    const emailPart = email.split('@')[0];\n    return emailPart.charAt(0).toUpperCase() + emailPart.slice(1);\n  };\n\n  const getFullCountryName = (countryCode: string) => {\n    const countryNames: { [key: string]: string } = {\n      'US': 'United States',\n      'CA': 'Canada',\n      'GB': 'United Kingdom',\n      'FR': 'France',\n      'DE': 'Germany',\n      'IT': 'Italy',\n      'ES': 'Spain',\n      'NL': 'Netherlands',\n      'BE': 'Belgium',\n      'CH': 'Switzerland',\n      'AT': 'Austria',\n      'SE': 'Sweden',\n      'NO': 'Norway',\n      'DK': 'Denmark',\n      'FI': 'Finland',\n      'PL': 'Poland',\n      'CZ': 'Czech Republic',\n      'HU': 'Hungary',\n      'RO': 'Romania',\n      'BG': 'Bulgaria',\n      'HR': 'Croatia',\n      'SI': 'Slovenia',\n      'SK': 'Slovakia',\n      'LT': 'Lithuania',\n      'LV': 'Latvia',\n      'EE': 'Estonia',\n      'IE': 'Ireland',\n      'PT': 'Portugal',\n      'GR': 'Greece',\n      'CY': 'Cyprus',\n      'MT': 'Malta',\n      'LU': 'Luxembourg',\n      'AU': 'Australia',\n      'NZ': 'New Zealand',\n      'JP': 'Japan',\n      'KR': 'South Korea',\n      'CN': 'China',\n      'IN': 'India',\n      'BR': 'Brazil',\n      'MX': 'Mexico',\n      'AR': 'Argentina',\n      'CL': 'Chile',\n      'CO': 'Colombia',\n      'PE': 'Peru',\n      'VE': 'Venezuela',\n      'ZA': 'South Africa',\n      'NG': 'Nigeria',\n      'EG': 'Egypt',\n      'KE': 'Kenya',\n      'MA': 'Morocco',\n      'TN': 'Tunisia',\n      'DZ': 'Algeria',\n      'LY': 'Libya',\n      'SD': 'Sudan',\n      'ET': 'Ethiopia',\n      'UG': 'Uganda',\n      'TZ': 'Tanzania',\n      'RW': 'Rwanda',\n      'GH': 'Ghana',\n      'CI': 'Ivory Coast',\n      'SN': 'Senegal',\n      'ML': 'Mali',\n      'BF': 'Burkina Faso',\n      'NE': 'Niger',\n      'TD': 'Chad',\n      'CM': 'Cameroon',\n      'GA': 'Gabon',\n      'CG': 'Congo',\n      'CD': 'Democratic Republic of Congo',\n      'CF': 'Central African Republic',\n      'AO': 'Angola',\n      'ZM': 'Zambia',\n      'ZW': 'Zimbabwe',\n      'BW': 'Botswana',\n      'NA': 'Namibia',\n      'SZ': 'Eswatini',\n      'LS': 'Lesotho',\n      'MG': 'Madagascar',\n      'MU': 'Mauritius',\n      'SC': 'Seychelles',\n      'MZ': 'Mozambique',\n      'MW': 'Malawi',\n      'TR': 'Turkey',\n      'RU': 'Russia',\n      'UA': 'Ukraine',\n      'BY': 'Belarus',\n      'MD': 'Moldova',\n      'GE': 'Georgia',\n      'AM': 'Armenia',\n      'AZ': 'Azerbaijan',\n      'KZ': 'Kazakhstan',\n      'UZ': 'Uzbekistan',\n      'TM': 'Turkmenistan',\n      'KG': 'Kyrgyzstan',\n      'TJ': 'Tajikistan',\n      'AF': 'Afghanistan',\n      'PK': 'Pakistan',\n      'BD': 'Bangladesh',\n      'LK': 'Sri Lanka',\n      'MV': 'Maldives',\n      'NP': 'Nepal',\n      'BT': 'Bhutan',\n      'MM': 'Myanmar',\n      'TH': 'Thailand',\n      'LA': 'Laos',\n      'KH': 'Cambodia',\n      'VN': 'Vietnam',\n      'MY': 'Malaysia',\n      'SG': 'Singapore',\n      'BN': 'Brunei',\n      'ID': 'Indonesia',\n      'PH': 'Philippines',\n      'TL': 'East Timor',\n      'PG': 'Papua New Guinea',\n      'FJ': 'Fiji',\n      'SB': 'Solomon Islands',\n      'VU': 'Vanuatu',\n      'NC': 'New Caledonia',\n      'PF': 'French Polynesia',\n      'WS': 'Samoa',\n      'TO': 'Tonga',\n      'TV': 'Tuvalu',\n      'NR': 'Nauru',\n      'KI': 'Kiribati',\n      'MH': 'Marshall Islands',\n      'FM': 'Micronesia',\n      'PW': 'Palau',\n      'IL': 'Israel',\n      'JO': 'Jordan',\n      'LB': 'Lebanon',\n      'SY': 'Syria',\n      'IQ': 'Iraq',\n      'IR': 'Iran',\n      'SA': 'Saudi Arabia',\n      'AE': 'United Arab Emirates',\n      'QA': 'Qatar',\n      'BH': 'Bahrain',\n      'KW': 'Kuwait',\n      'OM': 'Oman',\n      'YE': 'Yemen'\n    };\n    \n    return countryNames[countryCode.toUpperCase()] || countryCode;\n  };\n\n  // Function to trigger shake animation when trying to close modal\n  const triggerDialogShake = () => {\n    setIsDialogShaking(true);\n    setTimeout(() => setIsDialogShaking(false), 500); // Reset after animation\n  };\n\n  const handlePreviewAttachment = (attachment: any) => {\n    setPreviewAttachment(attachment);\n    setShowPreview(true);\n  };\n\n  const handleClosePreview = () => {\n    setShowPreview(false);\n    setPreviewAttachment(null);\n  };\n\n  // Loading state\n  if (loading && !ticket) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-white dark:bg-slate-900 dark:rounded-2xl\">\n        <div className=\"text-center space-y-8\">\n          <div className=\"relative mx-auto w-20 h-20\">\n            {/* Outer spinning ring */}\n            <div className=\"absolute inset-0 w-20 h-20 border-4 border-slate-200 dark:border-slate-700 rounded-full\"></div>\n            {/* Inner spinning ring with gradient */}\n            <div className=\"absolute inset-0 w-20 h-20 border-4 border-transparent rounded-full animate-spin border-t-blue-600 border-r-blue-500 border-b-blue-400\"></div>\n            {/* Center dot */}\n            <div className=\"absolute inset-0 flex items-center justify-center\">\n              <div className=\"w-3 h-3 bg-blue-600 rounded-full animate-pulse\"></div>\n            </div>\n          </div>\n          <div className=\"space-y-3 max-w-sm mx-auto\">\n            <h3 className=\"text-xl font-semibold text-slate-900 dark:text-slate-100\">Loading ticket details</h3>\n            <p className=\"text-sm text-slate-500 dark:text-slate-400 leading-relaxed\">Please wait while we load your information</p>\n            {/* Progress indicator */}\n            <div className=\"w-32 h-1 bg-slate-200 dark:bg-slate-700 rounded-full mx-auto overflow-hidden\">\n              <div className=\"h-full bg-gradient-to-r from-blue-600 to-blue-400 rounded-full animate-pulse\"></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Error state\n  if (error && !loading && !ticket) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-white dark:bg-slate-900 dark:rounded-2xl\">\n        <div className=\"text-center max-w-md mx-auto space-y-6\">\n          <div className=\"w-16 h-16 bg-red-100 dark:bg-red-900/50 rounded-full flex items-center justify-center mx-auto\">\n            <AlertCircle className=\"w-8 h-8 text-red-600 dark:text-red-400\" />\n          </div>\n          <div className=\"space-y-2\">\n            <h3 className=\"text-xl font-semibold text-red-900 dark:text-red-100\">Error Loading Ticket</h3>\n            <p className=\"text-red-700 dark:text-red-200\">{error}</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Not found state\n  if (!loading && !error && !ticket) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-white dark:bg-slate-900 dark:rounded-2xl\">\n        <div className=\"text-center max-w-md mx-auto space-y-6\">\n          <div className=\"w-16 h-16 bg-slate-100 dark:bg-slate-800 rounded-full flex items-center justify-center mx-auto\">\n            <AlertCircle className=\"w-8 h-8 text-slate-600 dark:text-slate-400\" />\n          </div>\n          <div className=\"space-y-2\">\n            <h3 className=\"text-xl font-semibold text-slate-900 dark:text-slate-100\">Ticket Not Found</h3>\n            <p className=\"text-slate-600 dark:text-slate-400\">This ticket doesn't exist or you don't have permission to view it.</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!ticket) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-white dark:bg-slate-900 dark:rounded-2xl\">\n        <div className=\"text-center space-y-8\">\n          <div className=\"relative mx-auto w-20 h-20\">\n            {/* Outer spinning ring */}\n            <div className=\"absolute inset-0 w-20 h-20 border-4 border-slate-200 dark:border-slate-700 rounded-full\"></div>\n            {/* Inner spinning ring with gradient */}\n            <div className=\"absolute inset-0 w-20 h-20 border-4 border-transparent rounded-full animate-spin border-t-blue-600 border-r-blue-500 border-b-blue-400\"></div>\n            {/* Center dot */}\n            <div className=\"absolute inset-0 flex items-center justify-center\">\n              <div className=\"w-3 h-3 bg-blue-600 rounded-full animate-pulse\"></div>\n            </div>\n          </div>\n          <div className=\"space-y-3 max-w-sm mx-auto\">\n            <h3 className=\"text-xl font-semibold text-slate-900 dark:text-slate-100\">Loading ticket details</h3>\n            <p className=\"text-sm text-slate-500 dark:text-slate-400 leading-relaxed\">Please wait while we load your information</p>\n            {/* Progress indicator */}\n            <div className=\"w-32 h-1 bg-slate-200 dark:bg-slate-700 rounded-full mx-auto overflow-hidden\">\n              <div className=\"h-full bg-gradient-to-r from-blue-600 to-blue-400 rounded-full animate-pulse\"></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-white dark:bg-slate-900 dark:rounded-2xl\">\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        \n        {/* Header */}\n        <div className=\"mb-6\">\n          <div className=\"flex items-center gap-2 mb-2\">\n            <div className=\"inline-flex items-center gap-2 px-3 py-1.5 rounded-full text-sm font-medium bg-blue-100 dark:bg-blue-900/50 text-blue-700 dark:text-blue-300\">\n              <MessageCircle className=\"h-4 w-4\" />\n              Support Ticket\n            </div>\n          </div>\n          <h1 className=\"text-2xl md:text-3xl font-bold text-slate-900 dark:text-slate-100 mb-2\">\n            {ticket.title}\n          </h1>\n          <p className=\"text-slate-600 dark:text-slate-400\">\n            Ticket #{ticket.ticketNumber} • Created {formatDate(ticket.createdAt)}\n          </p>\n        </div>\n\n        {/* Error Message */}\n        {error && (\n          <div className=\"mb-6 bg-red-50 dark:bg-red-950/20 border border-red-200 dark:border-red-800/50 rounded-2xl p-4\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-8 h-8 bg-red-100 dark:bg-red-900/50 rounded-full flex items-center justify-center\">\n                <AlertCircle className=\"w-4 h-4 text-red-600 dark:text-red-400\" />\n              </div>\n              <div>\n                <h4 className=\"font-medium text-red-900 dark:text-red-100\">Error</h4>\n                <p className=\"text-sm text-red-700 dark:text-red-200\">{error}</p>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Satisfaction Rating Dialog */}\n        <Dialog open={showSatisfactionRating} onOpenChange={() => {}}>\n          <DialogContent \n            className=\"sm:max-w-md\"\n            onPointerDownOutside={(e) => {\n              e.preventDefault();\n              triggerDialogShake();\n            }}\n            onEscapeKeyDown={(e) => {\n              e.preventDefault();\n              triggerDialogShake();\n            }}\n          >\n            <motion.div\n              animate={isDialogShaking ? { x: [-10, 10, -10, 10, 0] } : { x: 0 }}\n              transition={{ duration: 0.5 }}\n            >\n              {/* Close button - always show and always works */}\n              <button\n                onClick={handleCancelRating}\n                className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none z-50\"\n                disabled={isSubmittingRating}\n              >\n                <X className=\"h-4 w-4\" />\n                <span className=\"sr-only\">Close</span>\n              </button>\n\n              <DialogHeader>\n                <DialogTitle className=\"flex items-center gap-3\">\n                  <div className=\"w-12 h-12 bg-gradient-to-r from-amber-500 to-orange-500 rounded-xl flex items-center justify-center\">\n                    <Heart className=\"w-6 h-6 text-white\" />\n                  </div>\n                  How was our support?\n                </DialogTitle>\n                <DialogDescription>\n                  Your feedback helps us improve our service quality\n                </DialogDescription>\n              </DialogHeader>\n\n              <div className=\"py-6\">\n                {/* Star Rating */}\n                <div className=\"space-y-4\">\n                  <Label className=\"text-sm font-medium\">Rate your experience</Label>\n                  <div className=\"flex justify-center gap-2\">\n                    {[1, 2, 3, 4, 5].map((stars) => (\n                      <button\n                        key={stars}\n                        onClick={() => handleSatisfactionRating(stars)}\n                        disabled={isSubmittingRating}\n                        className={`group p-3 rounded-xl transition-all duration-200 hover:scale-110 ${\n                          rating >= stars \n                            ? 'bg-amber-100 dark:bg-amber-900/50' \n                            : 'hover:bg-slate-100 dark:hover:bg-slate-800'\n                        }`}\n                      >\n                        <Star className={`w-8 h-8 transition-colors ${\n                          rating >= stars \n                            ? 'text-amber-500 fill-current' \n                            : 'text-slate-300 dark:text-slate-600 group-hover:text-amber-400'\n                        }`} />\n                      </button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Comment Field for Low Ratings */}\n                {rating > 0 && rating <= 2 && (\n                  <div className=\"mt-6 space-y-3\">\n                    <Label htmlFor=\"rating-comment\" className=\"text-sm font-medium text-red-700 dark:text-red-400\">\n                      Help us improve - What went wrong? *\n                    </Label>\n                    <Textarea\n                      id=\"rating-comment\"\n                      placeholder=\"Please tell us what we could have done better...\"\n                      value={ratingComment}\n                      onChange={(e) => setRatingComment(e.target.value)}\n                      className=\"min-h-[100px] border-red-200 dark:border-red-800 focus:border-red-400 dark:focus:border-red-600\"\n                      disabled={isSubmittingRating}\n                    />\n                  </div>\n                )}\n\n                {/* Action Buttons */}\n                <div className=\"mt-6\">\n                  {/* Buttons for Low Ratings with Comment */}\n                  {rating > 0 && rating <= 2 && (\n                    <div className=\"flex gap-3\">\n                      <Button \n                        variant=\"outline\" \n                        onClick={handleCancelRating}\n                        disabled={isSubmittingRating}\n                        className=\"flex-1\"\n                      >\n                        Cancel\n                      </Button>\n                      <Button \n                        onClick={handleSubmitRatingWithComment}\n                        disabled={isSubmittingRating || !ratingComment.trim()}\n                        className=\"flex-1 bg-amber-600 hover:bg-amber-700\"\n                      >\n                        {isSubmittingRating ? (\n                          <div className=\"flex items-center gap-2\">\n                            <Loader2 className=\"w-4 h-4 animate-spin\" />\n                            Submitting...\n                          </div>\n                        ) : (\n                          'Submit Feedback'\n                        )}\n                      </Button>\n                    </div>\n                  )}\n\n                  {/* Success Message and Close Button for High Ratings */}\n                  {rating >= 3 && (\n                    <div className=\"text-center space-y-4\">\n                      <div className=\"text-green-600 dark:text-green-400 font-medium\">\n                        Thank you for your {rating} star rating!\n                      </div>\n                      {isSubmittingRating ? (\n                        <div className=\"flex items-center justify-center gap-2 text-sm text-slate-500\">\n                          <Loader2 className=\"w-4 h-4 animate-spin\" />\n                          Submitting your rating...\n                        </div>\n                      ) : (\n                        <Button \n                          onClick={handleCancelRating}\n                          className=\"bg-green-600 hover:bg-green-700 px-8\"\n                        >\n                          Close\n                        </Button>\n                      )}\n                    </div>\n                  )}\n\n                  {/* No Rating Selected - Show Instructions and Skip Option */}\n                  {rating === 0 && (\n                    <div className=\"text-center space-y-4\">\n                      <p className=\"text-sm text-slate-500 dark:text-slate-400\">\n                        Please select a rating above to continue\n                      </p>\n                      <Button \n                        variant=\"outline\"\n                        onClick={handleCancelRating}\n                        className=\"text-slate-600 dark:text-slate-400 hover:text-slate-800 dark:hover:text-slate-200\"\n                      >\n                        Skip Rating\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </motion.div>\n          </DialogContent>\n        </Dialog>\n\n        {/* Quick Info Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\n          {/* Status Card */}\n          <Card className=\"bg-white/80 dark:bg-slate-900/80 backdrop-blur-sm shadow-lg rounded-2xl border border-slate-200/60 dark:border-slate-700/60\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-3\">\n                <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${\n                  STATUS_COLORS[ticket.status]?.includes('green') ? 'bg-green-100 dark:bg-green-900/50' :\n                  STATUS_COLORS[ticket.status]?.includes('blue') ? 'bg-blue-100 dark:bg-blue-900/50' :\n                  STATUS_COLORS[ticket.status]?.includes('yellow') ? 'bg-yellow-100 dark:bg-yellow-900/50' :\n                  STATUS_COLORS[ticket.status]?.includes('red') ? 'bg-red-100 dark:bg-red-900/50' :\n                  'bg-slate-100 dark:bg-slate-800'\n                }`}>\n                  {getStatusIcon(ticket.status)}\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"text-sm font-medium text-slate-600 dark:text-slate-400\">Status</p>\n                  <p className=\"font-semibold text-slate-900 dark:text-slate-100\">{STATUS_LABELS[ticket.status]}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Priority Card */}\n          <Card className=\"bg-white/80 dark:bg-slate-900/80 backdrop-blur-sm shadow-lg rounded-2xl border border-slate-200/60 dark:border-slate-700/60\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-3\">\n                <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${\n                  PRIORITY_COLORS[ticket.priority]?.includes('red') ? 'bg-red-100 dark:bg-red-900/50' :\n                  PRIORITY_COLORS[ticket.priority]?.includes('orange') ? 'bg-orange-100 dark:bg-orange-900/50' :\n                  PRIORITY_COLORS[ticket.priority]?.includes('yellow') ? 'bg-yellow-100 dark:bg-yellow-900/50' :\n                  'bg-slate-100 dark:bg-slate-800'\n                }`}>\n                  <AlertCircle className=\"h-5 w-5 text-slate-600 dark:text-slate-400\" />\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"text-sm font-medium text-slate-600 dark:text-slate-400\">Priority</p>\n                  <p className=\"font-semibold text-slate-900 dark:text-slate-100\">{PRIORITY_LABELS[ticket.priority]}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Service Card */}\n          <Card className=\"bg-white/80 dark:bg-slate-900/80 backdrop-blur-sm shadow-lg rounded-2xl border border-slate-200/60 dark:border-slate-700/60\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-10 h-10 rounded-lg flex items-center justify-center bg-purple-100 dark:bg-purple-900/50\">\n                  <Building className=\"h-5 w-5 text-purple-600 dark:text-purple-400\" />\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"text-sm font-medium text-slate-600 dark:text-slate-400\">Service</p>\n                  <p className=\"font-semibold text-slate-900 dark:text-slate-100 truncate\">{SERVICE_LABELS[ticket.service]}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Assigned Agent Card */}\n          <Card className=\"bg-white/80 dark:bg-slate-900/80 backdrop-blur-sm shadow-lg rounded-2xl border border-slate-200/60 dark:border-slate-700/60\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-3\">\n                <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${\n                  ticket.assignedTo ? 'bg-green-100 dark:bg-green-900/50' : 'bg-orange-100 dark:bg-orange-900/50'\n                }`}>\n                  <User className={`h-5 w-5 ${\n                    ticket.assignedTo ? 'text-green-600 dark:text-green-400' : 'text-orange-600 dark:text-orange-400'\n                  }`} />\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"text-sm font-medium text-slate-600 dark:text-slate-400\">Assigned Agent</p>\n                  <p className=\"font-semibold text-slate-900 dark:text-slate-100 truncate\">\n                    {ticket.assignedTo ? formatAssignedUser(ticket.assignedTo) : 'Unassigned'}\n                  </p>\n                  <p className=\"text-xs text-slate-500 dark:text-slate-400\">\n                    {ticket.assignedTo ? 'Support agent handling your ticket' : 'Waiting for assignment'}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Content Grid */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          \n          {/* Left Column - Main Details */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            \n            {/* Service Information Card - Enhanced to always show */}\n            <Card className=\"bg-white/80 dark:bg-slate-900/80 backdrop-blur-sm shadow-lg rounded-2xl border border-slate-200/60 dark:border-slate-700/60\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-base flex items-center gap-2\">\n                  <div className=\"w-8 h-8 rounded-lg flex items-center justify-center bg-green-100 dark:bg-green-900/50\">\n                    <Sparkles className=\"h-4 w-4 text-green-600 dark:text-green-400\" />\n                  </div>\n                  Service Information\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                \n                {/* Service & Country Info */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2\">\n                    <Settings className=\"h-4 w-4 text-green-600 dark:text-green-400\" />\n                    <h4 className=\"font-medium text-slate-900 dark:text-slate-100\">Service Details</h4>\n                  </div>\n                  <div className=\"p-3 bg-slate-50 dark:bg-slate-800/50 rounded-lg border border-slate-200 dark:border-slate-700\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3 text-sm\">\n                      <div>\n                        <span className=\"text-xs font-medium text-slate-600 dark:text-slate-400\">Service Type:</span>\n                        <p className=\"font-medium text-slate-900 dark:text-slate-100\">{SERVICE_LABELS[ticket.service]}</p>\n                      </div>\n                      {ticket.country && (\n                        <div>\n                          <span className=\"text-xs font-medium text-slate-600 dark:text-slate-400\">Target Country:</span>\n                          <p className=\"font-medium text-slate-900 dark:text-slate-100\">{getFullCountryName(ticket.country)}</p>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n                \n                {/* Call Examples */}\n                {ticket.outboundCallData?.examples && ticket.outboundCallData.examples.length > 0 && (\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center gap-2\">\n                      <MessageCircle className=\"h-4 w-4 text-blue-600 dark:text-blue-400\" />\n                      <h4 className=\"font-medium text-slate-900 dark:text-slate-100\">Call Examples</h4>\n                    </div>\n                    <div className=\"space-y-2\">\n                      {ticket.outboundCallData?.examples?.map((example, index) => (\n                        <div key={index} className=\"p-3 bg-slate-50 dark:bg-slate-800/50 rounded-lg border border-slate-200 dark:border-slate-700\">\n                          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-3 text-sm\">\n                            <div>\n                              <span className=\"text-xs font-medium text-slate-600 dark:text-slate-400\">Number:</span>\n                              <p className=\"font-mono text-slate-900 dark:text-slate-100\">{example.number}</p>\n                            </div>\n                            <div>\n                              <span className=\"text-xs font-medium text-slate-600 dark:text-slate-400\">Call Date:</span>\n                              <p className=\"text-slate-900 dark:text-slate-100\">{formatDate(example.callDate)}</p>\n                            </div>\n                            {example.description && (\n                              <div>\n                                <span className=\"text-xs font-medium text-slate-600 dark:text-slate-400\">Description:</span>\n                                <p className=\"text-slate-900 dark:text-slate-100\">{example.description}</p>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                {/* Assigned Numbers */}\n                {ticket.assignedNumbers && ticket.assignedNumbers.length > 0 && (\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center gap-2\">\n                      <Sparkles className=\"h-4 w-4 text-green-600 dark:text-green-400\" />\n                      <h4 className=\"font-medium text-slate-900 dark:text-slate-100\">Assigned Numbers</h4>\n                    </div>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n                      {ticket.assignedNumbers?.map((assignedNumber, index) => (\n                        <div key={index} className=\"p-3 bg-slate-50 dark:bg-slate-800/50 rounded-lg border border-slate-200 dark:border-slate-700\">\n                          <div className=\"space-y-1\">\n                            <p className=\"font-mono font-semibold text-slate-900 dark:text-slate-100\">{assignedNumber.number}</p>\n                            {assignedNumber.description && (\n                              <p className=\"text-xs text-slate-600 dark:text-slate-400\">{assignedNumber.description}</p>\n                            )}\n                            {assignedNumber.type && (\n                              <Badge variant=\"outline\" className=\"text-xs\">{assignedNumber.type}</Badge>\n                            )}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Description Card */}\n            <Card className=\"bg-white/80 dark:bg-slate-900/80 backdrop-blur-sm shadow-lg rounded-2xl border border-slate-200/60 dark:border-slate-700/60\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-base flex items-center gap-2\">\n                  <div className=\"w-8 h-8 rounded-lg flex items-center justify-center bg-blue-100 dark:bg-blue-900/50\">\n                    <FileText className=\"h-4 w-4 text-blue-600 dark:text-blue-400\" />\n                  </div>\n                  Description\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"bg-slate-50 dark:bg-slate-800/50 rounded-xl p-4 border border-slate-200 dark:border-slate-700\">\n                  <div \n                    className=\"text-slate-700 dark:text-slate-300 whitespace-pre-wrap leading-relaxed prose prose-sm max-w-none prose-slate dark:prose-invert\"\n                    dangerouslySetInnerHTML={{ __html: ticket.description }}\n                  />\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Attachments Card */}\n            {ticket.attachments && ticket.attachments.length > 0 && (\n              <Card className=\"bg-white/80 dark:bg-slate-900/80 backdrop-blur-sm shadow-lg rounded-2xl border border-slate-200/60 dark:border-slate-700/60\">\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-base flex items-center gap-2\">\n                    <div className=\"w-8 h-8 rounded-lg flex items-center justify-center bg-purple-100 dark:bg-purple-900/50\">\n                      <Paperclip className=\"h-4 w-4 text-purple-600 dark:text-purple-400\" />\n                    </div>\n                    Attachments ({ticket.attachments?.length || 0})\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n                    {ticket.attachments?.map((attachment, index) => (\n                      <div key={index} className=\"flex items-center justify-between p-3 bg-slate-50 dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700 hover:bg-slate-100 dark:hover:bg-slate-700/50 transition-colors\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"p-2 bg-white dark:bg-slate-700 rounded-lg shadow-sm\">\n                            {getFileIcon(attachment.mimeType)}\n                          </div>\n                          <div className=\"min-w-0\">\n                            <p className=\"text-sm font-medium text-slate-900 dark:text-slate-100 truncate\">{attachment.originalName}</p>\n                            <p className=\"text-xs text-slate-500\">{formatFileSize(attachment.size)}</p>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center gap-1\">\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\"\n                            onClick={() => handlePreviewAttachment(attachment)}\n                            title=\"Preview\"\n                            className=\"h-6 w-6 p-0\"\n                          >\n                            <Eye className=\"h-3 w-3\" />\n                          </Button>\n                          <Button variant=\"ghost\" size=\"sm\" asChild className=\"h-6 w-6 p-0\">\n                            <a\n                              href={attachment.url || `/uploads/tickets/${attachment.filename}`}\n                              download={attachment.originalName}\n                              target=\"_blank\"\n                              rel=\"noopener noreferrer\"\n                              className=\"text-slate-500 hover:text-blue-600 dark:hover:text-blue-400\"\n                            >\n                              <Download className=\"h-3 w-3\" />\n                            </a>\n                          </Button>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n\n          {/* Right Sidebar */}\n          <div className=\"space-y-4 dark:rounded-2xl\">\n            \n            {/* Actions Card */}\n            <Card className=\"bg-white/80 dark:bg-slate-900/80 backdrop-blur-sm shadow-lg rounded-2xl border border-slate-200/60 dark:border-slate-700/60\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-base flex items-center gap-2\">\n                  <div className=\"w-8 h-8 rounded-lg flex items-center justify-center bg-green-100 dark:bg-green-900/50\">\n                    <CircleDot className=\"h-4 w-4 text-green-600 dark:text-green-400\" />\n                  </div>\n                  Actions\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                {/* Mark as Resolved - Show for all active statuses */}\n                {(ticket.status === 'open' || ticket.status === 'in_progress' || ticket.status === 'waiting_admin' || ticket.status === 'waiting_user') && (\n                  <Button \n                    onClick={handleMarkResolved} \n                    className=\"w-full bg-green-600 hover:bg-green-700 text-white shadow-md\"\n                    size=\"sm\"\n                  >\n                    <CheckCircle2 className=\"h-4 w-4 mr-2\" />\n                    Mark as Resolved\n                  </Button>\n                )}\n\n                {/* Reopen Ticket - Show when closed or resolved */}\n                {(ticket.status === 'closed' || ticket.status === 'resolved') && (\n                  <div className=\"space-y-2\">\n                    <Button \n                      onClick={handleReopenTicket} \n                      variant=\"outline\"\n                      disabled={!reopenCheck.allowed}\n                      className={`w-full ${\n                        reopenCheck.allowed \n                          ? 'border-amber-300 text-amber-600 hover:bg-amber-50 dark:border-amber-600 dark:text-amber-400 dark:hover:bg-amber-950/20' \n                          : 'border-slate-300 text-slate-400 dark:border-slate-600 dark:text-slate-500 cursor-not-allowed'\n                      }`}\n                      size=\"sm\"\n                    >\n                      <RefreshCw className=\"h-4 w-4 mr-2\" />\n                      Reopen Ticket\n                    </Button>\n                    \n                    {/* Show restriction message */}\n                    {!reopenCheck.allowed && reopenCheck.reason && (\n                      <div className=\"flex items-start gap-2 p-2 bg-slate-50 dark:bg-slate-800 rounded-md text-xs text-slate-600 dark:text-slate-400\">\n                        <Info className=\"h-3 w-3 mt-0.5 flex-shrink-0\" />\n                        <span>{reopenCheck.reason}</span>\n                      </div>\n                    )}\n                    \n                    {/* Show time remaining if within restriction period */}\n                    {reopenCheck.allowed && ticket.resolvedAt && (\n                      <div className=\"flex items-start gap-2 p-2 bg-amber-50 dark:bg-amber-950/20 rounded-md text-xs text-amber-600 dark:text-amber-400\">\n                        <Clock className=\"h-3 w-3 mt-0.5 flex-shrink-0\" />\n                        <span>\n                          {getTimeRemaining(\n                            ticket.status === 'resolved' ? ticket.resolvedAt : ticket.closedAt!, \n                            ACTION_RESTRICTIONS.REOPEN_HOURS\n                          )} to reopen\n                        </span>\n                      </div>\n                    )}\n                  </div>\n                )}\n\n                {/* Information text based on status */}\n                <div className=\"text-xs text-slate-500 dark:text-slate-400 pt-2 border-t border-slate-200 dark:border-slate-700\">\n                  {ticket.status === 'open' && \"Mark as resolved when your issue is fixed\"}\n                  {ticket.status === 'in_progress' && \"Mark as resolved when your issue is fixed\"}\n                  {ticket.status === 'waiting_admin' && \"Mark as resolved when your issue is fixed\"}\n                  {ticket.status === 'waiting_user' && \"Mark as resolved when your issue is fixed\"}\n                  {ticket.status === 'resolved' && (\n                    reopenCheck.allowed \n                      ? \"Reopen if you need further assistance\" \n                      : \"Tickets can only be reopened within 48 hours\"\n                  )}\n                  {ticket.status === 'closed' && (\n                    reopenCheck.allowed \n                      ? \"Reopen if you need further assistance\" \n                      : \"Tickets can only be reopened within 48 hours\"\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n            \n            {/* Ticket Details Card */}\n            <Card className=\"bg-white/80 dark:bg-slate-900/80 backdrop-blur-sm shadow-lg rounded-2xl border border-slate-200/60 dark:border-slate-700/60\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-base flex items-center gap-2\">\n                  <div className=\"w-8 h-8 rounded-lg flex items-center justify-center bg-slate-100 dark:bg-slate-800\">\n                    <FileText className=\"h-4 w-4 text-slate-600 dark:text-slate-400\" />\n                  </div>\n                  Details\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                {ticket.estimatedResolutionTime && (\n                  <div>\n                    <span className=\"text-xs font-medium text-slate-600 dark:text-slate-400\">Estimated Resolution</span>\n                    <p className=\"font-medium text-amber-600 dark:text-amber-400\">{formatDate(ticket.estimatedResolutionTime)}</p>\n                  </div>\n                )}\n\n                <div>\n                  <span className=\"text-xs font-medium text-slate-600 dark:text-slate-400\">Resolve Date</span>\n                  {ticket.resolvedAt ? (\n                    <p className=\"font-medium text-green-600 dark:text-green-400\">{formatDate(ticket.resolvedAt)}</p>\n                  ) : (\n                    <p className=\"font-medium text-slate-500 dark:text-slate-400\">Not yet resolved</p>\n                  )}\n                </div>\n\n                <div>\n                  <span className=\"text-xs font-medium text-slate-600 dark:text-slate-400\">Rating</span>\n                  {ticket.customerSatisfactionRating ? (\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-2\">\n                          <Star className=\"h-4 w-4 text-amber-500 fill-current\" />\n                          <p className=\"font-medium text-amber-600 dark:text-amber-400\">{ticket.customerSatisfactionRating}/5</p>\n                        </div>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={handleReRate}\n                          disabled={!reRateCheck.allowed}\n                          className={`h-7 px-3 text-xs ${\n                            reRateCheck.allowed\n                              ? 'bg-amber-50 hover:bg-amber-100 text-amber-700 border-amber-200 hover:border-amber-300 dark:bg-amber-950/20 dark:hover:bg-amber-950/30 dark:text-amber-400 dark:border-amber-800 dark:hover:border-amber-700'\n                              : 'bg-slate-50 text-slate-400 border-slate-200 dark:bg-slate-800 dark:text-slate-500 dark:border-slate-600 cursor-not-allowed'\n                          }`}\n                        >\n                          <Star className=\"h-3 w-3 mr-1\" />\n                          Re-rate\n                        </Button>\n                      </div>\n                      \n                      {/* Show restriction message or time remaining */}\n                      {!reRateCheck.allowed && reRateCheck.reason && (\n                        <div className=\"flex items-start gap-2 p-2 bg-slate-50 dark:bg-slate-800 rounded-md text-xs text-slate-600 dark:text-slate-400\">\n                          <Info className=\"h-3 w-3 mt-0.5 flex-shrink-0\" />\n                          <span>{reRateCheck.reason}</span>\n                        </div>\n                      )}\n                      \n                      {reRateCheck.allowed && ticket.resolvedAt && (\n                        <div className=\"flex items-start gap-2 p-2 bg-amber-50 dark:bg-amber-950/20 rounded-md text-xs text-amber-600 dark:text-amber-400\">\n                          <Clock className=\"h-3 w-3 mt-0.5 flex-shrink-0\" />\n                          <span>\n                            {getTimeRemaining(\n                              ticket.status === 'resolved' ? ticket.resolvedAt : ticket.closedAt!, \n                              ACTION_RESTRICTIONS.RERATING_HOURS\n                            )} to re-rate\n                          </span>\n                        </div>\n                      )}\n                    </div>\n                  ) : (\n                    <p className=\"font-medium text-slate-500 dark:text-slate-400\">Not yet rated</p>\n                  )}\n                </div>\n\n                <div>\n                  <span className=\"text-xs font-medium text-slate-600 dark:text-slate-400\">Last Updated</span>\n                  <p className=\"font-medium text-slate-900 dark:text-slate-100\">{getTimeAgo(ticket.updatedAt)}</p>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Tags Card */}\n            {ticket.tags && ticket.tags.length > 0 && (\n              <Card className=\"bg-white/80 dark:bg-slate-900/80 backdrop-blur-sm shadow-lg rounded-2xl border border-slate-200/60 dark:border-slate-700/60\">\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-base flex items-center gap-2\">\n                    <div className=\"w-8 h-8 rounded-lg flex items-center justify-center bg-blue-100 dark:bg-blue-900/50\">\n                      <Tag className=\"h-4 w-4 text-blue-600 dark:text-blue-400\" />\n                    </div>\n                    Tags\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {ticket.tags.map((tag, index) => (\n                      <Badge key={index} className=\"bg-blue-100 dark:bg-blue-900/50 text-blue-800 dark:text-blue-200 px-2 py-1 text-xs font-medium border-0 rounded-md\">\n                        {tag}\n                      </Badge>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Internal Notes (Admin Only) */}\n            {ticket.internalNotes && (\n              <Card className=\"bg-purple-50/80 dark:bg-purple-950/20 backdrop-blur-sm shadow-lg rounded-2xl border border-purple-200 dark:border-purple-800/50\">\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-base flex items-center gap-2\">\n                    <div className=\"w-8 h-8 rounded-lg flex items-center justify-center bg-purple-100 dark:bg-purple-900/50\">\n                      <FileText className=\"h-4 w-4 text-purple-600 dark:text-purple-400\" />\n                    </div>\n                    Internal Notes\n                    <Badge variant=\"secondary\" className=\"text-xs\">Admin Only</Badge>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"bg-purple-100/50 dark:bg-purple-950/30 rounded-lg p-3 border border-purple-200/50 dark:border-purple-700/50\">\n                    <div \n                      className=\"text-purple-900 dark:text-purple-100 whitespace-pre-wrap text-sm leading-relaxed prose prose-sm max-w-none prose-slate dark:prose-invert\"\n                      dangerouslySetInnerHTML={{ __html: ticket.internalNotes }}\n                    />\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </div>\n\n        {/* Conversation Section - Full Width */}\n        <div className=\"mt-8 space-y-6 dark:rounded-2xl\">\n          \n          {/* Conversation */}\n          <Card className=\"bg-white/80 dark:bg-slate-900/80 backdrop-blur-sm shadow-lg rounded-2xl border border-slate-200/60 dark:border-slate-700/60\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-base flex items-center gap-2\">\n                <div className=\"w-8 h-8 rounded-lg flex items-center justify-center bg-blue-100 dark:bg-blue-900/50\">\n                  <MessageSquare className=\"h-4 w-4 text-blue-600 dark:text-blue-400\" />\n                </div>\n                <div>\n                  <span>Conversation</span>\n                  <span className=\"text-sm font-normal text-slate-500 dark:text-slate-400 ml-2\">\n                    ({ticket.replies.filter(reply => !reply.isInternal).length} messages)\n                  </span>\n                </div>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {ticket.replies.filter(reply => !reply.isInternal).length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <div className=\"p-3 bg-slate-100 dark:bg-slate-800 rounded-full w-12 h-12 mx-auto mb-3 flex items-center justify-center\">\n                      <MessageCircle className=\"h-6 w-6 text-slate-400\" />\n                    </div>\n                    <p className=\"font-medium text-slate-600 dark:text-slate-400 mb-1\">No messages yet</p>\n                    <p className=\"text-sm text-slate-500 dark:text-slate-500\">Start the conversation below</p>\n                  </div>\n                ) : (\n                  ticket.replies\n                    .filter(reply => !reply.isInternal)\n                    .map((reply, index) => {\n                      const isSystem = isSystemMessage(reply);\n                      \n                      return (\n                        <div key={index} className=\"flex gap-3\">\n                          <Avatar className=\"h-8 w-8 border-2 border-slate-200 dark:border-slate-700 shadow-sm\">\n                            <AvatarFallback className={`text-xs font-medium ${\n                              isSystem\n                                ? 'bg-amber-100 dark:bg-amber-900/50 text-amber-600 dark:text-amber-400'\n                                : reply.authorType === 'admin' \n                                  ? 'bg-blue-100 dark:bg-blue-900/50 text-blue-600 dark:text-blue-400' \n                                  : 'bg-slate-100 dark:bg-slate-800 text-slate-600 dark:text-slate-400'\n                            }`}>\n                              {isSystem ? (\n                                <Settings className=\"h-4 w-4\" />\n                              ) : (\n                                reply.author \n                                  ? getUserInitials(reply.author.email, reply.author.firstName, reply.author.lastName, reply.author.name)\n                                  : reply.authorType === 'admin' ? 'S' : 'Y'\n                              )}\n                            </AvatarFallback>\n                          </Avatar>\n                          <div className=\"flex-1 space-y-2\">\n                            <div className=\"flex items-center gap-2 text-sm\">\n                              <span className=\"font-medium text-slate-900 dark:text-slate-100\">\n                                {isSystem ? 'System' : (\n                                  reply.author \n                                    ? reply.author.name || (reply.author.firstName && reply.author.lastName ? `${reply.author.firstName} ${reply.author.lastName}` : reply.author.firstName || reply.author.lastName) || reply.author.email\n                                    : reply.authorType === 'admin' ? 'Support Team' : 'You'\n                                )}\n                              </span>\n                              <Badge variant=\"outline\" className={`text-xs ${\n                                isSystem\n                                  ? 'bg-amber-50 dark:bg-amber-950/20 text-amber-600 dark:text-amber-400 border-amber-200 dark:border-amber-800'\n                                  : reply.authorType === 'admin' \n                                    ? 'bg-blue-50 dark:bg-blue-950/20 text-blue-600 dark:text-blue-400 border-blue-200 dark:border-blue-800' \n                                    : 'bg-slate-50 dark:bg-slate-800 text-slate-600 dark:text-slate-400'\n                              }`}>\n                                {isSystem ? 'System' : (reply.authorType === 'admin' ? 'Support' : 'Customer')}\n                              </Badge>\n                              <span className=\"text-slate-500 dark:text-slate-500\">\n                                {formatDate(reply.createdAt)}\n                              </span>\n                            </div>\n                            <div className={`rounded-lg p-3 shadow-sm transition-colors hover:shadow-md ${\n                              isSystem\n                                ? 'bg-amber-50/80 dark:bg-amber-950/20 border border-amber-200/50 dark:border-amber-800/50'\n                                : reply.authorType === 'admin' \n                                  ? 'bg-blue-50/80 dark:bg-blue-950/20 border border-blue-200/50 dark:border-blue-800/50' \n                                  : 'bg-slate-50 dark:bg-slate-800/50 border border-slate-200 dark:border-slate-700'\n                            }`}>\n                              <div \n                                className=\"text-slate-800 dark:text-slate-200 text-sm leading-relaxed prose prose-sm max-w-none prose-slate dark:prose-invert\"\n                                dangerouslySetInnerHTML={{ __html: reply.content }}\n                              />\n                              \n                              {/* Reply Attachments */}\n                              {reply.attachments && reply.attachments.length > 0 && (\n                                <div className=\"mt-3 space-y-2\">\n                                  <div className=\"flex items-center gap-2\">\n                                    <Paperclip className=\"h-3 w-3 text-slate-500\" />\n                                    <span className=\"text-xs text-slate-500\">Attachments</span>\n                                  </div>\n                                  {reply.attachments.map((attachment, attachIndex) => (\n                                    <div\n                                      key={attachIndex}\n                                      className=\"flex items-center justify-between p-2 bg-white dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700 hover:bg-slate-50 dark:hover:bg-slate-700/50 transition-colors\"\n                                    >\n                                      <div className=\"flex items-center space-x-2\">\n                                        <div className=\"p-1 bg-slate-100 dark:bg-slate-700 rounded\">\n                                          {getFileIcon(attachment.mimeType)}\n                                        </div>\n                                        <div>\n                                          <p className=\"text-xs font-medium text-slate-900 dark:text-slate-100\">\n                                            {attachment.originalName}\n                                          </p>\n                                          <p className=\"text-xs text-slate-500\">\n                                            {formatFileSize(attachment.size)}\n                                          </p>\n                                        </div>\n                                      </div>\n                                      <div className=\"flex items-center gap-1\">\n                                        <Button \n                                          variant=\"ghost\" \n                                          size=\"sm\"\n                                          onClick={() => handlePreviewAttachment(attachment)}\n                                          title=\"Preview\"\n                                          className=\"h-6 w-6 p-0\"\n                                        >\n                                          <Eye className=\"h-3 w-3\" />\n                                        </Button>\n                                        <Button variant=\"ghost\" size=\"sm\" asChild className=\"h-6 w-6 p-0\">\n                                          <a\n                                            href={attachment.url || `/uploads/tickets/${attachment.filename}`}\n                                            download={attachment.originalName}\n                                            target=\"_blank\"\n                                            rel=\"noopener noreferrer\"\n                                            className=\"text-slate-500 hover:text-blue-600 dark:hover:text-blue-400\"\n                                          >\n                                            <Download className=\"h-3 w-3\" />\n                                          </a>\n                                        </Button>\n                                      </div>\n                                    </div>\n                                  ))}\n                                </div>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                      );\n                    })\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Reply Form */}\n          {ticket.status !== 'closed' && (\n            <Card className=\"bg-white/80 dark:bg-slate-900/80 backdrop-blur-sm shadow-lg rounded-2xl border border-slate-200/60 dark:border-slate-700/60\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-base flex items-center gap-2\">\n                  <div className=\"w-8 h-8 rounded-lg flex items-center justify-center bg-green-100 dark:bg-green-900/50\">\n                    <Send className=\"h-4 w-4 text-green-600 dark:text-green-400\" />\n                  </div>\n                  Add Reply\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={handleReplySubmit} className=\"space-y-6\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"reply-content\" className=\"text-sm font-medium text-slate-700 dark:text-slate-300\">\n                      Your Message\n                    </Label>\n                    <WysiwygEditor\n                      id=\"reply-content\"\n                      value={newReply}\n                      onChange={(value) => setNewReply(value)}\n                      placeholder=\"Type your message here...\"\n                      minHeight=\"120px\"\n                      toolbar=\"standard\"\n                      className=\"border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-800 focus:ring-2 focus:ring-blue-500/20 focus:border-blue-500 dark:focus:border-blue-400 rounded-xl transition-all duration-200\"\n                    />\n                  </div>\n\n                  {/* File Upload with Drag & Drop */}\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <Label className=\"text-sm font-medium text-slate-700 dark:text-slate-300\">Attachments</Label>\n                      <div className=\"text-xs text-slate-500\">\n                        Max 5 files, 10MB each\n                      </div>\n                    </div>\n                    \n                    <div\n                      {...getRootProps()}\n                      className={`border-2 border-dashed rounded-xl p-8 text-center transition-all duration-300 cursor-pointer ${\n                        isDragActive\n                          ? 'border-blue-400 bg-blue-50 dark:bg-blue-950/20 shadow-md'\n                          : 'border-slate-300 dark:border-slate-600 bg-slate-50 dark:bg-slate-800/50 hover:border-blue-400 hover:bg-blue-50 dark:hover:bg-blue-950/20'\n                      }`}\n                    >\n                      <input {...getInputProps()} />\n                      <div className=\"space-y-4\">\n                        <div className=\"mx-auto w-12 h-12 bg-slate-200 dark:bg-slate-700 rounded-full flex items-center justify-center\">\n                          <Upload className=\"h-6 w-6 text-slate-500\" />\n                        </div>\n                        <div className=\"space-y-1\">\n                          <p className=\"text-base font-medium text-slate-700 dark:text-slate-300\">\n                            {isDragActive ? 'Drop files here' : 'Upload attachments'}\n                          </p>\n                          <p className=\"text-sm text-slate-500\">\n                            Drag & drop files here, or click to browse\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* File Preview */}\n                    {replyAttachments.length > 0 && (\n                      <div className=\"space-y-3\">\n                        <div className=\"flex items-center gap-2\">\n                          <Paperclip className=\"h-4 w-4 text-slate-500\" />\n                          <span className=\"text-sm font-medium text-slate-700 dark:text-slate-300\">\n                            Selected Files ({replyAttachments.length})\n                          </span>\n                        </div>\n                        <div className=\"space-y-2\">\n                          {replyAttachments.map((file, index) => (\n                            <div\n                              key={index}\n                              className=\"flex items-center justify-between p-3 bg-slate-50 dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700\"\n                            >\n                              <div className=\"flex items-center space-x-3\">\n                                <div className=\"p-2 bg-white dark:bg-slate-700 rounded-lg shadow-sm\">\n                                  {getFileIcon(file.type)}\n                                </div>\n                                <div className=\"min-w-0 flex-1\">\n                                  <p className=\"text-sm font-medium text-slate-800 dark:text-slate-200 truncate\">\n                                    {file.name}\n                                  </p>\n                                  <p className=\"text-xs text-slate-500\">\n                                    {formatFileSize(file.size)}\n                                  </p>\n                                </div>\n                              </div>\n                              <Button\n                                type=\"button\"\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => removeAttachment(index)}\n                                className=\"text-red-500 hover:text-red-700 hover:bg-red-50 dark:hover:bg-red-950/20\"\n                              >\n                                <X className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Submit Button */}\n                  <div className=\"flex justify-end\">\n                    <Button \n                      type=\"submit\" \n                      disabled={isSubmittingReply || uploadingFiles || !getPlainTextFromHtml(newReply).trim()}\n                      className=\"bg-blue-600 hover:bg-blue-700 text-white shadow-md hover:shadow-lg transition-all duration-200 px-6\"\n                    >\n                      {isSubmittingReply || uploadingFiles ? (\n                        <div className=\"flex items-center gap-2\">\n                          <div className=\"w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin\"></div>\n                          <span>Sending...</span>\n                        </div>\n                      ) : (\n                        <div className=\"flex items-center gap-2\">\n                          <Send className=\"h-4 w-4\" />\n                          <span>Send Reply</span>\n                        </div>\n                      )}\n                    </Button>\n                  </div>\n                </form>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </div>\n\n      {/* Attachment Preview Modal */}\n      {previewAttachment && (\n        <AttachmentPreview\n          attachment={previewAttachment}\n          isOpen={showPreview}\n          onClose={handleClosePreview}\n        />\n      )}\n    </div>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/tickets/TicketList.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":77,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1631,1634],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1631,1634],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":397,"column":72,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[17891,17911],"text":"This won&apos;t take long"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[17891,17911],"text":"This won&lsquo;t take long"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[17891,17911],"text":"This won&#39;t take long"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[17891,17911],"text":"This won&rsquo;t take long"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport Link from 'next/link';\nimport { useTickets } from '@/hooks/useTickets';\nimport { \n  TicketFilters, \n  SERVICE_LABELS, \n  PRIORITY_LABELS, \n  STATUS_LABELS,\n  PRIORITY_COLORS,\n  STATUS_COLORS,\n  TicketStatus\n} from '@/types/ticket';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { \n  Select, \n  SelectContent, \n  SelectItem, \n  SelectTrigger, \n  SelectValue \n} from '@/components/ui/select';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { \n  Search, \n  Plus, \n  Filter, \n  RefreshCw, \n  MessageCircle,\n  Clock,\n  TrendingUp,\n  BarChart3,\n  Activity,\n  CheckCircle2,\n  AlertCircle,\n  CircleDot,\n  Timer,\n  Sparkles,\n  Zap,\n  AlertTriangle\n} from 'lucide-react';\n\ninterface TicketListProps {\n  showCreateButton?: boolean;\n  onCreateTicket?: () => void;\n}\n\nexport default function TicketList({ showCreateButton = true, onCreateTicket }: TicketListProps) {\n  const { \n    tickets, \n    loading, \n    error, \n    pagination, \n    stats,\n    fetchTickets, \n    clearError \n  } = useTickets();\n\n  const [filters, setFilters] = useState<TicketFilters>({\n    page: 1,\n    limit: 10,\n    search: '',\n    status: undefined,\n    service: undefined,\n    priority: undefined,\n  });\n\n  const [showFilters, setShowFilters] = useState(false);\n\n  useEffect(() => {\n    fetchTickets(filters);\n  }, [fetchTickets, filters]);\n\n  const handleFilterChange = (key: keyof TicketFilters, value: any) => {\n    setFilters(prev => ({\n      ...prev,\n      [key]: value,\n      page: 1, // Reset to first page when filtering\n    }));\n  };\n\n  const handleSearch = (searchTerm: string) => {\n    setFilters(prev => ({\n      ...prev,\n      search: searchTerm,\n      page: 1,\n    }));\n  };\n\n  const handlePageChange = (newPage: number) => {\n    setFilters(prev => ({\n      ...prev,\n      page: newPage,\n    }));\n  };\n\n  const clearFilters = () => {\n    setFilters({\n      page: 1,\n      limit: 10,\n      search: '',\n      status: undefined,\n      service: undefined,\n      priority: undefined,\n    });\n  };\n\n  const formatDate = (date: Date | string) => {\n    return new Date(date).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n    });\n  };\n\n  const getTimeAgo = (date: Date | string) => {\n    const now = new Date();\n    const past = new Date(date);\n    const diffInMinutes = Math.floor((now.getTime() - past.getTime()) / (1000 * 60));\n\n    if (diffInMinutes < 1) return 'Just now';\n    if (diffInMinutes < 60) return `${diffInMinutes}m ago`;\n    if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)}h ago`;\n    return `${Math.floor(diffInMinutes / 1440)}d ago`;\n  };\n\n  const getStatusIcon = (status: TicketStatus) => {\n    switch (status) {\n      case 'open':\n        return <AlertCircle className=\"h-4 w-4\" />;\n      case 'in_progress':\n        return <CircleDot className=\"h-4 w-4\" />;\n      case 'waiting_admin':\n        return <Timer className=\"h-4 w-4\" />;\n      case 'resolved':\n        return <CheckCircle2 className=\"h-4 w-4\" />;\n      case 'closed':\n        return <CheckCircle2 className=\"h-4 w-4\" />;\n      default:\n        return <AlertCircle className=\"h-4 w-4\" />;\n    }\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Enhanced User Stats Dashboard */}\n      {stats && (\n        <div className=\"grid grid-cols-2 lg:grid-cols-5 gap-6\">\n          {/* Total Tickets Card */}\n          <Card className=\"group relative overflow-hidden border-0 bg-gradient-to-br from-slate-50 via-slate-50 to-slate-100 dark:from-slate-950/50 dark:via-slate-900/30 dark:to-slate-800/20 shadow-lg hover:shadow-2xl hover:scale-[1.02] transition-all duration-300\">\n            <div className=\"absolute inset-0 bg-gradient-to-br from-slate-500/5 to-transparent\" />\n            <div className=\"absolute inset-0 ring-1 ring-inset ring-slate-200/50 dark:ring-slate-700/50 rounded-lg\" />\n            <CardContent className=\"relative p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"p-3 bg-slate-100 dark:bg-slate-900/50 rounded-xl shadow-sm\">\n                  <BarChart3 className=\"h-6 w-6 text-slate-600 dark:text-slate-400\" />\n                </div>\n                <Sparkles className=\"h-4 w-4 text-slate-400 opacity-60 group-hover:opacity-100 transition-opacity\" />\n              </div>\n              <div className=\"space-y-1\">\n                <p className=\"text-3xl font-bold text-slate-700 dark:text-slate-300\">{stats.total || 0}</p>\n                <p className=\"text-sm font-medium text-slate-600 dark:text-slate-400\">Total Tickets</p>\n                <p className=\"text-xs text-slate-500/70 dark:text-slate-400/70\">All your requests</p>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Open Tickets Card */}\n          <Card className=\"group relative overflow-hidden border-0 bg-gradient-to-br from-red-50 via-red-50 to-red-100 dark:from-red-950/50 dark:via-red-900/30 dark:to-red-800/20 shadow-lg hover:shadow-2xl hover:scale-[1.02] transition-all duration-300\">\n            <div className=\"absolute inset-0 bg-gradient-to-br from-red-500/5 to-transparent\" />\n            <div className=\"absolute inset-0 ring-1 ring-inset ring-red-200/50 dark:ring-red-700/50 rounded-lg\" />\n            <CardContent className=\"relative p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"p-3 bg-red-100 dark:bg-red-900/50 rounded-xl shadow-sm\">\n                  <AlertCircle className=\"h-6 w-6 text-red-600 dark:text-red-400\" />\n                </div>\n                <TrendingUp className=\"h-4 w-4 text-red-400 opacity-60 group-hover:opacity-100 transition-opacity\" />\n              </div>\n              <div className=\"space-y-1\">\n                <p className=\"text-3xl font-bold text-red-700 dark:text-red-300\">{stats.open || 0}</p>\n                <p className=\"text-sm font-medium text-red-600 dark:text-red-400\">Open</p>\n                <p className=\"text-xs text-red-500/70 dark:text-red-400/70\">Need attention</p>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* In Progress Card */}\n          <Card className=\"group relative overflow-hidden border-0 bg-gradient-to-br from-blue-50 via-blue-50 to-blue-100 dark:from-blue-950/50 dark:via-blue-900/30 dark:to-blue-800/20 shadow-lg hover:shadow-2xl hover:scale-[1.02] transition-all duration-300\">\n            <div className=\"absolute inset-0 bg-gradient-to-br from-blue-500/5 to-transparent\" />\n            <div className=\"absolute inset-0 ring-1 ring-inset ring-blue-200/50 dark:ring-blue-700/50 rounded-lg\" />\n            <CardContent className=\"relative p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"p-3 bg-blue-100 dark:bg-blue-900/50 rounded-xl shadow-sm\">\n                  <CircleDot className=\"h-6 w-6 text-blue-600 dark:text-blue-400\" />\n                </div>\n                <Activity className=\"h-4 w-4 text-blue-400 opacity-60 group-hover:opacity-100 transition-opacity\" />\n              </div>\n              <div className=\"space-y-1\">\n                <p className=\"text-3xl font-bold text-blue-700 dark:text-blue-300\">{stats.in_progress || 0}</p>\n                <p className=\"text-sm font-medium text-blue-600 dark:text-blue-400\">In Progress</p>\n                <p className=\"text-xs text-blue-500/70 dark:text-blue-400/70\">Being worked on</p>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Waiting for Support Card */}\n          <Card className=\"group relative overflow-hidden border-0 bg-gradient-to-br from-amber-50 via-amber-50 to-amber-100 dark:from-amber-950/50 dark:via-amber-900/30 dark:to-amber-800/20 shadow-lg hover:shadow-2xl hover:scale-[1.02] transition-all duration-300\">\n            <div className=\"absolute inset-0 bg-gradient-to-br from-amber-500/5 to-transparent\" />\n            <div className=\"absolute inset-0 ring-1 ring-inset ring-amber-200/50 dark:ring-amber-700/50 rounded-lg\" />\n            <CardContent className=\"relative p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"p-3 bg-amber-100 dark:bg-amber-900/50 rounded-xl shadow-sm\">\n                  <Timer className=\"h-6 w-6 text-amber-600 dark:text-amber-400\" />\n                </div>\n                <Clock className=\"h-4 w-4 text-amber-400 opacity-60 group-hover:opacity-100 transition-opacity\" />\n              </div>\n              <div className=\"space-y-1\">\n                <p className=\"text-3xl font-bold text-amber-700 dark:text-amber-300\">{stats.waiting_admin || 0}</p>\n                <p className=\"text-sm font-medium text-amber-600 dark:text-amber-400\">Waiting Response</p>\n                <p className=\"text-xs text-amber-500/70 dark:text-amber-400/70\">Pending support</p>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Resolved Card */}\n          <Card className=\"group relative overflow-hidden border-0 bg-gradient-to-br from-emerald-50 via-emerald-50 to-emerald-100 dark:from-emerald-950/50 dark:via-emerald-900/30 dark:to-emerald-800/20 shadow-lg hover:shadow-2xl hover:scale-[1.02] transition-all duration-300\">\n            <div className=\"absolute inset-0 bg-gradient-to-br from-emerald-500/5 to-transparent\" />\n            <div className=\"absolute inset-0 ring-1 ring-inset ring-emerald-200/50 dark:ring-emerald-700/50 rounded-lg\" />\n            <CardContent className=\"relative p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"p-3 bg-emerald-100 dark:bg-emerald-900/50 rounded-xl shadow-sm\">\n                  <CheckCircle2 className=\"h-6 w-6 text-emerald-600 dark:text-emerald-400\" />\n                </div>\n                <BarChart3 className=\"h-4 w-4 text-emerald-400 opacity-60 group-hover:opacity-100 transition-opacity\" />\n              </div>\n              <div className=\"space-y-1\">\n                <p className=\"text-3xl font-bold text-emerald-700 dark:text-emerald-300\">{stats.resolved || 0}</p>\n                <p className=\"text-sm font-medium text-emerald-600 dark:text-emerald-400\">Resolved</p>\n                <p className=\"text-xs text-emerald-500/70 dark:text-emerald-400/70\">Successfully closed</p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Enhanced Search and Filters */}\n      <Card className=\"border-0 bg-card/80 backdrop-blur-md shadow-xl ring-1 ring-border/50 hover:shadow-2xl transition-all duration-300\">\n        <CardContent className=\"p-6\">\n          <div className=\"space-y-6\">\n            <div className=\"flex flex-col lg:flex-row gap-4\">\n              {/* Enhanced Search */}\n              <div className=\"flex-1 relative group\">\n                <Search className=\"absolute left-4 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4 transition-colors group-focus-within:text-primary\" />\n                <Input\n                  placeholder=\"Search tickets by title, description, or ticket number...\"\n                  value={filters.search || ''}\n                  onChange={(e) => handleSearch(e.target.value)}\n                  className=\"pl-12 h-12 border-0 bg-background/60 backdrop-blur-sm hover:bg-background/80 focus:bg-background transition-all duration-200 text-base\"\n                />\n              </div>\n\n              {/* Action Buttons */}\n              <div className=\"flex gap-3\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setShowFilters(!showFilters)}\n                  className=\"h-12 px-6 border-0 bg-background/60 backdrop-blur-sm hover:bg-background/80 transition-all duration-200\"\n                >\n                  <Filter className=\"h-4 w-4 mr-2\" />\n                  <span className=\"hidden sm:inline\">Advanced Filters</span>\n                  <span className=\"sm:hidden\">Filters</span>\n                </Button>\n\n                <Button\n                  variant=\"outline\"\n                  onClick={() => fetchTickets(filters)}\n                  disabled={loading}\n                  className=\"h-12 px-6 border-0 bg-background/60 backdrop-blur-sm hover:bg-background/80 transition-all duration-200\"\n                >\n                  <RefreshCw className={`h-4 w-4 mr-2 ${loading ? 'animate-spin' : ''}`} />\n                  <span className=\"hidden sm:inline\">Refresh</span>\n                </Button>\n              </div>\n            </div>\n\n            {/* Enhanced Expandable Filters */}\n            {showFilters && (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 p-6 bg-muted/30 dark:bg-muted/20 rounded-xl border border-border/50\">\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium text-muted-foreground\">Status</label>\n                  <Select\n                    value={filters.status || 'all'}\n                    onValueChange={(value) => handleFilterChange('status', value === 'all' ? undefined : value)}\n                  >\n                    <SelectTrigger className=\"h-10 border-0 bg-background/60\">\n                      <SelectValue placeholder=\"All Statuses\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Statuses</SelectItem>\n                      {Object.entries(STATUS_LABELS).map(([value, label]) => (\n                        <SelectItem key={value} value={value}>\n                          <div className=\"flex items-center gap-2\">\n                            {getStatusIcon(value as TicketStatus)}\n                            {label}\n                          </div>\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium text-muted-foreground\">Service</label>\n                  <Select\n                    value={filters.service || 'all'}\n                    onValueChange={(value) => handleFilterChange('service', value === 'all' ? undefined : value)}\n                  >\n                    <SelectTrigger className=\"h-10 border-0 bg-background/60\">\n                      <SelectValue placeholder=\"All Services\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Services</SelectItem>\n                      {Object.entries(SERVICE_LABELS).map(([value, label]) => (\n                        <SelectItem key={value} value={value}>\n                          {label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium text-muted-foreground\">Priority</label>\n                  <Select\n                    value={filters.priority || 'all'}\n                    onValueChange={(value) => handleFilterChange('priority', value === 'all' ? undefined : value)}\n                  >\n                    <SelectTrigger className=\"h-10 border-0 bg-background/60\">\n                      <SelectValue placeholder=\"All Priorities\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Priorities</SelectItem>\n                      {Object.entries(PRIORITY_LABELS).map(([value, label]) => (\n                        <SelectItem key={value} value={value}>\n                          {label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"flex items-end\">\n                  <Button \n                    variant=\"outline\" \n                    onClick={clearFilters}\n                    className=\"w-full h-10 border-0 bg-background/60 hover:bg-destructive/10 hover:text-destructive transition-all duration-200\"\n                  >\n                    Clear Filters\n                  </Button>\n                </div>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Enhanced Error Message */}\n      {error && (\n        <Alert variant=\"destructive\" className=\"border-0 bg-destructive/5 dark:bg-destructive/10\">\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription className=\"flex items-center justify-between\">\n            <span>{error}</span>\n            <Button variant=\"ghost\" size=\"sm\" onClick={clearError} className=\"ml-4\">\n              Dismiss\n            </Button>\n          </AlertDescription>\n        </Alert>\n      )}\n\n      {/* Modern Tickets List */}\n      <div className=\"space-y-4\">\n        {loading && tickets.length === 0 ? (\n          <Card className=\"border-0 bg-card/80 backdrop-blur-md shadow-xl ring-1 ring-border/50\">\n            <CardContent className=\"p-12 text-center\">\n              <div className=\"flex flex-col items-center space-y-4\">\n                <div className=\"relative\">\n                  <div className=\"animate-spin rounded-full h-12 w-12 border-2 border-primary/30\"></div>\n                  <div className=\"animate-spin rounded-full h-12 w-12 border-2 border-t-primary absolute inset-0\"></div>\n                </div>\n                <div className=\"space-y-2\">\n                  <p className=\"text-lg font-medium\">Loading your tickets...</p>\n                  <p className=\"text-sm text-muted-foreground\">This won't take long</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ) : tickets.length === 0 ? (\n          <Card className=\"border-0 bg-gradient-to-br from-card/80 to-muted/30 backdrop-blur-md shadow-xl ring-1 ring-border/50 hover:shadow-2xl transition-all duration-300\">\n            <CardContent className=\"p-12 text-center\">\n              <div className=\"flex flex-col items-center space-y-6\">\n                <div className=\"p-4 bg-primary/10 rounded-full shadow-lg ring-1 ring-primary/20\">\n                  <Sparkles className=\"h-8 w-8 text-primary\" />\n                </div>\n                <div className=\"space-y-2\">\n                  <h3 className=\"text-xl font-semibold\">No tickets found</h3>\n                  <p className=\"text-muted-foreground max-w-md\">\n                    {filters.search || filters.status || filters.service || filters.priority \n                      ? \"Try adjusting your filters or search terms to find what you're looking for.\"\n                      : \"You haven't created any support tickets yet. Need help? Create your first ticket to get started.\"\n                    }\n                  </p>\n                </div>\n                {showCreateButton && !filters.search && !filters.status && !filters.service && !filters.priority && (\n                  <Button onClick={onCreateTicket} size=\"lg\" className=\"mt-4 shadow-lg hover:shadow-xl transition-shadow\">\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Create Your First Ticket\n                  </Button>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"border rounded-lg overflow-hidden shadow-xl ring-1 ring-border/50 bg-card/50 backdrop-blur-sm\">\n            <div className=\"overflow-x-auto\">\n              {/* Table Header */}\n              <div className=\"bg-muted/50 px-4 py-3 border-b flex items-center gap-4 text-sm font-medium text-muted-foreground backdrop-blur-sm min-w-[1040px]\">\n                <div className=\"w-[80px] flex-shrink-0\">Ticket #</div>\n                <div className=\"w-[40px] flex-shrink-0 text-center\">Priority</div>\n                <div className=\"w-[280px] flex-shrink-0\">Title & Description</div>\n                <div className=\"w-[120px] flex-shrink-0\">Service</div>\n                <div className=\"w-[100px] flex-shrink-0\">Priority</div>\n                <div className=\"w-[140px] flex-shrink-0\">Status</div>\n                <div className=\"w-[80px] flex-shrink-0 text-center\">Replies</div>\n                <div className=\"w-[80px] flex-shrink-0\">Created</div>\n              </div>\n\n              {/* Table Rows */}\n              {tickets.map((ticket, index) => (\n                <div key={ticket._id} className={`px-4 py-3 flex items-center gap-4 hover:bg-muted/40 hover:shadow-sm transition-all duration-200 group min-w-[1040px] ${index !== tickets.length - 1 ? 'border-b border-border/30' : ''}`}>\n                  {/* Ticket Number */}\n                  <div className=\"w-[80px] flex-shrink-0\">\n                    <Link href={`/support/tickets/${ticket._id}`} className=\"font-mono text-xs text-muted-foreground hover:text-primary transition-colors\">\n                      #{ticket.ticketNumber}\n                    </Link>\n                  </div>\n\n                  {/* Priority Indicator */}\n                  <div className=\"w-[40px] flex-shrink-0 flex justify-center\">\n                    {ticket.priority === 'urgent' && <Zap className=\"h-4 w-4 text-red-500\" />}\n                    {ticket.status === 'open' && ticket.priority === 'high' && <AlertTriangle className=\"h-4 w-4 text-orange-500\" />}\n                  </div>\n\n                  {/* Title & Description */}\n                  <div className=\"w-[280px] flex-shrink-0\">\n                    <Link href={`/support/tickets/${ticket._id}`} className=\"block space-y-1 group-hover:text-primary transition-colors\">\n                      <div className=\"font-medium text-sm truncate\" title={ticket.title}>\n                        {ticket.title}\n                      </div>\n                      <div className=\"text-xs text-muted-foreground line-clamp-1\" title={ticket.description}>\n                        {ticket.description}\n                      </div>\n                    </Link>\n                  </div>\n\n                  {/* Service */}\n                  <div className=\"w-[120px] flex-shrink-0\">\n                    <Badge variant=\"outline\" className=\"text-xs whitespace-nowrap\">\n                      {SERVICE_LABELS[ticket.service]}\n                    </Badge>\n                  </div>\n\n                  {/* Priority */}\n                  <div className=\"w-[100px] flex-shrink-0\">\n                    <Badge className={`${PRIORITY_COLORS[ticket.priority]} text-xs whitespace-nowrap`}>\n                      {PRIORITY_LABELS[ticket.priority]}\n                    </Badge>\n                  </div>\n\n                  {/* Status */}\n                  <div className=\"w-[140px] flex-shrink-0\">\n                    <Badge className={`${STATUS_COLORS[ticket.status]} text-xs flex items-center justify-center gap-1 whitespace-nowrap`}>\n                      {getStatusIcon(ticket.status)}\n                      {STATUS_LABELS[ticket.status]}\n                    </Badge>\n                  </div>\n\n                  {/* Replies */}\n                  <div className=\"w-[80px] flex-shrink-0 text-center\">\n                    {ticket.replies.length > 0 ? (\n                      <div className=\"flex items-center justify-center gap-1\">\n                        <MessageCircle className=\"h-3 w-3 text-muted-foreground\" />\n                        <span className=\"text-xs font-medium\">{ticket.replies.length}</span>\n                      </div>\n                    ) : (\n                      <span className=\"text-xs text-muted-foreground\">0</span>\n                    )}\n                  </div>\n\n                  {/* Created Date */}\n                  <div className=\"w-[80px] flex-shrink-0\">\n                    <div className=\"text-xs text-muted-foreground\" title={formatDate(ticket.createdAt)}>\n                      {getTimeAgo(ticket.createdAt)}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Enhanced Pagination */}\n      {pagination && pagination.totalPages > 1 && (\n        <div className=\"flex flex-col sm:flex-row items-center justify-between gap-4 p-6 bg-card/80 backdrop-blur-md rounded-xl border-0 shadow-xl ring-1 ring-border/50 hover:shadow-2xl transition-all duration-300\">\n          <p className=\"text-sm text-muted-foreground\">\n            Showing <span className=\"font-medium text-foreground\">{((pagination.page - 1) * pagination.limit) + 1}</span> to{' '}\n            <span className=\"font-medium text-foreground\">{Math.min(pagination.page * pagination.limit, pagination.total)}</span> of{' '}\n            <span className=\"font-medium text-foreground\">{pagination.total}</span> results\n          </p>\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => handlePageChange(pagination.page - 1)}\n              disabled={pagination.page <= 1}\n              className=\"border-0 bg-background/80 hover:bg-background shadow-md hover:shadow-lg transition-all duration-200\"\n            >\n              Previous\n            </Button>\n            <div className=\"flex items-center gap-2 px-3 py-1 bg-background/80 rounded-md border-0 shadow-md ring-1 ring-border/30\">\n              <span className=\"text-sm font-medium\">\n                Page {pagination.page} of {pagination.totalPages}\n              </span>\n            </div>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => handlePageChange(pagination.page + 1)}\n              disabled={pagination.page >= pagination.totalPages}\n              className=\"border-0 bg-background/80 hover:bg-background shadow-md hover:shadow-lg transition-all duration-200\"\n            >\n              Next\n            </Button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/ui/AttachmentPreview.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":180,"column":19,"nodeType":"JSXOpeningElement","endLine":189,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { \n  Download, \n  X, \n  ZoomIn, \n  ZoomOut, \n  RotateCw, \n  Eye,\n  FileText,\n  Image as ImageIcon,\n  File\n} from 'lucide-react';\n\ninterface AttachmentPreviewProps {\n  attachment: {\n    filename: string;\n    originalName: string;\n    mimeType: string;\n    size: number;\n    url?: string;\n  };\n  onClose: () => void;\n  isOpen: boolean;\n}\n\nconst AttachmentPreview: React.FC<AttachmentPreviewProps> = ({ \n  attachment, \n  onClose, \n  isOpen \n}) => {\n  const [zoom, setZoom] = useState(100);\n  const [rotation, setRotation] = useState(0);\n  const [imageError, setImageError] = useState(false);\n\n  if (!isOpen) return null;\n\n  const fileUrl = attachment.url || `/uploads/tickets/${attachment.filename}`;\n\n  const handleBackdropClick = (e: React.MouseEvent) => {\n    if (e.target === e.currentTarget) {\n      onClose();\n    }\n  };\n\n  const handleZoomIn = () => setZoom(prev => Math.min(prev + 25, 300));\n  const handleZoomOut = () => setZoom(prev => Math.max(prev - 25, 25));\n  const handleRotate = () => setRotation(prev => (prev + 90) % 360);\n  const resetTransform = () => {\n    setZoom(100);\n    setRotation(0);\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const getFileIcon = (mimeType: string) => {\n    if (mimeType.startsWith('image/')) {\n      return <ImageIcon className=\"h-8 w-8 text-blue-500\" />;\n    }\n    if (mimeType === 'application/pdf') {\n      return <FileText className=\"h-8 w-8 text-red-500\" />;\n    }\n    if (mimeType.startsWith('text/')) {\n      return <FileText className=\"h-8 w-8 text-green-500\" />;\n    }\n    return <File className=\"h-8 w-8 text-gray-500\" />;\n  };\n\n  const isImage = attachment.mimeType.startsWith('image/');\n  const isPDF = attachment.mimeType === 'application/pdf';\n  const isText = attachment.mimeType.startsWith('text/');\n  const isPreviewable = isImage || isPDF || isText;\n\n  return (\n    <div \n      className=\"fixed inset-0 z-[9999] bg-black/80 backdrop-blur-sm flex items-center justify-center\"\n      onClick={handleBackdropClick}\n    >\n      <div className=\"relative w-full h-full max-w-7xl max-h-screen mx-4 flex flex-col\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-4 bg-white dark:bg-slate-800 rounded-t-xl border-b border-slate-200 dark:border-slate-700\">\n          <div className=\"flex items-center gap-3 min-w-0 flex-1\">\n            {getFileIcon(attachment.mimeType)}\n            <div className=\"min-w-0 flex-1\">\n              <h3 className=\"text-lg font-semibold text-slate-900 dark:text-slate-100 truncate\">\n                {attachment.originalName}\n              </h3>\n              <p className=\"text-sm text-slate-600 dark:text-slate-400\">\n                {attachment.mimeType} • {formatFileSize(attachment.size)}\n              </p>\n            </div>\n          </div>\n\n          <div className=\"flex items-center gap-2\">\n            {isImage && !imageError && (\n              <>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={handleZoomOut}\n                  disabled={zoom <= 25}\n                  title=\"Zoom Out\"\n                >\n                  <ZoomOut className=\"h-4 w-4\" />\n                </Button>\n                <span className=\"text-sm text-slate-600 dark:text-slate-400 min-w-[4rem] text-center\">\n                  {zoom}%\n                </span>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={handleZoomIn}\n                  disabled={zoom >= 300}\n                  title=\"Zoom In\"\n                >\n                  <ZoomIn className=\"h-4 w-4\" />\n                </Button>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={handleRotate}\n                  title=\"Rotate\"\n                >\n                  <RotateCw className=\"h-4 w-4\" />\n                </Button>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={resetTransform}\n                  title=\"Reset\"\n                  className=\"text-xs\"\n                >\n                  Reset\n                </Button>\n              </>\n            )}\n            \n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              asChild\n              title=\"Download\"\n            >\n              <a\n                href={fileUrl}\n                download={attachment.originalName}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                <Download className=\"h-4 w-4\" />\n              </a>\n            </Button>\n            \n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onClose}\n              title=\"Close\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n\n        {/* Content */}\n        <div className=\"flex-1 bg-white dark:bg-slate-800 rounded-b-xl overflow-hidden\">\n          {isPreviewable ? (\n            <div className=\"w-full h-full flex items-center justify-center overflow-auto\">\n              {/* Image Preview */}\n              {isImage && !imageError && (\n                <div className=\"flex items-center justify-center p-4 w-full h-full\">\n                  <img\n                    src={fileUrl}\n                    alt={attachment.originalName}\n                    className=\"max-w-full max-h-full object-contain\"\n                    style={{\n                      transform: `scale(${zoom / 100}) rotate(${rotation}deg)`,\n                      transition: 'transform 0.2s ease-in-out'\n                    }}\n                    onError={() => setImageError(true)}\n                  />\n                </div>\n              )}\n\n              {/* PDF Preview */}\n              {isPDF && (\n                <div className=\"w-full h-full\">\n                  <iframe\n                    src={`${fileUrl}#view=FitH`}\n                    className=\"w-full h-full border-0\"\n                    title={attachment.originalName}\n                  />\n                </div>\n              )}\n\n              {/* Text File Preview */}\n              {isText && (\n                <div className=\"w-full h-full p-6 overflow-auto\">\n                  <iframe\n                    src={fileUrl}\n                    className=\"w-full h-full border-0 bg-white dark:bg-slate-900 rounded\"\n                    title={attachment.originalName}\n                  />\n                </div>\n              )}\n\n              {/* Error State for Images */}\n              {isImage && imageError && (\n                <div className=\"flex flex-col items-center justify-center p-8 text-center\">\n                  <ImageIcon className=\"h-16 w-16 text-slate-400 mb-4\" />\n                  <h3 className=\"text-lg font-medium text-slate-900 dark:text-slate-100 mb-2\">\n                    Cannot preview image\n                  </h3>\n                  <p className=\"text-slate-600 dark:text-slate-400 mb-4\">\n                    The image file could not be loaded or displayed.\n                  </p>\n                  <Button asChild>\n                    <a\n                      href={fileUrl}\n                      download={attachment.originalName}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      <Download className=\"h-4 w-4 mr-2\" />\n                      Download File\n                    </a>\n                  </Button>\n                </div>\n              )}\n            </div>\n          ) : (\n            /* Non-previewable files */\n            <div className=\"flex flex-col items-center justify-center p-8 text-center h-full\">\n              {getFileIcon(attachment.mimeType)}\n              <h3 className=\"text-xl font-medium text-slate-900 dark:text-slate-100 mt-4 mb-2\">\n                {attachment.originalName}\n              </h3>\n              <p className=\"text-slate-600 dark:text-slate-400 mb-6\">\n                This file type cannot be previewed in the browser.\n              </p>\n              <div className=\"flex gap-3\">\n                <Button asChild>\n                  <a\n                    href={fileUrl}\n                    download={attachment.originalName}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    <Download className=\"h-4 w-4 mr-2\" />\n                    Download File\n                  </a>\n                </Button>\n                <Button \n                  variant=\"outline\"\n                  asChild\n                >\n                  <a\n                    href={fileUrl}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    <Eye className=\"h-4 w-4 mr-2\" />\n                    Open in New Tab\n                  </a>\n                </Button>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AttachmentPreview; ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/ui/WysiwygEditor.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":66,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1863,1866],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1863,1866],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":70,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1928,1931],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1928,1931],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useEditor, EditorContent } from '@tiptap/react';\nimport StarterKit from '@tiptap/starter-kit';\nimport Underline from '@tiptap/extension-underline';\nimport TextAlign from '@tiptap/extension-text-align';\nimport TextStyle from '@tiptap/extension-text-style';\nimport Color from '@tiptap/extension-color';\nimport Highlight from '@tiptap/extension-highlight';\nimport Link from '@tiptap/extension-link';\nimport Placeholder from '@tiptap/extension-placeholder';\nimport Table from '@tiptap/extension-table';\nimport TableRow from '@tiptap/extension-table-row';\nimport TableCell from '@tiptap/extension-table-cell';\nimport TableHeader from '@tiptap/extension-table-header';\nimport Image from '@tiptap/extension-image';\nimport HorizontalRule from '@tiptap/extension-horizontal-rule';\nimport Superscript from '@tiptap/extension-superscript';\nimport Subscript from '@tiptap/extension-subscript';\nimport FontFamily from '@tiptap/extension-font-family';\nimport ListKeymap from '@tiptap/extension-list-keymap';\nimport { forwardRef, useCallback, useEffect, useMemo, useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { \n  Bold, \n  Italic, \n  Underline as UnderlineIcon, \n  Strikethrough,\n  List,\n  ListOrdered,\n  Quote,\n  Code,\n  Code2,\n  AlignLeft,\n  AlignCenter,\n  AlignRight,\n  AlignJustify,\n  Link as LinkIcon,\n  Type,\n  Undo,\n  Redo,\n  Heading1,\n  Heading2,\n  Heading3,\n  Table as TableIcon,\n  Image as ImageIcon,\n  Minus,\n  Highlighter,\n  Superscript as SuperscriptIcon,\n  Subscript as SubscriptIcon,\n  Indent,\n  Outdent,\n  Trash2,\n  Maximize2,\n  Minimize2\n} from 'lucide-react';\n\ninterface WysiwygEditorProps {\n  value: string;\n  onChange: (value: string) => void;\n  placeholder?: string;\n  className?: string;\n  disabled?: boolean;\n  minHeight?: string;\n  toolbar?: 'basic' | 'standard' | 'full';\n  onKeyDown?: (event: any) => void;\n  id?: string;\n}\n\nconst WysiwygEditor = forwardRef<any, WysiwygEditorProps>(\n  ({ \n    value, \n    onChange, \n    placeholder = \"Type your message here...\", \n    className = \"\",\n    disabled = false,\n    minHeight = \"120px\",\n    toolbar = \"standard\",\n    onKeyDown,\n    id\n  }) => {\n\n    const [isFullscreen, setIsFullscreen] = useState(false);\n    const [showColorPicker, setShowColorPicker] = useState(false);\n    const [showHighlightPicker, setShowHighlightPicker] = useState(false);\n\n    const extensions = useMemo(() => [\n      StarterKit.configure({\n        heading: {\n          levels: [1, 2, 3, 4, 5, 6],\n        },\n      }),\n      Underline,\n      TextStyle,\n      Color.configure({\n        types: ['textStyle'],\n      }),\n      Highlight.configure({\n        multicolor: true,\n      }),\n      TextAlign.configure({\n        types: ['heading', 'paragraph'],\n      }),\n      Link.configure({\n        openOnClick: false,\n        HTMLAttributes: {\n          class: 'text-blue-600 dark:text-blue-400 underline cursor-pointer',\n        },\n      }),\n      Placeholder.configure({\n        placeholder,\n      }),\n      Table.configure({\n        resizable: true,\n      }),\n      TableRow,\n      TableHeader,\n      TableCell,\n      Image.configure({\n        HTMLAttributes: {\n          class: 'max-w-full h-auto rounded-lg',\n        },\n      }),\n      HorizontalRule,\n      Superscript,\n      Subscript,\n      FontFamily.configure({\n        types: ['textStyle'],\n      }),\n      ListKeymap,\n    ], [placeholder]);\n\n    const editor = useEditor({\n      extensions,\n      content: value,\n      editable: !disabled,\n      onUpdate: ({ editor }) => {\n        const html = editor.getHTML();\n        if (html !== value) {\n          onChange(html);\n        }\n      },\n      editorProps: {\n        attributes: {\n          class: 'prose prose-sm sm:prose lg:prose-lg xl:prose-2xl mx-auto focus:outline-none min-h-[' + minHeight + '] p-4',\n          style: `min-height: ${minHeight}`,\n        },\n        handleKeyDown: (view, event) => {\n          if (onKeyDown) {\n            onKeyDown(event);\n          }\n          return false;\n        },\n      },\n    });\n\n    // Update editor content when value prop changes\n    useEffect(() => {\n      if (editor && value !== editor.getHTML()) {\n        editor.commands.setContent(value);\n      }\n    }, [value, editor]);\n\n    // Handle disabled state\n    useEffect(() => {\n      if (editor) {\n        editor.setEditable(!disabled);\n      }\n    }, [disabled, editor]);\n\n    const setLink = useCallback(() => {\n      if (!editor) return;\n      \n      const previousUrl = editor.getAttributes('link').href;\n      const url = window.prompt('URL', previousUrl);\n\n      if (url === null) {\n        return;\n      }\n\n      if (url === '') {\n        editor.chain().focus().extendMarkRange('link').unsetLink().run();\n        return;\n      }\n\n      editor.chain().focus().extendMarkRange('link').setLink({ href: url }).run();\n    }, [editor]);\n\n    const addImage = useCallback(() => {\n      if (!editor) return;\n      \n      const url = window.prompt('Image URL');\n\n      if (url) {\n        editor.chain().focus().setImage({ src: url }).run();\n      }\n    }, [editor]);\n\n    const insertTable = useCallback(() => {\n      if (!editor) return;\n      \n      editor.chain().focus().insertTable({ rows: 3, cols: 3, withHeaderRow: true }).run();\n    }, [editor]);\n\n    const colors = [\n      '#000000', '#434343', '#666666', '#999999', '#b7b7b7', '#cccccc', '#d9d9d9', '#efefef', '#f3f3f3', '#ffffff',\n      '#980000', '#ff0000', '#ff9900', '#ffff00', '#00ff00', '#00ffff', '#4a86e8', '#0000ff', '#9900ff', '#ff00ff',\n      '#e6b8af', '#f4cccc', '#fce5cd', '#fff2cc', '#d9ead3', '#d0e0e3', '#c9daf8', '#cfe2f3', '#d9d2e9', '#ead1dc',\n      '#dd7e6b', '#ea9999', '#f9cb9c', '#ffe599', '#b6d7a8', '#a2c4c9', '#a4c2f4', '#9fc5e8', '#b4a7d6', '#d5a6bd',\n      '#cc4125', '#e06666', '#f6b26b', '#ffd966', '#93c47d', '#76a5af', '#6d9eeb', '#6fa8dc', '#8e7cc3', '#c27ba0',\n      '#a61c00', '#cc0000', '#e69138', '#f1c232', '#6aa84f', '#45818e', '#3c78d8', '#3d85c6', '#674ea7', '#a64d79',\n      '#85200c', '#990000', '#b45f06', '#bf9000', '#38761d', '#134f5c', '#1155cc', '#0b5394', '#351c75', '#741b47',\n      '#5b0f00', '#660000', '#783f04', '#7f6000', '#274e13', '#0c343d', '#1c4587', '#073763', '#20124d', '#4c1130'\n    ];\n\n    const ToolbarButton = ({ \n      onClick, \n      isActive = false, \n      disabled = false, \n      children, \n      title,\n      variant = 'default'\n    }: {\n      onClick: (e?: React.MouseEvent) => void;\n      isActive?: boolean;\n      disabled?: boolean;\n      children: React.ReactNode;\n      title: string;\n      variant?: 'default' | 'dropdown';\n    }) => (\n      <Button\n        type=\"button\"\n        variant=\"ghost\"\n        size=\"sm\"\n        onClick={onClick}\n        disabled={disabled}\n        title={title}\n        className={`h-8 ${variant === 'dropdown' ? 'w-auto px-2' : 'w-8'} p-0 ${\n          isActive \n            ? 'bg-slate-200 dark:bg-slate-700 text-slate-900 dark:text-slate-100' \n            : 'text-slate-600 dark:text-slate-400 hover:text-slate-900 dark:hover:text-slate-100'\n        }`}\n      >\n        {children}\n      </Button>\n    );\n\n    const ColorPickerModal = ({ \n      isOpen, \n      onClose, \n      onColorSelect, \n      colors: colorPalette,\n      title \n    }: { \n      isOpen: boolean;\n      onClose: () => void;\n      onColorSelect: (color: string) => void;\n      colors: string[];\n      title: string;\n    }) => {\n      if (!isOpen) return null;\n\n      const handleBackdropClick = (e: React.MouseEvent) => {\n        if (e.target === e.currentTarget) {\n          onClose();\n        }\n      };\n\n      const handleModalClick = (e: React.MouseEvent) => {\n        e.stopPropagation();\n      };\n\n      return (\n        <div \n          className=\"fixed inset-0 z-[9999] flex items-center justify-center\"\n          onClick={handleBackdropClick}\n        >\n          {/* Backdrop */}\n          <div className=\"absolute inset-0 bg-black/50 backdrop-blur-sm\" />\n          \n          {/* Modal */}\n          <div \n            className=\"relative bg-white dark:bg-slate-800 rounded-xl shadow-2xl border border-slate-200 dark:border-slate-700 p-6 max-w-md w-full mx-4 animate-in zoom-in-95 duration-200\"\n            onClick={handleModalClick}\n          >\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-semibold text-slate-900 dark:text-slate-100\">\n                {title}\n              </h3>\n              <button\n                type=\"button\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  onClose();\n                }}\n                className=\"text-slate-400 hover:text-slate-600 dark:hover:text-slate-300 transition-colors p-1 hover:bg-slate-100 dark:hover:bg-slate-700 rounded\"\n              >\n                <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                </svg>\n              </button>\n            </div>\n            \n            <div className=\"grid grid-cols-10 gap-3 mb-6\">\n              {colorPalette.map((color) => (\n                <button\n                  key={color}\n                  type=\"button\"\n                  className=\"w-8 h-8 rounded-lg border-2 border-slate-300 dark:border-slate-600 hover:scale-110 hover:shadow-lg transition-all duration-200 focus:ring-2 focus:ring-blue-500\"\n                  style={{ backgroundColor: color }}\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onColorSelect(color);\n                    onClose();\n                  }}\n                  title={color}\n                />\n              ))}\n            </div>\n            \n            <div className=\"flex gap-3\">\n              <button\n                type=\"button\"\n                className=\"flex-1 px-4 py-2 text-sm font-medium text-slate-700 dark:text-slate-300 bg-slate-100 dark:bg-slate-700 hover:bg-slate-200 dark:hover:bg-slate-600 rounded-lg transition-colors border border-slate-300 dark:border-slate-600\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  onColorSelect('');\n                  onClose();\n                }}\n              >\n                Remove Color\n              </button>\n              <button\n                type=\"button\"\n                className=\"px-4 py-2 text-sm font-medium text-slate-500 dark:text-slate-400 hover:text-slate-700 dark:hover:text-slate-300 transition-colors hover:bg-slate-100 dark:hover:bg-slate-700 rounded-lg\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  onClose();\n                }}\n              >\n                Cancel\n              </button>\n            </div>\n          </div>\n        </div>\n      );\n    };\n\n    const renderToolbar = () => {\n      if (!editor) return null;\n\n      const basicTools = (\n        <>\n          <ToolbarButton\n            onClick={() => editor.chain().focus().toggleBold().run()}\n            isActive={editor.isActive('bold')}\n            title=\"Bold (Ctrl+B)\"\n          >\n            <Bold className=\"h-4 w-4\" />\n          </ToolbarButton>\n          <ToolbarButton\n            onClick={() => editor.chain().focus().toggleItalic().run()}\n            isActive={editor.isActive('italic')}\n            title=\"Italic (Ctrl+I)\"\n          >\n            <Italic className=\"h-4 w-4\" />\n          </ToolbarButton>\n          <ToolbarButton\n            onClick={() => editor.chain().focus().toggleUnderline().run()}\n            isActive={editor.isActive('underline')}\n            title=\"Underline (Ctrl+U)\"\n          >\n            <UnderlineIcon className=\"h-4 w-4\" />\n          </ToolbarButton>\n        </>\n      );\n\n      const standardTools = (\n        <>\n          {basicTools}\n          <div className=\"w-px h-6 bg-slate-300 dark:bg-slate-600 mx-1\" />\n          \n          {/* Text Color */}\n          <div className=\"relative\">\n            <ToolbarButton\n              onClick={(e) => {\n                e?.stopPropagation();\n                setShowColorPicker(!showColorPicker);\n                setShowHighlightPicker(false);\n              }}\n              isActive={showColorPicker}\n              title=\"Text Color\"\n            >\n              <div className=\"flex flex-col items-center\">\n                <Type className=\"h-3 w-3\" />\n                <div \n                  className=\"w-3 h-1 mt-0.5 border border-slate-300 dark:border-slate-600\"\n                  style={{ backgroundColor: editor.getAttributes('textStyle').color || '#000000' }}\n                />\n              </div>\n            </ToolbarButton>\n          </div>\n\n          {/* Highlight Color */}\n          <div className=\"relative\">\n            <ToolbarButton\n              onClick={(e) => {\n                e?.stopPropagation();\n                setShowHighlightPicker(!showHighlightPicker);\n                setShowColorPicker(false);\n              }}\n              isActive={editor.isActive('highlight') || showHighlightPicker}\n              title=\"Highlight\"\n            >\n              <Highlighter className=\"h-4 w-4\" />\n            </ToolbarButton>\n          </div>\n\n          <div className=\"w-px h-6 bg-slate-300 dark:bg-slate-600 mx-1\" />\n\n          <ToolbarButton\n            onClick={() => editor.chain().focus().toggleBulletList().run()}\n            isActive={editor.isActive('bulletList')}\n            title=\"Bullet List\"\n          >\n            <List className=\"h-4 w-4\" />\n          </ToolbarButton>\n          <ToolbarButton\n            onClick={() => editor.chain().focus().toggleOrderedList().run()}\n            isActive={editor.isActive('orderedList')}\n            title=\"Numbered List\"\n          >\n            <ListOrdered className=\"h-4 w-4\" />\n          </ToolbarButton>\n\n          <div className=\"w-px h-6 bg-slate-300 dark:bg-slate-600 mx-1\" />\n\n          <ToolbarButton\n            onClick={setLink}\n            isActive={editor.isActive('link')}\n            title=\"Add Link\"\n          >\n            <LinkIcon className=\"h-4 w-4\" />\n          </ToolbarButton>\n        </>\n      );\n\n      const fullTools = (\n        <>\n          {/* Headings */}\n          <ToolbarButton\n            onClick={() => editor.chain().focus().toggleHeading({ level: 1 }).run()}\n            isActive={editor.isActive('heading', { level: 1 })}\n            title=\"Heading 1\"\n          >\n            <Heading1 className=\"h-4 w-4\" />\n          </ToolbarButton>\n          <ToolbarButton\n            onClick={() => editor.chain().focus().toggleHeading({ level: 2 }).run()}\n            isActive={editor.isActive('heading', { level: 2 })}\n            title=\"Heading 2\"\n          >\n            <Heading2 className=\"h-4 w-4\" />\n          </ToolbarButton>\n          <ToolbarButton\n            onClick={() => editor.chain().focus().toggleHeading({ level: 3 }).run()}\n            isActive={editor.isActive('heading', { level: 3 })}\n            title=\"Heading 3\"\n          >\n            <Heading3 className=\"h-4 w-4\" />\n          </ToolbarButton>\n          \n          <div className=\"w-px h-6 bg-slate-300 dark:bg-slate-600 mx-1\" />\n          \n          {standardTools}\n          \n          <div className=\"w-px h-6 bg-slate-300 dark:bg-slate-600 mx-1\" />\n\n          {/* Advanced formatting */}\n          <ToolbarButton\n            onClick={() => editor.chain().focus().toggleStrike().run()}\n            isActive={editor.isActive('strike')}\n            title=\"Strikethrough\"\n          >\n            <Strikethrough className=\"h-4 w-4\" />\n          </ToolbarButton>\n          \n          <ToolbarButton\n            onClick={() => editor.chain().focus().toggleSuperscript().run()}\n            isActive={editor.isActive('superscript')}\n            title=\"Superscript\"\n          >\n            <SuperscriptIcon className=\"h-4 w-4\" />\n          </ToolbarButton>\n          \n          <ToolbarButton\n            onClick={() => editor.chain().focus().toggleSubscript().run()}\n            isActive={editor.isActive('subscript')}\n            title=\"Subscript\"\n          >\n            <SubscriptIcon className=\"h-4 w-4\" />\n          </ToolbarButton>\n\n          <div className=\"w-px h-6 bg-slate-300 dark:bg-slate-600 mx-1\" />\n\n          <ToolbarButton\n            onClick={() => editor.chain().focus().toggleCode().run()}\n            isActive={editor.isActive('code')}\n            title=\"Inline Code\"\n          >\n            <Code className=\"h-4 w-4\" />\n          </ToolbarButton>\n          <ToolbarButton\n            onClick={() => editor.chain().focus().toggleCodeBlock().run()}\n            isActive={editor.isActive('codeBlock')}\n            title=\"Code Block\"\n          >\n            <Code2 className=\"h-4 w-4\" />\n          </ToolbarButton>\n          <ToolbarButton\n            onClick={() => editor.chain().focus().toggleBlockquote().run()}\n            isActive={editor.isActive('blockquote')}\n            title=\"Quote\"\n          >\n            <Quote className=\"h-4 w-4\" />\n          </ToolbarButton>\n\n          <div className=\"w-px h-6 bg-slate-300 dark:bg-slate-600 mx-1\" />\n\n          {/* Alignment */}\n          <ToolbarButton\n            onClick={() => editor.chain().focus().setTextAlign('left').run()}\n            isActive={editor.isActive({ textAlign: 'left' })}\n            title=\"Align Left\"\n          >\n            <AlignLeft className=\"h-4 w-4\" />\n          </ToolbarButton>\n          <ToolbarButton\n            onClick={() => editor.chain().focus().setTextAlign('center').run()}\n            isActive={editor.isActive({ textAlign: 'center' })}\n            title=\"Align Center\"\n          >\n            <AlignCenter className=\"h-4 w-4\" />\n          </ToolbarButton>\n          <ToolbarButton\n            onClick={() => editor.chain().focus().setTextAlign('right').run()}\n            isActive={editor.isActive({ textAlign: 'right' })}\n            title=\"Align Right\"\n          >\n            <AlignRight className=\"h-4 w-4\" />\n          </ToolbarButton>\n          <ToolbarButton\n            onClick={() => editor.chain().focus().setTextAlign('justify').run()}\n            isActive={editor.isActive({ textAlign: 'justify' })}\n            title=\"Justify\"\n          >\n            <AlignJustify className=\"h-4 w-4\" />\n          </ToolbarButton>\n\n          <div className=\"w-px h-6 bg-slate-300 dark:bg-slate-600 mx-1\" />\n\n          {/* Lists indentation */}\n          <ToolbarButton\n            onClick={() => editor.chain().focus().sinkListItem('listItem').run()}\n            disabled={!editor.can().sinkListItem('listItem')}\n            title=\"Indent List\"\n          >\n            <Indent className=\"h-4 w-4\" />\n          </ToolbarButton>\n          <ToolbarButton\n            onClick={() => editor.chain().focus().liftListItem('listItem').run()}\n            disabled={!editor.can().liftListItem('listItem')}\n            title=\"Outdent List\"\n          >\n            <Outdent className=\"h-4 w-4\" />\n          </ToolbarButton>\n\n          <div className=\"w-px h-6 bg-slate-300 dark:bg-slate-600 mx-1\" />\n\n          {/* Insert elements */}\n          <ToolbarButton\n            onClick={() => insertTable()}\n            title=\"Insert Table\"\n          >\n            <TableIcon className=\"h-4 w-4\" />\n          </ToolbarButton>\n          \n          <ToolbarButton\n            onClick={() => addImage()}\n            title=\"Insert Image\"\n          >\n            <ImageIcon className=\"h-4 w-4\" />\n          </ToolbarButton>\n          \n          <ToolbarButton\n            onClick={() => editor.chain().focus().setHorizontalRule().run()}\n            title=\"Insert Horizontal Rule\"\n          >\n            <Minus className=\"h-4 w-4\" />\n          </ToolbarButton>\n\n          {/* Table controls when in table */}\n          {editor.isActive('table') && (\n            <>\n              <div className=\"w-px h-6 bg-slate-300 dark:bg-slate-600 mx-1\" />\n              <ToolbarButton\n                onClick={() => editor.chain().focus().addColumnBefore().run()}\n                title=\"Add Column Before\"\n              >\n                <div className=\"text-xs\">+Col</div>\n              </ToolbarButton>\n              <ToolbarButton\n                onClick={() => editor.chain().focus().deleteColumn().run()}\n                title=\"Delete Column\"\n              >\n                <Trash2 className=\"h-3 w-3\" />\n              </ToolbarButton>\n              <ToolbarButton\n                onClick={() => editor.chain().focus().addRowBefore().run()}\n                title=\"Add Row Before\"\n              >\n                <div className=\"text-xs\">+Row</div>\n              </ToolbarButton>\n              <ToolbarButton\n                onClick={() => editor.chain().focus().deleteRow().run()}\n                title=\"Delete Row\"\n              >\n                <Trash2 className=\"h-3 w-3\" />\n              </ToolbarButton>\n              <ToolbarButton\n                onClick={() => editor.chain().focus().deleteTable().run()}\n                title=\"Delete Table\"\n              >\n                <Trash2 className=\"h-4 w-4\" />\n              </ToolbarButton>\n            </>\n          )}\n        </>\n      );\n\n      const undoRedoTools = (\n        <>\n          <div className=\"w-px h-6 bg-slate-300 dark:bg-slate-600 mx-1\" />\n          <ToolbarButton\n            onClick={() => editor.chain().focus().undo().run()}\n            disabled={!editor.can().undo()}\n            title=\"Undo (Ctrl+Z)\"\n          >\n            <Undo className=\"h-4 w-4\" />\n          </ToolbarButton>\n          <ToolbarButton\n            onClick={() => editor.chain().focus().redo().run()}\n            disabled={!editor.can().redo()}\n            title=\"Redo (Ctrl+Y)\"\n          >\n            <Redo className=\"h-4 w-4\" />\n          </ToolbarButton>\n        </>\n      );\n\n      const fullscreenTools = (\n        <>\n          <div className=\"w-px h-6 bg-slate-300 dark:bg-slate-600 mx-1\" />\n          <ToolbarButton\n            onClick={() => setIsFullscreen(!isFullscreen)}\n            title={isFullscreen ? \"Exit Fullscreen\" : \"Fullscreen\"}\n          >\n            {isFullscreen ? <Minimize2 className=\"h-4 w-4\" /> : <Maximize2 className=\"h-4 w-4\" />}\n          </ToolbarButton>\n        </>\n      );\n\n      return (\n        <div className=\"flex items-center gap-1 p-3 border-b border-slate-200 dark:border-slate-700 bg-slate-50 dark:bg-slate-800 rounded-t-xl overflow-x-auto relative\">\n          {toolbar === 'basic' && basicTools}\n          {toolbar === 'standard' && standardTools}\n          {toolbar === 'full' && fullTools}\n          {undoRedoTools}\n          {fullscreenTools}\n        </div>\n      );\n    };\n\n    if (!editor) {\n      return (\n        <div className={`wysiwyg-editor ${className}`}>\n          <div className=\"min-h-[120px] border border-slate-200 dark:border-slate-700 rounded-xl bg-white dark:bg-slate-800 animate-pulse\" />\n        </div>\n      );\n    }\n\n    const editorContainerClass = isFullscreen \n      ? \"fixed inset-0 z-50 bg-white dark:bg-slate-900 flex flex-col\"\n      : `wysiwyg-editor ${className}`;\n\n    return (\n      <div className={editorContainerClass} id={id}>\n        <div \n          className=\"border border-slate-200 dark:border-slate-700 rounded-xl bg-white dark:bg-slate-800 transition-all duration-200 focus-within:ring-2 focus-within:ring-blue-500/20 focus-within:border-blue-500 dark:focus-within:border-blue-400 flex flex-col flex-1 relative\"\n          onClick={() => {\n            if (editor && !editor.isFocused) {\n              editor.commands.focus();\n            }\n          }}\n        >\n          {renderToolbar()}\n          <div \n            className={`relative ${isFullscreen ? 'flex-1 overflow-auto' : ''}`}\n            style={!isFullscreen ? { minHeight } : { minHeight: '100%' }}\n          >\n            <EditorContent \n              editor={editor} \n              className={`prose prose-sm max-w-none dark:prose-invert focus:outline-none ${isFullscreen ? 'h-full' : ''}`}\n              style={!isFullscreen ? { minHeight } : { minHeight: '100%' }}\n            />\n          </div>\n        </div>\n\n        {/* Color Picker Modals */}\n        <ColorPickerModal \n          isOpen={showColorPicker}\n          onClose={() => {\n            setShowColorPicker(false);\n            setShowHighlightPicker(false);\n          }} \n          onColorSelect={(color) => {\n            if (color) {\n              editor.chain().focus().setColor(color).run();\n            } else {\n              editor.chain().focus().unsetColor().run();\n            }\n          }} \n          colors={colors}\n          title=\"Text Color\"\n        />\n\n        <ColorPickerModal \n          isOpen={showHighlightPicker}\n          onClose={() => {\n            setShowHighlightPicker(false);\n            setShowColorPicker(false);\n          }} \n          onColorSelect={(color) => {\n            if (color) {\n              editor.chain().focus().setHighlight({ color }).run();\n            } else {\n              editor.chain().focus().unsetHighlight().run();\n            }\n          }} \n          colors={colors}\n          title=\"Highlight\"\n        />\n\n        <style jsx global>{`\n          .ProseMirror {\n            outline: none;\n            padding: 16px;\n            min-height: ${isFullscreen ? '100%' : minHeight};\n            color: rgb(30 41 59);\n            font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif;\n            font-size: 14px;\n            line-height: 1.6;\n          }\n\n          .dark .ProseMirror {\n            color: rgb(226 232 240);\n          }\n\n          .ProseMirror p.is-editor-empty:first-child::before {\n            content: attr(data-placeholder);\n            float: left;\n            color: rgb(148 163 184);\n            pointer-events: none;\n            height: 0;\n          }\n\n          .dark .ProseMirror p.is-editor-empty:first-child::before {\n            color: rgb(100 116 139);\n          }\n\n          .ProseMirror h1 {\n            font-size: 1.75rem;\n            font-weight: 700;\n            margin-bottom: 0.5rem;\n            margin-top: 1rem;\n          }\n\n          .ProseMirror h2 {\n            font-size: 1.5rem;\n            font-weight: 600;\n            margin-bottom: 0.5rem;\n            margin-top: 1rem;\n          }\n\n          .ProseMirror h3 {\n            font-size: 1.25rem;\n            font-weight: 600;\n            margin-bottom: 0.5rem;\n            margin-top: 1rem;\n          }\n\n          .ProseMirror h4 {\n            font-size: 1.125rem;\n            font-weight: 600;\n            margin-bottom: 0.5rem;\n            margin-top: 1rem;\n          }\n\n          .ProseMirror h5 {\n            font-size: 1rem;\n            font-weight: 600;\n            margin-bottom: 0.5rem;\n            margin-top: 1rem;\n          }\n\n          .ProseMirror h6 {\n            font-size: 0.875rem;\n            font-weight: 600;\n            margin-bottom: 0.5rem;\n            margin-top: 1rem;\n          }\n\n          .ProseMirror blockquote {\n            border-left: 4px solid rgb(226 232 240);\n            padding-left: 16px;\n            margin: 16px 0;\n            font-style: italic;\n            color: rgb(71 85 105);\n          }\n\n          .dark .ProseMirror blockquote {\n            border-left-color: rgb(51 65 85);\n            color: rgb(148 163 184);\n          }\n\n          .ProseMirror code {\n            background: rgb(248 250 252);\n            padding: 2px 4px;\n            border-radius: 4px;\n            font-family: ui-monospace, SFMono-Regular, \"SF Mono\", Consolas, \"Liberation Mono\", Menlo, monospace;\n            font-size: 0.875rem;\n          }\n\n          .dark .ProseMirror code {\n            background: rgb(30 41 59);\n          }\n\n          .ProseMirror pre {\n            background: rgb(248 250 252);\n            border: 1px solid rgb(226 232 240);\n            border-radius: 8px;\n            padding: 16px;\n            margin: 16px 0;\n            overflow-x: auto;\n            font-family: ui-monospace, SFMono-Regular, \"SF Mono\", Consolas, \"Liberation Mono\", Menlo, monospace;\n          }\n\n          .dark .ProseMirror pre {\n            background: rgb(30 41 59);\n            border-color: rgb(51 65 85);\n          }\n\n          .ProseMirror ul, .ProseMirror ol {\n            padding-left: 1.5rem;\n            margin: 1rem 0;\n          }\n\n          .ProseMirror ul {\n            list-style-type: disc;\n          }\n\n          .ProseMirror ol {\n            list-style-type: decimal;\n          }\n\n          .ProseMirror li {\n            margin: 0.25rem 0;\n          }\n\n          .ProseMirror a {\n            color: rgb(59 130 246);\n            text-decoration: underline;\n            cursor: pointer;\n          }\n\n          .dark .ProseMirror a {\n            color: rgb(96 165 250);\n          }\n\n          .ProseMirror strong {\n            font-weight: 700;\n          }\n\n          .ProseMirror em {\n            font-style: italic;\n          }\n\n          .ProseMirror u {\n            text-decoration: underline;\n          }\n\n          .ProseMirror s {\n            text-decoration: line-through;\n          }\n\n          .ProseMirror sup {\n            font-size: 0.75rem;\n            vertical-align: super;\n          }\n\n          .ProseMirror sub {\n            font-size: 0.75rem;\n            vertical-align: sub;\n          }\n\n          .ProseMirror mark {\n            background: rgb(254 240 138);\n            padding: 1px 2px;\n            border-radius: 2px;\n          }\n\n          .dark .ProseMirror mark {\n            background: rgb(92 124 250);\n            color: white;\n          }\n\n          .ProseMirror p {\n            margin: 0.5rem 0;\n          }\n\n          .ProseMirror p:first-child {\n            margin-top: 0;\n          }\n\n          .ProseMirror p:last-child {\n            margin-bottom: 0;\n          }\n\n          .ProseMirror hr {\n            border: none;\n            border-top: 2px solid rgb(226 232 240);\n            margin: 2rem 0;\n          }\n\n          .dark .ProseMirror hr {\n            border-top-color: rgb(51 65 85);\n          }\n\n          .ProseMirror img {\n            max-width: 100%;\n            height: auto;\n            border-radius: 8px;\n            margin: 1rem 0;\n          }\n\n          .ProseMirror table {\n            border-collapse: collapse;\n            margin: 1rem 0;\n            table-layout: fixed;\n            width: 100%;\n          }\n\n          .ProseMirror table td,\n          .ProseMirror table th {\n            border: 1px solid rgb(226 232 240);\n            box-sizing: border-box;\n            min-width: 1em;\n            padding: 8px 12px;\n            position: relative;\n            vertical-align: top;\n          }\n\n          .dark .ProseMirror table td,\n          .dark .ProseMirror table th {\n            border-color: rgb(51 65 85);\n          }\n\n          .ProseMirror table th {\n            background-color: rgb(248 250 252);\n            font-weight: 600;\n          }\n\n          .dark .ProseMirror table th {\n            background-color: rgb(30 41 59);\n          }\n\n          .ProseMirror .selectedCell:after {\n            background: rgba(59, 130, 246, 0.1);\n            content: \"\";\n            left: 0;\n            right: 0;\n            top: 0;\n            bottom: 0;\n            pointer-events: none;\n            position: absolute;\n            z-index: 2;\n          }\n\n          .ProseMirror .column-resize-handle {\n            background-color: rgb(59 130 246);\n            bottom: -2px;\n            position: absolute;\n            right: -2px;\n            pointer-events: none;\n            top: 0;\n            width: 4px;\n          }\n\n          .ProseMirror.resize-cursor {\n            cursor: ew-resize;\n            cursor: col-resize;\n          }\n        `}</style>\n      </div>\n    );\n  }\n);\n\nWysiwygEditor.displayName = 'WysiwygEditor';\n\nexport default WysiwygEditor; ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/ui/account-verification-banner.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":38,"column":16,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[1017,1191],"text":"! Your account is currently being reviewed by our team. \n            You&apos;ll receive an email notification once your Sippy account is activated and ready for calls.\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[1017,1191],"text":"! Your account is currently being reviewed by our team. \n            You&lsquo;ll receive an email notification once your Sippy account is activated and ready for calls.\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[1017,1191],"text":"! Your account is currently being reviewed by our team. \n            You&#39;ll receive an email notification once your Sippy account is activated and ready for calls.\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[1017,1191],"text":"! Your account is currently being reviewed by our team. \n            You&rsquo;ll receive an email notification once your Sippy account is activated and ready for calls.\n          "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\nimport { Clock, X } from 'lucide-react';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Button } from '@/components/ui/button';\n\ninterface AccountVerificationBannerProps {\n  userName: string;\n  onDismiss?: () => void;\n  isDismissible?: boolean;\n}\n\nexport function AccountVerificationBanner({ \n  userName, \n  onDismiss, \n  isDismissible = false \n}: AccountVerificationBannerProps) {\n  const [isVisible, setIsVisible] = useState(true);\n\n  const handleDismiss = () => {\n    setIsVisible(false);\n    onDismiss?.();\n  };\n\n  if (!isVisible) return null;\n\n  return (\n    <Alert className=\"border-amber-200 bg-amber-50 text-amber-800 mb-6\">\n      <Clock className=\"h-4 w-4\" />\n      <AlertDescription className=\"flex items-center justify-between\">\n        <div className=\"flex-1\">\n          <div className=\"font-medium mb-1\">\n            🔍 Account Under Verification\n          </div>\n          <div className=\"text-sm\">\n            Hello {userName}! Your account is currently being reviewed by our team. \n            You'll receive an email notification once your Sippy account is activated and ready for calls.\n          </div>\n          <div className=\"text-xs mt-2 opacity-75\">\n            This process typically takes 1-2 business days. Thank you for your patience!\n          </div>\n        </div>\n        {isDismissible && (\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={handleDismiss}\n            className=\"ml-4 h-6 w-6 p-0 text-amber-600 hover:text-amber-800 hover:bg-amber-100\"\n          >\n            <X className=\"h-4 w-4\" />\n          </Button>\n        )}\n      </AlertDescription>\n    </Alert>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/ui/account-verification-modal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'router' is assigned a value but never used.","line":30,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":15},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":113,"column":47,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[3939,4141],"text":"\n              Access to dashboard and calling features is temporarily restricted until your \n              Sippy account is configured. You&apos;ll receive an email notification once activated.\n            "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[3939,4141],"text":"\n              Access to dashboard and calling features is temporarily restricted until your \n              Sippy account is configured. You&lsquo;ll receive an email notification once activated.\n            "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[3939,4141],"text":"\n              Access to dashboard and calling features is temporarily restricted until your \n              Sippy account is configured. You&#39;ll receive an email notification once activated.\n            "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[3939,4141],"text":"\n              Access to dashboard and calling features is temporarily restricted until your \n              Sippy account is configured. You&rsquo;ll receive an email notification once activated.\n            "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":124,"column":33,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[4755,4875],"text":"You haven&apos;t completed the onboarding process yet. Completing your business profile helps us expedite the review process."},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[4755,4875],"text":"You haven&lsquo;t completed the onboarding process yet. Completing your business profile helps us expedite the review process."},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[4755,4875],"text":"You haven&#39;t completed the onboarding process yet. Completing your business profile helps us expedite the review process."},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[4755,4875],"text":"You haven&rsquo;t completed the onboarding process yet. Completing your business profile helps us expedite the review process."},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":132,"column":91,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[5198,5210],"text":"What&apos;s next?"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[5198,5210],"text":"What&lsquo;s next?"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[5198,5210],"text":"What&#39;s next?"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[5198,5210],"text":"What&rsquo;s next?"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { AlertTriangle, Mail, Shield, LogOut, FileText } from 'lucide-react';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { useAuth } from '@/lib/AuthContext';\nimport { useBranding } from '@/hooks/useBranding';\nimport { useRouter } from 'next/navigation';\nimport { useState, useEffect } from 'react';\n\ninterface AccountVerificationModalProps {\n  userName: string;\n  userEmail: string;\n  isOpen: boolean;\n}\n\nexport function AccountVerificationModal({ \n  userName, \n  userEmail, \n  isOpen \n}: AccountVerificationModalProps) {\n  const { logout } = useAuth();\n  const { getSupportEmailLink } = useBranding();\n  const router = useRouter();\n  const [hasCompletedOnboarding, setHasCompletedOnboarding] = useState<boolean | null>(null);\n  const [isCheckingOnboarding, setIsCheckingOnboarding] = useState(true);\n\n  // Check onboarding status when modal opens\n  useEffect(() => {\n    if (isOpen) {\n      checkOnboardingStatus();\n    }\n  }, [isOpen]);\n\n  const checkOnboardingStatus = async () => {\n    try {\n      setIsCheckingOnboarding(true);\n      const response = await fetch('/api/user/onboarding');\n      \n      if (response.ok) {\n        const data = await response.json();\n        setHasCompletedOnboarding(data.onboarding?.completed || false);\n      } else {\n        // No onboarding data found\n        setHasCompletedOnboarding(false);\n      }\n    } catch (error) {\n      console.error('Error checking onboarding status:', error);\n      setHasCompletedOnboarding(false);\n    } finally {\n      setIsCheckingOnboarding(false);\n    }\n  };\n\n  const handleContactSupport = () => {\n    // Use dynamic support email from branding\n    window.open(getSupportEmailLink('Account Activation Request'));\n  };\n\n  const handleLogout = () => {\n    logout();\n  };\n\n  const handleCompleteOnboarding = () => {\n    // Reload the page to trigger the onboarding flow\n    window.location.reload();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={() => {}} modal>\n      <DialogContent \n        className=\"sm:max-w-[450px] border-2 border-amber-200 dark:border-amber-800 shadow-2xl bg-white dark:bg-gray-900\"\n      >\n        <DialogHeader className=\"text-center space-y-3\">\n          {/* Warning Icon */}\n          <div className=\"mx-auto flex h-12 w-12 items-center justify-center rounded-full bg-amber-100 dark:bg-amber-900/20\">\n            <AlertTriangle className=\"h-6 w-6 text-amber-600 dark:text-amber-400\" />\n          </div>\n          \n          <DialogTitle className=\"text-xl font-bold text-amber-800 dark:text-amber-200 text-center\">\n            Account Under Review\n          </DialogTitle>\n          \n          <DialogDescription className=\"text-center text-sm text-amber-700 dark:text-amber-300\">\n            Hello <span className=\"font-semibold\">{userName}</span>! Your account is being reviewed by our team.\n          </DialogDescription>\n        </DialogHeader>\n\n        {/* Main Content */}\n        <div className=\"space-y-3\">\n          {/* Account Status - Compact */}\n          <div className=\"flex justify-center space-x-4\">\n            <div className=\"flex items-center space-x-1 text-xs\">\n              <Mail className=\"h-3 w-3 text-green-600 dark:text-green-400\" />\n              <span className=\"text-green-700 dark:text-green-300\">Email ✓</span>\n            </div>\n            <div className=\"flex items-center space-x-1 text-xs\">\n              <Shield className=\"h-3 w-3 text-amber-600 dark:text-amber-400\" />\n              <span className=\"text-amber-700 dark:text-amber-300\">Account ⏳</span>\n            </div>\n          </div>\n\n          {/* Main Message - Compact */}\n          <div className=\"p-3 bg-amber-50 dark:bg-amber-900/10 rounded-lg border border-amber-200 dark:border-amber-800\">\n            <p className=\"text-xs text-amber-700 dark:text-amber-300 leading-relaxed\">\n              Access to dashboard and calling features is temporarily restricted until your \n              Sippy account is configured. You'll receive an email notification once activated.\n            </p>\n          </div>\n\n          {/* Onboarding Notice - Show if onboarding not completed */}\n          {!isCheckingOnboarding && hasCompletedOnboarding === false && (\n            <div className=\"p-3 bg-blue-50 dark:bg-blue-900/10 rounded-lg border border-blue-200 dark:border-blue-800\">\n              <div className=\"flex items-start space-x-2\">\n                <FileText className=\"h-4 w-4 text-blue-600 dark:text-blue-400 mt-0.5\" />\n                <div className=\"text-xs text-blue-700 dark:text-blue-300\">\n                  <div className=\"font-medium mb-1\">Complete Your Profile</div>\n                  <div>You haven't completed the onboarding process yet. Completing your business profile helps us expedite the review process.</div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Compact Timeline */}\n          <div className=\"bg-blue-50 dark:bg-blue-900/10 p-3 rounded-lg border border-blue-200 dark:border-blue-800\">\n            <h4 className=\"font-medium text-blue-800 dark:text-blue-200 mb-2 text-sm\">What's next?</h4>\n            <div className=\"text-xs text-blue-700 dark:text-blue-300 space-y-1\">\n              <div>1. Team reviews registration → 2. Account setup → 3. Email notification → 4. Full access</div>\n              <div className=\"font-medium pt-1\">📅 Estimated time: 1-2 business days</div>\n            </div>\n          </div>\n\n          {/* Contact info */}\n          <div className=\"text-xs text-gray-600 dark:text-gray-400 text-center\">\n            Notification will be sent to <span className=\"font-mono text-xs\">{userEmail}</span>\n          </div>\n        </div>\n\n        {/* Action Buttons - Compact */}\n        <div className=\"space-y-3 mt-4\">\n          {/* Show onboarding button if not completed */}\n          {!isCheckingOnboarding && hasCompletedOnboarding === false && (\n            <Button \n              onClick={handleCompleteOnboarding}\n              className=\"w-full bg-blue-600 hover:bg-blue-700 dark:bg-blue-700 dark:hover:bg-blue-600 text-white h-9\"\n            >\n              <FileText className=\"mr-2 h-4 w-4\" />\n              Complete Onboarding\n            </Button>\n          )}\n          \n          <div className=\"flex space-x-2\">\n            <Button \n              onClick={handleContactSupport}\n              className=\"flex-1 bg-amber-600 hover:bg-amber-700 dark:bg-amber-700 dark:hover:bg-amber-600 text-white h-9\"\n            >\n              <Mail className=\"mr-2 h-4 w-4\" />\n              Contact Support\n            </Button>\n            \n            <Button \n              onClick={handleLogout}\n              variant=\"outline\"\n              className=\"flex-1 h-9 border-red-200 dark:border-red-800 text-red-600 dark:text-red-400 hover:bg-red-50 dark:hover:bg-red-950/20 hover:text-red-700 dark:hover:text-red-300\"\n            >\n              <LogOut className=\"mr-2 h-4 w-4\" />\n              Logout\n            </Button>\n          </div>\n          \n          <div className=\"text-center\">\n            <p className=\"text-xs text-muted-foreground\">\n              Need help? Our support team is here to assist.\n            </p>\n          </div>\n        </div>\n\n        {/* Compact Footer */}\n        <div className=\"flex items-center justify-center space-x-2 text-xs text-muted-foreground pt-2 border-t border-gray-200 dark:border-gray-700\">\n          <div className=\"w-1.5 h-1.5 bg-amber-500 rounded-full animate-pulse\"></div>\n          <span>Verification in progress...</span>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/ui/alert-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/ui/alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/ui/avatar.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":22,"column":11,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":22,"endColumn":27,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[465,544],"text":"type AvatarImageProps = React.ImgHTMLAttributes<HTMLImageElement>"},"desc":"Replace empty interface with a type alias."}]},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":26,"column":5,"nodeType":"JSXOpeningElement","endLine":30,"endColumn":7},{"ruleId":"jsx-a11y/alt-text","severity":1,"message":"img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","line":26,"column":5,"nodeType":"JSXOpeningElement","endLine":30,"endColumn":7},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":35,"column":11,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":35,"endColumn":30,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[819,896],"text":"type AvatarFallbackProps = React.HTMLAttributes<HTMLDivElement>"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { cn } from '@/lib/utils';\n\ninterface AvatarProps extends React.HTMLAttributes<HTMLDivElement> {\n  className?: string;\n}\n\nconst Avatar = React.forwardRef<HTMLDivElement, AvatarProps>(\n  ({ className, ...props }, ref) => (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n        className\n      )}\n      {...props}\n    />\n  )\n);\nAvatar.displayName = \"Avatar\";\n\ninterface AvatarImageProps extends React.ImgHTMLAttributes<HTMLImageElement> {}\n\nconst AvatarImage = React.forwardRef<HTMLImageElement, AvatarImageProps>(\n  ({ className, ...props }, ref) => (\n    <img\n      ref={ref}\n      className={cn(\"aspect-square h-full w-full\", className)}\n      {...props}\n    />\n  )\n);\nAvatarImage.displayName = \"AvatarImage\";\n\ninterface AvatarFallbackProps extends React.HTMLAttributes<HTMLDivElement> {}\n\nconst AvatarFallback = React.forwardRef<HTMLDivElement, AvatarFallbackProps>(\n  ({ className, ...props }, ref) => (\n    <div\n      ref={ref}\n      className={cn(\n        \"flex h-full w-full items-center justify-center rounded-full bg-muted text-sm font-medium\",\n        className\n      )}\n      {...props}\n    />\n  )\n);\nAvatarFallback.displayName = \"AvatarFallback\";\n\ninterface AvatarInitialsProps extends React.HTMLAttributes<HTMLDivElement> {\n  name: string;\n}\n\nconst AvatarInitials = React.forwardRef<HTMLDivElement, AvatarInitialsProps>(\n  ({ name, className, ...props }, ref) => {\n    const initials = name\n      .split(' ')\n      .map((word) => word.charAt(0))\n      .join('')\n      .toUpperCase()\n      .slice(0, 2);\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex h-full w-full items-center justify-center rounded-full bg-primary text-primary-foreground text-sm font-medium\",\n          className\n        )}\n        {...props}\n      >\n        {initials}\n      </div>\n    );\n  }\n);\nAvatarInitials.displayName = \"AvatarInitials\";\n\nexport { Avatar, AvatarImage, AvatarFallback, AvatarInitials }; ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/ui/badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/ui/brand-logo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/ui/button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/ui/calendar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/ui/card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/ui/checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/ui/collapsible.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":74,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2052,2055],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2052,2055],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\n\ninterface CollapsibleProps extends React.HTMLAttributes<HTMLDivElement> {\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n  children: React.ReactNode\n}\n\ninterface CollapsibleTriggerProps extends React.HTMLAttributes<HTMLDivElement> {\n  children: React.ReactNode\n  asChild?: boolean\n  onClick?: () => void\n  className?: string\n}\n\ninterface CollapsibleContentProps extends React.HTMLAttributes<HTMLDivElement> {\n  children: React.ReactNode\n  className?: string\n}\n\nconst CollapsibleContext = React.createContext<{\n  open: boolean\n  onOpenChange: (open: boolean) => void\n}>({\n  open: false,\n  onOpenChange: () => {}\n})\n\nconst Collapsible = React.forwardRef<HTMLDivElement, CollapsibleProps>(\n  ({ open = false, onOpenChange, children, ...props }, ref) => {\n    const [internalOpen, setInternalOpen] = React.useState(open)\n    \n    const isControlled = onOpenChange !== undefined\n    const isOpen = isControlled ? open : internalOpen\n    \n    const handleOpenChange = React.useCallback((newOpen: boolean) => {\n      if (isControlled) {\n        onOpenChange?.(newOpen)\n      } else {\n        setInternalOpen(newOpen)\n      }\n    }, [isControlled, onOpenChange])\n\n    React.useEffect(() => {\n      if (isControlled) {\n        setInternalOpen(open)\n      }\n    }, [open, isControlled])\n\n    return (\n      <CollapsibleContext.Provider value={{ open: isOpen, onOpenChange: handleOpenChange }}>\n        <div ref={ref} {...props}>\n          {children}\n        </div>\n      </CollapsibleContext.Provider>\n    )\n  }\n)\nCollapsible.displayName = \"Collapsible\"\n\nconst CollapsibleTrigger = React.forwardRef<HTMLDivElement, CollapsibleTriggerProps>(\n  ({ children, asChild = false, onClick, className, ...props }, ref) => {\n    const { open, onOpenChange } = React.useContext(CollapsibleContext)\n    \n    const handleClick = () => {\n      onOpenChange(!open)\n      onClick?.()\n    }\n\n    if (asChild && React.isValidElement(children)) {\n      return React.cloneElement(children as any, {\n        ...(children.props || {}),\n        onClick: handleClick,\n        ref\n      })\n    }\n\n    return (\n      <div\n        ref={ref}\n        onClick={handleClick}\n        className={cn(\"cursor-pointer\", className)}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n)\nCollapsibleTrigger.displayName = \"CollapsibleTrigger\"\n\nconst CollapsibleContent = React.forwardRef<HTMLDivElement, CollapsibleContentProps>(\n  ({ children, className, ...props }, ref) => {\n    const { open } = React.useContext(CollapsibleContext)\n    \n    if (!open) return null\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\"animate-in slide-in-from-top-1 duration-200\", className)}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n)\nCollapsibleContent.displayName = \"CollapsibleContent\"\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent } ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/ui/content-card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/ui/country-selector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/ui/dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/ui/dropdown-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/ui/form.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/ui/input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/ui/label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/ui/multi-country-selector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/ui/navigation-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/ui/phone-input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/ui/popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/ui/progress-indicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/ui/progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/ui/radio-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/ui/scroll-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/ui/select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/ui/separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/ui/slider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/ui/sonner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/ui/switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/ui/table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/ui/tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/ui/textarea.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":5,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":5,"endColumn":31,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[73,159],"text":"type TextareaProps = React.TextareaHTMLAttributes<HTMLTextAreaElement>"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea } ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/ui/theme-toggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/ui/tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/users/AccountActivationModal.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":85,"column":60,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[2389,2493],"text":"\n            Assign a Sippy Account ID to activate this user&apos;s account and grant full access.\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[2389,2493],"text":"\n            Assign a Sippy Account ID to activate this user&lsquo;s account and grant full access.\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[2389,2493],"text":"\n            Assign a Sippy Account ID to activate this user&#39;s account and grant full access.\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[2389,2493],"text":"\n            Assign a Sippy Account ID to activate this user&rsquo;s account and grant full access.\n          "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\nimport { CheckCircle, Hash, AlertCircle, Loader2, Mail, User } from 'lucide-react';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { toast } from 'sonner';\n\ninterface AccountActivationModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onActivate: (sippyAccountId: number) => Promise<void>;\n  userName: string;\n  userEmail: string;\n}\n\nexport function AccountActivationModal({\n  isOpen,\n  onClose,\n  onActivate,\n  userName,\n  userEmail\n}: AccountActivationModalProps) {\n  const [sippyAccountId, setSippyAccountId] = useState('');\n  const [isActivating, setIsActivating] = useState(false);\n  const [error, setError] = useState('');\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError('');\n\n    // Validation\n    if (!sippyAccountId.trim()) {\n      setError('Sippy Account ID is required');\n      return;\n    }\n\n    const accountId = parseInt(sippyAccountId.trim());\n    if (isNaN(accountId) || accountId <= 0) {\n      setError('Please enter a valid numeric Sippy Account ID');\n      return;\n    }\n\n    try {\n      setIsActivating(true);\n      await onActivate(accountId);\n      handleClose();\n      toast.success(`Account activated for ${userName}`);\n    } catch (error) {\n      setError(error instanceof Error ? error.message : 'Failed to activate account');\n    } finally {\n      setIsActivating(false);\n    }\n  };\n\n  const handleClose = () => {\n    setSippyAccountId('');\n    setError('');\n    setIsActivating(false);\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"sm:max-w-[500px]\">\n        <DialogHeader className=\"space-y-4\">\n          {/* Icon */}\n          <div className=\"mx-auto flex h-12 w-12 items-center justify-center rounded-full bg-green-100 dark:bg-green-900/20\">\n            <CheckCircle className=\"h-6 w-6 text-green-600 dark:text-green-400\" />\n          </div>\n\n          <DialogTitle className=\"text-center text-xl font-bold\">\n            Activate User Account\n          </DialogTitle>\n          \n          <DialogDescription className=\"text-center text-sm text-muted-foreground\">\n            Assign a Sippy Account ID to activate this user's account and grant full access.\n          </DialogDescription>\n        </DialogHeader>\n\n        {/* User Info */}\n        <div className=\"bg-muted/50 p-4 rounded-lg border\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"flex h-10 w-10 items-center justify-center rounded-full bg-primary text-primary-foreground\">\n              <User className=\"h-5 w-5\" />\n            </div>\n            <div className=\"flex-1\">\n              <div className=\"font-medium text-sm\">{userName}</div>\n              <div className=\"flex items-center text-xs text-muted-foreground\">\n                <Mail className=\"mr-1 h-3 w-3\" />\n                {userEmail}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          {/* Sippy Account ID Input */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"sippyAccountId\" className=\"text-sm font-medium flex items-center\">\n              <Hash className=\"mr-2 h-4 w-4\" />\n              Sippy Account ID\n            </Label>\n            <Input\n              id=\"sippyAccountId\"\n              type=\"number\"\n              value={sippyAccountId}\n              onChange={(e) => setSippyAccountId(e.target.value)}\n              placeholder=\"Enter Sippy Account ID (e.g., 12345)\"\n              className=\"h-11\"\n              min=\"1\"\n              required\n              disabled={isActivating}\n            />\n            {error && (\n              <div className=\"flex items-center space-x-2 text-sm text-destructive\">\n                <AlertCircle className=\"h-4 w-4\" />\n                <span>{error}</span>\n              </div>\n            )}\n          </div>\n\n          {/* Warning */}\n          <div className=\"bg-amber-50 dark:bg-amber-900/10 p-3 rounded-lg border border-amber-200 dark:border-amber-800\">\n            <div className=\"flex items-start space-x-2\">\n              <AlertCircle className=\"h-4 w-4 text-amber-600 mt-0.5\" />\n              <div className=\"text-xs text-amber-700 dark:text-amber-300\">\n                <div className=\"font-medium mb-1\">Action Summary:</div>\n                <ul className=\"space-y-1\">\n                  <li>• User will be granted full dashboard access</li>\n                  <li>• Activation email will be sent automatically</li>\n                  <li>• User can immediately start making calls</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"flex space-x-3 pt-2\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={handleClose}\n              className=\"flex-1\"\n              disabled={isActivating}\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              className=\"flex-1 bg-green-600 hover:bg-green-700\"\n              disabled={isActivating}\n            >\n              {isActivating ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Activating...\n                </>\n              ) : (\n                <>\n                  <CheckCircle className=\"mr-2 h-4 w-4\" />\n                  Activate Account\n                </>\n              )}\n            </Button>\n          </div>\n        </form>\n\n        {/* Footer */}\n        <div className=\"text-center pt-2 border-t\">\n          <p className=\"text-xs text-muted-foreground\">\n            The user will receive an email notification once activated\n          </p>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/users/UserEditForm.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchUserData'. Either include it or remove the dependency array.","line":60,"column":6,"nodeType":"ArrayExpression","endLine":60,"endColumn":22,"suggestions":[{"desc":"Update the dependencies array to be: [fetchUserData, isOpen, userId]","fix":{"range":[1516,1532],"text":"[fetchUserData, isOpen, userId]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":112,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":112,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3014,3017],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3014,3017],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Loader2, User, Bell, Hash } from 'lucide-react';\nimport { toast } from 'sonner';\nimport { UserNotificationSettingsComponent } from './UserNotificationSettings';\nimport { UserRateDecks } from './UserRateDecks';\n\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n  role: 'admin' | 'client';\n  sippyAccountId?: number;\n}\n\ninterface UserEditFormProps {\n  isOpen: boolean;\n  onClose: () => void;\n  userId: string;\n  onSuccess: () => void;\n}\n\nexport function UserEditForm({ isOpen, onClose, userId, onSuccess }: UserEditFormProps) {\n  const [isLoading, setIsLoading] = useState(true);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [activeTab, setActiveTab] = useState('details');\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    password: '',\n    role: '',\n    sippyAccountId: '',\n  });\n\n  // Fetch user data when the dialog opens\n  useEffect(() => {\n    if (isOpen && userId) {\n      fetchUserData();\n    }\n  }, [isOpen, userId]);\n\n  const fetchUserData = async () => {\n    try {\n      setIsLoading(true);\n      const response = await fetch(`/api/users/${userId}`);\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to fetch user');\n      }\n      \n      const data = await response.json();\n      \n      setFormData({\n        name: data.user.name,\n        email: data.user.email,\n        password: '', // Don't populate password field for security\n        role: data.user.role,\n        sippyAccountId: data.user.sippyAccountId?.toString() || '',\n      });\n    } catch (error) {\n      console.error('Error fetching user:', error);\n      toast.error(error instanceof Error ? error.message : 'Failed to load user details');\n      onClose();\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n  };\n\n  const handleRoleChange = (value: string) => {\n    setFormData(prev => ({ ...prev, role: value }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    try {\n      setIsSubmitting(true);\n      \n      // Basic validation\n      if (!formData.name || !formData.email || !formData.role) {\n        toast.error('Please fill in all required fields');\n        return;\n      }\n      \n      // Prepare the update data\n      const updateData: any = {\n        name: formData.name,\n        email: formData.email,\n        role: formData.role,\n      };\n      \n      // Only include password if it was changed\n      if (formData.password) {\n        updateData.password = formData.password;\n      }\n      \n      // Handle sippyAccountId - always include it so it can be cleared\n      if (formData.sippyAccountId.trim() === '') {\n        // If the field is empty, explicitly set to null to clear it\n        updateData.sippyAccountId = null;\n      } else {\n        // If the field has a value, parse it as an integer\n        const parsedId = parseInt(formData.sippyAccountId);\n        if (!isNaN(parsedId)) {\n          updateData.sippyAccountId = parsedId;\n        } else {\n          toast.error('Sippy Account ID must be a valid number');\n          return;\n        }\n      }\n      \n      // Call API to update user\n      const response = await fetch(`/api/users/${userId}`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(updateData),\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to update user');\n      }\n      \n      // Show success message\n      toast.success('User updated successfully');\n      \n      // Close dialog and refresh data\n      onClose();\n      onSuccess();\n    } catch (error) {\n      console.error('Error updating user:', error);\n      toast.error(error instanceof Error ? error.message : 'Failed to update user');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[700px] max-h-[90vh] overflow-hidden\">\n        <DialogHeader>\n          <DialogTitle>Edit User</DialogTitle>\n          <DialogDescription>\n            Update user details and notification preferences\n          </DialogDescription>\n        </DialogHeader>\n        \n        {isLoading ? (\n          <div className=\"flex justify-center p-8\">\n            <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n          </div>\n        ) : (\n          <div className=\"overflow-hidden\">\n            <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-3\">\n                <TabsTrigger value=\"details\" className=\"flex items-center space-x-2\">\n                  <User className=\"h-4 w-4\" />\n                  <span>User Details</span>\n                </TabsTrigger>\n                <TabsTrigger value=\"notifications\" className=\"flex items-center space-x-2\">\n                  <Bell className=\"h-4 w-4\" />\n                  <span>Notifications</span>\n                </TabsTrigger>\n                <TabsTrigger value=\"ratedecks\" className=\"flex items-center space-x-2\">\n                  <Hash className=\"h-4 w-4\" />\n                  <span>Rate Decks</span>\n                </TabsTrigger>\n              </TabsList>\n              \n              <TabsContent value=\"details\" className=\"mt-6 overflow-y-auto max-h-[400px]\">\n                <form onSubmit={handleSubmit}>\n                  <div className=\"grid gap-4 py-4\">\n                    <div className=\"grid grid-cols-4 items-center gap-4\">\n                      <Label htmlFor=\"name\" className=\"text-right\">\n                        Name\n                      </Label>\n                      <Input\n                        id=\"name\"\n                        name=\"name\"\n                        value={formData.name}\n                        onChange={handleChange}\n                        className=\"col-span-3\"\n                        required\n                      />\n                    </div>\n                    <div className=\"grid grid-cols-4 items-center gap-4\">\n                      <Label htmlFor=\"email\" className=\"text-right\">\n                        Email\n                      </Label>\n                      <Input\n                        id=\"email\"\n                        name=\"email\"\n                        type=\"email\"\n                        value={formData.email}\n                        onChange={handleChange}\n                        className=\"col-span-3\"\n                        required\n                      />\n                    </div>\n                    <div className=\"grid grid-cols-4 items-center gap-4\">\n                      <Label htmlFor=\"password\" className=\"text-right\">\n                        Password\n                      </Label>\n                      <Input\n                        id=\"password\"\n                        name=\"password\"\n                        type=\"password\"\n                        value={formData.password}\n                        onChange={handleChange}\n                        className=\"col-span-3\"\n                        placeholder=\"Leave blank to keep unchanged\"\n                      />\n                    </div>\n                    <div className=\"grid grid-cols-4 items-center gap-4\">\n                      <Label htmlFor=\"role\" className=\"text-right\">\n                        Role\n                      </Label>\n                      <Select\n                        value={formData.role}\n                        onValueChange={handleRoleChange}\n                      >\n                        <SelectTrigger className=\"col-span-3\">\n                          <SelectValue placeholder=\"Select role\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"client\">Client</SelectItem>\n                          <SelectItem value=\"admin\">Admin</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div className=\"grid grid-cols-4 items-center gap-4\">\n                      <Label htmlFor=\"sippyAccountId\" className=\"text-right\">\n                        Sippy ID\n                      </Label>\n                      <Input\n                        id=\"sippyAccountId\"\n                        name=\"sippyAccountId\"\n                        type=\"number\"\n                        value={formData.sippyAccountId}\n                        onChange={handleChange}\n                        className=\"col-span-3\"\n                        placeholder=\"Optional\"\n                      />\n                    </div>\n                  </div>\n                </form>\n              </TabsContent>\n              \n              <TabsContent value=\"notifications\" className=\"mt-6 overflow-y-auto max-h-[400px]\">\n                <UserNotificationSettingsComponent\n                  userId={userId}\n                  userName={formData.name}\n                  userEmail={formData.email}\n                />\n              </TabsContent>\n              \n              <TabsContent value=\"ratedecks\" className=\"mt-6 overflow-y-auto max-h-[400px]\">\n                <UserRateDecks userId={userId} />\n              </TabsContent>\n            </Tabs>\n          </div>\n        )}\n        \n        <DialogFooter className=\"mt-6\">\n          <Button variant=\"outline\" type=\"button\" onClick={onClose} disabled={isSubmitting}>\n            Cancel\n          </Button>\n          {activeTab === 'details' && (\n            <Button \n              type=\"button\" \n              onClick={handleSubmit}\n              disabled={isSubmitting}\n            >\n              {isSubmitting && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n              {isSubmitting ? 'Updating...' : 'Update User'}\n            </Button>\n          )}\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/users/UserForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/users/UserManagementTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/users/UserNotificationSettings.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Card' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardContent' is defined but never used.","line":4,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardDescription' is defined but never used.","line":4,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardHeader' is defined but never used.","line":4,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":56},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardTitle' is defined but never used.","line":4,"column":58,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":67},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Bell' is defined but never used.","line":9,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'User' is defined but never used.","line":9,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":29},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchSettings'. Either include it or remove the dependency array.","line":38,"column":6,"nodeType":"ArrayExpression","endLine":38,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [fetchSettings, userId]","fix":{"range":[1221,1229],"text":"[fetchSettings, userId]"}}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Switch } from '@/components/ui/switch';\nimport { Loader2, Bell, User } from 'lucide-react';\nimport { toast } from 'sonner';\nimport { UserNotificationSettings } from '@/models/UserNotificationSettings';\n\ninterface UserNotificationSettingsProps {\n  userId: string;\n  userName: string;\n  userEmail: string;\n}\n\nexport function UserNotificationSettingsComponent({ \n  userId, \n  userName, \n  userEmail \n}: UserNotificationSettingsProps) {\n  const [settings, setSettings] = useState<Partial<UserNotificationSettings>>({\n    lowBalanceThreshold: 10.0000,\n    zeroBalanceThreshold: 0.0000,\n    negativeBalanceThreshold: -0.0001,\n    enableLowBalanceNotifications: true,\n    enableZeroBalanceNotifications: true,\n    enableNegativeBalanceNotifications: true,\n    notificationFrequencyHours: 24,\n    currency: 'EUR'\n  });\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    fetchSettings();\n  }, [userId]);\n\n  const fetchSettings = async () => {\n    try {\n      setIsLoading(true);\n      const response = await fetch(`/api/users/${userId}/notification-settings`);\n      if (response.ok) {\n        const data = await response.json();\n        setSettings({\n          lowBalanceThreshold: data.lowBalanceThreshold || 10.0000,\n          zeroBalanceThreshold: data.zeroBalanceThreshold || 0.0000,\n          negativeBalanceThreshold: data.negativeBalanceThreshold || -0.0001,\n          enableLowBalanceNotifications: data.enableLowBalanceNotifications ?? true,\n          enableZeroBalanceNotifications: data.enableZeroBalanceNotifications ?? true,\n          enableNegativeBalanceNotifications: data.enableNegativeBalanceNotifications ?? true,\n          notificationFrequencyHours: data.notificationFrequencyHours || 24,\n          currency: data.currency || 'EUR'\n        });\n      }\n    } catch (error) {\n      console.error('Error fetching user notification settings:', error);\n      toast.error('Failed to load notification settings');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSave = async () => {\n    try {\n      setIsLoading(true);\n      const response = await fetch(`/api/users/${userId}/notification-settings`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(settings),\n      });\n\n      if (response.ok) {\n        toast.success('Notification settings saved successfully');\n        fetchSettings(); // Refresh to get updated data\n      } else {\n        const error = await response.json();\n        toast.error(error.error || 'Failed to save notification settings');\n      }\n    } catch (error) {\n      console.error('Error saving notification settings:', error);\n      toast.error('Failed to save notification settings');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleInputChange = (field: keyof UserNotificationSettings, value: string | number | boolean) => {\n    setSettings(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  if (isLoading && !settings.lowBalanceThreshold) {\n    return (\n      <div className=\"flex justify-center py-8\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header Info */}\n      <div className=\"pb-4 border-b\">\n        <h3 className=\"text-lg font-medium\">Notification Settings for {userName}</h3>\n        <p className=\"text-sm text-muted-foreground\">\n          Configure notification thresholds and preferences for {userEmail}\n        </p>\n      </div>\n\n      {/* Notification Frequency */}\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"frequency\">Notification Frequency (hours)</Label>\n        <Input\n          id=\"frequency\"\n          type=\"number\"\n          min=\"1\"\n          max=\"168\"\n          value={settings.notificationFrequencyHours}\n          onChange={(e) => handleInputChange('notificationFrequencyHours', parseInt(e.target.value))}\n        />\n        <p className=\"text-sm text-muted-foreground\">\n          How often to send notifications for the same condition (1-168 hours)\n        </p>\n      </div>\n\n      {/* Low Balance Notifications */}\n      <div className=\"space-y-4 p-4 border rounded-lg\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"space-y-1\">\n            <Label className=\"text-base\">Low Balance Alert</Label>\n            <p className=\"text-sm text-muted-foreground\">\n              Send notifications when balance falls below threshold\n            </p>\n          </div>\n          <Switch\n            checked={settings.enableLowBalanceNotifications}\n            onCheckedChange={(checked: boolean) => handleInputChange('enableLowBalanceNotifications', checked)}\n          />\n        </div>\n        \n        {settings.enableLowBalanceNotifications && (\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"lowThreshold\">Low Balance Threshold (EUR)</Label>\n            <Input\n              id=\"lowThreshold\"\n              type=\"number\"\n              step=\"0.0001\"\n              min=\"0\"\n              value={settings.lowBalanceThreshold}\n              onChange={(e) => handleInputChange('lowBalanceThreshold', parseFloat(e.target.value))}\n            />\n            <p className=\"text-xs text-muted-foreground\">\n              Send alert when balance drops below this amount\n            </p>\n          </div>\n        )}\n      </div>\n\n      {/* Zero Balance Notifications */}\n      <div className=\"space-y-4 p-4 border rounded-lg\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"space-y-1\">\n            <Label className=\"text-base\">Zero Balance Alert</Label>\n            <p className=\"text-sm text-muted-foreground\">\n              Send notifications when balance reaches zero\n            </p>\n          </div>\n          <Switch\n            checked={settings.enableZeroBalanceNotifications}\n            onCheckedChange={(checked: boolean) => handleInputChange('enableZeroBalanceNotifications', checked)}\n          />\n        </div>\n        \n        {settings.enableZeroBalanceNotifications && (\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"zeroThreshold\">Zero Balance Threshold (EUR)</Label>\n            <Input\n              id=\"zeroThreshold\"\n              type=\"number\"\n              step=\"0.0001\"\n              value={settings.zeroBalanceThreshold}\n              onChange={(e) => handleInputChange('zeroBalanceThreshold', parseFloat(e.target.value))}\n            />\n            <p className=\"text-xs text-muted-foreground\">\n              Usually set to 0.0000, but can be adjusted for early warning\n            </p>\n          </div>\n        )}\n      </div>\n\n      {/* Negative Balance Notifications */}\n      <div className=\"space-y-4 p-4 border rounded-lg\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"space-y-1\">\n            <Label className=\"text-base\">Negative Balance Alert</Label>\n            <p className=\"text-sm text-muted-foreground\">\n              Send critical notifications when balance goes negative\n            </p>\n          </div>\n          <Switch\n            checked={settings.enableNegativeBalanceNotifications}\n            onCheckedChange={(checked: boolean) => handleInputChange('enableNegativeBalanceNotifications', checked)}\n          />\n        </div>\n        \n        {settings.enableNegativeBalanceNotifications && (\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"negativeThreshold\">Negative Balance Threshold (EUR)</Label>\n            <Input\n              id=\"negativeThreshold\"\n              type=\"number\"\n              step=\"0.0001\"\n              value={settings.negativeBalanceThreshold}\n              onChange={(e) => handleInputChange('negativeBalanceThreshold', parseFloat(e.target.value))}\n            />\n            <p className=\"text-xs text-muted-foreground\">\n              Negative value that triggers critical alerts (e.g., -0.0001)\n            </p>\n          </div>\n        )}\n      </div>\n\n      {/* Save Button */}\n      <div className=\"flex justify-end pt-4\">\n        <Button onClick={handleSave} disabled={isLoading}>\n          {isLoading ? (\n            <>\n              <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n              Saving...\n            </>\n          ) : (\n            'Save Settings'\n          )}\n        </Button>\n      </div>\n    </div>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/components/users/UserRateDecks.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchAssignments'. Either include it or remove the dependency array.","line":32,"column":6,"nodeType":"ArrayExpression","endLine":32,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [fetchAssignments, userId]","fix":{"range":[901,909],"text":"[fetchAssignments, userId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Loader2, ExternalLink, Hash, MessageSquare, Calendar, User } from 'lucide-react';\nimport { toast } from 'sonner';\n\ninterface RateDeckAssignment {\n  id: string;\n  rateDeckId: string;\n  rateDeckType: 'number' | 'sms';\n  rateDeckName: string;\n  rateDeckDescription: string;\n  assignedBy: string;\n  assignedAt: string;\n}\n\ninterface UserRateDecksProps {\n  userId: string;\n}\n\nexport function UserRateDecks({ userId }: UserRateDecksProps) {\n  const [assignments, setAssignments] = useState<RateDeckAssignment[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    if (userId) {\n      fetchAssignments();\n    }\n  }, [userId]);\n\n  const fetchAssignments = async () => {\n    try {\n      setIsLoading(true);\n      const response = await fetch(`/api/users/${userId}/assignments`);\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to fetch assignments');\n      }\n      \n      const data = await response.json();\n      setAssignments(data.assignments || []);\n    } catch (error) {\n      console.error('Error fetching assignments:', error);\n      toast.error(error instanceof Error ? error.message : 'Failed to load rate deck assignments');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const getRateDeckIcon = (type: string) => {\n    return type === 'number' ? Hash : MessageSquare;\n  };\n\n  const getRateDeckBadgeVariant = (type: string) => {\n    return type === 'number' ? 'default' : 'secondary';\n  };\n\n  const openRateDeck = (assignment: RateDeckAssignment) => {\n    const rateDeckPath = assignment.rateDeckType === 'number' ? 'numbers' : 'sms';\n    const url = `/rates/${rateDeckPath}/decks/${assignment.rateDeckId}/rates`;\n    window.open(url, '_blank');\n  };\n\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    return {\n      date: date.toLocaleDateString(),\n      time: date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),\n    };\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex justify-center p-8\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n      </div>\n    );\n  }\n\n  if (assignments.length === 0) {\n    return (\n      <div className=\"text-center py-12\">\n        <div className=\"flex flex-col items-center space-y-4\">\n          <div className=\"p-4 bg-muted rounded-full\">\n            <Hash className=\"h-8 w-8 text-muted-foreground\" />\n          </div>\n          <div className=\"space-y-2\">\n            <p className=\"text-lg font-medium\">No Rate Decks Assigned</p>\n            <p className=\"text-sm text-muted-foreground\">\n              This user is not currently assigned to any rate decks\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h3 className=\"text-lg font-medium\">Assigned Rate Decks</h3>\n          <p className=\"text-sm text-muted-foreground\">\n            Rate decks currently assigned to this user ({assignments.length})\n          </p>\n        </div>\n      </div>\n\n      <div className=\"grid gap-4\">\n        {assignments.map((assignment) => {\n          const Icon = getRateDeckIcon(assignment.rateDeckType);\n          const dateInfo = formatDate(assignment.assignedAt);\n          \n          return (\n            <Card key={assignment.id} className=\"hover:shadow-md transition-shadow\">\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"p-2 bg-primary/10 rounded-lg\">\n                      <Icon className=\"h-5 w-5 text-primary\" />\n                    </div>\n                    <div>\n                      <CardTitle className=\"text-base\">{assignment.rateDeckName}</CardTitle>\n                      <CardDescription className=\"mt-1\">\n                        {assignment.rateDeckDescription || 'No description available'}\n                      </CardDescription>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Badge variant={getRateDeckBadgeVariant(assignment.rateDeckType)}>\n                      {assignment.rateDeckType === 'number' ? 'Number Rates' : 'SMS Rates'}\n                    </Badge>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => openRateDeck(assignment)}\n                      className=\"flex items-center space-x-1\"\n                    >\n                      <ExternalLink className=\"h-3 w-3\" />\n                      <span>Open</span>\n                    </Button>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent className=\"pt-0\">\n                <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"flex items-center space-x-1\">\n                      <User className=\"h-3 w-3\" />\n                      <span>Assigned by {assignment.assignedBy}</span>\n                    </div>\n                    <div className=\"flex items-center space-x-1\">\n                      <Calendar className=\"h-3 w-3\" />\n                      <span>{dateInfo.date} at {dateInfo.time}</span>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n    </div>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/contexts/CdrContext.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'fetchCDRsUnlimited'. Either include it or remove the dependency array.","line":396,"column":6,"nodeType":"ArrayExpression","endLine":396,"endColumn":26,"suggestions":[{"desc":"Update the dependencies array to be: [user.sippyAccountId, selectedDate, fetchCDRsUnlimited]","fix":{"range":[12989,13009],"text":"[user.sippyAccountId, selectedDate, fetchCDRsUnlimited]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport { useAuth } from '@/lib/AuthContext';\nimport { CdrRow } from '@/lib/sippy/core/types';\n\n// Lightweight CDR interface for dashboard widgets - only essential fields\ninterface CdrWidget {\n  cost: string;                    // For Cost of Day calculations\n  duration: number;                // For ACD and Total Minutes calculations\n  result: number;                  // For ASR (success/failure) calculations\n  payment_currency?: string;       // For currency display\n  connect_time: string;           // For time filtering\n}\n\n\n\ninterface CdrKpis {\n  costOfDay: number;\n  asr: number; // Answer Seizure Ratio (Success Rate)\n  acd: number; // Average Call Duration\n  totalMinutes: number;\n  totalCalls: number;\n  successfulCalls: number;\n  failedCalls: number;\n  currency: string;\n}\n\ninterface ProgressState {\n  phase: 'initial' | 'background' | 'complete';\n  currentBatch: number;\n  totalBatches: number;\n  recordsLoaded: number;\n  estimatedTotal: number;\n  isComplete: boolean;\n}\n\ninterface CdrContextType {\n  cdrs: CdrWidget[];  // Use lightweight interface for dashboard widgets\n  kpis: CdrKpis | null;\n  isLoading: boolean;\n  error: string | null;\n  lastRefresh: Date | null;\n  selectedDate: Date;\n  progress: ProgressState;\n  hasDataLoaded: boolean; // New: Track if data has been manually loaded\n  refetch: () => void;\n  setSelectedDate: (date: Date) => void;\n  loadMetrics: () => void; // New: Manual trigger function\n}\n\nconst CdrContext = createContext<CdrContextType | undefined>(undefined);\n\n// Account-specific configuration for unlimited fetching\nconst ACCOUNT_CONFIG = {\n  '3': {\n    // Account 3 is significantly slower (22s vs 1.5s for same request)\n    initialTimeout: 60000,    // 60 seconds for initial requests\n    backgroundTimeout: 90000, // 90 seconds for background requests\n    initialBatchSize: 500,    // First batch size for quick display\n    unlimitedBatchSize: 10000, // Large batches for unlimited fetching\n    batchDelay: 2000,        // Longer delays between requests\n    description: 'Slow performance account - requires longer timeouts'\n  },\n  '27': {\n    // Account 27 has normal performance\n    initialTimeout: 45000,    // 45 seconds for initial requests\n    backgroundTimeout: 60000, // 60 seconds for background requests\n    initialBatchSize: 500,    // First batch size for quick display\n    unlimitedBatchSize: 10000, // Large batches for unlimited fetching\n    batchDelay: 500,         // Normal delays\n    description: 'Normal performance account'\n  },\n  'default': {\n    // Default configuration for unknown accounts\n    initialTimeout: 60000,    // 60 seconds\n    backgroundTimeout: 90000, // 90 seconds\n    initialBatchSize: 500,    // First batch size for quick display\n    unlimitedBatchSize: 10000, // Large batches for unlimited fetching\n    batchDelay: 1000,        // Medium delay\n    description: 'Default configuration for unknown accounts'\n  }\n};\n\nconst getAccountConfig = (accountId: string) => {\n  return ACCOUNT_CONFIG[accountId as keyof typeof ACCOUNT_CONFIG] || ACCOUNT_CONFIG.default;\n};\n\nexport function CdrProvider({ children }: { children: React.ReactNode }) {\n  const { user } = useAuth();\n  \n  const [cdrs, setCdrs] = useState<CdrWidget[]>([]);  // Use lightweight interface\n  const [kpis, setKpis] = useState<CdrKpis | null>(null);\n  const [isLoading, setIsLoading] = useState(false); // Changed: Start as false, no auto-loading\n  const [error, setError] = useState<string | null>(null);\n  const [lastRefresh, setLastRefresh] = useState<Date | null>(null);\n  const [hasDataLoaded, setHasDataLoaded] = useState(false); // New: Track manual loading\n  const [progress, setProgress] = useState<ProgressState>({\n    phase: 'initial',\n    currentBatch: 0,\n    totalBatches: 0,\n    recordsLoaded: 0,\n    estimatedTotal: 0,\n    isComplete: false\n  });\n  \n  // Initialize with today's date in local timezone\n  const [selectedDate, setSelectedDate] = useState(() => {\n    const today = new Date();\n    // Reset to start of day in local timezone\n    return new Date(today.getFullYear(), today.getMonth(), today.getDate());\n  });\n\n  const calculateKpis = useCallback((cdrs: CdrWidget[]): CdrKpis => {\n    if (!cdrs || cdrs.length === 0) {\n      return {\n        costOfDay: 0,\n        asr: 0,\n        acd: 0,\n        totalMinutes: 0,\n        totalCalls: 0,\n        successfulCalls: 0,\n        failedCalls: 0,\n        currency: '',\n      };\n    }\n\n    let totalCost = 0;\n    let totalDuration = 0;\n    let successfulCalls = 0;\n    let failedCalls = 0;\n    let currency = '';\n\n    cdrs.forEach(cdr => {\n      const cost = parseFloat(cdr.cost) || 0;\n      const duration = cdr.duration || 0;\n      \n      totalCost += cost;\n      totalDuration += duration;\n      \n      // Get currency from first CDR that has it\n      if (!currency && cdr.payment_currency) {\n        currency = cdr.payment_currency;\n      }\n      \n      // Count successful vs failed calls based on result code\n      // According to Sippy documentation: result 0 or 200 = successful\n      if (cdr.result === 0 || cdr.result === 200) {\n        successfulCalls++;\n      } else {\n        failedCalls++;\n      }\n    });\n\n    const totalCalls = cdrs.length;\n    const asr = totalCalls > 0 ? (successfulCalls / totalCalls) * 100 : 0;\n    const acd = successfulCalls > 0 ? totalDuration / successfulCalls : 0;\n    const totalMinutes = totalDuration / 60;\n\n    return {\n      costOfDay: totalCost,\n      asr,\n      acd,\n      totalMinutes,\n      totalCalls,\n      successfulCalls,\n      failedCalls,\n      currency: currency || 'USD',\n    };\n  }, []);\n\n  // Update KPIs when CDRs change\n  useEffect(() => {\n    const kpisToUse = calculateKpis(cdrs);\n    setKpis(kpisToUse);\n    \n    if (cdrs.length > 0) {\n      setLastRefresh(new Date());\n    }\n  }, [cdrs, calculateKpis]);\n\n  const fetchCDRBatch = async (\n    accountId: string,\n    offset: number,\n    limit: number,\n    startDate?: string,\n    endDate?: string,\n    isBackground = false\n  ): Promise<{ cdrs: CdrWidget[]; hasMore: boolean }> => {\n    const config = getAccountConfig(accountId);\n    const timeout = isBackground ? config.backgroundTimeout : config.initialTimeout;\n\n    try {\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), timeout);\n\n      // Use the same request pattern as the working CDR test page\n      const requestBody = {\n        i_account: accountId,\n        limit: limit.toString(),\n        offset: offset.toString(),\n        type: 'all', // Get all CDRs for comprehensive KPI calculations\n        mode: 'optimized', // Use optimized parsing for dashboard widgets (essential fields only)\n        ...(startDate && { start_date: startDate }),\n        ...(endDate && { end_date: endDate })\n      };\n\n      // Use the working CDR API endpoint (same as test page)\n      const response = await fetch(`/api/sippy/account/${accountId}/cdrs`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(requestBody),\n        signal: controller.signal,\n      });\n\n      clearTimeout(timeoutId);\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({ error: 'Unknown error' }));\n        throw new Error(`HTTP ${response.status}: ${errorData.error || 'Failed to fetch CDRs'}`);\n      }\n\n      const data = await response.json();\n      \n      // Handle both old and new API response formats\n      const fullCdrs = data.success ? (data.cdrs || []) : (data.cdrs || []);\n      \n      // Convert full CDR objects to lightweight CdrWidget objects\n      const cdrs: CdrWidget[] = fullCdrs.map((cdr: CdrRow) => ({\n        cost: cdr.charged_amount?.toString() || '0',\n        duration: cdr.duration || 0,\n        result: cdr.disconnect_cause ? parseInt(cdr.disconnect_cause) || 0 : 0,\n        payment_currency: undefined, // CdrRow doesn't have payment_currency, will be set from account info\n        connect_time: cdr.connect_time || ''\n      }));\n\n      // Determine if there are more CDRs to fetch\n      const hasMore = cdrs.length === limit;\n\n      return { cdrs, hasMore };\n    } catch (error) {\n      // Handle timeout errors gracefully\n      if (error instanceof Error) {\n        if (error.name === 'AbortError') {\n          throw new Error(`CDR fetch timed out after ${timeout}ms. Try selecting a shorter date range.`);\n        }\n        \n        // Re-throw with context\n        throw new Error(`Failed to fetch CDRs: ${error.message}`);\n      }\n      \n      throw new Error('An unknown error occurred while fetching CDRs');\n    }\n  };\n\n  const fetchCDRsUnlimited = async (accountId: string, startDate?: string, endDate?: string) => {\n    const config = getAccountConfig(accountId);\n\n    setIsLoading(true);\n    setError(null);\n    setProgress({\n      phase: 'initial',\n      currentBatch: 0,\n      totalBatches: 1, // Start with 1, will update as we go\n      recordsLoaded: 0,\n      estimatedTotal: 0, // No estimation for unlimited\n      isComplete: false\n    });\n\n    let allCdrs: CdrWidget[] = [];\n    let offset = 0;\n    let batchCount = 0;\n    let hasMore = true;\n\n    try {\n      // Phase 1: Initial batch for quick display\n      if (hasMore) {\n        const result = await fetchCDRBatch(accountId, offset, config.initialBatchSize, startDate, endDate, false);\n\n        allCdrs = [...allCdrs, ...result.cdrs];\n        hasMore = result.hasMore;\n        offset += result.cdrs.length;\n        batchCount++;\n\n        setProgress({\n          phase: 'initial',\n          currentBatch: 1,\n          totalBatches: hasMore ? 2 : 1,\n          recordsLoaded: allCdrs.length,\n          estimatedTotal: 0,\n          isComplete: !hasMore\n        });\n\n        setCdrs(allCdrs);\n\n        if (hasMore) {\n          await new Promise(resolve => setTimeout(resolve, config.batchDelay));\n        }\n      }\n\n      // Phase 2: UNLIMITED background fetching\n      if (hasMore) {\n        setProgress(prev => ({\n          ...prev,\n          phase: 'background'\n        }));\n        \n        let consecutiveEmptyBatches = 0;\n        const maxConsecutiveEmpty = 3; // Safety check\n        \n        while (hasMore && consecutiveEmptyBatches < maxConsecutiveEmpty) {\n          const result = await fetchCDRBatch(accountId, offset, config.unlimitedBatchSize, startDate, endDate, true);\n\n          if (result.cdrs.length === 0) {\n            consecutiveEmptyBatches++;\n          } else {\n            consecutiveEmptyBatches = 0; // Reset counter\n          }\n\n          allCdrs = [...allCdrs, ...result.cdrs];\n          hasMore = result.hasMore && result.cdrs.length > 0;\n          offset += result.cdrs.length;\n          batchCount++;\n\n          setProgress({\n            phase: 'background',\n            currentBatch: batchCount,\n            totalBatches: hasMore ? batchCount + 1 : batchCount,\n            recordsLoaded: allCdrs.length,\n            estimatedTotal: 0, // No estimation for unlimited\n            isComplete: !hasMore\n          });\n\n          setCdrs(allCdrs);\n\n          if (hasMore && consecutiveEmptyBatches === 0) {\n            await new Promise(resolve => setTimeout(resolve, config.batchDelay));\n          }\n        }\n      }\n\n      const finalProgress = {\n        phase: 'complete' as const,\n        currentBatch: batchCount,\n        totalBatches: batchCount,\n        recordsLoaded: allCdrs.length,\n        estimatedTotal: 0,\n        isComplete: true\n      };\n\n      setProgress(finalProgress);\n\n    } catch (error) {\n      console.error('❌ Error in unlimited CDR fetch:', error);\n      setError(error instanceof Error ? error.message : 'Failed to fetch CDRs');\n      setProgress(prev => ({ ...prev, isComplete: true }));\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const fetchCdrsForDate = useCallback(async (targetDate?: Date) => {\n    if (!user?.sippyAccountId) {\n      setError('No account ID available');\n      setIsLoading(false);\n      return;\n    }\n\n    // Use the provided targetDate or the current selectedDate\n    const dateToFetch = targetDate || selectedDate;\n\n    try {\n      setIsLoading(true);\n      setError(null);\n      setHasDataLoaded(true); // Mark that data has been manually loaded\n\n      // Create date boundaries for the selected date\n      const startOfDay = new Date(dateToFetch.getFullYear(), dateToFetch.getMonth(), dateToFetch.getDate(), 0, 0, 0);\n      const endOfDay = new Date(dateToFetch.getFullYear(), dateToFetch.getMonth(), dateToFetch.getDate(), 23, 59, 59);\n\n      // Fetch CDRs for the specific date\n      await fetchCDRsUnlimited(\n        user.sippyAccountId.toString(), \n        startOfDay.toISOString(), \n        endOfDay.toISOString()\n      );\n\n      setLastRefresh(new Date());\n\n    } catch (error) {\n      console.error('❌ Error in CDR fetch for date:', error);\n      setError(error instanceof Error ? error.message : 'Failed to fetch CDRs');\n    } finally {\n      setIsLoading(false);\n    }\n  }, [user, selectedDate]);\n\n  // Manual date change handler that resets loading state\n  const handleDateChange = useCallback((date: Date) => {\n    setSelectedDate(date);\n    setHasDataLoaded(false); // Reset loading state when date changes\n    setCdrs([]); // Clear previous data\n    setKpis(null);\n    setError(null);\n  }, []);\n\n  return (\n    <CdrContext.Provider\n      value={{\n        cdrs,\n        kpis,\n        isLoading,\n        error,\n        lastRefresh,\n        selectedDate,\n        progress,\n        hasDataLoaded,\n        refetch: () => fetchCdrsForDate(),\n        setSelectedDate: handleDateChange,\n        loadMetrics: () => fetchCdrsForDate()\n      }}\n    >\n      {children}\n    </CdrContext.Provider>\n  );\n}\n\nexport function useCdr() {\n  const context = useContext(CdrContext);\n  if (context === undefined) {\n    throw new Error('useCdr must be used within a CdrProvider');\n  }\n  return context;\n}","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/contexts/NotificationContext.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'initializeNotifications' and 'startPolling'. Either include them or remove the dependency array.","line":75,"column":6,"nodeType":"ArrayExpression","endLine":75,"endColumn":25,"suggestions":[{"desc":"Update the dependencies array to be: [user, authLoading, initializeNotifications, startPolling]","fix":{"range":[2709,2728],"text":"[user, authLoading, initializeNotifications, startPolling]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'applyFilters'. Either include it or remove the dependency array.","line":80,"column":6,"nodeType":"ArrayExpression","endLine":80,"endColumn":29,"suggestions":[{"desc":"Update the dependencies array to be: [notifications, filter, applyFilters]","fix":{"range":[2849,2872],"text":"[notifications, filter, applyFilters]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'showNotificationToast'. Either include it or remove the dependency array.","line":121,"column":6,"nodeType":"ArrayExpression","endLine":121,"endColumn":57,"suggestions":[{"desc":"Update the dependencies array to be: [notifications, preferences?.showToasts, showNotificationToast, showToast]","fix":{"range":[4647,4698],"text":"[notifications, preferences?.showToasts, showNotificationToast, showToast]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { createContext, useContext, useState, useEffect, useRef, ReactNode } from 'react';\nimport { useAuth } from '@/lib/AuthContext';\nimport { \n  NotificationContextType,\n  InternalNotification,\n  NotificationPreferences,\n  NotificationStats,\n  NotificationFilter,\n  NotificationType\n} from '@/types/notifications';\nimport InternalNotificationService from '@/services/InternalNotificationService';\nimport NotificationSoundService from '@/services/NotificationSoundService';\nimport { useNotificationToast } from '@/components/notifications/NotificationToastContainer';\nimport NotificationToastContainer from '@/components/notifications/NotificationToastContainer';\n\nconst NotificationContext = createContext<NotificationContextType | undefined>(undefined);\n\ninterface NotificationProviderProps {\n  children: ReactNode;\n}\n\nexport function NotificationProvider({ children }: NotificationProviderProps) {\n  // State\n  const [notifications, setNotifications] = useState<InternalNotification[]>([]);\n  const [preferences, setPreferences] = useState<NotificationPreferences | null>(null);\n  const [stats, setStats] = useState<NotificationStats>({\n    total: 0,\n    unread: 0,\n    byType: {} as Record<NotificationType, number>,\n    byPriority: {} as Record<string, number>,\n    todayCount: 0,\n    weekCount: 0\n  });\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [isNotificationCenterOpen, setNotificationCenterOpen] = useState(false);\n  \n  // Filter state\n  const [filter, setFilter] = useState<NotificationFilter>({});\n  const [filteredNotifications, setFilteredNotifications] = useState<InternalNotification[]>([]);\n\n  // Services\n  const notificationService = useRef(InternalNotificationService.getInstance());\n  const soundService = useRef(NotificationSoundService.getInstance());\n  \n  // Custom toast system\n  const { showToast } = useNotificationToast();\n  \n  // Auth context\n  const { user, isLoading: authLoading } = useAuth();\n\n  // Polling interval for real-time updates\n  const pollInterval = useRef<NodeJS.Timeout | null>(null);\n  const POLL_INTERVAL = 10000; // 10 seconds\n\n  // Track last notification count for detecting new notifications\n  const lastNotificationCount = useRef(0);\n  const isInitialized = useRef(false);\n  const lastNotificationTimestamp = useRef<Date | null>(null);\n\n  // Initialize when user is authenticated\n  useEffect(() => {\n    if (!authLoading && user) {\n      initializeNotifications();\n      startPolling();\n    } else if (!authLoading && !user) {\n      // Reset state when user logs out\n      resetNotificationState();\n      stopPolling();\n    }\n\n    return stopPolling;\n  }, [user, authLoading]);\n\n  // Update filtered notifications when notifications or filter changes\n  useEffect(() => {\n    applyFilters();\n  }, [notifications, filter]);\n\n  // Handle new notifications for toast display (only for real-time updates, not initial load)\n  useEffect(() => {\n    if (!isInitialized.current || !preferences?.showToasts) {\n      return;\n    }\n\n    // Only show toasts for notifications that are genuinely new\n    // We add a small buffer (30 seconds) to account for slight timing differences\n    const bufferTime = 30 * 1000; // 30 seconds in milliseconds\n    const cutoffTime = lastNotificationTimestamp.current ? \n      new Date(lastNotificationTimestamp.current.getTime() - bufferTime) : \n      new Date();\n\n    const newNotifications = notifications.filter(notification => {\n      // Only show notifications created after our last known timestamp\n      const notificationTime = new Date(notification.createdAt);\n      return notificationTime > cutoffTime &&\n             notification.showToast &&\n             notification.status === 'unread'; // Only show unread notifications as toasts\n    });\n\n    if (newNotifications.length > 0) {\n      // Update the timestamp to the most recent notification\n      const mostRecentTime = new Date(Math.max(...newNotifications.map(n => new Date(n.createdAt).getTime())));\n      \n      // Only update timestamp if this notification is actually newer\n      if (!lastNotificationTimestamp.current || mostRecentTime > lastNotificationTimestamp.current) {\n        lastNotificationTimestamp.current = mostRecentTime;\n\n        if (process.env.NODE_ENV === 'development') {\n          console.log(`Showing ${newNotifications.length} new notification toasts. Updated timestamp to:`, mostRecentTime);\n        }\n\n        // Show toasts for new notifications\n        newNotifications.forEach(notification => {\n          showNotificationToast(notification);\n        });\n      }\n    }\n  }, [notifications, preferences?.showToasts, showToast]);\n\n  const resetNotificationState = () => {\n    setNotifications([]);\n    setPreferences(null);\n    setStats({\n      total: 0,\n      unread: 0,\n      byType: {} as Record<NotificationType, number>,\n      byPriority: {} as Record<string, number>,\n      todayCount: 0,\n      weekCount: 0\n    });\n    setError(null);\n    setIsLoading(false);\n    lastNotificationCount.current = 0;\n    isInitialized.current = false;\n    lastNotificationTimestamp.current = null;\n  };\n\n  const initializeNotifications = async () => {\n    if (!user) return;\n\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      // Load user preferences\n      const userPrefs = await notificationService.current.getUserPreferences(user.id);\n      setPreferences(userPrefs);\n\n      // Apply preferences to sound service\n      if (userPrefs) {\n        soundService.current.setEnabled(userPrefs.enableSounds);\n        soundService.current.setVolume(userPrefs.soundVolume);\n      }\n\n      // Load notifications\n      await refreshNotifications();\n\n      // Load stats\n      const userStats = await notificationService.current.getUserStats(user.id);\n      setStats(userStats);\n\n      // Mark as initialized and set the timestamp to now\n      // This prevents existing notifications from being shown as toasts\n      isInitialized.current = true;\n      lastNotificationTimestamp.current = new Date();\n\n      if (process.env.NODE_ENV === 'development') {\n        console.log('Notifications initialized. Timestamp set to:', lastNotificationTimestamp.current);\n      }\n\n    } catch (err) {\n      console.error('Error initializing notifications:', err);\n      setError('Failed to load notifications');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const refreshNotifications = async () => {\n    if (!user) return;\n\n    try {\n      const { notifications: userNotifications } = await notificationService.current.getUserNotifications(\n        user.id,\n        { limit: 100 }\n      );\n      \n      setNotifications(userNotifications as InternalNotification[]);\n      \n      // Update stats\n      const userStats = await notificationService.current.getUserStats(user.id);\n      setStats(userStats);\n      \n    } catch (err) {\n      console.error('Error refreshing notifications:', err);\n    }\n  };\n\n  const startPolling = () => {\n    if (pollInterval.current) {\n      clearInterval(pollInterval.current);\n    }\n    \n    pollInterval.current = setInterval(() => {\n      if (!document.hidden && user) {\n        refreshNotifications();\n      }\n    }, POLL_INTERVAL);\n  };\n\n  const stopPolling = () => {\n    if (pollInterval.current) {\n      clearInterval(pollInterval.current);\n      pollInterval.current = null;\n    }\n  };\n\n  const applyFilters = () => {\n    let filtered = [...notifications];\n\n    if (filter.types?.length) {\n      filtered = filtered.filter(n => filter.types!.includes(n.type));\n    }\n\n    if (filter.priorities?.length) {\n      filtered = filtered.filter(n => filter.priorities!.includes(n.priority));\n    }\n\n    if (filter.status?.length) {\n      filtered = filtered.filter(n => filter.status!.includes(n.status));\n    }\n\n    if (filter.search) {\n      const searchLower = filter.search.toLowerCase();\n      filtered = filtered.filter(n => \n        n.title.toLowerCase().includes(searchLower) ||\n        n.message.toLowerCase().includes(searchLower)\n      );\n    }\n\n    if (filter.dateFrom) {\n      filtered = filtered.filter(n => new Date(n.createdAt) >= filter.dateFrom!);\n    }\n\n    if (filter.dateTo) {\n      filtered = filtered.filter(n => new Date(n.createdAt) <= filter.dateTo!);\n    }\n\n    setFilteredNotifications(filtered);\n  };\n\n  const showNotificationToast = (notification: InternalNotification) => {\n    if (!preferences?.showToasts) return;\n    \n    // Use our custom toast system\n    showToast(notification, {\n      position: preferences.toastPosition,\n      duration: (preferences.toastDuration || 5) * 1000\n    });\n  };\n\n  // Context actions\n  const addNotification = async (notification: Omit<InternalNotification, 'id' | 'createdAt'>) => {\n    if (!user) {\n      console.warn('Cannot add notification: user not authenticated');\n      return;\n    }\n\n    try {\n      const newNotification = await notificationService.current.createNotification(\n        user.id,\n        notification.type,\n        notification.data\n      );\n      \n      if (newNotification) {\n        setNotifications(prev => [newNotification as InternalNotification, ...prev]);\n        \n        setStats(prev => ({\n          ...prev,\n          total: prev.total + 1,\n          unread: notification.status === 'unread' ? prev.unread + 1 : prev.unread\n        }));\n\n        // Update the timestamp for this new notification\n        const notificationTime = new Date(newNotification.createdAt);\n        lastNotificationTimestamp.current = notificationTime;\n\n        // Show toast if enabled (this will be handled by the useEffect)\n        // No need to manually show toast here as the useEffect will catch it\n\n        // Play sound if enabled\n        if (preferences?.enableSounds && newNotification.sound) {\n          await soundService.current.playSound(\n            newNotification.sound,\n            preferences.soundVolume\n          );\n        }\n      }\n    } catch (err) {\n      console.error('Error adding notification:', err);\n      throw err;\n    }\n  };\n\n  const markAsRead = async (notificationId: string) => {\n    if (!user) {\n      console.warn('Cannot mark notification as read: user not authenticated');\n      return;\n    }\n\n    try {\n      const success = await notificationService.current.markAsRead(notificationId, user.id);\n      \n      if (success) {\n        setNotifications(prev => prev.map(n => \n          n.id === notificationId \n            ? { ...n, status: 'read' as const, readAt: new Date() }\n            : n\n        ));\n\n        setStats(prev => ({\n          ...prev,\n          unread: Math.max(0, prev.unread - 1)\n        }));\n      }\n    } catch (err) {\n      console.error('Error marking notification as read:', err);\n      throw err;\n    }\n  };\n\n  const markAllAsRead = async () => {\n    if (!user) {\n      console.warn('Cannot mark all notifications as read: user not authenticated');\n      return;\n    }\n\n    try {\n      const count = await notificationService.current.markAllAsRead(user.id);\n      \n      if (count > 0) {\n        setNotifications(prev => prev.map(n => \n          n.status === 'unread' \n            ? { ...n, status: 'read' as const, readAt: new Date() }\n            : n\n        ));\n\n        setStats(prev => ({\n          ...prev,\n          unread: 0\n        }));\n      }\n    } catch (err) {\n      console.error('Error marking all notifications as read:', err);\n      throw err;\n    }\n  };\n\n  const archiveNotification = async (notificationId: string) => {\n    if (!user) {\n      console.warn('Cannot archive notification: user not authenticated');\n      return;\n    }\n\n    try {\n      const success = await notificationService.current.archiveNotification(notificationId, user.id);\n      \n      if (success) {\n        setNotifications(prev => prev.map(n => \n          n.id === notificationId \n            ? { ...n, status: 'archived' as const, archivedAt: new Date() }\n            : n\n        ));\n      }\n    } catch (err) {\n      console.error('Error archiving notification:', err);\n      throw err;\n    }\n  };\n\n  const deleteNotification = async (notificationId: string) => {\n    if (!user) {\n      console.warn('Cannot delete notification: user not authenticated');\n      return;\n    }\n\n    try {\n      const success = await notificationService.current.deleteNotification(notificationId, user.id);\n      \n      if (success) {\n        setNotifications(prev => prev.filter(n => n.id !== notificationId));\n        \n        setStats(prev => ({\n          ...prev,\n          total: Math.max(0, prev.total - 1)\n        }));\n      }\n    } catch (err) {\n      console.error('Error deleting notification:', err);\n      throw err;\n    }\n  };\n\n  const clearAllNotifications = async () => {\n    if (!user) {\n      console.warn('Cannot clear notifications: user not authenticated');\n      return;\n    }\n\n    try {\n      const count = await notificationService.current.clearAllNotifications(user.id);\n      \n      if (count > 0) {\n        setNotifications([]);\n        setStats({\n          total: 0,\n          unread: 0,\n          byType: {} as Record<NotificationType, number>,\n          byPriority: {} as Record<string, number>,\n          todayCount: 0,\n          weekCount: 0\n        });\n      }\n    } catch (err) {\n      console.error('Error clearing all notifications:', err);\n      throw err;\n    }\n  };\n\n  const updatePreferences = async (updates: Partial<NotificationPreferences>) => {\n    if (!user) {\n      console.warn('Cannot update preferences: user not authenticated');\n      return;\n    }\n\n    try {\n      const updated = await notificationService.current.updateUserPreferences(user.id, updates);\n      \n      if (updated) {\n        setPreferences(updated as NotificationPreferences);\n      }\n    } catch (err) {\n      console.error('Error updating preferences:', err);\n      throw err;\n    }\n  };\n\n  const requestPushPermission = async () => {\n    try {\n      return await notificationService.current.requestPushPermission();\n    } catch (err) {\n      console.error('Error requesting push permission:', err);\n      return false;\n    }\n  };\n\n  const testNotification = async (type: NotificationType) => {\n    if (!user) {\n      console.warn('Cannot test notification: user not authenticated');\n      return;\n    }\n\n    try {\n      await notificationService.current.testNotification(user.id, type);\n    } catch (err) {\n      console.error('Error testing notification:', err);\n      throw err;\n    }\n  };\n\n  const contextValue: NotificationContextType = {\n    // State\n    notifications,\n    preferences,\n    stats,\n    isLoading,\n    error,\n    \n    // Notification Center\n    isNotificationCenterOpen,\n    setNotificationCenterOpen,\n    \n    // Actions\n    addNotification,\n    markAsRead,\n    markAllAsRead,\n    archiveNotification,\n    deleteNotification,\n    clearAllNotifications,\n    \n    // Preferences\n    updatePreferences,\n    \n    // Filtering\n    filter,\n    setFilter,\n    filteredNotifications,\n    \n    // Utility\n    refreshNotifications,\n    requestPushPermission,\n    testNotification\n  };\n\n  return (\n    <NotificationContext.Provider value={contextValue}>\n      {children}\n      <NotificationToastContainer \n        position={preferences?.toastPosition || 'top-right'}\n        maxToasts={5}\n        defaultDuration={(preferences?.toastDuration || 5) * 1000}\n      />\n    </NotificationContext.Provider>\n  );\n}\n\nexport function useNotifications() {\n  const context = useContext(NotificationContext);\n  if (context === undefined) {\n    throw new Error('useNotifications must be used within a NotificationProvider');\n  }\n  return context;\n}\n\nexport default NotificationContext; ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/data/countries.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/hooks/useAccountVerification.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/hooks/useAdminTickets.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has missing dependencies: 'fetchAdmins' and 'fetchUsers'. Either include them or remove the dependency array.","line":125,"column":6,"nodeType":"ArrayExpression","endLine":125,"endColumn":33,"suggestions":[{"desc":"Update the dependencies array to be: [clearError, admins, users, fetchAdmins, fetchUsers]","fix":{"range":[2931,2958],"text":"[clearError, admins, users, fetchAdmins, fetchUsers]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'fetchAdmins'. Either include it or remove the dependency array.","line":155,"column":6,"nodeType":"ArrayExpression","endLine":155,"endColumn":26,"suggestions":[{"desc":"Update the dependencies array to be: [admins, clearError, fetchAdmins]","fix":{"range":[3827,3847],"text":"[admins, clearError, fetchAdmins]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'clearError'. Either include it or remove the dependency array.","line":216,"column":6,"nodeType":"ArrayExpression","endLine":216,"endColumn":27,"suggestions":[{"desc":"Update the dependencies array to be: [clearError, ticket, fetchTicket]","fix":{"range":[5449,5470],"text":"[clearError, ticket, fetchTicket]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'clearError'. Either include it or remove the dependency array.","line":260,"column":6,"nodeType":"ArrayExpression","endLine":260,"endColumn":44,"suggestions":[{"desc":"Update the dependencies array to be: [clearError, ticket, addInternalNote, fetchTicket]","fix":{"range":[6736,6774],"text":"[clearError, ticket, addInternalNote, fetchTicket]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'clearError'. Either include it or remove the dependency array.","line":304,"column":6,"nodeType":"ArrayExpression","endLine":304,"endColumn":44,"suggestions":[{"desc":"Update the dependencies array to be: [clearError, ticket, addInternalNote, fetchTicket]","fix":{"range":[8056,8094],"text":"[clearError, ticket, addInternalNote, fetchTicket]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'clearError'. Either include it or remove the dependency array.","line":348,"column":6,"nodeType":"ArrayExpression","endLine":348,"endColumn":44,"suggestions":[{"desc":"Update the dependencies array to be: [clearError, ticket, addInternalNote, fetchTicket]","fix":{"range":[9360,9398],"text":"[clearError, ticket, addInternalNote, fetchTicket]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'clearError'. Either include it or remove the dependency array.","line":374,"column":6,"nodeType":"ArrayExpression","endLine":374,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [clearError]","fix":{"range":[10077,10079],"text":"[clearError]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'clearError'. Either include it or remove the dependency array.","line":397,"column":6,"nodeType":"ArrayExpression","endLine":397,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [clearError]","fix":{"range":[10656,10658],"text":"[clearError]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'clearError'. Either include it or remove the dependency array.","line":438,"column":6,"nodeType":"ArrayExpression","endLine":438,"endColumn":27,"suggestions":[{"desc":"Update the dependencies array to be: [clearError, ticket, fetchTicket]","fix":{"range":[11797,11818],"text":"[clearError, ticket, fetchTicket]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useCallback } from 'react';\nimport { \n  Ticket, \n  TicketFilters,\n  TicketAttachment,\n  TicketStats,\n  TicketStatus,\n  TicketPriority\n} from '@/types/ticket';\n\ninterface AdminTicketFilters extends TicketFilters {\n  assignedTo?: string;\n  customerEmail?: string;\n  userId?: string;\n  dateRange?: string;\n}\n\ninterface AdminUser {\n  id: string;\n  email: string;\n  name?: string;\n  firstName?: string;\n  lastName?: string;\n  role: string;\n  companyName?: string | null;\n}\n\ninterface AdminTicketStats extends TicketStats {\n  total: number;\n  unassigned: number;\n  urgent: number;\n  overdue: number;\n}\n\ninterface BulkUpdateRequest {\n  ticketIds: string[];\n  action: 'assign' | 'update_status' | 'update_priority' | 'delete';\n  assignTo?: string;\n  status?: TicketStatus;\n  priority?: TicketPriority;\n  internalNote?: string;\n}\n\ninterface AssignmentRequest {\n  assignTo: string;\n  internalNote?: string;\n}\n\ninterface StatusUpdateRequest {\n  status: TicketStatus;\n  internalNote?: string;\n}\n\ninterface PriorityUpdateRequest {\n  priority: TicketPriority;\n  internalNote?: string;\n}\n\ninterface AddReplyRequest {\n  content: string;\n  attachments?: TicketAttachment[];\n  isInternal?: boolean;\n}\n\n\n\nexport function useAdminTickets() {\n  const [tickets, setTickets] = useState<Ticket[]>([]);\n  const [ticket, setTicket] = useState<Ticket | null>(null);\n  const [admins, setAdmins] = useState<AdminUser[] | null>(null);\n  const [users, setUsers] = useState<AdminUser[] | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [pagination, setPagination] = useState({\n    page: 1,\n    limit: 10,\n    total: 0,\n    totalPages: 0,\n  });\n  const [stats, setStats] = useState<AdminTicketStats | null>(null);\n\n  const clearError = useCallback(() => {\n    setError(null);\n  }, []);\n\n  const fetchTickets = useCallback(async (filters: AdminTicketFilters) => {\n    try {\n      setLoading(true);\n      clearError();\n\n      const params = new URLSearchParams();\n      Object.entries(filters).forEach(([key, value]) => {\n        if (value !== undefined && value !== null && value !== '') {\n          params.append(key, value.toString());\n        }\n      });\n\n      const response = await fetch(`/api/admin/tickets?${params.toString()}`);\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to fetch tickets');\n      }\n\n      setTickets(data.tickets);\n      setPagination(data.pagination);\n      setStats(data.stats);\n      \n      // Fetch admins if not already loaded\n      if (!admins) {\n        await fetchAdmins();\n      }\n\n      // Fetch users if not already loaded\n      if (!users) {\n        await fetchUsers();\n      }\n    } catch (err: unknown) {\n      setError(err instanceof Error ? err.message : 'Failed to fetch tickets');\n    } finally {\n      setLoading(false);\n    }\n  }, [admins, users, clearError]);\n\n  const fetchTicket = useCallback(async (ticketId: string) => {\n    try {\n      setLoading(true);\n      clearError();\n\n      const response = await fetch(`/api/admin/tickets/${ticketId}`);\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to fetch ticket');\n      }\n\n      const ticketData = await response.json();\n      \n      // The admin API returns ticket data directly, not wrapped in { ticket: ... }\n      setTicket(ticketData);\n      \n      // Fetch admins if not already loaded\n      if (!admins) {\n        await fetchAdmins();\n      }\n    } catch (err: unknown) {\n      console.error('Admin fetchTicket: Error:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch ticket');\n      setTicket(null);\n    } finally {\n      setLoading(false);\n    }\n  }, [admins, clearError]);\n\n  const fetchAdmins = useCallback(async () => {\n    try {\n      const response = await fetch('/api/admin/users?role=admin&limit=100');\n      const data = await response.json();\n\n      if (response.ok) {\n        setAdmins(data.users);\n      }\n    } catch (err) {\n      console.error('Failed to fetch admins:', err);\n    }\n  }, []);\n\n  const fetchUsers = useCallback(async () => {\n    try {\n      const response = await fetch('/api/admin/users?limit=100');\n      const data = await response.json();\n\n      if (response.ok) {\n        setUsers(data.users);\n      }\n    } catch (err) {\n      console.error('Failed to fetch users:', err);\n    }\n  }, []);\n\n  const addInternalNote = useCallback(async (ticketId: string, content: string) => {\n    try {\n      setLoading(true);\n      clearError();\n\n      const response = await fetch(`/api/admin/tickets/${ticketId}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          action: 'add_reply',\n          content,\n          isInternal: true,\n        }),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to add internal note');\n      }\n\n      // Update current ticket if viewing details\n      if (ticket && ticket._id === ticketId) {\n        await fetchTicket(ticketId); // Refetch to get latest data\n      }\n\n      return true;\n    } catch (err: unknown) {\n      setError(err instanceof Error ? err.message : 'Failed to add internal note');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  }, [ticket, fetchTicket]);\n\n  const assignTicket = useCallback(async (ticketId: string, request: AssignmentRequest) => {\n    try {\n      setLoading(true);\n      clearError();\n\n      const response = await fetch(`/api/admin/tickets/${ticketId}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          action: 'assign_ticket',\n          assignedTo: request.assignTo,\n        }),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to assign ticket');\n      }\n\n      // Add internal note if provided\n      if (request.internalNote && request.internalNote.trim()) {\n        await addInternalNote(ticketId, request.internalNote);\n      }\n\n      // Update current ticket if viewing details\n      if (ticket && ticket._id === ticketId) {\n        await fetchTicket(ticketId); // Refetch to get latest data\n      }\n\n      // Update in tickets list\n      setTickets(prev => prev.map(t => \n        t._id === ticketId ? { ...t, ...data.ticket } : t\n      ));\n\n      return true;\n    } catch (err: unknown) {\n      setError(err instanceof Error ? err.message : 'Failed to assign ticket');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  }, [ticket, addInternalNote, fetchTicket]);\n\n  const updateTicketStatus = useCallback(async (ticketId: string, request: StatusUpdateRequest) => {\n    try {\n      setLoading(true);\n      clearError();\n\n      const response = await fetch(`/api/admin/tickets/${ticketId}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          action: 'update_status',\n          status: request.status,\n        }),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to update ticket status');\n      }\n\n      // Add internal note if provided\n      if (request.internalNote && request.internalNote.trim()) {\n        await addInternalNote(ticketId, request.internalNote);\n      }\n\n      // Update current ticket if viewing details\n      if (ticket && ticket._id === ticketId) {\n        await fetchTicket(ticketId); // Refetch to get latest data\n      }\n\n      // Update in tickets list\n      setTickets(prev => prev.map(t => \n        t._id === ticketId ? { ...t, ...data.ticket } : t\n      ));\n\n      return true;\n    } catch (err: unknown) {\n      setError(err instanceof Error ? err.message : 'Failed to update ticket status');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  }, [ticket, addInternalNote, fetchTicket]);\n\n  const updateTicketPriority = useCallback(async (ticketId: string, request: PriorityUpdateRequest) => {\n    try {\n      setLoading(true);\n      clearError();\n\n      const response = await fetch(`/api/admin/tickets/${ticketId}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          action: 'update_priority',\n          priority: request.priority,\n        }),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to update ticket priority');\n      }\n\n      // Add internal note if provided\n      if (request.internalNote && request.internalNote.trim()) {\n        await addInternalNote(ticketId, request.internalNote);\n      }\n\n      // Update current ticket if viewing details\n      if (ticket && ticket._id === ticketId) {\n        await fetchTicket(ticketId);\n      }\n\n      // Update in tickets list\n      setTickets(prev => prev.map(t => \n        t._id === ticketId ? { ...t, ...data.ticket } : t\n      ));\n\n      return true;\n    } catch (err: unknown) {\n      setError(err instanceof Error ? err.message : 'Failed to update ticket priority');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  }, [ticket, addInternalNote, fetchTicket]);\n\n  const bulkUpdateTickets = useCallback(async (request: BulkUpdateRequest) => {\n    try {\n      setLoading(true);\n      clearError();\n\n      const response = await fetch('/api/admin/tickets/bulk', {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(request),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to update tickets');\n      }\n\n      return true;\n    } catch (err: unknown) {\n      setError(err instanceof Error ? err.message : 'Failed to update tickets');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const deleteTicket = useCallback(async (ticketId: string) => {\n    try {\n      setLoading(true);\n      clearError();\n\n      const response = await fetch(`/api/admin/tickets/${ticketId}`, {\n        method: 'DELETE',\n      });\n\n      if (!response.ok) {\n        const data = await response.json();\n        throw new Error(data.error || 'Failed to delete ticket');\n      }\n\n      return true;\n    } catch (err: unknown) {\n      setError(err instanceof Error ? err.message : 'Failed to delete ticket');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const addReply = useCallback(async (ticketId: string, request: AddReplyRequest) => {\n    try {\n      setLoading(true);\n      clearError();\n\n      const response = await fetch(`/api/admin/tickets/${ticketId}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          action: 'add_reply',\n          content: request.content,\n          attachments: request.attachments || [],\n          isInternal: request.isInternal || false,\n        }),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to add reply');\n      }\n\n      // Update current ticket if viewing details\n      if (ticket && ticket._id === ticketId) {\n        await fetchTicket(ticketId);\n      }\n\n      // Update in tickets list\n      setTickets(prev => prev.map(t => \n        t._id === ticketId ? { ...t, ...data.ticket } : t\n      ));\n\n      return true;\n    } catch (err: unknown) {\n      setError(err instanceof Error ? err.message : 'Failed to add reply');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  }, [ticket, fetchTicket]);\n\n  const uploadFiles = useCallback(async (files: FileList): Promise<TicketAttachment[]> => {\n    try {\n      const formData = new FormData();\n      Array.from(files).forEach((file) => {\n        formData.append('files', file);\n      });\n\n      const response = await fetch('/api/tickets/upload', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!response.ok) {\n        const data = await response.json();\n        throw new Error(data.error || 'Failed to upload files');\n      }\n\n      const data = await response.json();\n      return data.files || [];\n    } catch (err: unknown) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to upload files';\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    }\n  }, []);\n\n  return {\n    // State\n    tickets,\n    ticket,\n    admins,\n    users,\n    loading,\n    error,\n    pagination,\n    stats,\n\n    // Actions\n    fetchTickets,\n    fetchTicket,\n    assignTicket,\n    updateTicketStatus,\n    updateTicketPriority,\n    addInternalNote,\n    addReply,\n    uploadFiles,\n    bulkUpdateTickets,\n    deleteTicket,\n    clearError,\n  };\n}","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/hooks/useBranding.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/hooks/useCannedResponses.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":48,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1400,1403],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1400,1403],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useCallback } from 'react';\n\nexport interface CannedResponse {\n  _id: string;\n  title: string;\n  content: string;\n  category: string;\n  services?: string[];\n  keywords?: string[];\n  isActive: boolean;\n  usageCount: number;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport function useCannedResponses() {\n  const [responses, setResponses] = useState<CannedResponse[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchResponses = useCallback(async (filters?: {\n    category?: string;\n    service?: string;\n    search?: string;\n  }) => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      const params = new URLSearchParams();\n      if (filters?.category) params.append('category', filters.category);\n      if (filters?.service) params.append('service', filters.service);\n      if (filters?.search) params.append('search', filters.search);\n      params.append('isActive', 'true'); // Only fetch active responses\n\n      const url = `/api/admin/support/canned-responses?${params.toString()}`;\n      const response = await fetch(url);\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to fetch canned responses');\n      }\n\n      setResponses(data.responses || []);\n      return data.responses || [];\n    } catch (err: any) {\n      setError(err.message);\n      return [];\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const incrementUsage = useCallback(async (responseId: string) => {\n    try {\n      await fetch(`/api/admin/support/canned-responses/${responseId}/usage`, {\n        method: 'POST',\n      });\n      \n      // Update local state\n      setResponses(prev => prev.map(response => \n        response._id === responseId \n          ? { ...response, usageCount: response.usageCount + 1 }\n          : response\n      ));\n    } catch (err) {\n      console.error('Failed to increment usage count:', err);\n    }\n  }, []);\n\n  return {\n    responses,\n    loading,\n    error,\n    fetchResponses,\n    incrementUsage,\n  };\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/hooks/useDashboardPreferences.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/hooks/useKpiSettings.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/hooks/useKpiThresholds.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/hooks/useOnboarding.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'checkOnboardingStatus'. Either include it or remove the dependency array.","line":38,"column":6,"nodeType":"ArrayExpression","endLine":38,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [checkOnboardingStatus, user.id]","fix":{"range":[1118,1128],"text":"[checkOnboardingStatus, user.id]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport { useAuth } from '@/lib/AuthContext';\n\nexport function useOnboarding() {\n  const { user } = useAuth();\n  const [hasCompletedOnboarding, setHasCompletedOnboarding] = useState<boolean | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const checkOnboardingStatus = async () => {\n    if (!user?.id) {\n      setIsLoading(false);\n      return;\n    }\n\n    try {\n      const response = await fetch('/api/user/onboarding');\n      \n      if (response.ok) {\n        const data = await response.json();\n        setHasCompletedOnboarding(data.onboarding?.completed || false);\n      } else if (response.status === 404) {\n        // No onboarding data found\n        setHasCompletedOnboarding(false);\n      } else {\n        console.error('Failed to check onboarding status');\n        setHasCompletedOnboarding(false);\n      }\n    } catch (error) {\n      console.error('Error checking onboarding status:', error);\n      setHasCompletedOnboarding(false);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    checkOnboardingStatus();\n  }, [user?.id]);\n\n  const markOnboardingComplete = () => {\n    setHasCompletedOnboarding(true);\n  };\n\n  // Determine if user needs onboarding\n  const needsOnboarding = user && \n    user.isEmailVerified && \n    !user.sippyAccountId && \n    hasCompletedOnboarding === false;\n\n  // Determine if user needs verification (after onboarding)\n  const needsVerification = user && \n    user.isEmailVerified && \n    !user.sippyAccountId && \n    hasCompletedOnboarding === true;\n\n  return {\n    needsOnboarding,\n    needsVerification,\n    hasCompletedOnboarding,\n    isLoading,\n    markOnboardingComplete,\n    refetch: checkOnboardingStatus\n  };\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/hooks/useSippyAccount.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":37,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1228,1231],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1228,1231],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchAccountInfo'. Either include it or remove the dependency array.","line":125,"column":6,"nodeType":"ArrayExpression","endLine":125,"endColumn":23,"suggestions":[{"desc":"Update the dependencies array to be: [fetchAccountInfo, targetAccountId]","fix":{"range":[3899,3916],"text":"[fetchAccountInfo, targetAccountId]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport { AccountInfo } from '@/lib/sippyClient';\nimport { useAuth } from '@/lib/AuthContext';\nimport { toast } from 'sonner';\n\ninterface UseSippyAccountResult {\n  accountInfo: AccountInfo | null;\n  isLoading: boolean;\n  error: string | null;\n  refetch: () => Promise<void>;\n}\n\n/**\n * Parse XML string into a JavaScript object\n */\nfunction parseXmlResponse(xmlString: string): AccountInfo | null {\n  const parser = new DOMParser();\n  const xmlDoc = parser.parseFromString(xmlString, 'text/xml');\n  \n  // Get the struct element which contains all the account data\n  const struct = xmlDoc.getElementsByTagName('struct')[0];\n  if (!struct) return null;\n\n  const result: Partial<AccountInfo> = {};\n  \n  // Iterate through all member elements\n  const members = struct.getElementsByTagName('member');\n  for (let i = 0; i < members.length; i++) {\n    const member = members[i];\n    const name = member.getElementsByTagName('name')[0]?.textContent;\n    const value = member.getElementsByTagName('value')[0];\n    \n    if (!name || !value) continue;\n\n    // Get the first child element of value to determine the type\n    const valueType = value.firstElementChild?.tagName;\n    let parsedValue: any;\n\n    switch (valueType) {\n      case 'int':\n        parsedValue = parseInt(value.textContent || '0', 10);\n        break;\n      case 'double':\n        parsedValue = parseFloat(value.textContent || '0');\n        break;\n      case 'boolean':\n        parsedValue = value.textContent === '1';\n        break;\n      case 'string':\n        parsedValue = value.textContent || '';\n        break;\n      case 'array':\n        const data = value.getElementsByTagName('data')[0];\n        parsedValue = Array.from(data.getElementsByTagName('value')).map(v => v.textContent);\n        break;\n      case 'nil':\n        parsedValue = null;\n        break;\n      default:\n        parsedValue = value.textContent;\n    }\n\n    // Convert field names to match the AccountInfo interface\n    const fieldName = name as keyof AccountInfo;\n    result[fieldName] = parsedValue;\n  }\n\n  return result as AccountInfo;\n}\n\n/**\n * Hook to fetch Sippy account data for a specific account ID\n * @param accountId The Sippy account ID to fetch data for\n */\nexport function useSippyAccount(accountId?: number): UseSippyAccountResult {\n  const [accountInfo, setAccountInfo] = useState<AccountInfo | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n  const { user } = useAuth();\n\n  // Use the current user's Sippy account ID if none is provided\n  const targetAccountId = accountId ?? user?.sippyAccountId;\n\n  const fetchAccountInfo = async () => {\n    // If no account ID is available, return early\n    if (!targetAccountId) {\n      setError('No account ID available');\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      const response = await fetch(`/api/sippy/account/${targetAccountId}`);\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to fetch account data');\n      }\n      \n      const data = await response.json();\n      \n      // Parse the XML response\n      const parsedAccountInfo = parseXmlResponse(data.accountInfo);\n      \n      if (!parsedAccountInfo) {\n        throw new Error('Failed to parse account information');\n      }\n      \n      setAccountInfo(parsedAccountInfo);\n    } catch (err) {\n      console.error('Error fetching Sippy account data:', err);\n      const errorMessage = err instanceof Error ? err.message : 'Failed to fetch account data';\n      setError(errorMessage);\n      toast.error(errorMessage);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Fetch account info on component mount and when targetAccountId changes\n  useEffect(() => {\n    fetchAccountInfo();\n  }, [targetAccountId]);\n\n  return {\n    accountInfo,\n    isLoading,\n    error,\n    refetch: fetchAccountInfo\n  };\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/hooks/useTickets.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":156,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":156,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4872,4875],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4872,4875],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":167,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":167,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5115,5118],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5115,5118],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":174,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":174,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5427,5430],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5427,5430],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback } from 'react';\nimport { \n  Ticket, \n  TicketFilters, \n  TicketListResponse, \n  CreateTicketRequest, \n  UpdateTicketRequest,\n  UploadResponse,\n  TicketAttachment\n} from '@/types/ticket';\n\ninterface UseTicketsReturn {\n  tickets: Ticket[];\n  ticket: Ticket | null;\n  loading: boolean;\n  error: string | null;\n  pagination: TicketListResponse['pagination'] | null;\n  stats: TicketListResponse['stats'] | null;\n  fetchTickets: (filters?: TicketFilters) => Promise<void>;\n  fetchTicket: (id: string) => Promise<void>;\n  createTicket: (data: CreateTicketRequest) => Promise<Ticket | null>;\n  updateTicket: (id: string, data: UpdateTicketRequest) => Promise<boolean>;\n  uploadFiles: (files: FileList) => Promise<TicketAttachment[]>;\n  clearError: () => void;\n  clearTicket: () => void;\n}\n\nexport function useTickets(): UseTicketsReturn {\n  const [tickets, setTickets] = useState<Ticket[]>([]);\n  const [ticket, setTicket] = useState<Ticket | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [pagination, setPagination] = useState<TicketListResponse['pagination'] | null>(null);\n  const [stats, setStats] = useState<TicketListResponse['stats'] | null>(null);\n\n  const clearError = useCallback(() => {\n    setError(null);\n  }, []);\n\n  const clearTicket = useCallback(() => {\n    setTicket(null);\n  }, []);\n\n  const fetchTickets = useCallback(async (filters: TicketFilters = {}) => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const searchParams = new URLSearchParams();\n      \n      Object.entries(filters).forEach(([key, value]) => {\n        if (value !== undefined && value !== null && value !== '') {\n          searchParams.append(key, value.toString());\n        }\n      });\n\n      const response = await fetch(`/api/tickets?${searchParams.toString()}`);\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to fetch tickets');\n      }\n\n      const data: TicketListResponse = await response.json();\n      setTickets(data.tickets);\n      setPagination(data.pagination);\n      setStats(data.stats);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'An error occurred');\n      setTickets([]);\n      setPagination(null);\n      setStats(null);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const fetchTicket = useCallback(async (id: string) => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      console.log('Fetching ticket with ID:', id);\n      const response = await fetch(`/api/tickets/${id}`);\n      \n      console.log('Response status:', response.status);\n      console.log('Response ok:', response.ok);\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        console.log('Error response data:', errorData);\n        throw new Error(errorData.error || 'Failed to fetch ticket');\n      }\n\n      const ticketData: Ticket = await response.json();\n      console.log('Received ticket data:', ticketData);\n      console.log('Setting ticket to state...');\n      setTicket(ticketData);\n      console.log('Ticket set successfully');\n    } catch (err) {\n      console.error('Error in fetchTicket:', err);\n      setError(err instanceof Error ? err.message : 'An error occurred');\n      setTicket(null);\n    } finally {\n      setLoading(false);\n      console.log('fetchTicket finished, loading set to false');\n    }\n  }, []);\n\n  const createTicket = useCallback(async (data: CreateTicketRequest): Promise<Ticket | null> => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch('/api/tickets', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to create ticket');\n      }\n\n      const result = await response.json();\n      return result.ticket;\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'An error occurred');\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const updateTicket = useCallback(async (id: string, data: UpdateTicketRequest): Promise<boolean> => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(`/api/tickets/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        // Create an error object with the code if available\n        const error = new Error(errorData.error || 'Failed to update ticket');\n        if (errorData.code) {\n          (error as any).code = errorData.code;\n        }\n        throw error;\n      }\n\n      // Refresh the current ticket if it's the one being updated\n      if (ticket?._id === id) {\n        await fetchTicket(id);\n      }\n\n      return true;\n    } catch (err: any) {\n      const errorMessage = err instanceof Error ? err.message : 'An error occurred';\n      setError(errorMessage);\n      \n      // Re-throw the error with the code so components can handle specific cases\n      const enhancedError = new Error(errorMessage);\n      if (err.code) {\n        (enhancedError as any).code = err.code;\n      }\n      throw enhancedError;\n    } finally {\n      setLoading(false);\n    }\n  }, [ticket, fetchTicket]);\n\n  const uploadFiles = useCallback(async (files: FileList): Promise<TicketAttachment[]> => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const formData = new FormData();\n      Array.from(files).forEach(file => {\n        formData.append('files', file);\n      });\n\n      const response = await fetch('/api/tickets/upload', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to upload files');\n      }\n\n      const result: UploadResponse = await response.json();\n      return result.files;\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'An error occurred');\n      return [];\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  return {\n    tickets,\n    ticket,\n    loading,\n    error,\n    pagination,\n    stats,\n    fetchTickets,\n    fetchTicket,\n    createTicket,\n    updateTicket,\n    uploadFiles,\n    clearError,\n    clearTicket,\n  };\n}\n\n// Admin version of the hook\nexport function useAdminTickets(): UseTicketsReturn & {\n  assignTicket: (id: string, assignedTo: string) => Promise<boolean>;\n  updateTicketStatus: (id: string, status: string) => Promise<boolean>;\n} {\n  const baseHook = useTickets();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const assignTicket = useCallback(async (id: string, assignedTo: string): Promise<boolean> => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(`/api/admin/tickets/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          action: 'assign_ticket',\n          assignedTo,\n        }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to assign ticket');\n      }\n\n      return true;\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'An error occurred');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const updateTicketStatus = useCallback(async (id: string, status: string): Promise<boolean> => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(`/api/admin/tickets/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          action: 'update_status',\n          status,\n        }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to update ticket status');\n      }\n\n      return true;\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'An error occurred');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  return {\n    ...baseHook,\n    loading: loading || baseHook.loading,\n    error: error || baseHook.error,\n    assignTicket,\n    updateTicketStatus,\n  };\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/hooks/useUserNotificationSettings.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/lib/AuthContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":53,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":53,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":181,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":181,"endColumn":19}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { toast } from 'sonner';\nimport { SippyClient } from './sippyClient';\nimport { UserData } from './authService';\n\ninterface AuthContextType {\n  user: UserData | null;\n  isLoading: boolean;\n  sippyClient: SippyClient | null;\n  login: (email: string, password: string) => Promise<void>;\n  register: (\n    name: string, \n    email: string, \n    password: string, \n    sippyAccountId: number\n  ) => Promise<void>;\n  logout: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<UserData | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [sippyClient, setSippyClient] = useState<SippyClient | null>(null);\n  const router = useRouter();\n\n  // Check for user on component mount\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        const response = await fetch('/api/auth/me', {\n          credentials: 'include',\n        });\n\n        if (response.ok) {\n          const data = await response.json();\n          setUser(data.user);\n          \n          // Initialize SippyClient if credentials are available\n          if (data.sippyCredentials) {\n            const client = new SippyClient({\n              username: data.sippyCredentials.username,\n              password: data.sippyCredentials.password,\n              host: data.sippyCredentials.host,\n            });\n            setSippyClient(client);\n          }\n        }\n      } catch (error) {\n        // User not authenticated or other error, this is normal\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    checkAuth();\n  }, []);\n\n  // Login function\n  const login = async (email: string, password: string) => {\n    try {\n      setIsLoading(true);\n      \n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password }),\n      });\n\n      if (!response.ok) {\n        let errorData;\n        try {\n          errorData = await response.json();\n        } catch {\n          // If response is not JSON, create a generic error\n          errorData = {\n            error: 'Login failed',\n            message: `HTTP ${response.status}: ${response.statusText}`,\n            code: 'REQUEST_FAILED'\n          };\n        }\n        \n        // Throw structured error with status and code\n        const structuredError = new Error(errorData.message || 'Login failed');\n        Object.assign(structuredError, {\n          ...errorData,\n          status: response.status\n        });\n        \n        throw structuredError;\n      }\n\n      const data = await response.json();\n      setUser(data.user);\n      \n      // Initialize SippyClient\n      if (data.sippyCredentials) {\n        const client = new SippyClient({\n          username: data.sippyCredentials.username,\n          password: data.sippyCredentials.password,\n          host: data.sippyCredentials.host,\n        });\n        setSippyClient(client);\n      }\n      \n      toast.success('Logged in successfully');\n      \n      // Navigate to dashboard\n      router.push('/dashboard');\n    } catch (error) {\n      throw error; // Re-throw so LoginForm can handle it\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Register function\n  const register = async (\n    name: string, \n    email: string, \n    password: string, \n    sippyAccountId: number\n  ) => {\n    try {\n      setIsLoading(true);\n      \n      const response = await fetch('/api/auth/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ name, email, password, sippyAccountId }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Registration failed');\n      }\n\n      const data = await response.json();\n      setUser(data.user);\n      \n      // Initialize SippyClient\n      if (data.sippyCredentials) {\n        const client = new SippyClient({\n          username: data.sippyCredentials.username,\n          password: data.sippyCredentials.password,\n          host: data.sippyCredentials.host,\n        });\n        setSippyClient(client);\n      }\n      \n      toast.success('Registered successfully');\n      \n      // Navigate to dashboard\n      router.push('/dashboard');\n    } catch (error) {\n      toast.error(error instanceof Error ? error.message : 'Registration failed');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Logout function\n  const logout = async () => {\n    try {\n      await fetch('/api/auth/logout', {\n        method: 'POST',\n      });\n      \n      setUser(null);\n      setSippyClient(null);\n      router.push('/');\n      toast.success('Logged out successfully');\n    } catch (error) {\n      // Silent error handling for logout\n    }\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        isLoading,\n        sippyClient,\n        login,\n        register,\n        logout,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/lib/BrandingContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":3,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":53},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'cssVariableMap' is assigned a value but never used.","line":73,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":73,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'parseError' is defined but never used.","line":155,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":155,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'textResponse' is assigned a value but never used.","line":157,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":157,"endColumn":27}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';\nimport { IBrandingSettings } from '@/models/BrandingSettings';\nimport { applyAllBranding } from './brandingUtils';\n\n// Default branding settings\nconst defaultBrandingSettings: Partial<IBrandingSettings> = {\n  companyName: 'Sippy Communications',\n  companySlogan: 'Powerful Communication Management Platform',\n  primaryColor: '#7c3aed',\n  secondaryColor: '#a855f7',\n  accentColor: '#06b6d4',\n  backgroundColor: '#ffffff',\n  textColor: '#1f2937',\n  surfaceColor: '#f9fafb',\n  \n  // Dark Mode Colors\n  darkPrimaryColor: '#a78bfa',     // violet-400 (lighter for dark mode)\n  darkSecondaryColor: '#c084fc',   // purple-400 (lighter for dark mode)\n  darkAccentColor: '#22d3ee',      // cyan-400 (lighter for dark mode)\n  darkBackgroundColor: '#0f172a',  // slate-900\n  darkTextColor: '#f1f5f9',        // slate-100\n  darkSurfaceColor: '#1e293b',     // slate-800\n  \n  gradientStartColor: '#7c3aed',\n  gradientMiddleColor: '#a855f7',\n  gradientEndColor: '#3b82f6',\n  \n  // Auth Form Background Colors\n  authFormBackgroundColor: '#ffffff',\n  darkAuthFormBackgroundColor: '#0f172a',\n  \n  fontFamily: 'Inter, sans-serif',\n  headingFontFamily: 'Inter, sans-serif',\n  borderRadius: '0.75rem',\n  shadowIntensity: 'medium' as const,\n  enableAnimations: true,\n  enableGlassMorphism: true,\n  enableGradientBackground: true,\n  logoAltText: 'Company Logo',\n  customCss: '',\n};\n\n// Branding context interface\ninterface BrandingContextType {\n  settings: Partial<IBrandingSettings>;\n  isLoading: boolean;\n  error: string | null;\n  refreshSettings: () => Promise<void>;\n  updateSettings: (updates: Partial<IBrandingSettings>) => Promise<void>;\n  applyBrandingToPage: () => void;\n}\n\n// Create context\nconst BrandingContext = createContext<BrandingContextType | undefined>(undefined);\n\n// Custom hook to use branding context\nexport const useBranding = (): BrandingContextType => {\n  const context = useContext(BrandingContext);\n  if (!context) {\n    throw new Error('useBranding must be used within a BrandingProvider');\n  }\n  return context;\n};\n\n// Branding provider props\ninterface BrandingProviderProps {\n  children: ReactNode;\n}\n\n// CSS variable names mapping\nconst cssVariableMap = {\n  primaryColor: '--brand-primary',\n  secondaryColor: '--brand-secondary',\n  accentColor: '--brand-accent',\n  backgroundColor: '--brand-background',\n  textColor: '--brand-text',\n  surfaceColor: '--brand-surface',\n  gradientStartColor: '--brand-gradient-start',\n  gradientMiddleColor: '--brand-gradient-middle',\n  gradientEndColor: '--brand-gradient-end',\n  fontFamily: '--brand-font-family',\n  headingFontFamily: '--brand-heading-font-family',\n  borderRadius: '--brand-border-radius',\n};\n\n// Branding provider component\nexport const BrandingProvider: React.FC<BrandingProviderProps> = ({ children }) => {\n  const [settings, setSettings] = useState<Partial<IBrandingSettings>>(defaultBrandingSettings);\n  const [isLoading, setIsLoading] = useState(true); // Show loading until branding is ready\n  const [error, setError] = useState<string | null>(null);\n\n  // Apply branding immediately after mount\n  React.useLayoutEffect(() => {\n    // Apply default branding synchronously before any render\n    applyAllBranding(defaultBrandingSettings);\n    \n    // Fetch actual branding settings\n    fetchSettings();\n  }, []);\n\n  // Fetch branding settings from API\n  const fetchSettings = async (): Promise<void> => {\n    try {\n      setError(null);\n\n      const response = await fetch('/api/settings/branding');\n      \n      if (!response.ok) {\n        throw new Error('Failed to fetch branding settings');\n      }\n\n      const data = await response.json();\n      const newSettings = { ...defaultBrandingSettings, ...data };\n      \n      // Apply settings immediately when received\n      setSettings(newSettings);\n      applyAllBranding(newSettings);\n      \n      // Add minimal loading time to ensure smooth experience\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Unknown error');\n      // Use default settings on error\n      setSettings(defaultBrandingSettings);\n      applyAllBranding(defaultBrandingSettings);\n      \n      // Add minimum loading time even on error\n      await new Promise(resolve => setTimeout(resolve, 500));\n    } finally {\n      setIsLoading(false); // Hide loading when done\n    }\n  };\n\n  // Update branding settings\n  const updateSettings = async (updates: Partial<IBrandingSettings>): Promise<void> => {\n    try {\n      setError(null);\n\n      const response = await fetch('/api/settings/branding', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(updates),\n      });\n\n      let responseData;\n      \n      // Try to parse JSON response\n      try {\n        responseData = await response.json();\n      } catch (parseError) {\n        // If JSON parsing fails, get the text response for debugging\n        const textResponse = await response.text();\n        \n        throw new Error('Server returned invalid response format. Please check the server logs.');\n      }\n\n      if (!response.ok) {\n        throw new Error(responseData.error || `Server error: ${response.status}`);\n      }\n\n      // Update local state\n      setSettings(prev => ({ ...prev, ...updates }));\n      \n      // Apply changes immediately\n      applyBrandingToPage();\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Unknown error';\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    }\n  };\n\n  // Apply branding to page via CSS variables\n  const applyBrandingToPage = (): void => {\n    applyAllBranding(settings);\n  };\n\n  // Refresh settings\n  const refreshSettings = async (): Promise<void> => {\n    await fetchSettings();\n  };\n\n  const contextValue: BrandingContextType = {\n    settings,\n    isLoading,\n    error,\n    refreshSettings,\n    updateSettings,\n    applyBrandingToPage,\n  };\n\n  return (\n    <BrandingContext.Provider value={contextValue}>\n      {children}\n    </BrandingContext.Provider>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/lib/adminNotifications.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/lib/apiErrorHandler.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[324,327],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[324,327],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":101,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2888,2891],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2888,2891],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":121,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":121,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3457,3460],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3457,3460],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":164,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":164,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4539,4542],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4539,4542],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { toast } from 'sonner';\n\nexport interface ApiError {\n  error: string;\n  message: string;\n  code?: string;\n  status?: number;\n}\n\nexport interface ApiErrorResponse {\n  error: string;\n  message?: string;\n  code?: string;\n}\n\n/**\n * Handle API errors with user-friendly messages\n */\nexport function handleApiError(error: any, customMessage?: string): void {\n  console.error('API Error:', error);\n\n  let errorMessage = customMessage || 'An unexpected error occurred';\n  let errorTitle = 'Error';\n\n  // Handle fetch errors or network issues\n  if (error instanceof TypeError && error.message.includes('fetch')) {\n    errorMessage = 'Network error. Please check your connection and try again.';\n    errorTitle = 'Connection Error';\n  }\n  // Handle structured API error responses\n  else if (error?.status || error?.code) {\n    const apiError = error as ApiError;\n    \n    switch (apiError.status || apiError.code) {\n      case 401:\n      case 'AUTH_REQUIRED':\n        errorMessage = apiError.message || 'You need to be logged in to access this feature';\n        errorTitle = 'Authentication Required';\n        // Optionally redirect to login after showing error\n        setTimeout(() => {\n          if (typeof window !== 'undefined') {\n            window.location.href = '/';\n          }\n        }, 2000);\n        break;\n        \n      case 403:\n      case 'FORBIDDEN':\n        errorMessage = apiError.message || 'You don\\'t have permission to perform this action';\n        errorTitle = 'Access Denied';\n        break;\n        \n      case 400:\n      case 'BAD_REQUEST':\n        errorMessage = apiError.message || 'Invalid request. Please check your input and try again.';\n        errorTitle = 'Invalid Request';\n        break;\n        \n      case 404:\n      case 'NOT_FOUND':\n        errorMessage = apiError.message || 'The requested resource was not found';\n        errorTitle = 'Not Found';\n        break;\n        \n      case 422:\n      case 'VALIDATION_ERROR':\n        errorMessage = apiError.message || 'Please check your input and try again';\n        errorTitle = 'Validation Error';\n        break;\n        \n      case 500:\n      case 'INTERNAL_ERROR':\n        errorMessage = apiError.message || 'A server error occurred. Please try again later.';\n        errorTitle = 'Server Error';\n        break;\n        \n      default:\n        errorMessage = apiError.message || apiError.error || errorMessage;\n        break;\n    }\n  }\n  // Handle error objects with message property\n  else if (error?.message) {\n    errorMessage = error.message;\n  }\n  // Handle string errors\n  else if (typeof error === 'string') {\n    errorMessage = error;\n  }\n\n  // Show toast notification\n  toast.error(errorMessage, {\n    description: errorTitle !== 'Error' ? errorTitle : undefined,\n    duration: 5000,\n  });\n}\n\n/**\n * Wrapper for fetch requests with error handling\n */\nexport async function apiRequest<T = any>(\n  url: string, \n  options: RequestInit = {}\n): Promise<T> {\n  try {\n    const response = await fetch(url, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n      ...options,\n    });\n\n    // Handle successful responses\n    if (response.ok) {\n      // Handle responses that might not have JSON content\n      const contentType = response.headers.get('content-type');\n      if (contentType && contentType.includes('application/json')) {\n        return await response.json();\n      } else {\n        return response as any;\n      }\n    }\n\n    // Handle error responses\n    let errorData: ApiErrorResponse;\n    try {\n      errorData = await response.json();\n    } catch {\n      // If response is not JSON, create a generic error\n      errorData = {\n        error: 'Request failed',\n        message: `HTTP ${response.status}: ${response.statusText}`,\n      };\n    }\n\n    // Create structured error object\n    const apiError: ApiError = {\n      error: errorData.error,\n      message: errorData.message || errorData.error,\n      code: errorData.code,\n      status: response.status,\n    };\n\n    throw apiError;\n  } catch (error) {\n    // If the error is already an ApiError, re-throw it\n    if (error && typeof error === 'object' && 'status' in error) {\n      throw error;\n    }\n\n    // Handle network errors or other unexpected errors\n    throw {\n      error: 'Network error',\n      message: 'Unable to connect to the server. Please check your connection.',\n      code: 'NETWORK_ERROR',\n    } as ApiError;\n  }\n}\n\n/**\n * Handle authentication errors specifically\n */\nexport function handleAuthError(error: any): { title: string; message: string; description: string } {\n  let title = 'Authentication Error';\n  let message = 'Authentication failed';\n  let description = 'Please try again or contact support if the problem persists.';\n  \n  if (error?.status === 401 || error?.code === 'INVALID_CREDENTIALS') {\n    title = 'Invalid Credentials';\n    message = 'Invalid email or password';\n    description = 'Please check your credentials and try again. Make sure your email and password are correct.';\n  } else if (error?.code === 'USER_NOT_FOUND') {\n    title = 'Account Not Found';\n    message = 'No account found with this email address';\n    description = 'Please check your email address or create a new account if you don\\'t have one yet.';\n  } else if (error?.code === 'MISSING_CREDENTIALS') {\n    title = 'Missing Information';\n    message = 'Please enter both email and password';\n    description = 'Both email and password fields are required to sign in.';\n  } else if (error?.code === 'INVALID_EMAIL') {\n    title = 'Invalid Email Format';\n    message = 'Please enter a valid email address';\n    description = 'The email address format appears to be incorrect. Please check and try again.';\n  } else if (error?.message) {\n    message = error.message;\n  }\n\n  return { title, message, description };\n}\n\n/**\n * Show success message\n */\nexport function showSuccess(message: string, description?: string): void {\n  toast.success(message, {\n    description,\n    duration: 4000,\n  });\n}\n\n/**\n * Show info message  \n */\nexport function showInfo(message: string, description?: string): void {\n  toast.info(message, {\n    description,\n    duration: 4000,\n  });\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/lib/authService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":55,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1239,1242],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1239,1242],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use server';\n\nimport jwt from 'jsonwebtoken';\nimport { cookies } from 'next/headers';\nimport User, { UserRole } from '@/models/User';\nimport { connectToDatabase } from './db';\nimport { SippyClient, SippyCredentials } from './sippyClient';\n\n// Constants\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';\nconst JWT_EXPIRES_IN = '7d';\nconst COOKIE_NAME = 'auth_token';\n\n// Interface for registration data\nexport interface RegisterData {\n  name: string;\n  email: string;\n  password: string;\n  sippyAccountId: number;\n  role?: UserRole;\n}\n\n// Interface for login data\nexport interface LoginData {\n  email: string;\n  password: string;\n}\n\n// Interface for user data returned to the client\nexport interface UserData {\n  id: string;\n  name: string;\n  email: string;\n  role: UserRole;\n  sippyAccountId?: number;\n  isEmailVerified: boolean;\n  isImpersonating?: boolean;\n  originalUserId?: string;\n}\n\n// Interface for authentication result\nexport interface AuthResult {\n  user: UserData;\n  token: string;\n}\n\n// Create a JWT token\nconst createToken = (userId: string): string => {\n  return jwt.sign({ userId }, JWT_SECRET, {\n    expiresIn: JWT_EXPIRES_IN,\n  });\n};\n\n// Convert user document to safe user data\nconst sanitizeUser = (user: any): UserData => {\n  return {\n    id: typeof user._id === 'object' && user._id !== null ? user._id.toString() : String(user._id),\n    name: user.name,\n    email: user.email,\n    role: user.role,\n    sippyAccountId: user.sippyAccountId,\n    isEmailVerified: user.isEmailVerified,\n  };\n};\n\n// Register a new user\nexport const registerUser = async (data: RegisterData): Promise<AuthResult> => {\n  await connectToDatabase();\n\n  // Check if user already exists\n  const existingUser = await User.findOne({ email: data.email });\n  if (existingUser) {\n    throw new Error('User already exists');\n  }\n\n  // Create new user\n  const user = await User.create({\n    name: data.name,\n    email: data.email,\n    password: data.password,\n    sippyAccountId: data.sippyAccountId,\n    role: data.role || UserRole.CLIENT,\n  });\n\n  // Create token\n  const userId = typeof user._id === 'object' && user._id !== null ? \n    user._id.toString() : String(user._id);\n  const token = createToken(userId);\n\n  return {\n    user: sanitizeUser(user),\n    token,\n  };\n};\n\n// Login a user\nexport const loginUser = async (data: LoginData): Promise<AuthResult> => {\n  await connectToDatabase();\n\n  // Find user by email with password\n  const user = await User.findByEmail(data.email);\n  if (!user) {\n    throw new Error('Invalid credentials');\n  }\n\n  // Check password\n  const isPasswordValid = await user.comparePassword(data.password);\n  if (!isPasswordValid) {\n    throw new Error('Invalid credentials');\n  }\n\n  // Check if email is verified\n  if (!user.isEmailVerified) {\n    throw new Error('Email not verified. Please check your email for verification code.');\n  }\n\n  // Create token\n  const userId = typeof user._id === 'object' && user._id !== null ? \n    user._id.toString() : String(user._id);\n  const token = createToken(userId);\n\n  return {\n    user: sanitizeUser(user),\n    token,\n  };\n};\n\n// Get current user from token\nexport const getCurrentUser = async (): Promise<UserData | null> => {\n  try {\n    await connectToDatabase();\n\n    // Get token from cookies\n    const cookieStore = await cookies();\n    const token = cookieStore.get(COOKIE_NAME)?.value;\n    \n    if (!token) {\n      return null;\n    }\n\n    // Verify token\n    const decoded = jwt.verify(token, JWT_SECRET) as { \n      userId: string;\n      originalUserId?: string;\n      isImpersonating?: boolean;\n    };\n    \n    // Get user by ID\n    const user = await User.findById(decoded.userId);\n    if (!user) {\n      return null;\n    }\n\n    // Create user data with impersonation info if applicable\n    const userData = sanitizeUser(user);\n    \n    // Add impersonation data if present in token\n    if (decoded.isImpersonating && decoded.originalUserId) {\n      userData.isImpersonating = true;\n      userData.originalUserId = decoded.originalUserId;\n    }\n\n    return userData;\n  } catch {\n    return null;\n  }\n};\n\n// Get Sippy client for a user\nexport const getSippyClientForUser = async (\n  userId: string, \n  credentials: SippyCredentials\n): Promise<SippyClient> => {\n  await connectToDatabase();\n\n  // Get user\n  const user = await User.findById(userId);\n  if (!user) {\n    throw new Error('User not found');\n  }\n\n  // Create Sippy client\n  return new SippyClient(credentials);\n};\n\n// Set authentication cookie\nexport const setAuthCookie = async (token: string): Promise<void> => {\n  const cookieStore = await cookies();\n  cookieStore.set(COOKIE_NAME, token, {\n    httpOnly: true,\n    secure: process.env.NODE_ENV === 'production',\n    maxAge: 7 * 24 * 60 * 60, // 7 days\n    path: '/',\n  });\n};\n\n// Clear authentication cookie\nexport const clearAuthCookie = async (): Promise<void> => {\n  const cookieStore = await cookies();\n  cookieStore.delete(COOKIE_NAME);\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/lib/brandingUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/lib/db.ts","messages":[{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":13,"column":3,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":13,"endColumn":46}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import mongoose from 'mongoose';\n\nconst MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/sippy-dashboard';\n\n// Define the mongoose connection cache interface\ninterface MongooseConnection {\n  conn: typeof mongoose | null;\n  promise: Promise<typeof mongoose> | null;\n}\n\n// Declare the global variable for mongoose connection\ndeclare global {\n  var mongooseConnection: MongooseConnection;\n}\n\n// Initialize the global connection cache\nif (!global.mongooseConnection) {\n  global.mongooseConnection = {\n    conn: null,\n    promise: null,\n  };\n}\n\nexport async function connectToDatabase(): Promise<typeof mongoose> {\n  if (global.mongooseConnection.conn) {\n    return global.mongooseConnection.conn;\n  }\n\n  if (!global.mongooseConnection.promise) {\n    const opts = {\n      bufferCommands: false,\n    };\n\n    global.mongooseConnection.promise = mongoose.connect(MONGODB_URI, opts).then(() => {\n      console.log('Connected to MongoDB');\n      return mongoose;\n    });\n  }\n\n  try {\n    const connectedMongoose = await global.mongooseConnection.promise;\n    global.mongooseConnection.conn = connectedMongoose;\n  } catch (e) {\n    global.mongooseConnection.promise = null;\n    throw e;\n  }\n\n  return global.mongooseConnection.conn as typeof mongoose;\n}\n\nexport default connectToDatabase; ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/lib/defaultDashboardPreferences.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/lib/emailLogger.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1052,1055],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1052,1055],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1071,1074],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1071,1074],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":33,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1353,1356],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1353,1356],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":72,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2684,2687],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2684,2687],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":92,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3173,3176],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3173,3176],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":134,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":134,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4140,4143],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4140,4143],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { connectToDatabase } from '@/lib/db';\nimport { NotificationLog as NotificationLogModel } from '@/models/NotificationLog';\n\nexport interface EmailLogData {\n  userId: string;\n  userEmail: string;\n  userName: string;\n  sippyAccountId?: number;\n  notificationType: 'low_balance' | 'zero_balance' | 'negative_balance' | 'email_verification' | 'account_activation' | 'high_cost_alert' | 'low_asr_alert' | 'extreme_usage_alert' | 'payment_success_gateway' | 'payment_success_admin' | 'payment_debit_admin' | 'password_reset' | 'number_purchase_single' | 'number_purchase_bulk' | 'number_assignment' | 'number_unassignment' | 'backorder_approved' | 'backorder_rejected' | 'cancellation_approved' | 'cancellation_rejected' | 'admin_user_purchase_single' | 'admin_user_purchase_bulk' | 'admin_backorder_request' | 'admin_cancellation_request';\n  emailSubject: string;\n  emailBody: string;\n  \n  // Optional fields based on notification type\n  balanceAmount?: number;\n  thresholdAmount?: number;\n  currency?: string;\n  otpCode?: string;\n  activationData?: any;\n  alertData?: any;\n  paymentData?: {\n    amount: number;\n    currency: string;\n    paymentMethod?: string;\n    transactionId?: string;\n    fees?: {\n      processingFee?: number;\n      fixedFee?: number;\n    };\n    gateway?: string;\n    notes?: string;\n    processedBy?: string;\n  };\n  metadata?: any; // Add metadata field for password reset and other flexible data\n}\n\nexport interface EmailLogResponse {\n  logId: string;\n  success: boolean;\n  error?: string;\n}\n\n/**\n * Create a notification log entry for an email that is about to be sent\n */\nexport async function createEmailLog(data: EmailLogData): Promise<EmailLogResponse> {\n  try {\n    await connectToDatabase();\n    \n    const logEntry = new NotificationLogModel({\n      userId: data.userId,\n      userEmail: data.userEmail,\n      userName: data.userName,\n      sippyAccountId: data.sippyAccountId,\n      notificationType: data.notificationType,\n      emailSubject: data.emailSubject,\n      emailBody: data.emailBody,\n      status: 'pending',\n      \n      // Optional fields\n      ...(data.balanceAmount !== undefined && { balanceAmount: data.balanceAmount }),\n      ...(data.thresholdAmount !== undefined && { thresholdAmount: data.thresholdAmount }),\n      ...(data.currency && { currency: data.currency }),\n      ...(data.otpCode && { otpCode: data.otpCode }),\n      ...(data.activationData && { activationData: data.activationData }),\n      ...(data.alertData && { alertData: data.alertData }),\n      ...(data.paymentData && { paymentData: data.paymentData }),\n    });\n    \n    const savedLog = await logEntry.save();\n    \n    return {\n      logId: (savedLog._id as any).toString(),\n      success: true\n    };\n  } catch (error) {\n    console.error('Error creating email log:', error);\n    return {\n      logId: '',\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    };\n  }\n}\n\n/**\n * Update a notification log entry when email is successfully sent\n */\nexport async function markEmailAsSent(logId: string, fromEmail?: string): Promise<boolean> {\n  try {\n    await connectToDatabase();\n    \n    const updateData: any = {\n      status: 'sent',\n      sentAt: new Date()\n    };\n    \n    if (fromEmail) {\n      updateData.fromEmail = fromEmail;\n    }\n    \n    await NotificationLogModel.findByIdAndUpdate(logId, updateData);\n    \n    return true;\n  } catch (error) {\n    console.error('Error marking email as sent:', error);\n    return false;\n  }\n}\n\n/**\n * Update a notification log entry when email fails to send\n */\nexport async function markEmailAsFailed(logId: string, errorMessage: string): Promise<boolean> {\n  try {\n    await connectToDatabase();\n    \n    await NotificationLogModel.findByIdAndUpdate(logId, {\n      status: 'failed',\n      errorMessage: errorMessage\n    });\n    \n    return true;\n  } catch (error) {\n    console.error('Error marking email as failed:', error);\n    return false;\n  }\n}\n\n/**\n * Log and send email in one operation with automatic status tracking\n */\nexport async function logAndSendEmail(\n  data: EmailLogData, \n  sendEmailFunction: () => Promise<any>\n): Promise<boolean> {\n  const logResult = await createEmailLog(data);\n  \n  if (!logResult.success) {\n    console.error('Failed to create email log:', logResult.error);\n    return false;\n  }\n  \n  try {\n    const emailResult = await sendEmailFunction();\n    \n    // Extract fromEmail from the email service response\n    let fromEmail: string | undefined;\n    if (emailResult && typeof emailResult === 'object') {\n      // Check if it's an SMTP service response with accountUsed\n      if (emailResult.accountUsed && emailResult.accountUsed.fromEmail) {\n        fromEmail = emailResult.accountUsed.fromEmail;\n      }\n      // Check if it's a direct response with fromEmail\n      else if (emailResult.fromEmail) {\n        fromEmail = emailResult.fromEmail;\n      }\n    }\n    \n    await markEmailAsSent(logResult.logId, fromEmail);\n    return true;\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n    await markEmailAsFailed(logResult.logId, errorMessage);\n    throw error; // Re-throw to maintain existing error handling\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/lib/emailService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/lib/emailTemplates/accountActivation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/lib/emailTemplates/authNotifications.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/lib/emailTemplates/balanceNotifications.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/lib/emailTemplates/emailVerification.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/lib/emailTemplates/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/lib/emailTemplates/kpiAlerts.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'IKpiSettings' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'KpiData' is defined but never used.","line":4,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'formatCurrency' is assigned a value but never used.","line":327,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":327,"endColumn":23}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { IKpiSettings } from '@/models/KpiSettings';\nimport juice from 'juice';\n\ninterface KpiData {\n  costOfDay: number;\n  asr: number;\n  totalMinutes: number;\n  totalCalls: number;\n  successfulCalls: number;\n  failedCalls: number;\n  currency: string;\n}\n\ninterface HighCostAlertData {\n  costOfDay: number;\n  threshold: number;\n  currency: string;\n  totalCalls: number;\n  avgCostPerCall: number;\n  date: string;\n  userName: string;\n  userEmail: string;\n  branding: {\n    companyName: string;\n    companySlogan?: string;\n    primaryColor: string;\n    fontFamily: string;\n  };\n}\n\ninterface LowAsrAlertData {\n  asr: number;\n  threshold: number;\n  totalCalls: number;\n  successfulCalls: number;\n  failedCalls: number;\n  date: string;\n  userName: string;\n  userEmail: string;\n  branding: {\n    companyName: string;\n    companySlogan?: string;\n    primaryColor: string;\n    fontFamily: string;\n  };\n}\n\ninterface ExtremeUsageAlertData {\n  totalMinutes: number;\n  threshold: number;\n  totalCalls: number;\n  avgMinutesPerCall: number;\n  date: string;\n  userName: string;\n  userEmail: string;\n  branding: {\n    companyName: string;\n    companySlogan?: string;\n    primaryColor: string;\n    fontFamily: string;\n  };\n}\n\nexport interface KpiAlertData {\n  account: {\n    name: string;\n    email: string;\n    sippyAccountId: number;\n  };\n  alertType: 'high_cost' | 'low_asr' | 'extreme_usage';\n  threshold: number;\n  currentValue: number;\n  timeframe: string;\n  branding: {\n    companyName: string;\n    companySlogan?: string;\n    primaryColor: string;\n    fontFamily: string;\n  };\n}\n\nexport function generateHighCostAlertEmail(data: HighCostAlertData): { subject: string; html: string; text: string } {\n  const formatCurrency = (amount: number, currency: string) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: currency,\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 4,\n    }).format(amount);\n  };\n\n  const baseUrl = process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000';\n  const subject = `🚨 High Cost Alert - Daily spending exceeded threshold`;\n\n  const rawHtml = `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta name=\"format-detection\" content=\"telephone=no\">\n  <meta name=\"x-apple-disable-message-reformatting\">\n  <!--[if !mso]><!-->\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <!--<![endif]-->\n  <title>High Cost Alert</title>\n  <style>\n    /* Minimal reset for email clients */\n    body, table, td, p, a, li, blockquote {\n      -webkit-text-size-adjust: 100%;\n      -ms-text-size-adjust: 100%;\n    }\n    \n    table, td {\n      mso-table-lspace: 0pt;\n      mso-table-rspace: 0pt;\n    }\n    \n    img {\n      -ms-interpolation-mode: bicubic;\n      border: 0;\n      height: auto;\n      line-height: 100%;\n      outline: none;\n      text-decoration: none;\n    }\n\n    /* Mobile responsive styles */\n    @media (max-width: 600px) {\n      .mobile-full-width {\n        width: 100% !important;\n        max-width: 100% !important;\n      }\n      .mobile-padding {\n        padding: 12px !important;\n      }\n      .mobile-stack {\n        display: block !important;\n        width: 100% !important;\n        float: none !important;\n      }\n    }\n  </style>\n</head>\n<body style=\"margin:0;padding:0;background-color:#f1f5f9;font-family:Arial,sans-serif;width:100%;min-width:100%;\">\n  \n  <!-- Hidden preheader -->\n  <div style=\"display:none;font-size:1px;color:#fefefe;line-height:1px;max-height:0px;max-width:0px;opacity:0;overflow:hidden;\">\n    High cost alert: Daily spending exceeded threshold - ${formatCurrency(data.costOfDay, data.currency)}\n  </div>\n  \n  <!-- Email wrapper -->\n  <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"margin:0;padding:0;background-color:#f1f5f9;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n    <tr>\n      <td align=\"center\" style=\"padding:20px 10px;\">\n        \n        <!-- Main email container -->\n        <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"600\" class=\"mobile-full-width\" style=\"max-width:600px;background-color:#ffffff;border-radius:16px;box-shadow:0 4px 12px rgba(0,0,0,0.1);overflow:hidden;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n          \n          <!-- Header -->\n          <tr>\n            <td style=\"padding:0 20px 16px;\">\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:#dc2626;border-radius:12px;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                <tr>\n                  <td align=\"center\" style=\"padding:24px 16px;\">\n                    <div style=\"font-size:48px;margin-bottom:10px;line-height:1;\">🚨</div>\n                    <h1 style=\"margin:0;color:#ffffff;font-size:24px;font-weight:700;line-height:1.2;font-family:Arial,sans-serif;\">High Cost Alert</h1>\n                    <p style=\"margin:6px 0 0;color:#ffffff;opacity:0.9;font-size:14px;line-height:1.3;font-family:Arial,sans-serif;\">Daily spending threshold exceeded</p>\n                  </td>\n                </tr>\n              </table>\n            </td>\n          </tr>\n\n          <!-- Main content -->\n          <tr>\n            <td style=\"padding:0 20px 24px;\">\n              \n              <!-- Greeting -->\n              <h2 style=\"margin:0 0 16px 0;font-size:18px;color:#1e293b;font-weight:600;line-height:1.3;font-family:Arial,sans-serif;\">Hello ${data.userName},</h2>\n              \n              <!-- Message -->\n              <p style=\"margin:0 0 20px 0;font-size:16px;line-height:1.5;color:#475569;font-family:Arial,sans-serif;\">Your daily call costs have exceeded the configured high-cost threshold. Immediate attention may be required to review your usage patterns.</p>\n              \n              <!-- Cost Alert Card -->\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:#ffffff;border:3px solid #dc2626;border-radius:12px;margin:24px 0;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                <tr>\n                  <td align=\"center\" style=\"padding:24px 16px;\">\n                    <p style=\"margin:0 0 8px 0;font-size:12px;font-weight:700;color:#64748b;letter-spacing:0.5px;text-transform:uppercase;line-height:1.2;font-family:Arial,sans-serif;\">TOTAL COST TODAY (${data.date})</p>\n                    <p style=\"margin:0;font-size:32px;font-weight:800;color:#dc2626;line-height:1;font-family:Arial,sans-serif;\">${formatCurrency(data.costOfDay, data.currency)}</p>\n                  </td>\n                </tr>\n              </table>\n              \n              <!-- Threshold Warning -->\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:#ffffff;border:3px solid #fbbf24;border-radius:12px;margin:20px 0;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                <tr>\n                  <td style=\"padding:16px;\">\n                    <p style=\"margin:0;font-size:14px;font-weight:700;color:#92400e;line-height:1.4;font-family:Arial,sans-serif;\">\n                      <strong style=\"font-weight:700;\">⚠️ Threshold Exceeded:</strong> Your daily cost of ${formatCurrency(data.costOfDay, data.currency)} has surpassed the high-cost threshold of ${formatCurrency(data.threshold, data.currency)}.\n                    </p>\n                  </td>\n                </tr>\n              </table>\n              \n              <!-- Statistics -->\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"margin:20px 0;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                <tr>\n                  <!-- Total Calls -->\n                  <td width=\"48%\" style=\"padding-right:8px;vertical-align:top;\" class=\"mobile-stack\">\n                    <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:#ffffff;border:3px solid #e2e8f0;border-radius:12px;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                      <tr>\n                        <td align=\"center\" style=\"padding:16px 12px;\">\n                          <p style=\"margin:0 0 6px 0;font-size:11px;font-weight:700;color:#64748b;letter-spacing:0.5px;text-transform:uppercase;line-height:1.2;font-family:Arial,sans-serif;\">TOTAL CALLS</p>\n                          <p style=\"margin:0;font-size:20px;font-weight:700;color:#374151;line-height:1;font-family:Arial,sans-serif;\">${data.totalCalls.toLocaleString()}</p>\n                        </td>\n                      </tr>\n                    </table>\n                  </td>\n                  \n                  <!-- Avg Cost per Call -->\n                  <td width=\"48%\" style=\"padding-left:8px;vertical-align:top;\" class=\"mobile-stack\">\n                    <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:#ffffff;border:3px solid #e2e8f0;border-radius:12px;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                      <tr>\n                        <td align=\"center\" style=\"padding:16px 12px;\">\n                          <p style=\"margin:0 0 6px 0;font-size:11px;font-weight:700;color:#64748b;letter-spacing:0.5px;text-transform:uppercase;line-height:1.2;font-family:Arial,sans-serif;\">AVG COST/CALL</p>\n                          <p style=\"margin:0;font-size:20px;font-weight:700;color:#374151;line-height:1;font-family:Arial,sans-serif;\">${formatCurrency(data.avgCostPerCall, data.currency)}</p>\n                        </td>\n                      </tr>\n                    </table>\n                  </td>\n                </tr>\n              </table>\n              \n              <!-- Recommendations -->\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:#ffffff;border:3px solid #e2e8f0;border-radius:12px;margin:20px 0;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                <tr>\n                  <td style=\"padding:16px;\">\n                    <h3 style=\"margin:0 0 12px 0;font-size:16px;font-weight:700;color:#1e293b;line-height:1.3;font-family:Arial,sans-serif;\">Recommended Actions:</h3>\n                    <ul style=\"margin:0;padding-left:20px;color:#475569;font-size:14px;line-height:1.6;font-family:Arial,sans-serif;\">\n                      <li style=\"margin-bottom:4px;\">Review your call patterns and destinations</li>\n                      <li style=\"margin-bottom:4px;\">Check for any unusual or unexpected call activity</li>\n                      <li style=\"margin-bottom:4px;\">Consider adjusting your calling strategy if needed</li>\n                      <li>Monitor costs throughout the day to prevent further overages</li>\n                    </ul>\n                  </td>\n                </tr>\n              </table>\n              \n              <!-- Call to Action Button -->\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" align=\"center\" style=\"margin:20px auto;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                <tr>\n                  <td align=\"center\" style=\"border-radius:12px;background-color:#f59e0b;box-shadow:0 4px 12px rgba(0,0,0,0.15);\">\n                    <a href=\"${baseUrl}/dashboard\" style=\"display:inline-block;padding:16px 32px;font-size:16px;font-weight:700;color:#ffffff;text-decoration:none;border-radius:12px;text-align:center;min-width:160px;line-height:1.2;font-family:Arial,sans-serif;\">\n                      <font color=\"#ffffff\">View Dashboard</font>\n                    </a>\n                  </td>\n                </tr>\n              </table>\n              \n            </td>\n          </tr>\n\n          <!-- Footer -->\n          <tr>\n            <td style=\"padding:20px;background-color:#f8fafc;border-top:1px solid #e2e8f0;\">\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                <tr>\n                  <td align=\"center\">\n                    <p style=\"margin:0 0 6px;font-size:11px;color:#94a3b8;line-height:1.3;font-family:Arial,sans-serif;\">This is an automated alert from your system.</p>\n                    <p style=\"margin:0;font-size:11px;color:#94a3b8;line-height:1.3;font-family:Arial,sans-serif;\">You can adjust notification settings in your admin panel.</p>\n                  </td>\n                </tr>\n              </table>\n            </td>\n          </tr>\n          \n        </table>\n      </td>\n    </tr>\n  </table>\n</body>\n</html>`;\n\n  // Use juice to inline CSS while preserving media queries\n  const html = juice(rawHtml, {\n    removeStyleTags: false,   // keeps the <style> block for the media query\n    applyStyleTags: true,     // applies styles from <style> tags to elements\n    preserveMediaQueries: true, // keeps @media rules intact\n    webResources: {\n      relativeTo: process.cwd()\n    }\n  });\n\n  const text = `\nHIGH COST ALERT - Daily spending exceeded threshold\n\nHello ${data.userName},\n\nYour daily call costs have exceeded the configured high-cost threshold.\n\nCOST DETAILS:\n- Total Cost Today (${data.date}): ${formatCurrency(data.costOfDay, data.currency)}\n- Threshold: ${formatCurrency(data.threshold, data.currency)}\n- Total Calls: ${data.totalCalls.toLocaleString()}\n- Average Cost per Call: ${formatCurrency(data.avgCostPerCall, data.currency)}\n\nRECOMMENDED ACTIONS:\n- Review your call patterns and destinations\n- Check for any unusual or unexpected call activity\n- Consider adjusting your calling strategy if needed\n- Monitor costs throughout the day to prevent further overages\n\nView your dashboard: ${baseUrl}/dashboard\n\nThis is an automated alert from your system.\nYou can adjust notification settings in your admin panel.\n  `;\n\n  return { subject, html, text };\n}\n\nexport function generateLowAsrAlertEmail(data: LowAsrAlertData): { subject: string; html: string; text: string } {\n  const baseUrl = process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000';\n  const subject = `⚠️ Low Success Rate Alert - Call quality needs attention`;\n\n  const formatCurrency = (amount: number, currency: string) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: currency,\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 4,\n    }).format(amount);\n  };\n\n  const rawHtml = `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta name=\"format-detection\" content=\"telephone=no\">\n  <meta name=\"x-apple-disable-message-reformatting\">\n  <!--[if !mso]><!-->\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <!--<![endif]-->\n  <title>Low ASR Alert</title>\n  <style>\n    /* Minimal reset for email clients */\n    body, table, td, p, a, li, blockquote {\n      -webkit-text-size-adjust: 100%;\n      -ms-text-size-adjust: 100%;\n    }\n    \n    table, td {\n      mso-table-lspace: 0pt;\n      mso-table-rspace: 0pt;\n    }\n    \n    img {\n      -ms-interpolation-mode: bicubic;\n      border: 0;\n      height: auto;\n      line-height: 100%;\n      outline: none;\n      text-decoration: none;\n    }\n\n    /* Mobile responsive styles */\n    @media (max-width: 600px) {\n      .mobile-full-width {\n        width: 100% !important;\n        max-width: 100% !important;\n      }\n      .mobile-padding {\n        padding: 12px !important;\n      }\n      .mobile-stack {\n        display: block !important;\n        width: 100% !important;\n        float: none !important;\n      }\n    }\n  </style>\n</head>\n<body style=\"margin:0;padding:0;background-color:#f1f5f9;font-family:Arial,sans-serif;width:100%;min-width:100%;\">\n  \n  <!-- Hidden preheader -->\n  <div style=\"display:none;font-size:1px;color:#fefefe;line-height:1px;max-height:0px;max-width:0px;opacity:0;overflow:hidden;\">\n    Low ASR alert: Call success rate below threshold - ${data.asr.toFixed(1)}%\n  </div>\n  \n  <!-- Email wrapper -->\n  <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"margin:0;padding:0;background-color:#f1f5f9;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n    <tr>\n      <td align=\"center\" style=\"padding:20px 10px;\">\n        \n        <!-- Main email container -->\n        <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"600\" class=\"mobile-full-width\" style=\"max-width:600px;background-color:#ffffff;border-radius:16px;box-shadow:0 4px 12px rgba(0,0,0,0.1);overflow:hidden;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n          \n          <!-- Header -->\n          <tr>\n            <td style=\"padding:0 20px 16px;\">\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:#f59e0b;border-radius:12px;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                <tr>\n                  <td align=\"center\" style=\"padding:24px 16px;\">\n                    <div style=\"font-size:48px;margin-bottom:10px;line-height:1;\">⚠️</div>\n                    <h1 style=\"margin:0;color:#ffffff;font-size:24px;font-weight:700;line-height:1.2;font-family:Arial,sans-serif;\">Low Success Rate Alert</h1>\n                    <p style=\"margin:6px 0 0;color:#ffffff;opacity:0.9;font-size:14px;line-height:1.3;font-family:Arial,sans-serif;\">Call quality needs attention</p>\n                  </td>\n                </tr>\n              </table>\n            </td>\n          </tr>\n\n          <!-- Main content -->\n          <tr>\n            <td style=\"padding:0 20px 24px;\">\n              \n              <!-- Greeting -->\n              <h2 style=\"margin:0 0 16px 0;font-size:18px;color:#1e293b;font-weight:600;line-height:1.3;font-family:Arial,sans-serif;\">Hello ${data.userName},</h2>\n              \n              <!-- Message -->\n              <p style=\"margin:0 0 20px 0;font-size:16px;line-height:1.5;color:#475569;font-family:Arial,sans-serif;\">Your call success rate (ASR) has fallen below the configured threshold. This may indicate connectivity issues or routing problems that need immediate attention.</p>\n              \n              <!-- ASR Alert Card -->\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:#ffffff;border:3px solid #f59e0b;border-radius:12px;margin:24px 0;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                <tr>\n                  <td align=\"center\" style=\"padding:24px 16px;\">\n                    <p style=\"margin:0 0 8px 0;font-size:12px;font-weight:700;color:#64748b;letter-spacing:0.5px;text-transform:uppercase;line-height:1.2;font-family:Arial,sans-serif;\">ANSWER SEIZURE RATIO (${data.date})</p>\n                    <p style=\"margin:0;font-size:32px;font-weight:800;color:#f59e0b;line-height:1;font-family:Arial,sans-serif;\">${data.asr.toFixed(1)}%</p>\n                  </td>\n                </tr>\n              </table>\n              \n              <!-- Threshold Warning -->\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:#ffffff;border:3px solid #fbbf24;border-radius:12px;margin:20px 0;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                <tr>\n                  <td style=\"padding:16px;\">\n                    <p style=\"margin:0;font-size:14px;font-weight:700;color:#92400e;line-height:1.4;font-family:Arial,sans-serif;\">\n                      <strong style=\"font-weight:700;\">⚠️ Performance Issue:</strong> Your ASR of ${data.asr.toFixed(1)}% is below the threshold of ${data.threshold}%. This indicates ${data.failedCalls.toLocaleString()} failed calls out of ${data.totalCalls.toLocaleString()} total attempts.\n                    </p>\n                  </td>\n                </tr>\n              </table>\n              \n              <!-- Statistics -->\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"margin:20px 0;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                <tr>\n                  <!-- Total Calls -->\n                  <td width=\"32%\" style=\"padding-right:8px;vertical-align:top;\" class=\"mobile-stack\">\n                    <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:#ffffff;border:3px solid #e2e8f0;border-radius:12px;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                      <tr>\n                        <td align=\"center\" style=\"padding:16px 12px;\">\n                          <p style=\"margin:0 0 6px 0;font-size:11px;font-weight:700;color:#64748b;letter-spacing:0.5px;text-transform:uppercase;line-height:1.2;font-family:Arial,sans-serif;\">TOTAL CALLS</p>\n                          <p style=\"margin:0;font-size:20px;font-weight:700;color:#374151;line-height:1;font-family:Arial,sans-serif;\">${data.totalCalls.toLocaleString()}</p>\n                        </td>\n                      </tr>\n                    </table>\n                  </td>\n                  \n                  <!-- Successful Calls -->\n                  <td width=\"32%\" style=\"padding:0 4px;vertical-align:top;\" class=\"mobile-stack\">\n                    <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:#ffffff;border:3px solid #bbf7d0;border-radius:12px;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                      <tr>\n                        <td align=\"center\" style=\"padding:16px 12px;\">\n                          <p style=\"margin:0 0 6px 0;font-size:11px;font-weight:700;color:#64748b;letter-spacing:0.5px;text-transform:uppercase;line-height:1.2;font-family:Arial,sans-serif;\">SUCCESSFUL</p>\n                          <p style=\"margin:0;font-size:20px;font-weight:700;color:#10b981;line-height:1;font-family:Arial,sans-serif;\">${data.successfulCalls.toLocaleString()}</p>\n                        </td>\n                      </tr>\n                    </table>\n                  </td>\n                  \n                  <!-- Failed Calls -->\n                  <td width=\"32%\" style=\"padding-left:8px;vertical-align:top;\" class=\"mobile-stack\">\n                    <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:#ffffff;border:3px solid #fecaca;border-radius:12px;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                      <tr>\n                        <td align=\"center\" style=\"padding:16px 12px;\">\n                          <p style=\"margin:0 0 6px 0;font-size:11px;font-weight:700;color:#64748b;letter-spacing:0.5px;text-transform:uppercase;line-height:1.2;font-family:Arial,sans-serif;\">FAILED</p>\n                          <p style=\"margin:0;font-size:20px;font-weight:700;color:#ef4444;line-height:1;font-family:Arial,sans-serif;\">${data.failedCalls.toLocaleString()}</p>\n                        </td>\n                      </tr>\n                    </table>\n                  </td>\n                </tr>\n              </table>\n              \n              <!-- Recommendations -->\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:#ffffff;border:3px solid #e2e8f0;border-radius:12px;margin:20px 0;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                <tr>\n                  <td style=\"padding:16px;\">\n                    <h3 style=\"margin:0 0 12px 0;font-size:16px;font-weight:700;color:#1e293b;line-height:1.3;font-family:Arial,sans-serif;\">Recommended Actions:</h3>\n                    <ul style=\"margin:0;padding-left:20px;color:#475569;font-size:14px;line-height:1.6;font-family:Arial,sans-serif;\">\n                      <li style=\"margin-bottom:4px;\">Check your SIP trunk configuration and connectivity</li>\n                      <li style=\"margin-bottom:4px;\">Review routing rules and destination numbers</li>\n                      <li style=\"margin-bottom:4px;\">Verify account balance and credit limits</li>\n                      <li style=\"margin-bottom:4px;\">Contact your provider if issues persist</li>\n                      <li>Monitor call patterns for unusual activity</li>\n                    </ul>\n                  </td>\n                </tr>\n              </table>\n              \n              <!-- Call to Action Button -->\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" align=\"center\" style=\"margin:20px auto;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                <tr>\n                  <td align=\"center\" style=\"border-radius:12px;background-color:#f59e0b;box-shadow:0 4px 12px rgba(0,0,0,0.15);\">\n                    <a href=\"${baseUrl}/cdrs\" style=\"display:inline-block;padding:16px 32px;font-size:16px;font-weight:700;color:#ffffff;text-decoration:none;border-radius:12px;text-align:center;min-width:160px;line-height:1.2;font-family:Arial,sans-serif;\">\n                      <font color=\"#ffffff\">View Call Reports</font>\n                    </a>\n                  </td>\n                </tr>\n              </table>\n              \n            </td>\n          </tr>\n\n          <!-- Footer -->\n          <tr>\n            <td style=\"padding:20px;background-color:#f8fafc;border-top:1px solid #e2e8f0;\">\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                <tr>\n                  <td align=\"center\">\n                    <p style=\"margin:0 0 6px;font-size:11px;color:#94a3b8;line-height:1.3;font-family:Arial,sans-serif;\">This is an automated alert from your ${data.branding.companyName} system.</p>\n                    <p style=\"margin:0;font-size:11px;color:#94a3b8;line-height:1.3;font-family:Arial,sans-serif;\">You can adjust notification settings in your admin panel.</p>\n                  </td>\n                </tr>\n              </table>\n            </td>\n          </tr>\n          \n        </table>\n      </td>\n    </tr>\n  </table>\n</body>\n</html>`;\n\n  // Use juice to inline CSS while preserving media queries\n  const html = juice(rawHtml, {\n    removeStyleTags: false,   // keeps the <style> block for the media query\n    applyStyleTags: true,     // applies styles from <style> tags to elements\n    preserveMediaQueries: true, // keeps @media rules intact\n    webResources: {\n      relativeTo: process.cwd()\n    }\n  });\n\n  const text = `\nLOW SUCCESS RATE ALERT - Call quality needs attention\n\nHello ${data.userName},\n\nYour call success rate (ASR) has fallen below the configured threshold.\n\nASR DETAILS:\n- Current ASR (${data.date}): ${data.asr.toFixed(1)}%\n- Threshold: ${data.threshold}%\n- Total Calls: ${data.totalCalls.toLocaleString()}\n- Successful Calls: ${data.successfulCalls.toLocaleString()}\n- Failed Calls: ${data.failedCalls.toLocaleString()}\n\nRECOMMENDED ACTIONS:\n- Check your SIP trunk configuration and connectivity\n- Review routing rules and destination numbers\n- Verify account balance and credit limits\n- Contact your provider if issues persist\n- Monitor call patterns for unusual activity\n\nView call reports: ${baseUrl}/cdrs\n\nThis is an automated alert from your ${data.branding.companyName} system.\nYou can adjust notification settings in your admin panel.\n  `;\n\n  return { subject, html, text };\n}\n\nexport function generateExtremeUsageAlertEmail(data: ExtremeUsageAlertData): { subject: string; html: string; text: string } {\n  const formatMinutes = (minutes: number) => {\n    const hours = Math.floor(minutes / 60);\n    const remainingMinutes = minutes % 60;\n    \n    if (hours > 0) {\n      return `${hours}h ${remainingMinutes}m`;\n    }\n    return `${minutes}m`;\n  };\n\n  const baseUrl = process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000';\n  const subject = `📊 Extreme Usage Alert - Daily minutes threshold exceeded`;\n\n  const rawHtml = `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta name=\"format-detection\" content=\"telephone=no\">\n  <meta name=\"x-apple-disable-message-reformatting\">\n  <!--[if !mso]><!-->\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <!--<![endif]-->\n  <title>Extreme Usage Alert</title>\n  <style>\n    /* Minimal reset for email clients */\n    body, table, td, p, a, li, blockquote {\n      -webkit-text-size-adjust: 100%;\n      -ms-text-size-adjust: 100%;\n    }\n    \n    table, td {\n      mso-table-lspace: 0pt;\n      mso-table-rspace: 0pt;\n    }\n    \n    img {\n      -ms-interpolation-mode: bicubic;\n      border: 0;\n      height: auto;\n      line-height: 100%;\n      outline: none;\n      text-decoration: none;\n    }\n\n    /* Mobile responsive styles */\n    @media (max-width: 600px) {\n      .mobile-full-width {\n        width: 100% !important;\n        max-width: 100% !important;\n      }\n      .mobile-padding {\n        padding: 12px !important;\n      }\n      .mobile-stack {\n        display: block !important;\n        width: 100% !important;\n        float: none !important;\n      }\n    }\n  </style>\n</head>\n<body style=\"margin:0;padding:0;background-color:#f1f5f9;font-family:Arial,sans-serif;width:100%;min-width:100%;\">\n  \n  <!-- Hidden preheader -->\n  <div style=\"display:none;font-size:1px;color:#fefefe;line-height:1px;max-height:0px;max-width:0px;opacity:0;overflow:hidden;\">\n    Extreme usage alert: Daily minutes threshold exceeded - ${formatMinutes(data.totalMinutes)}\n  </div>\n  \n  <!-- Email wrapper -->\n  <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"margin:0;padding:0;background-color:#f1f5f9;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n    <tr>\n      <td align=\"center\" style=\"padding:20px 10px;\">\n        \n        <!-- Main email container -->\n        <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"600\" class=\"mobile-full-width\" style=\"max-width:600px;background-color:#ffffff;border-radius:16px;box-shadow:0 4px 12px rgba(0,0,0,0.1);overflow:hidden;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n          \n          <!-- Header -->\n          <tr>\n            <td style=\"padding:0 20px 16px;\">\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:#7c3aed;border-radius:12px;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                <tr>\n                  <td align=\"center\" style=\"padding:24px 16px;\">\n                    <div style=\"font-size:48px;margin-bottom:10px;line-height:1;\">📊</div>\n                    <h1 style=\"margin:0;color:#ffffff;font-size:24px;font-weight:700;line-height:1.2;font-family:Arial,sans-serif;\">Extreme Usage Alert</h1>\n                    <p style=\"margin:6px 0 0;color:#ffffff;opacity:0.9;font-size:14px;line-height:1.3;font-family:Arial,sans-serif;\">Daily minutes threshold exceeded</p>\n                  </td>\n                </tr>\n              </table>\n            </td>\n          </tr>\n\n          <!-- Main content -->\n          <tr>\n            <td style=\"padding:0 20px 24px;\">\n              \n              <!-- Greeting -->\n              <h2 style=\"margin:0 0 16px 0;font-size:18px;color:#1e293b;font-weight:600;line-height:1.3;font-family:Arial,sans-serif;\">Hello ${data.userName},</h2>\n              \n              <!-- Message -->\n              <p style=\"margin:0 0 20px 0;font-size:16px;line-height:1.5;color:#475569;font-family:Arial,sans-serif;\">Your daily call usage has reached extreme levels, exceeding the configured very heavy usage threshold. This may indicate unusual activity or potential cost implications.</p>\n              \n              <!-- Usage Alert Card -->\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:#ffffff;border:3px solid #7c3aed;border-radius:12px;margin:24px 0;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                <tr>\n                  <td align=\"center\" style=\"padding:24px 16px;\">\n                    <p style=\"margin:0 0 8px 0;font-size:12px;font-weight:700;color:#64748b;letter-spacing:0.5px;text-transform:uppercase;line-height:1.2;font-family:Arial,sans-serif;\">TOTAL MINUTES USED TODAY (${data.date})</p>\n                    <p style=\"margin:0;font-size:32px;font-weight:800;color:#7c3aed;line-height:1;font-family:Arial,sans-serif;\">${formatMinutes(data.totalMinutes)}</p>\n                  </td>\n                </tr>\n              </table>\n              \n              <!-- Threshold Warning -->\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:#ffffff;border:3px solid #c4b5fd;border-radius:12px;margin:20px 0;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                <tr>\n                  <td style=\"padding:16px;\">\n                    <p style=\"margin:0;font-size:14px;font-weight:700;color:#7c3aed;line-height:1.4;font-family:Arial,sans-serif;\">\n                      <strong style=\"font-weight:700;\">📊 Usage Alert:</strong> Your daily usage of ${formatMinutes(data.totalMinutes)} has exceeded the very heavy usage threshold of ${formatMinutes(data.threshold)}. This represents extremely high call volume.\n                    </p>\n                  </td>\n                </tr>\n              </table>\n              \n              <!-- Statistics -->\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"margin:20px 0;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                <tr>\n                  <!-- Total Calls -->\n                  <td width=\"48%\" style=\"padding-right:8px;vertical-align:top;\" class=\"mobile-stack\">\n                    <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:#ffffff;border:3px solid #e2e8f0;border-radius:12px;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                      <tr>\n                        <td align=\"center\" style=\"padding:16px 12px;\">\n                          <p style=\"margin:0 0 6px 0;font-size:11px;font-weight:700;color:#64748b;letter-spacing:0.5px;text-transform:uppercase;line-height:1.2;font-family:Arial,sans-serif;\">TOTAL CALLS</p>\n                          <p style=\"margin:0;font-size:20px;font-weight:700;color:#374151;line-height:1;font-family:Arial,sans-serif;\">${data.totalCalls.toLocaleString()}</p>\n                        </td>\n                      </tr>\n                    </table>\n                  </td>\n                  \n                  <!-- Avg Minutes per Call -->\n                  <td width=\"48%\" style=\"padding-left:8px;vertical-align:top;\" class=\"mobile-stack\">\n                    <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:#ffffff;border:3px solid #e2e8f0;border-radius:12px;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                      <tr>\n                        <td align=\"center\" style=\"padding:16px 12px;\">\n                          <p style=\"margin:0 0 6px 0;font-size:11px;font-weight:700;color:#64748b;letter-spacing:0.5px;text-transform:uppercase;line-height:1.2;font-family:Arial,sans-serif;\">AVG MINUTES/CALL</p>\n                          <p style=\"margin:0;font-size:20px;font-weight:700;color:#374151;line-height:1;font-family:Arial,sans-serif;\">${formatMinutes(data.avgMinutesPerCall)}</p>\n                        </td>\n                      </tr>\n                    </table>\n                  </td>\n                </tr>\n              </table>\n              \n              <!-- Recommendations -->\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:#ffffff;border:3px solid #e2e8f0;border-radius:12px;margin:20px 0;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                <tr>\n                  <td style=\"padding:16px;\">\n                    <h3 style=\"margin:0 0 12px 0;font-size:16px;font-weight:700;color:#1e293b;line-height:1.3;font-family:Arial,sans-serif;\">Recommended Actions:</h3>\n                    <ul style=\"margin:0;padding-left:20px;color:#475569;font-size:14px;line-height:1.6;font-family:Arial,sans-serif;\">\n                      <li style=\"margin-bottom:4px;\">Review your call logs for any unusual patterns</li>\n                      <li style=\"margin-bottom:4px;\">Check for any automated systems or bulk calling</li>\n                      <li style=\"margin-bottom:4px;\">Verify that all calls are legitimate and authorized</li>\n                      <li style=\"margin-bottom:4px;\">Consider implementing usage controls if needed</li>\n                      <li>Monitor costs associated with this high usage</li>\n                    </ul>\n                  </td>\n                </tr>\n              </table>\n              \n              <!-- Call to Action Button -->\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" align=\"center\" style=\"margin:20px auto;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                <tr>\n                  <td align=\"center\" style=\"border-radius:12px;background-color:#7c3aed;box-shadow:0 4px 12px rgba(0,0,0,0.15);\">\n                    <a href=\"${baseUrl}/cdrs\" style=\"display:inline-block;padding:16px 32px;font-size:16px;font-weight:700;color:#ffffff;text-decoration:none;border-radius:12px;text-align:center;min-width:160px;line-height:1.2;font-family:Arial,sans-serif;\">\n                      <font color=\"#ffffff\">View Usage Reports</font>\n                    </a>\n                  </td>\n                </tr>\n              </table>\n              \n            </td>\n          </tr>\n\n          <!-- Footer -->\n          <tr>\n            <td style=\"padding:20px;background-color:#f8fafc;border-top:1px solid #e2e8f0;\">\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                <tr>\n                  <td align=\"center\">\n                    <p style=\"margin:0 0 6px;font-size:11px;color:#94a3b8;line-height:1.3;font-family:Arial,sans-serif;\">This is an automated alert from your ${data.branding.companyName} system.</p>\n                    <p style=\"margin:0;font-size:11px;color:#94a3b8;line-height:1.3;font-family:Arial,sans-serif;\">You can adjust notification settings in your admin panel.</p>\n                  </td>\n                </tr>\n              </table>\n            </td>\n          </tr>\n          \n        </table>\n      </td>\n    </tr>\n  </table>\n</body>\n</html>`;\n\n  // Use juice to inline CSS while preserving media queries\n  const html = juice(rawHtml, {\n    removeStyleTags: false,   // keeps the <style> block for the media query\n    applyStyleTags: true,     // applies styles from <style> tags to elements\n    preserveMediaQueries: true, // keeps @media rules intact\n    webResources: {\n      relativeTo: process.cwd()\n    }\n  });\n\n  const text = `\nEXTREME USAGE ALERT - Daily minutes threshold exceeded\n\nHello ${data.userName},\n\nYour daily call usage has reached extreme levels, exceeding the configured threshold.\n\nUSAGE DETAILS:\n- Total Minutes Today (${data.date}): ${formatMinutes(data.totalMinutes)}\n- Threshold: ${formatMinutes(data.threshold)}\n- Total Calls: ${data.totalCalls.toLocaleString()}\n- Average Minutes per Call: ${formatMinutes(data.avgMinutesPerCall)}\n\nRECOMMENDED ACTIONS:\n- Review your call logs for any unusual patterns\n- Check for any automated systems or bulk calling\n- Verify that all calls are legitimate and authorized\n- Consider implementing usage controls if needed\n- Monitor costs associated with this high usage\n\nView usage reports: ${baseUrl}/cdrs\n\nThis is an automated alert from your ${data.branding.companyName} system.\nYou can adjust notification settings in your admin panel.\n  `;\n\n  return { subject, html, text };\n}","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/lib/emailTemplates/paymentNotifications.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/lib/emailTemplates/phoneNumberNotifications.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'purchasedNumbers' is assigned a value but never used.","line":1552,"column":68,"nodeType":null,"messageId":"unusedVar","endLine":1552,"endColumn":84}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import juice from 'juice';\n\n// Base interface for common phone number data\ninterface BasePhoneNumberData {\n  phoneNumber: {\n    number: string;\n    country: string;\n    numberType: string;\n    monthlyRate: number;\n    setupFee?: number;\n    currency: string;\n    capabilities: string[];\n  };\n  user: {\n    name: string;\n    email: string;\n    company?: string;\n  };\n  branding: {\n    companyName: string;\n    companySlogan?: string;\n    primaryColor: string;\n    fontFamily: string;\n  };\n}\n\n// Backorder request approval/rejection\nexport interface BackorderNotificationData extends BasePhoneNumberData {\n  request: {\n    requestNumber: string;\n    status: 'approved' | 'rejected';\n    reason?: string;\n    reviewNotes?: string;\n    submittedAt: string;\n    reviewedAt: string;\n    reviewedBy: string;\n  };\n  requestType?: 'single' | 'bulk'; // Type of backorder request\n  numbersCount?: number; // For bulk backorder requests\n  requestedNumbers?: Array<{\n    number: string;\n    country: string;\n    numberType: string;\n    monthlyRate: number;\n    setupFee?: number;\n    capabilities: string[];\n    status?: 'approved' | 'rejected' | 'partial'; // Individual number status\n  }>; // List of requested numbers for bulk backorders\n}\n\n// Cancellation request approval/rejection\nexport interface CancellationNotificationData extends BasePhoneNumberData {\n  request: {\n    requestId: string;\n    status: 'approved' | 'rejected';\n    reason?: string;\n    adminNotes?: string;\n    submittedAt: string;\n    reviewedAt: string;\n    reviewedBy: string;\n  };\n}\n\n// Number purchase confirmation\nexport interface NumberPurchaseNotificationData extends BasePhoneNumberData {\n  purchase: {\n    purchaseId: string;\n    purchaseDate: string;\n    totalAmount: number;\n    billingStartDate: string;\n    nextBillingDate: string;\n  };\n  purchaseType: 'direct' | 'bulk';\n  numbersCount?: number; // For bulk purchases\n  purchasedNumbers?: Array<{\n    number: string;\n    country: string;\n    numberType: string;\n    monthlyRate: number;\n    setupFee?: number;\n    capabilities: string[];\n  }>; // List of purchased numbers for bulk purchases\n}\n\n// Admin assignment notification\nexport interface NumberAssignmentNotificationData extends BasePhoneNumberData {\n  assignment: {\n    assignmentId: string;\n    assignedAt: string;\n    assignedBy: string;\n    notes?: string;\n    billingStartDate: string;\n    nextBillingDate: string;\n  };\n}\n\n// Admin unassignment notification\nexport interface NumberUnassignmentNotificationData extends BasePhoneNumberData {\n  unassignment: {\n    unassignedAt: string;\n    unassignedBy: string;\n    reason?: string;\n    notes?: string;\n  };\n}\n\n// Admin notification interfaces for user actions\nexport interface AdminUserPurchaseNotificationData extends BasePhoneNumberData {\n  purchase: {\n    purchaseId: string;\n    purchaseDate: string;\n    totalAmount: number;\n    billingStartDate: string;\n    nextBillingDate: string;\n  };\n  purchaseType: 'direct' | 'bulk';\n  numbersCount?: number;\n  purchasedNumbers?: Array<{\n    number: string;\n    country: string;\n    numberType: string;\n    monthlyRate: number;\n    setupFee?: number;\n    capabilities: string[];\n  }>;\n  adminEmail: string; // Who to notify\n}\n\nexport interface AdminBackorderRequestNotificationData extends BasePhoneNumberData {\n  request: {\n    requestNumber: string;\n    submittedAt: string;\n    reason?: string;\n    businessJustification?: string;\n  };\n  requestType?: 'single' | 'bulk';\n  numbersCount?: number;\n  adminEmail: string; // Who to notify\n}\n\nexport interface AdminCancellationRequestNotificationData extends BasePhoneNumberData {\n  request: {\n    requestId: string;\n    submittedAt: string;\n    reason?: string;\n    businessJustification?: string;\n  };\n  adminEmail: string; // Who to notify\n}\n\nexport function generateBackorderNotificationTemplate(data: BackorderNotificationData): { subject: string; html: string; text: string } {\n  const { phoneNumber, user, request, requestType = 'single', numbersCount, requestedNumbers, branding } = data;\n  const isApproved = request.status === 'approved';\n  \n  const formatCurrency = (amount: number, currency: string) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: currency,\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 4,\n    }).format(amount);\n  };\n\n  const headerColor = isApproved ? '#10b981' : '#ef4444';\n  const icon = isApproved ? '✅' : '❌';\n  const title = isApproved ? 'Backorder Request Approved!' : 'Backorder Request Rejected';\n  \n  const subject = `${icon} ${title} - Request #${request.requestNumber} - ${branding.companyName}`;\n\n  const rawHtml = `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta name=\"format-detection\" content=\"telephone=no\">\n  <meta name=\"x-apple-disable-message-reformatting\">\n  <title>${branding.companyName} Backorder Request Update</title>\n  <style>\n    body, table, td, p, a, li, blockquote {\n      -webkit-text-size-adjust: 100%;\n      -ms-text-size-adjust: 100%;\n    }\n    table, td {\n      mso-table-lspace: 0pt;\n      mso-table-rspace: 0pt;\n    }\n    img {\n      -ms-interpolation-mode: bicubic;\n      border: 0;\n      height: auto;\n      line-height: 100%;\n      outline: none;\n      text-decoration: none;\n    }\n\n    /* Responsive design */\n    @media only screen and (max-width: 600px) {\n      .mobile-padding {\n        padding-left: 16px !important;\n        padding-right: 16px !important;\n      }\n      \n      .mobile-center {\n        text-align: center !important;\n      }\n      \n      .mobile-stack {\n        display: block !important;\n        width: 100% !important;\n        padding-left: 0 !important;\n        padding-right: 0 !important;\n      }\n      \n      .mobile-text-sm {\n        font-size: 14px !important;\n        line-height: 1.4 !important;\n      }\n    }\n  </style>\n</head>\n<body style=\"margin:0;padding:0;background-color:#f1f5f9;font-family:${branding.fontFamily},Arial,sans-serif;width:100%;min-width:100%;\">\n  \n  <div style=\"display:none;font-size:1px;color:#fefefe;line-height:1px;max-height:0px;max-width:0px;opacity:0;overflow:hidden;\">\n    ${title} for ${phoneNumber.number} - Request #${request.requestNumber}\n  </div>\n  \n  <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"margin:0;padding:0;background-color:#f1f5f9;border-collapse:collapse;\">\n    <tr>\n      <td align=\"center\" style=\"padding:20px 10px;\">\n        <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"600\" style=\"max-width:600px;background-color:#ffffff;border-radius:16px;box-shadow:0 4px 12px rgba(0,0,0,0.1);overflow:hidden;border-collapse:collapse;\">\n          \n          <!-- Header -->\n          <tr>\n            <td align=\"center\" style=\"padding:24px 20px 16px;\">\n              <h1 style=\"margin:0;font-size:24px;font-weight:700;color:#1e293b;line-height:1.2;font-family:${branding.fontFamily},Arial,sans-serif;\">${branding.companyName}</h1>\n              ${branding.companySlogan ? `<p style=\"margin:6px 0 0;color:#64748b;font-size:14px;line-height:1.3;font-family:${branding.fontFamily},Arial,sans-serif;\">${branding.companySlogan}</p>` : ''}\n            </td>\n          </tr>\n          \n          <!-- Status banner -->\n          <tr>\n            <td style=\"padding:0 20px 16px;\">\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:${headerColor};border-radius:12px;border-collapse:collapse;\">\n                <tr>\n                  <td align=\"center\" style=\"padding:20px 16px;\">\n                    <h2 style=\"margin:0;color:#ffffff;font-size:20px;font-weight:700;line-height:1.2;font-family:${branding.fontFamily},Arial,sans-serif;\">${icon} ${title}</h2>\n                    <p style=\"margin:6px 0 0;color:#ffffff;opacity:0.9;font-size:14px;line-height:1.3;font-family:${branding.fontFamily},Arial,sans-serif;\">Request #${request.requestNumber}</p>\n                    ${requestType === 'bulk' \n                      ? `<p style=\"margin:8px 0 0;color:#ffffff;font-size:18px;font-weight:600;line-height:1.3;font-family:${branding.fontFamily},Arial,sans-serif;\">📞 ${numbersCount} Numbers Requested</p>`\n                      : `<p style=\"margin:8px 0 0;color:#ffffff;font-size:18px;font-weight:600;line-height:1.3;font-family:${branding.fontFamily},Arial,sans-serif;\">📞 ${phoneNumber.number}</p>`\n                    }\n                  </td>\n                </tr>\n              </table>\n            </td>\n          </tr>\n          \n          <!-- Main content -->\n          <tr>\n            <td style=\"padding:0 20px 24px;\">\n              <h3 style=\"margin:0 0 16px 0;font-size:18px;color:#1e293b;font-weight:600;line-height:1.3;font-family:${branding.fontFamily},Arial,sans-serif;\">Hello ${user.name},</h3>\n              \n              <p style=\"margin:0 0 20px 0;font-size:16px;line-height:1.5;color:#475569;font-family:${branding.fontFamily},Arial,sans-serif;\">\n                ${isApproved \n                  ? `Your backorder request ${requestType === 'bulk' ? `for ${numbersCount} phone numbers` : `for ${phoneNumber.number}`} has been ${requestType === 'bulk' ? 'processed' : 'approved and the number has been assigned to your account'}.`\n                  : `We regret to inform you that your backorder request ${requestType === 'bulk' ? `for ${numbersCount} phone numbers` : `for ${phoneNumber.number}`} has been rejected.`\n                }\n              </p>\n              \n              ${requestType === 'bulk' ? `\n                <!-- Bulk backorder requested numbers -->\n                <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:#f8fafc;border:2px solid ${headerColor};border-radius:12px;margin-bottom:20px;border-collapse:collapse;\">\n                  <tr>\n                    <td style=\"padding:20px;\">\n                      <h4 style=\"margin:0 0 16px 0;font-size:16px;font-weight:700;color:#1e293b;line-height:1.3;font-family:${branding.fontFamily},Arial,sans-serif;\">📞 Requested Phone Numbers</h4>\n                      \n                      <div style=\"background-color:#ffffff;border:1px solid #e2e8f0;border-radius:8px;padding:16px;margin-bottom:16px;\">\n                        <p style=\"margin:0 0 12px 0;font-size:14px;color:#475569;line-height:1.5;font-family:${branding.fontFamily},Arial,sans-serif;\">\n                          ${isApproved ? '✅' : '❌'} <strong>${numbersCount} phone numbers</strong> were ${isApproved ? 'processed in your backorder request' : 'included in your rejected backorder request'}:\n                        </p>\n                        \n                        ${requestedNumbers && requestedNumbers.length > 0 ? `\n                          <div style=\"max-height:250px;overflow-y:auto;border:1px solid #e2e8f0;border-radius:6px;padding:12px;background-color:#f8fafc;\">\n                            ${requestedNumbers.map((number, index) => {\n                              const numberStatus = number.status || request.status;\n                              const statusColor = numberStatus === 'approved' ? '#10b981' : numberStatus === 'rejected' ? '#ef4444' : '#f59e0b';\n                              const statusIcon = numberStatus === 'approved' ? '✅' : numberStatus === 'rejected' ? '❌' : '⏳';\n                              const statusText = numberStatus === 'approved' ? 'Approved' : numberStatus === 'rejected' ? 'Rejected' : 'Pending';\n                              \n                              return `\n                                <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;padding:8px 0;border-bottom:${index < requestedNumbers.length - 1 ? '1px solid #e2e8f0' : 'none'};\">\n                                  <tr>\n                                    <td style=\"font-family:${branding.fontFamily},Arial,sans-serif;padding:0;\">\n                                      <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                                        <tr>\n                                          <td style=\"font-weight:600;color:${headerColor};font-size:14px;font-family:${branding.fontFamily},Arial,sans-serif;\">📞 ${number.number}</td>\n                                          <td align=\"right\" style=\"font-size:12px;color:${statusColor};font-weight:600;font-family:${branding.fontFamily},Arial,sans-serif;\">${statusIcon} ${statusText}</td>\n                                        </tr>\n                                        <tr>\n                                          <td style=\"font-size:12px;color:#64748b;margin-top:2px;padding-top:2px;font-family:${branding.fontFamily},Arial,sans-serif;\">${number.country}</td>\n                                          <td align=\"right\" style=\"font-size:12px;color:#64748b;margin-top:2px;padding-top:2px;font-family:${branding.fontFamily},Arial,sans-serif;\">${number.numberType}</td>\n                                        </tr>\n                                        ${isApproved && numberStatus === 'approved' ? `\n                                          <tr>\n                                            <td colspan=\"2\" style=\"font-size:12px;color:#64748b;margin-top:2px;padding-top:2px;font-family:${branding.fontFamily},Arial,sans-serif;\">\n                                              ${formatCurrency(number.monthlyRate, phoneNumber.currency)}/month${number.setupFee ? ` • Setup: ${formatCurrency(number.setupFee, phoneNumber.currency)}` : ''}\n                                            </td>\n                                          </tr>\n                                        ` : ''}\n                                      </table>\n                                    </td>\n                                  </tr>\n                                </table>\n                              `;\n                            }).join('')}\n                          </div>\n                        ` : `\n                          <p style=\"margin:8px 0 0;font-size:13px;color:#64748b;line-height:1.4;font-family:${branding.fontFamily},Arial,sans-serif;\">\n                            You can view the complete list of your requested phone numbers in your account dashboard.\n                          </p>\n                        `}\n                      </div>\n                    </td>\n                  </tr>\n                </table>\n              ` : `\n                <!-- Single phone number details -->\n                <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:#f8fafc;border:2px solid ${headerColor};border-radius:12px;margin-bottom:20px;border-collapse:collapse;\">\n                  <tr>\n                    <td style=\"padding:20px;\">\n                      <h4 style=\"margin:0 0 16px 0;font-size:16px;font-weight:700;color:#1e293b;line-height:1.3;font-family:${branding.fontFamily},Arial,sans-serif;\">📞 Phone Number Details</h4>\n                      \n                      <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;\">\n                        <tr>\n                          <td style=\"padding:6px 0;border-bottom:1px solid #e2e8f0;\">\n                            <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;\">\n                              <tr>\n                                <td width=\"40%\" style=\"font-size:14px;color:#64748b;font-family:${branding.fontFamily},Arial,sans-serif;\">Number:</td>\n                                <td style=\"font-size:16px;color:${headerColor};font-weight:700;font-family:${branding.fontFamily},Arial,sans-serif;\">${phoneNumber.number}</td>\n                              </tr>\n                            </table>\n                          </td>\n                        </tr>\n                        <tr>\n                          <td style=\"padding:6px 0;border-bottom:1px solid #e2e8f0;\">\n                            <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;\">\n                              <tr>\n                                <td width=\"40%\" style=\"font-size:14px;color:#64748b;font-family:${branding.fontFamily},Arial,sans-serif;\">Country:</td>\n                                <td style=\"font-size:14px;color:#1e293b;font-weight:600;font-family:${branding.fontFamily},Arial,sans-serif;\">${phoneNumber.country}</td>\n                              </tr>\n                            </table>\n                          </td>\n                        </tr>\n                        <tr>\n                          <td style=\"padding:6px 0;border-bottom:1px solid #e2e8f0;\">\n                            <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;\">\n                              <tr>\n                                <td width=\"40%\" style=\"font-size:14px;color:#64748b;font-family:${branding.fontFamily},Arial,sans-serif;\">Type:</td>\n                                <td style=\"font-size:14px;color:#1e293b;font-weight:600;font-family:${branding.fontFamily},Arial,sans-serif;\">${phoneNumber.numberType}</td>\n                              </tr>\n                            </table>\n                          </td>\n                        </tr>\n                        ${isApproved ? `\n                          <tr>\n                            <td style=\"padding:6px 0;border-bottom:1px solid #e2e8f0;\">\n                              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;\">\n                                <tr>\n                                  <td width=\"40%\" style=\"font-size:14px;color:#64748b;font-family:${branding.fontFamily},Arial,sans-serif;\">Monthly Rate:</td>\n                                  <td style=\"font-size:14px;color:#1e293b;font-weight:600;font-family:${branding.fontFamily},Arial,sans-serif;\">${formatCurrency(phoneNumber.monthlyRate, phoneNumber.currency)}</td>\n                                </tr>\n                              </table>\n                            </td>\n                          </tr>\n                          ${phoneNumber.setupFee ? `\n                            <tr>\n                              <td style=\"padding:6px 0;\">\n                                <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;\">\n                                  <tr>\n                                    <td width=\"40%\" style=\"font-size:14px;color:#64748b;font-family:${branding.fontFamily},Arial,sans-serif;\">Setup Fee:</td>\n                                    <td style=\"font-size:14px;color:#1e293b;font-weight:600;font-family:${branding.fontFamily},Arial,sans-serif;\">${formatCurrency(phoneNumber.setupFee, phoneNumber.currency)}</td>\n                                  </tr>\n                                </table>\n                              </td>\n                            </tr>\n                          ` : ''}\n                        ` : ''}\n                      </table>\n                    </td>\n                  </tr>\n                </table>\n              `}\n              \n              <!-- Request details -->\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:#f8fafc;border:1px solid #e2e8f0;border-radius:12px;margin-bottom:20px;border-collapse:collapse;\">\n                <tr>\n                  <td style=\"padding:16px;\">\n                    <h4 style=\"margin:0 0 12px 0;font-size:14px;font-weight:700;color:#1e293b;line-height:1.3;font-family:${branding.fontFamily},Arial,sans-serif;\">Request Information</h4>\n                    \n                    <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;\">\n                      <tr>\n                        <td style=\"padding:4px 0;font-size:13px;vertical-align:top;\">\n                          <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;\">\n                            <tr>\n                              <td width=\"30%\" style=\"color:#64748b;font-family:${branding.fontFamily},Arial,sans-serif;\">Request #:</td>\n                              <td style=\"color:#1e293b;font-weight:600;font-family:${branding.fontFamily},Arial,sans-serif;\">${request.requestNumber}</td>\n                            </tr>\n                          </table>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td style=\"padding:4px 0;font-size:13px;vertical-align:top;\">\n                          <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;\">\n                            <tr>\n                              <td width=\"30%\" style=\"color:#64748b;font-family:${branding.fontFamily},Arial,sans-serif;\">Submitted:</td>\n                              <td style=\"color:#1e293b;font-family:${branding.fontFamily},Arial,sans-serif;\">${new Date(request.submittedAt).toLocaleDateString()}</td>\n                            </tr>\n                          </table>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td style=\"padding:4px 0;font-size:13px;vertical-align:top;\">\n                          <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;\">\n                            <tr>\n                              <td width=\"30%\" style=\"color:#64748b;font-family:${branding.fontFamily},Arial,sans-serif;\">Reviewed:</td>\n                              <td style=\"color:#1e293b;font-family:${branding.fontFamily},Arial,sans-serif;\">${new Date(request.reviewedAt).toLocaleDateString()}</td>\n                            </tr>\n                          </table>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td style=\"padding:4px 0;font-size:13px;vertical-align:top;\">\n                          <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;\">\n                            <tr>\n                              <td width=\"30%\" style=\"color:#64748b;font-family:${branding.fontFamily},Arial,sans-serif;\">Reviewed by:</td>\n                              <td style=\"color:#1e293b;font-family:${branding.fontFamily},Arial,sans-serif;\">${request.reviewedBy}</td>\n                            </tr>\n                          </table>\n                        </td>\n                      </tr>\n                      ${request.reviewNotes ? `\n                        <tr>\n                          <td style=\"padding:8px 0 4px 0;font-size:13px;vertical-align:top;\">\n                            <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;\">\n                              <tr>\n                                <td style=\"color:#64748b;font-family:${branding.fontFamily},Arial,sans-serif;border-top:1px solid #e2e8f0;padding-top:8px;\">Notes:</td>\n                              </tr>\n                              <tr>\n                                <td style=\"color:#1e293b;font-family:${branding.fontFamily},Arial,sans-serif;padding-top:4px;\">${request.reviewNotes}</td>\n                              </tr>\n                            </table>\n                          </td>\n                        </tr>\n                      ` : ''}\n                    </table>\n                  </td>\n                </tr>\n              </table>\n              \n              ${isApproved ? `\n                <p style=\"margin:0 0 20px 0;font-size:16px;line-height:1.5;color:#475569;font-family:${branding.fontFamily},Arial,sans-serif;\">\n                  Your phone number is now active and ready to use. Billing will begin according to your account settings.\n                </p>\n              ` : `\n                <p style=\"margin:0 0 20px 0;font-size:16px;line-height:1.5;color:#475569;font-family:${branding.fontFamily},Arial,sans-serif;\">\n                  ${request.reviewNotes ? 'Please review the notes above for more information.' : 'You may submit a new request or contact support for assistance.'}\n                </p>\n              `}\n              \n              <!-- CTA Button -->\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" style=\"margin:20px 0;border-collapse:collapse;\">\n                <tr>\n                  <td align=\"center\">\n                    <a href=\"${process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'}/phone-numbers${isApproved ? '' : '/catalog'}\" \n                       style=\"display:inline-block;padding:12px 24px;background-color:${branding.primaryColor};color:#ffffff;text-decoration:none;border-radius:8px;font-weight:600;font-size:16px;font-family:${branding.fontFamily},Arial,sans-serif;\">\n                      ${isApproved ? 'View My Numbers' : 'Browse Phone Numbers'}\n                    </a>\n                  </td>\n                </tr>\n              </table>\n              \n              <p style=\"margin:20px 0 0 0;font-size:14px;line-height:1.4;color:#64748b;font-family:${branding.fontFamily},Arial,sans-serif;\">\n                If you have any questions, please contact our support team.\n              </p>\n            </td>\n          </tr>\n        </table>\n      </td>\n    </tr>\n  </table>\n</body>\n</html>`;\n\n  // Inline CSS with juice for email client compatibility\n  const html = juice(rawHtml, {\n    removeStyleTags: false,\n    applyStyleTags: true,\n    preserveMediaQueries: true,\n    webResources: {\n      relativeTo: process.cwd()\n    }\n  });\n  \n  const textContent = `\n${title}\nRequest #${request.requestNumber}\n\n${requestType === 'bulk' \n  ? `📞 REQUESTED: ${numbersCount} phone numbers`\n  : `📞 PHONE NUMBER: ${phoneNumber.number}`\n}\n\nHello ${user.name},\n\n${isApproved \n  ? `Your backorder request ${requestType === 'bulk' ? `for ${numbersCount} phone numbers` : `for ${phoneNumber.number}`} has been ${requestType === 'bulk' ? 'processed' : 'approved and the number has been assigned to your account'}.`\n  : `We regret to inform you that your backorder request ${requestType === 'bulk' ? `for ${numbersCount} phone numbers` : `for ${phoneNumber.number}`} has been rejected.`\n}\n\n${requestType === 'bulk' ? `\n📞 Requested Phone Numbers:\n${requestedNumbers && requestedNumbers.length > 0 \n  ? requestedNumbers.map((number, index) => {\n      const numberStatus = number.status || request.status;\n      const statusIcon = numberStatus === 'approved' ? '✅' : numberStatus === 'rejected' ? '❌' : '⏳';\n      const statusText = numberStatus === 'approved' ? 'Approved' : numberStatus === 'rejected' ? 'Rejected' : 'Pending';\n      \n      return `${index + 1}. ${number.number} (${number.country}) - ${number.numberType} - ${statusIcon} ${statusText}${isApproved && numberStatus === 'approved' ? ` - ${formatCurrency(number.monthlyRate, phoneNumber.currency)}/month${number.setupFee ? ` + ${formatCurrency(number.setupFee, phoneNumber.currency)} setup` : ''}` : ''}`;\n    }).join('\\n')\n  : `- Total numbers requested: ${numbersCount}\\n- View complete list in your account dashboard`\n}\n` : `\n📞 Phone Number Details:\n- Number: ${phoneNumber.number}\n- Country: ${phoneNumber.country}\n- Type: ${phoneNumber.numberType}\n${isApproved ? `- Monthly Rate: ${formatCurrency(phoneNumber.monthlyRate, phoneNumber.currency)}` : ''}\n${isApproved && phoneNumber.setupFee ? `- Setup Fee: ${formatCurrency(phoneNumber.setupFee, phoneNumber.currency)}` : ''}\n`}\n\nRequest Information:\n- Request #: ${request.requestNumber}\n- Submitted: ${new Date(request.submittedAt).toLocaleDateString()}\n- Reviewed: ${new Date(request.reviewedAt).toLocaleDateString()}\n- Reviewed by: ${request.reviewedBy}\n${request.reviewNotes ? `- Notes: ${request.reviewNotes}` : ''}\n\n${isApproved \n  ? 'Your phone number is now active and ready to use. Billing will begin according to your account settings.'\n  : request.reviewNotes ? 'Please review the notes above for more information.' : 'You may submit a new request or contact support for assistance.'\n}\n\n${isApproved ? 'View My Numbers' : 'Browse Phone Numbers'}: ${process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'}/phone-numbers${isApproved ? '' : '/catalog'}\n\nIf you have any questions, please contact our support team.\n\n---\n${branding.companyName}\n${branding.companySlogan || ''}\n`;\n\n  return {\n    subject,\n    html,\n    text: textContent.trim()\n  };\n}\n\n// Similar functions for other notification types...\nexport function generateCancellationNotificationTemplate(data: CancellationNotificationData): { subject: string; html: string; text: string } {\n  const { phoneNumber, user, request, branding } = data;\n  const isApproved = request.status === 'approved';\n  \n  const headerColor = isApproved ? '#10b981' : '#ef4444';\n  const icon = isApproved ? '✅' : '❌';\n  const title = isApproved ? 'Cancellation Request Approved' : 'Cancellation Request Rejected';\n  \n  const subject = `${icon} ${title} - ${phoneNumber.number} - ${branding.companyName}`;\n\n  const rawHtml = `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta name=\"format-detection\" content=\"telephone=no\">\n  <meta name=\"x-apple-disable-message-reformatting\">\n  <title>${branding.companyName} Cancellation Request Update</title>\n  <style>\n    body, table, td, p, a, li, blockquote {\n      -webkit-text-size-adjust: 100%;\n      -ms-text-size-adjust: 100%;\n    }\n    table, td {\n      mso-table-lspace: 0pt;\n      mso-table-rspace: 0pt;\n    }\n    img {\n      -ms-interpolation-mode: bicubic;\n      border: 0;\n      height: auto;\n      line-height: 100%;\n      outline: none;\n      text-decoration: none;\n    }\n\n    /* Responsive design */\n    @media only screen and (max-width: 600px) {\n      .mobile-padding {\n        padding-left: 16px !important;\n        padding-right: 16px !important;\n      }\n      \n      .mobile-center {\n        text-align: center !important;\n      }\n      \n      .mobile-stack {\n        display: block !important;\n        width: 100% !important;\n        padding-left: 0 !important;\n        padding-right: 0 !important;\n      }\n      \n      .mobile-text-sm {\n        font-size: 14px !important;\n        line-height: 1.4 !important;\n      }\n    }\n  </style>\n</head>\n<body style=\"margin:0;padding:0;background-color:#f1f5f9;font-family:${branding.fontFamily},Arial,sans-serif;width:100%;min-width:100%;\">\n  \n  <div style=\"display:none;font-size:1px;color:#fefefe;line-height:1px;max-height:0px;max-width:0px;opacity:0;overflow:hidden;\">\n    ${title} for ${phoneNumber.number} - Request #${request.requestId}\n  </div>\n  \n  <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"margin:0;padding:0;background-color:#f1f5f9;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n    <tr>\n      <td align=\"center\" style=\"padding:20px 10px;\">\n        <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"600\" style=\"max-width:600px;background-color:#ffffff;border-radius:16px;box-shadow:0 4px 12px rgba(0,0,0,0.1);overflow:hidden;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n          \n          <!-- Header -->\n          <tr>\n            <td align=\"center\" style=\"padding:24px 20px 16px;\">\n              <h1 style=\"margin:0;font-size:24px;font-weight:700;color:#1e293b;line-height:1.2;font-family:${branding.fontFamily},Arial,sans-serif;\">${branding.companyName}</h1>\n              ${branding.companySlogan ? `<p style=\"margin:6px 0 0;color:#64748b;font-size:14px;line-height:1.3;font-family:${branding.fontFamily},Arial,sans-serif;\">${branding.companySlogan}</p>` : ''}\n            </td>\n          </tr>\n          \n          <!-- Status banner -->\n          <tr>\n            <td style=\"padding:0 20px 16px;\">\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:${headerColor};border-radius:12px;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                <tr>\n                  <td align=\"center\" style=\"padding:20px 16px;\">\n                    <h2 style=\"margin:0;color:#ffffff;font-size:20px;font-weight:700;line-height:1.2;font-family:${branding.fontFamily},Arial,sans-serif;\">${icon} ${title}</h2>\n                    <p style=\"margin:6px 0 0;color:#ffffff;opacity:0.9;font-size:14px;line-height:1.3;font-family:${branding.fontFamily},Arial,sans-serif;\">Request #${request.requestId}</p>\n                    <p style=\"margin:8px 0 0;color:#ffffff;font-size:18px;font-weight:600;line-height:1.3;font-family:${branding.fontFamily},Arial,sans-serif;\">📞 ${phoneNumber.number}</p>\n                  </td>\n                </tr>\n              </table>\n            </td>\n          </tr>\n          \n          <!-- Main content -->\n          <tr>\n            <td style=\"padding:0 20px 24px;\">\n              <h3 style=\"margin:0 0 16px 0;font-size:18px;color:#1e293b;font-weight:600;line-height:1.3;font-family:${branding.fontFamily},Arial,sans-serif;\">Hello ${user.name},</h3>\n              \n              <p style=\"margin:0 0 20px 0;font-size:16px;line-height:1.5;color:#475569;font-family:${branding.fontFamily},Arial,sans-serif;\">\n                ${isApproved \n                  ? `Your cancellation request for ${phoneNumber.number} has been approved. The number has been removed from your account.`\n                  : `Your cancellation request for ${phoneNumber.number} has been rejected.`\n                }\n              </p>\n              \n              <!-- Request details -->\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:#f8fafc;border:2px solid ${headerColor};border-radius:12px;margin-bottom:20px;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                <tr>\n                  <td style=\"padding:20px;\">\n                    <h4 style=\"margin:0 0 16px 0;font-size:16px;font-weight:700;color:#1e293b;line-height:1.3;font-family:${branding.fontFamily},Arial,sans-serif;\">Request Details</h4>\n                    \n                    <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                      <tr>\n                        <td style=\"padding:6px 0;border-bottom:1px solid #e2e8f0;\">\n                          <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                            <tr>\n                              <td width=\"40%\" style=\"font-size:14px;color:#64748b;font-family:${branding.fontFamily},Arial,sans-serif;\">Phone Number:</td>\n                              <td style=\"font-size:14px;color:#1e293b;font-weight:600;font-family:${branding.fontFamily},Arial,sans-serif;\">${phoneNumber.number}</td>\n                            </tr>\n                          </table>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td style=\"padding:6px 0;border-bottom:1px solid #e2e8f0;\">\n                          <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                            <tr>\n                              <td width=\"40%\" style=\"font-size:14px;color:#64748b;font-family:${branding.fontFamily},Arial,sans-serif;\">Request ID:</td>\n                              <td style=\"font-size:14px;color:#1e293b;font-weight:600;font-family:${branding.fontFamily},Arial,sans-serif;\">${request.requestId}</td>\n                            </tr>\n                          </table>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td style=\"padding:6px 0;border-bottom:1px solid #e2e8f0;\">\n                          <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                            <tr>\n                              <td width=\"40%\" style=\"font-size:14px;color:#64748b;font-family:${branding.fontFamily},Arial,sans-serif;\">Submitted:</td>\n                              <td style=\"font-size:14px;color:#1e293b;font-weight:600;font-family:${branding.fontFamily},Arial,sans-serif;\">${new Date(request.submittedAt).toLocaleDateString()}</td>\n                            </tr>\n                          </table>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td style=\"padding:6px 0;border-bottom:1px solid #e2e8f0;\">\n                          <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                            <tr>\n                              <td width=\"40%\" style=\"font-size:14px;color:#64748b;font-family:${branding.fontFamily},Arial,sans-serif;\">Reviewed:</td>\n                              <td style=\"font-size:14px;color:#1e293b;font-weight:600;font-family:${branding.fontFamily},Arial,sans-serif;\">${new Date(request.reviewedAt).toLocaleDateString()}</td>\n                            </tr>\n                          </table>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td style=\"padding:6px 0;${request.adminNotes ? 'border-bottom:1px solid #e2e8f0;' : ''}\">\n                          <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                            <tr>\n                              <td width=\"40%\" style=\"font-size:14px;color:#64748b;font-family:${branding.fontFamily},Arial,sans-serif;\">Reviewed by:</td>\n                              <td style=\"font-size:14px;color:#1e293b;font-weight:600;font-family:${branding.fontFamily},Arial,sans-serif;\">${request.reviewedBy}</td>\n                            </tr>\n                          </table>\n                        </td>\n                      </tr>\n                      ${request.adminNotes ? `\n                        <tr>\n                          <td style=\"padding:6px 0;\">\n                            <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                              <tr>\n                                <td width=\"40%\" style=\"font-size:14px;color:#64748b;font-family:${branding.fontFamily},Arial,sans-serif;vertical-align:top;\">Admin Notes:</td>\n                                <td style=\"font-size:14px;color:#1e293b;font-weight:600;font-family:${branding.fontFamily},Arial,sans-serif;\">${request.adminNotes}</td>\n                              </tr>\n                            </table>\n                          </td>\n                        </tr>\n                      ` : ''}\n                    </table>\n                  </td>\n                </tr>\n              </table>\n              \n              <p style=\"margin:0 0 20px 0;font-size:14px;line-height:1.5;color:#64748b;font-family:${branding.fontFamily},Arial,sans-serif;\">\n                ${isApproved \n                  ? 'The phone number has been successfully removed from your account and billing has stopped.'\n                  : request.adminNotes ? 'Please review the notes above for more information.' : 'You may contact support for assistance or clarification.'\n                }\n              </p>\n              \n              <!-- Call to action -->\n              <div style=\"text-align:center;margin-bottom:20px;\">\n                <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" style=\"margin:0 auto;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                  <tr>\n                    <td style=\"border-radius:8px;background-color:${branding.primaryColor};padding:14px 28px;\">\n                      <a href=\"${process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'}/phone-numbers\" style=\"color:#ffffff;text-decoration:none;font-weight:600;font-size:14px;font-family:${branding.fontFamily},Arial,sans-serif;\">View My Numbers</a>\n                    </td>\n                  </tr>\n                </table>\n              </div>\n              \n              <!-- Footer -->\n              <div style=\"text-align:center;padding-top:20px;border-top:1px solid #e2e8f0;\">\n                <p style=\"margin:0;font-size:12px;color:#94a3b8;line-height:1.4;font-family:${branding.fontFamily},Arial,sans-serif;\">\n                  If you have any questions, please contact our support team.\n                  <br>\n                  Thank you for choosing ${branding.companyName}\n                </p>\n              </div>\n            </td>\n          </tr>\n        </table>\n      </td>\n    </tr>\n  </table>\n</body>\n</html>`;\n\n  // Inline CSS with juice for email client compatibility\n  const html = juice(rawHtml, {\n    removeStyleTags: false,\n    applyStyleTags: true,\n    preserveMediaQueries: true,\n    webResources: {\n      relativeTo: process.cwd()\n    }\n  });\n\n  const textContent = `\n${title}\nRequest #${request.requestId}\n\n📞 PHONE NUMBER: ${phoneNumber.number}\n\nHello ${user.name},\n\n${isApproved \n  ? `Your cancellation request for ${phoneNumber.number} has been approved. The number has been removed from your account.`\n  : `Your cancellation request for ${phoneNumber.number} has been rejected.`\n}\n\nRequest Details:\n- Phone Number: ${phoneNumber.number}\n- Request ID: ${request.requestId}\n- Submitted: ${new Date(request.submittedAt).toLocaleDateString()}\n- Reviewed: ${new Date(request.reviewedAt).toLocaleDateString()}\n- Reviewed by: ${request.reviewedBy}\n${request.adminNotes ? `- Admin Notes: ${request.adminNotes}` : ''}\n\n${isApproved \n  ? 'The phone number has been successfully removed from your account and billing has stopped.'\n  : request.adminNotes ? 'Please review the notes above for more information.' : 'You may contact support for assistance or clarification.'\n}\n\nView My Numbers: ${process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'}/phone-numbers\n\nIf you have any questions, please contact our support team.\n\n---\n${branding.companyName}\n${branding.companySlogan || ''}\n`;\n\n  return {\n    subject,\n    html,\n    text: textContent.trim()\n  };\n}\n\nexport function generateNumberPurchaseNotificationTemplate(data: NumberPurchaseNotificationData): { subject: string; html: string; text: string } {\n  const { phoneNumber, user, purchase, purchaseType, numbersCount, purchasedNumbers, branding } = data;\n  \n  const formatCurrency = (amount: number, currency: string) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: currency,\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 4,\n    }).format(amount);\n  };\n\n  const icon = '🎉';\n  const title = purchaseType === 'bulk' \n    ? `Phone Numbers Purchased Successfully!`\n    : 'Phone Number Purchased Successfully!';\n  \n  const subject = `${icon} ${title} - ${branding.companyName}`;\n\n  const rawHtml = `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta name=\"format-detection\" content=\"telephone=no\">\n  <meta name=\"x-apple-disable-message-reformatting\">\n  <title>${branding.companyName} Purchase Confirmation</title>\n  <style>\n    body, table, td, p, a, li, blockquote {\n      -webkit-text-size-adjust: 100%;\n      -ms-text-size-adjust: 100%;\n    }\n    table, td {\n      mso-table-lspace: 0pt;\n      mso-table-rspace: 0pt;\n    }\n    img {\n      -ms-interpolation-mode: bicubic;\n      border: 0;\n      height: auto;\n      line-height: 100%;\n      outline: none;\n      text-decoration: none;\n    }\n\n    /* Responsive design */\n    @media only screen and (max-width: 600px) {\n      .mobile-padding {\n        padding-left: 16px !important;\n        padding-right: 16px !important;\n      }\n      \n      .mobile-center {\n        text-align: center !important;\n      }\n      \n      .mobile-stack {\n        display: block !important;\n        width: 100% !important;\n        padding-left: 0 !important;\n        padding-right: 0 !important;\n      }\n      \n      .mobile-text-sm {\n        font-size: 14px !important;\n        line-height: 1.4 !important;\n      }\n    }\n  </style>\n</head>\n<body style=\"margin:0;padding:0;background-color:#f1f5f9;font-family:${branding.fontFamily},Arial,sans-serif;width:100%;min-width:100%;\">\n  \n  <div style=\"display:none;font-size:1px;color:#fefefe;line-height:1px;max-height:0px;max-width:0px;opacity:0;overflow:hidden;\">\n    ${title} - Purchase ID: ${purchase.purchaseId}\n  </div>\n  \n  <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"margin:0;padding:0;background-color:#f1f5f9;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n    <tr>\n      <td align=\"center\" style=\"padding:20px 10px;\">\n        <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"600\" style=\"max-width:600px;background-color:#ffffff;border-radius:16px;box-shadow:0 4px 12px rgba(0,0,0,0.1);overflow:hidden;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n          \n          <!-- Header -->\n          <tr>\n            <td align=\"center\" style=\"padding:24px 20px 16px;\">\n              <h1 style=\"margin:0;font-size:24px;font-weight:700;color:#1e293b;line-height:1.2;font-family:${branding.fontFamily},Arial,sans-serif;\">${branding.companyName}</h1>\n              ${branding.companySlogan ? `<p style=\"margin:6px 0 0;color:#64748b;font-size:14px;line-height:1.3;font-family:${branding.fontFamily},Arial,sans-serif;\">${branding.companySlogan}</p>` : ''}\n            </td>\n          </tr>\n          \n          <!-- Success banner -->\n          <tr>\n            <td style=\"padding:0 20px 16px;\">\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:#10b981;border-radius:12px;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                <tr>\n                  <td align=\"center\" style=\"padding:20px 16px;\">\n                    <h2 style=\"margin:0;color:#ffffff;font-size:20px;font-weight:700;line-height:1.2;font-family:${branding.fontFamily},Arial,sans-serif;\">${icon} ${title}</h2>\n                    <p style=\"margin:6px 0 0;color:#ffffff;opacity:0.9;font-size:14px;line-height:1.3;font-family:${branding.fontFamily},Arial,sans-serif;\">Purchase ID: ${purchase.purchaseId}</p>\n                    ${purchaseType === 'bulk' \n                      ? `<p style=\"margin:8px 0 0;color:#ffffff;font-size:18px;font-weight:600;line-height:1.3;font-family:${branding.fontFamily},Arial,sans-serif;\">📞 ${numbersCount} Numbers Purchased</p>`\n                      : `<p style=\"margin:8px 0 0;color:#ffffff;font-size:18px;font-weight:600;line-height:1.3;font-family:${branding.fontFamily},Arial,sans-serif;\">📞 ${phoneNumber.number}</p>`\n                    }\n                  </td>\n                </tr>\n              </table>\n            </td>\n          </tr>\n          \n          <!-- Main content -->\n          <tr>\n            <td style=\"padding:0 20px 24px;\">\n              <h3 style=\"margin:0 0 16px 0;font-size:18px;color:#1e293b;font-weight:600;line-height:1.3;font-family:${branding.fontFamily},Arial,sans-serif;\">Hello ${user.name},</h3>\n              \n              <p style=\"margin:0 0 20px 0;font-size:16px;line-height:1.5;color:#475569;font-family:${branding.fontFamily},Arial,sans-serif;\">\n                ${purchaseType === 'bulk' \n                  ? `You have successfully purchased ${numbersCount} phone numbers. Thank you for your purchase!`\n                  : `You have successfully purchased the phone number ${phoneNumber.number}. Thank you for your purchase!`\n                }\n              </p>\n              \n              ${purchaseType !== 'bulk' ? `\n                <!-- Single phone number details -->\n                <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:#f8fafc;border:2px solid #10b981;border-radius:12px;margin-bottom:20px;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                  <tr>\n                    <td style=\"padding:20px;\">\n                      <h4 style=\"margin:0 0 16px 0;font-size:16px;font-weight:700;color:#1e293b;line-height:1.3;font-family:${branding.fontFamily},Arial,sans-serif;\">📞 Your New Phone Number</h4>\n                      \n                      <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                        <tr>\n                          <td style=\"padding:6px 0;border-bottom:1px solid #e2e8f0;\">\n                            <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                              <tr>\n                                <td width=\"40%\" style=\"font-size:14px;color:#64748b;font-family:${branding.fontFamily},Arial,sans-serif;\">Number:</td>\n                                <td style=\"font-size:16px;color:#10b981;font-weight:700;font-family:${branding.fontFamily},Arial,sans-serif;\">${phoneNumber.number}</td>\n                              </tr>\n                            </table>\n                          </td>\n                        </tr>\n                        <tr>\n                          <td style=\"padding:6px 0;border-bottom:1px solid #e2e8f0;\">\n                            <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                              <tr>\n                                <td width=\"40%\" style=\"font-size:14px;color:#64748b;font-family:${branding.fontFamily},Arial,sans-serif;\">Country:</td>\n                                <td style=\"font-size:14px;color:#1e293b;font-weight:600;font-family:${branding.fontFamily},Arial,sans-serif;\">${phoneNumber.country}</td>\n                              </tr>\n                            </table>\n                          </td>\n                        </tr>\n                        <tr>\n                          <td style=\"padding:6px 0;border-bottom:1px solid #e2e8f0;\">\n                            <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                              <tr>\n                                <td width=\"40%\" style=\"font-size:14px;color:#64748b;font-family:${branding.fontFamily},Arial,sans-serif;\">Type:</td>\n                                <td style=\"font-size:14px;color:#1e293b;font-weight:600;font-family:${branding.fontFamily},Arial,sans-serif;\">${phoneNumber.numberType}</td>\n                              </tr>\n                            </table>\n                          </td>\n                        </tr>\n                        <tr>\n                          <td style=\"padding:6px 0;border-bottom:1px solid #e2e8f0;\">\n                            <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                              <tr>\n                                <td width=\"40%\" style=\"font-size:14px;color:#64748b;font-family:${branding.fontFamily},Arial,sans-serif;\">Monthly Rate:</td>\n                                <td style=\"font-size:14px;color:#1e293b;font-weight:600;font-family:${branding.fontFamily},Arial,sans-serif;\">${formatCurrency(phoneNumber.monthlyRate, phoneNumber.currency)}</td>\n                              </tr>\n                            </table>\n                          </td>\n                        </tr>\n                        ${phoneNumber.setupFee ? `\n                          <tr>\n                            <td style=\"padding:6px 0;\">\n                              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                                <tr>\n                                  <td width=\"40%\" style=\"font-size:14px;color:#64748b;font-family:${branding.fontFamily},Arial,sans-serif;\">Setup Fee:</td>\n                                  <td style=\"font-size:14px;color:#1e293b;font-weight:600;font-family:${branding.fontFamily},Arial,sans-serif;\">${formatCurrency(phoneNumber.setupFee, phoneNumber.currency)}</td>\n                                </tr>\n                              </table>\n                            </td>\n                          </tr>\n                        ` : ''}\n                      </table>\n                    </td>\n                  </tr>\n                </table>\n              ` : `\n                <!-- Bulk purchase phone numbers -->\n                <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:#f8fafc;border:2px solid #10b981;border-radius:12px;margin-bottom:20px;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                  <tr>\n                    <td style=\"padding:20px;\">\n                      <h4 style=\"margin:0 0 16px 0;font-size:16px;font-weight:700;color:#1e293b;line-height:1.3;font-family:${branding.fontFamily},Arial,sans-serif;\">📞 Your Purchased Phone Numbers</h4>\n                      \n                      <div style=\"background-color:#ffffff;border:1px solid #e2e8f0;border-radius:8px;padding:16px;margin-bottom:16px;\">\n                        <p style=\"margin:0 0 12px 0;font-size:14px;color:#475569;line-height:1.5;font-family:${branding.fontFamily},Arial,sans-serif;\">\n                          🎉 <strong>${numbersCount} phone numbers</strong> have been successfully purchased and added to your account:\n                        </p>\n                        \n                        ${purchasedNumbers && purchasedNumbers.length > 0 ? `\n                          <div style=\"max-height:200px;overflow-y:auto;border:1px solid #e2e8f0;border-radius:6px;padding:12px;background-color:#f8fafc;\">\n                            ${purchasedNumbers.map((number, index) => `\n                              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;padding:8px 0;border-bottom:${index < purchasedNumbers.length - 1 ? '1px solid #e2e8f0' : 'none'};\">\n                                <tr>\n                                  <td style=\"font-family:${branding.fontFamily},Arial,sans-serif;padding:0;\">\n                                    <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                                      <tr>\n                                        <td style=\"font-weight:600;color:#10b981;font-size:14px;font-family:${branding.fontFamily},Arial,sans-serif;\">📞 ${number.number}</td>\n                                        <td align=\"right\" style=\"font-size:12px;color:#64748b;font-family:${branding.fontFamily},Arial,sans-serif;\">${number.country}</td>\n                                      </tr>\n                                      <tr>\n                                        <td colspan=\"2\" style=\"font-size:12px;color:#64748b;margin-top:2px;padding-top:2px;font-family:${branding.fontFamily},Arial,sans-serif;\">\n                                          ${number.numberType} • ${formatCurrency(number.monthlyRate, phoneNumber.currency)}/month${number.setupFee ? ` • Setup: ${formatCurrency(number.setupFee, phoneNumber.currency)}` : ''}\n                                        </td>\n                                      </tr>\n                                    </table>\n                                  </td>\n                                </tr>\n                              </table>\n                            `).join('')}\n                          </div>\n                        ` : `\n                          <p style=\"margin:8px 0 0;font-size:13px;color:#64748b;line-height:1.4;font-family:${branding.fontFamily},Arial,sans-serif;\">\n                            You can view the complete list of your new phone numbers in your account dashboard.\n                          </p>\n                        `}\n                      </div>\n                    </td>\n                  </tr>\n                </table>\n              `}\n              \n              <!-- Purchase details -->\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:#f8fafc;border:1px solid #e2e8f0;border-radius:12px;margin-bottom:20px;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                <tr>\n                  <td style=\"padding:20px;\">\n                    <h4 style=\"margin:0 0 16px 0;font-size:16px;font-weight:700;color:#1e293b;line-height:1.3;font-family:${branding.fontFamily},Arial,sans-serif;\">Purchase Details</h4>\n                    \n                    <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                      <tr>\n                        <td style=\"padding:6px 0;border-bottom:1px solid #e2e8f0;\">\n                          <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                            <tr>\n                              <td width=\"40%\" style=\"font-size:14px;color:#64748b;font-family:${branding.fontFamily},Arial,sans-serif;\">Purchase ID:</td>\n                              <td style=\"font-size:14px;color:#1e293b;font-weight:600;font-family:${branding.fontFamily},Arial,sans-serif;\">${purchase.purchaseId}</td>\n                            </tr>\n                          </table>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td style=\"padding:6px 0;border-bottom:1px solid #e2e8f0;\">\n                          <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                            <tr>\n                              <td width=\"40%\" style=\"font-size:14px;color:#64748b;font-family:${branding.fontFamily},Arial,sans-serif;\">Total Amount:</td>\n                              <td style=\"font-size:14px;color:#10b981;font-weight:700;font-family:${branding.fontFamily},Arial,sans-serif;\">${formatCurrency(purchase.totalAmount, phoneNumber.currency)}</td>\n                            </tr>\n                          </table>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td style=\"padding:6px 0;border-bottom:1px solid #e2e8f0;\">\n                          <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                            <tr>\n                              <td width=\"40%\" style=\"font-size:14px;color:#64748b;font-family:${branding.fontFamily},Arial,sans-serif;\">Purchase Date:</td>\n                              <td style=\"font-size:14px;color:#1e293b;font-weight:600;font-family:${branding.fontFamily},Arial,sans-serif;\">${new Date(purchase.purchaseDate).toLocaleDateString()}</td>\n                            </tr>\n                          </table>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td style=\"padding:6px 0;border-bottom:1px solid #e2e8f0;\">\n                          <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                            <tr>\n                              <td width=\"40%\" style=\"font-size:14px;color:#64748b;font-family:${branding.fontFamily},Arial,sans-serif;\">Billing Start:</td>\n                              <td style=\"font-size:14px;color:#1e293b;font-weight:600;font-family:${branding.fontFamily},Arial,sans-serif;\">${new Date(purchase.billingStartDate).toLocaleDateString()}</td>\n                            </tr>\n                          </table>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td style=\"padding:6px 0;\">\n                          <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                            <tr>\n                              <td width=\"40%\" style=\"font-size:14px;color:#64748b;font-family:${branding.fontFamily},Arial,sans-serif;\">Next Billing:</td>\n                              <td style=\"font-size:14px;color:#1e293b;font-weight:600;font-family:${branding.fontFamily},Arial,sans-serif;\">${new Date(purchase.nextBillingDate).toLocaleDateString()}</td>\n                            </tr>\n                          </table>\n                        </td>\n                      </tr>\n                    </table>\n                  </td>\n                </tr>\n              </table>\n              \n              <p style=\"margin:0 0 20px 0;font-size:14px;line-height:1.5;color:#64748b;font-family:${branding.fontFamily},Arial,sans-serif;\">\n                Your phone number${purchaseType === 'bulk' ? 's are' : ' is'} now active and ready to use. Billing will begin according to your account settings.\n              </p>\n              \n              <!-- Call to action -->\n              <div style=\"text-align:center;margin-bottom:20px;\">\n                <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" style=\"margin:0 auto;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                  <tr>\n                    <td style=\"border-radius:8px;background-color:${branding.primaryColor};padding:14px 28px;\">\n                      <a href=\"${process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'}/phone-numbers\" style=\"color:#ffffff;text-decoration:none;font-weight:600;font-size:14px;font-family:${branding.fontFamily},Arial,sans-serif;\">View My Numbers</a>\n                    </td>\n                  </tr>\n                </table>\n              </div>\n              \n              <!-- Footer -->\n              <div style=\"text-align:center;padding-top:20px;border-top:1px solid #e2e8f0;\">\n                <p style=\"margin:0;font-size:12px;color:#94a3b8;line-height:1.4;font-family:${branding.fontFamily},Arial,sans-serif;\">\n                  Thank you for choosing ${branding.companyName}\n                  <br>\n                  This is an automated email. Please do not reply to this message.\n                </p>\n              </div>\n            </td>\n          </tr>\n        </table>\n      </td>\n    </tr>\n  </table>\n</body>\n</html>`;\n\n  // Inline CSS with juice for email client compatibility\n  const html = juice(rawHtml, {\n    removeStyleTags: false,\n    applyStyleTags: true,\n    preserveMediaQueries: true,\n    webResources: {\n      relativeTo: process.cwd()\n    }\n  });\n\n  const textContent = `\n${title}\n\n${purchaseType === 'bulk' \n  ? `📞 PURCHASED: ${numbersCount} phone numbers`\n  : `📞 PHONE NUMBER: ${phoneNumber.number}`\n}\n\nHello ${user.name},\n\n${purchaseType === 'bulk' \n  ? `You have successfully purchased ${numbersCount} phone numbers. Thank you for your purchase!`\n  : `You have successfully purchased the phone number ${phoneNumber.number}. Thank you for your purchase!`\n}\n\n${purchaseType !== 'bulk' ? `\n📞 Phone Number Details:\n- Number: ${phoneNumber.number}\n- Country: ${phoneNumber.country}\n- Type: ${phoneNumber.numberType}\n- Monthly Rate: ${formatCurrency(phoneNumber.monthlyRate, phoneNumber.currency)}\n${phoneNumber.setupFee ? `- Setup Fee: ${formatCurrency(phoneNumber.setupFee, phoneNumber.currency)}` : ''}\n` : `\n📞 Purchased Phone Numbers:\n${purchasedNumbers && purchasedNumbers.length > 0 \n  ? purchasedNumbers.map((number, index) => \n      `${index + 1}. ${number.number} (${number.country}) - ${number.numberType} - ${formatCurrency(number.monthlyRate, phoneNumber.currency)}/month${number.setupFee ? ` + ${formatCurrency(number.setupFee, phoneNumber.currency)} setup` : ''}`\n    ).join('\\n')\n  : `- Total numbers purchased: ${numbersCount}\\n- View complete list in your account dashboard`\n}\n`}\n\nPurchase Details:\n- Purchase ID: ${purchase.purchaseId}\n- Total Amount: ${formatCurrency(purchase.totalAmount, phoneNumber.currency)}\n- Purchase Date: ${new Date(purchase.purchaseDate).toLocaleDateString()}\n- Billing Start: ${new Date(purchase.billingStartDate).toLocaleDateString()}\n- Next Billing: ${new Date(purchase.nextBillingDate).toLocaleDateString()}\n\nYour phone number${purchaseType === 'bulk' ? 's are' : ' is'} now active and ready to use. Billing will begin according to your account settings.\n\nView My Numbers: ${process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'}/phone-numbers\n\nThank you for choosing ${branding.companyName}\n\nThis is an automated email. Please do not reply to this message.\n`;\n\n  return {\n    subject,\n    html,\n    text: textContent.trim()\n  };\n}\n\nexport function generateNumberAssignmentNotificationTemplate(data: NumberAssignmentNotificationData): { subject: string; html: string; text: string } {\n  const { phoneNumber, user, assignment, branding } = data;\n  \n  const formatCurrency = (amount: number, currency: string) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: currency,\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 4,\n    }).format(amount);\n  };\n\n  const icon = '📞';\n  const title = 'Phone Number Assigned to Your Account';\n  \n  const subject = `${icon} ${title} - ${phoneNumber.number} - ${branding.companyName}`;\n\n  const rawHtml = `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta name=\"format-detection\" content=\"telephone=no\">\n  <meta name=\"x-apple-disable-message-reformatting\">\n  <title>${branding.companyName} Phone Number Assignment</title>\n  <style>\n    body, table, td, p, a, li, blockquote {\n      -webkit-text-size-adjust: 100%;\n      -ms-text-size-adjust: 100%;\n    }\n    table, td {\n      mso-table-lspace: 0pt;\n      mso-table-rspace: 0pt;\n    }\n    img {\n      -ms-interpolation-mode: bicubic;\n      border: 0;\n      height: auto;\n      line-height: 100%;\n      outline: none;\n      text-decoration: none;\n    }\n\n    /* Responsive design */\n    @media only screen and (max-width: 600px) {\n      .mobile-padding {\n        padding-left: 16px !important;\n        padding-right: 16px !important;\n      }\n      \n      .mobile-center {\n        text-align: center !important;\n      }\n      \n      .mobile-stack {\n        display: block !important;\n        width: 100% !important;\n        padding-left: 0 !important;\n        padding-right: 0 !important;\n      }\n      \n      .mobile-text-sm {\n        font-size: 14px !important;\n        line-height: 1.4 !important;\n      }\n    }\n  </style>\n</head>\n<body style=\"margin:0;padding:0;background-color:#f1f5f9;font-family:${branding.fontFamily},Arial,sans-serif;width:100%;min-width:100%;\">\n  \n  <div style=\"display:none;font-size:1px;color:#fefefe;line-height:1px;max-height:0px;max-width:0px;opacity:0;overflow:hidden;\">\n    ${title} - ${phoneNumber.number} assigned by ${assignment.assignedBy}\n  </div>\n  \n  <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"margin:0;padding:0;background-color:#f1f5f9;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n    <tr>\n      <td align=\"center\" style=\"padding:20px 10px;\">\n        <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"600\" style=\"max-width:600px;background-color:#ffffff;border-radius:16px;box-shadow:0 4px 12px rgba(0,0,0,0.1);overflow:hidden;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n          \n          <!-- Header -->\n          <tr>\n            <td align=\"center\" style=\"padding:24px 20px 16px;\">\n              <h1 style=\"margin:0;font-size:24px;font-weight:700;color:#1e293b;line-height:1.2;font-family:${branding.fontFamily},Arial,sans-serif;\">${branding.companyName}</h1>\n              ${branding.companySlogan ? `<p style=\"margin:6px 0 0;color:#64748b;font-size:14px;line-height:1.3;font-family:${branding.fontFamily},Arial,sans-serif;\">${branding.companySlogan}</p>` : ''}\n            </td>\n          </tr>\n          \n          <!-- Assignment banner -->\n          <tr>\n            <td style=\"padding:0 20px 16px;\">\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:#3b82f6;border-radius:12px;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                <tr>\n                  <td align=\"center\" style=\"padding:20px 16px;\">\n                    <h2 style=\"margin:0;color:#ffffff;font-size:20px;font-weight:700;line-height:1.2;font-family:${branding.fontFamily},Arial,sans-serif;\">${icon} ${title}</h2>\n                    <p style=\"margin:6px 0 0;color:#ffffff;opacity:0.9;font-size:14px;line-height:1.3;font-family:${branding.fontFamily},Arial,sans-serif;\">Assigned by ${assignment.assignedBy}</p>\n                    <p style=\"margin:8px 0 0;color:#ffffff;font-size:18px;font-weight:600;line-height:1.3;font-family:${branding.fontFamily},Arial,sans-serif;\">📞 ${phoneNumber.number}</p>\n                  </td>\n                </tr>\n              </table>\n            </td>\n          </tr>\n          \n          <!-- Main content -->\n          <tr>\n            <td style=\"padding:0 20px 24px;\">\n              <h3 style=\"margin:0 0 16px 0;font-size:18px;color:#1e293b;font-weight:600;line-height:1.3;font-family:${branding.fontFamily},Arial,sans-serif;\">Hello ${user.name},</h3>\n              \n              <p style=\"margin:0 0 20px 0;font-size:16px;line-height:1.5;color:#475569;font-family:${branding.fontFamily},Arial,sans-serif;\">\n                A phone number has been assigned to your account by an administrator. The number is now active and ready to use.\n              </p>\n              \n              <!-- Phone number details -->\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:#f8fafc;border:2px solid #3b82f6;border-radius:12px;margin-bottom:20px;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                <tr>\n                  <td style=\"padding:20px;\">\n                    <h4 style=\"margin:0 0 16px 0;font-size:16px;font-weight:700;color:#1e293b;line-height:1.3;font-family:${branding.fontFamily},Arial,sans-serif;\">📞 Your New Phone Number</h4>\n                    \n                    <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                      <tr>\n                        <td style=\"padding:6px 0;border-bottom:1px solid #e2e8f0;\">\n                          <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                            <tr>\n                              <td width=\"40%\" style=\"font-size:14px;color:#64748b;font-family:${branding.fontFamily},Arial,sans-serif;\">Number:</td>\n                              <td style=\"font-size:16px;color:#3b82f6;font-weight:700;font-family:${branding.fontFamily},Arial,sans-serif;\">${phoneNumber.number}</td>\n                            </tr>\n                          </table>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td style=\"padding:6px 0;border-bottom:1px solid #e2e8f0;\">\n                          <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                            <tr>\n                              <td width=\"40%\" style=\"font-size:14px;color:#64748b;font-family:${branding.fontFamily},Arial,sans-serif;\">Country:</td>\n                              <td style=\"font-size:14px;color:#1e293b;font-weight:600;font-family:${branding.fontFamily},Arial,sans-serif;\">${phoneNumber.country}</td>\n                            </tr>\n                          </table>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td style=\"padding:6px 0;border-bottom:1px solid #e2e8f0;\">\n                          <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                            <tr>\n                              <td width=\"40%\" style=\"font-size:14px;color:#64748b;font-family:${branding.fontFamily},Arial,sans-serif;\">Type:</td>\n                              <td style=\"font-size:14px;color:#1e293b;font-weight:600;font-family:${branding.fontFamily},Arial,sans-serif;\">${phoneNumber.numberType}</td>\n                            </tr>\n                          </table>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td style=\"padding:6px 0;border-bottom:1px solid #e2e8f0;\">\n                          <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                            <tr>\n                              <td width=\"40%\" style=\"font-size:14px;color:#64748b;font-family:${branding.fontFamily},Arial,sans-serif;\">Monthly Rate:</td>\n                              <td style=\"font-size:14px;color:#1e293b;font-weight:600;font-family:${branding.fontFamily},Arial,sans-serif;\">${formatCurrency(phoneNumber.monthlyRate, phoneNumber.currency)}</td>\n                            </tr>\n                          </table>\n                        </td>\n                      </tr>\n                      ${phoneNumber.setupFee ? `\n                        <tr>\n                          <td style=\"padding:6px 0;\">\n                            <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                              <tr>\n                                <td width=\"40%\" style=\"font-size:14px;color:#64748b;font-family:${branding.fontFamily},Arial,sans-serif;\">Setup Fee:</td>\n                                <td style=\"font-size:14px;color:#1e293b;font-weight:600;font-family:${branding.fontFamily},Arial,sans-serif;\">${formatCurrency(phoneNumber.setupFee, phoneNumber.currency)}</td>\n                              </tr>\n                            </table>\n                          </td>\n                        </tr>\n                      ` : ''}\n                    </table>\n                  </td>\n                </tr>\n              </table>\n              \n              <!-- Assignment details -->\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:#f8fafc;border:1px solid #e2e8f0;border-radius:12px;margin-bottom:20px;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                <tr>\n                  <td style=\"padding:20px;\">\n                    <h4 style=\"margin:0 0 16px 0;font-size:16px;font-weight:700;color:#1e293b;line-height:1.3;font-family:${branding.fontFamily},Arial,sans-serif;\">Assignment Details</h4>\n                    \n                    <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                      <tr>\n                        <td style=\"padding:6px 0;border-bottom:1px solid #e2e8f0;\">\n                          <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                            <tr>\n                              <td width=\"40%\" style=\"font-size:14px;color:#64748b;font-family:${branding.fontFamily},Arial,sans-serif;\">Assigned by:</td>\n                              <td style=\"font-size:14px;color:#1e293b;font-weight:600;font-family:${branding.fontFamily},Arial,sans-serif;\">${assignment.assignedBy}</td>\n                            </tr>\n                          </table>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td style=\"padding:6px 0;border-bottom:1px solid #e2e8f0;\">\n                          <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                            <tr>\n                              <td width=\"40%\" style=\"font-size:14px;color:#64748b;font-family:${branding.fontFamily},Arial,sans-serif;\">Assigned on:</td>\n                              <td style=\"font-size:14px;color:#1e293b;font-weight:600;font-family:${branding.fontFamily},Arial,sans-serif;\">${new Date(assignment.assignedAt).toLocaleDateString()}</td>\n                            </tr>\n                          </table>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td style=\"padding:6px 0;border-bottom:1px solid #e2e8f0;\">\n                          <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                            <tr>\n                              <td width=\"40%\" style=\"font-size:14px;color:#64748b;font-family:${branding.fontFamily},Arial,sans-serif;\">Billing Start:</td>\n                              <td style=\"font-size:14px;color:#1e293b;font-weight:600;font-family:${branding.fontFamily},Arial,sans-serif;\">${new Date(assignment.billingStartDate).toLocaleDateString()}</td>\n                            </tr>\n                          </table>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td style=\"padding:6px 0;${assignment.notes ? 'border-bottom:1px solid #e2e8f0;' : ''}\">\n                          <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                            <tr>\n                              <td width=\"40%\" style=\"font-size:14px;color:#64748b;font-family:${branding.fontFamily},Arial,sans-serif;\">Next Billing:</td>\n                              <td style=\"font-size:14px;color:#1e293b;font-weight:600;font-family:${branding.fontFamily},Arial,sans-serif;\">${new Date(assignment.nextBillingDate).toLocaleDateString()}</td>\n                            </tr>\n                          </table>\n                        </td>\n                      </tr>\n                      ${assignment.notes ? `\n                        <tr>\n                          <td style=\"padding:6px 0;\">\n                            <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                              <tr>\n                                <td width=\"40%\" style=\"font-size:14px;color:#64748b;font-family:${branding.fontFamily},Arial,sans-serif;vertical-align:top;\">Notes:</td>\n                                <td style=\"font-size:14px;color:#1e293b;font-weight:600;font-family:${branding.fontFamily},Arial,sans-serif;\">${assignment.notes}</td>\n                              </tr>\n                            </table>\n                          </td>\n                        </tr>\n                      ` : ''}\n                    </table>\n                  </td>\n                </tr>\n              </table>\n              \n              <p style=\"margin:0 0 20px 0;font-size:14px;line-height:1.5;color:#64748b;font-family:${branding.fontFamily},Arial,sans-serif;\">\n                Your phone number is now active and ready to use. Billing will begin according to your account settings.\n              </p>\n              \n              <!-- Call to action -->\n              <div style=\"text-align:center;margin-bottom:20px;\">\n                <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" style=\"margin:0 auto;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                  <tr>\n                    <td style=\"border-radius:8px;background-color:${branding.primaryColor};padding:14px 28px;\">\n                      <a href=\"${process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'}/phone-numbers\" style=\"color:#ffffff;text-decoration:none;font-weight:600;font-size:14px;font-family:${branding.fontFamily},Arial,sans-serif;\">View My Numbers</a>\n                    </td>\n                  </tr>\n                </table>\n              </div>\n              \n              <!-- Footer -->\n              <div style=\"text-align:center;padding-top:20px;border-top:1px solid #e2e8f0;\">\n                <p style=\"margin:0;font-size:12px;color:#94a3b8;line-height:1.4;font-family:${branding.fontFamily},Arial,sans-serif;\">\n                  Thank you for choosing ${branding.companyName}\n                  <br>\n                  This is an automated email. Please do not reply to this message.\n                </p>\n              </div>\n            </td>\n          </tr>\n        </table>\n      </td>\n    </tr>\n  </table>\n</body>\n</html>`;\n\n  // Inline CSS with juice for email client compatibility\n  const html = juice(rawHtml, {\n    removeStyleTags: false,\n    applyStyleTags: true,\n    preserveMediaQueries: true,\n    webResources: {\n      relativeTo: process.cwd()\n    }\n  });\n\n  const textContent = `\n${title}\n\n📞 PHONE NUMBER: ${phoneNumber.number}\n\nHello ${user.name},\n\nA phone number has been assigned to your account by an administrator. The number is now active and ready to use.\n\n📞 Phone Number Details:\n- Number: ${phoneNumber.number}\n- Country: ${phoneNumber.country}\n- Type: ${phoneNumber.numberType}\n- Monthly Rate: ${formatCurrency(phoneNumber.monthlyRate, phoneNumber.currency)}\n${phoneNumber.setupFee ? `- Setup Fee: ${formatCurrency(phoneNumber.setupFee, phoneNumber.currency)}` : ''}\n\nAssignment Details:\n- Assigned by: ${assignment.assignedBy}\n- Assigned on: ${new Date(assignment.assignedAt).toLocaleDateString()}\n- Billing Start: ${new Date(assignment.billingStartDate).toLocaleDateString()}\n- Next Billing: ${new Date(assignment.nextBillingDate).toLocaleDateString()}\n${assignment.notes ? `- Notes: ${assignment.notes}` : ''}\n\nYour phone number is now active and ready to use. Billing will begin according to your account settings.\n\nView My Numbers: ${process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'}/phone-numbers\n\nThank you for choosing ${branding.companyName}\n\nThis is an automated email. Please do not reply to this message.\n`;\n\n  return {\n    subject,\n    html,\n    text: textContent.trim()\n  };\n} \n\n// Admin notification templates for user actions\n\nexport function generateAdminUserPurchaseNotificationTemplate(data: AdminUserPurchaseNotificationData): { subject: string; html: string; text: string } {\n  const { phoneNumber, user, purchase, purchaseType, numbersCount, purchasedNumbers, branding } = data;\n  \n  const formatCurrency = (amount: number, currency: string) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: currency,\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 4,\n    }).format(amount);\n  };\n\n  const isPurchaseTypeDisplay = purchaseType === 'bulk' ? 'Bulk Purchase' : 'Single Purchase';\n  const numbersDisplay = purchaseType === 'bulk' ? `${numbersCount} Numbers` : phoneNumber.number;\n  \n  const subject = `🔔 Admin Alert: User Phone Number ${isPurchaseTypeDisplay} - ${user.name} - ${branding.companyName}`;\n\n  const rawHtml = `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>${branding.companyName} Admin Alert - User Purchase</title>\n</head>\n<body style=\"margin:0;padding:0;background-color:#f1f5f9;font-family:${branding.fontFamily},Arial,sans-serif;\">\n  \n  <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"margin:0;padding:0;background-color:#f1f5f9;\">\n    <tr>\n      <td align=\"center\" style=\"padding:20px 10px;\">\n        <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"600\" style=\"max-width:600px;background-color:#ffffff;border-radius:16px;overflow:hidden;\">\n          \n          <!-- Header -->\n          <tr>\n            <td align=\"center\" style=\"padding:24px 20px 16px;border-bottom:2px solid #f59e0b;\">\n              <h1 style=\"margin:0;font-size:24px;font-weight:700;color:#1e293b;\">${branding.companyName}</h1>\n              <p style=\"margin:6px 0 0;color:#64748b;font-size:14px;\">Admin Notification System</p>\n            </td>\n          </tr>\n          \n          <!-- Alert banner -->\n          <tr>\n            <td style=\"padding:16px 20px;\">\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:#f59e0b;border-radius:12px;\">\n                <tr>\n                  <td align=\"center\" style=\"padding:20px;\">\n                    <h2 style=\"margin:0;color:#ffffff;font-size:20px;font-weight:700;\">🔔 User Phone Number ${isPurchaseTypeDisplay}</h2>\n                    <p style=\"margin:6px 0 0;color:#ffffff;opacity:0.9;font-size:16px;font-weight:600;\">${numbersDisplay}</p>\n                  </td>\n                </tr>\n              </table>\n            </td>\n          </tr>\n          \n          <!-- User Information -->\n          <tr>\n            <td style=\"padding:16px 20px;\">\n              <h3 style=\"margin:0 0 12px 0;font-size:16px;font-weight:700;color:#1e293b;\">Customer Information</h3>\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:#f8fafc;border-radius:8px;\">\n                <tr>\n                  <td style=\"padding:16px;\">\n                    <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\">\n                      <tr>\n                        <td width=\"30%\" style=\"font-size:14px;color:#64748b;padding:4px 0;\">Name:</td>\n                        <td style=\"font-size:14px;color:#1e293b;font-weight:600;padding:4px 0;\">${user.name}</td>\n                      </tr>\n                      <tr>\n                        <td style=\"font-size:14px;color:#64748b;padding:4px 0;\">Email:</td>\n                        <td style=\"font-size:14px;color:#1e293b;font-weight:600;padding:4px 0;\">${user.email}</td>\n                      </tr>\n                      ${user.company ? `\n                      <tr>\n                        <td style=\"font-size:14px;color:#64748b;padding:4px 0;\">Company:</td>\n                        <td style=\"font-size:14px;color:#1e293b;font-weight:600;padding:4px 0;\">${user.company}</td>\n                      </tr>\n                      ` : ''}\n                    </table>\n                  </td>\n                </tr>\n              </table>\n            </td>\n          </tr>\n          \n          <!-- Purchase Details -->\n          <tr>\n            <td style=\"padding:16px 20px;\">\n              <h3 style=\"margin:0 0 12px 0;font-size:16px;font-weight:700;color:#1e293b;\">Purchase Details</h3>\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:#f8fafc;border-radius:8px;\">\n                <tr>\n                  <td style=\"padding:16px;\">\n                    <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\">\n                      <tr>\n                        <td width=\"30%\" style=\"font-size:14px;color:#64748b;padding:4px 0;\">Purchase ID:</td>\n                        <td style=\"font-size:14px;color:#1e293b;font-weight:600;padding:4px 0;\">${purchase.purchaseId}</td>\n                      </tr>\n                      <tr>\n                        <td style=\"font-size:14px;color:#64748b;padding:4px 0;\">Purchase Date:</td>\n                        <td style=\"font-size:14px;color:#1e293b;font-weight:600;padding:4px 0;\">${new Date(purchase.purchaseDate).toLocaleString()}</td>\n                      </tr>\n                      <tr>\n                        <td style=\"font-size:14px;color:#64748b;padding:4px 0;\">Total Amount:</td>\n                        <td style=\"font-size:14px;color:#1e293b;font-weight:600;padding:4px 0;\">${formatCurrency(purchase.totalAmount, phoneNumber.currency)}</td>\n                      </tr>\n                      ${purchaseType === 'bulk' ? `\n                      <tr>\n                        <td style=\"font-size:14px;color:#64748b;padding:4px 0;\">Numbers Count:</td>\n                        <td style=\"font-size:14px;color:#1e293b;font-weight:600;padding:4px 0;\">${numbersCount} numbers</td>\n                      </tr>\n                      ` : `\n                      <tr>\n                        <td style=\"font-size:14px;color:#64748b;padding:4px 0;\">Phone Number:</td>\n                        <td style=\"font-size:14px;color:#1e293b;font-weight:600;padding:4px 0;\">${phoneNumber.number}</td>\n                      </tr>\n                      <tr>\n                        <td style=\"font-size:14px;color:#64748b;padding:4px 0;\">Country:</td>\n                        <td style=\"font-size:14px;color:#1e293b;font-weight:600;padding:4px 0;\">${phoneNumber.country}</td>\n                      </tr>\n                      <tr>\n                        <td style=\"font-size:14px;color:#64748b;padding:4px 0;\">Number Type:</td>\n                        <td style=\"font-size:14px;color:#1e293b;font-weight:600;padding:4px 0;\">${phoneNumber.numberType}</td>\n                      </tr>\n                      <tr>\n                        <td style=\"font-size:14px;color:#64748b;padding:4px 0;\">Monthly Rate:</td>\n                        <td style=\"font-size:14px;color:#1e293b;font-weight:600;padding:4px 0;\">${formatCurrency(phoneNumber.monthlyRate, phoneNumber.currency)}/month</td>\n                      </tr>\n                      `}\n                    </table>\n                  </td>\n                </tr>\n              </table>\n            </td>\n          </tr>\n          \n          <!-- Quick Actions -->\n          <tr>\n            <td style=\"padding:16px 20px;\">\n              <h3 style=\"margin:0 0 12px 0;font-size:16px;font-weight:700;color:#1e293b;\">Quick Actions</h3>\n              <p style=\"margin:0 0 12px 0;font-size:14px;color:#64748b;\">Access the admin panel to manage this purchase:</p>\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\">\n                <tr>\n                  <td style=\"padding:8px 16px;background-color:${branding.primaryColor};border-radius:6px;\">\n                    <a href=\"${process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'}/admin/phone-numbers\" style=\"color:#ffffff;text-decoration:none;font-size:14px;font-weight:600;\">View Phone Numbers</a>\n                  </td>\n                  <td style=\"width:12px;\"></td>\n                  <td style=\"padding:8px 16px;background-color:#64748b;border-radius:6px;\">\n                    <a href=\"${process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'}/admin/users\" style=\"color:#ffffff;text-decoration:none;font-size:14px;font-weight:600;\">Manage Users</a>\n                  </td>\n                </tr>\n              </table>\n            </td>\n          </tr>\n          \n          <!-- Footer -->\n          <tr>\n            <td style=\"padding:20px;background-color:#f8fafc;text-align:center;\">\n              <p style=\"margin:0;font-size:12px;color:#64748b;\">This is an automated admin notification from ${branding.companyName}</p>\n            </td>\n          </tr>\n        </table>\n      </td>\n    </tr>\n  </table>\n</body>\n</html>`;\n\n  const text = `Admin Alert: User Phone Number ${isPurchaseTypeDisplay}\n\nCustomer: ${user.name} (${user.email})\n${user.company ? `Company: ${user.company}` : ''}\n\nPurchase Details:\n- Purchase ID: ${purchase.purchaseId}\n- Date: ${new Date(purchase.purchaseDate).toLocaleString()}\n- Total Amount: ${formatCurrency(purchase.totalAmount, phoneNumber.currency)}\n${purchaseType === 'bulk' ? `- Numbers Count: ${numbersCount} numbers` : `\n- Phone Number: ${phoneNumber.number}\n- Country: ${phoneNumber.country}\n- Number Type: ${phoneNumber.numberType}\n- Monthly Rate: ${formatCurrency(phoneNumber.monthlyRate, phoneNumber.currency)}/month`}\n\nAccess the admin panel to manage this purchase:\n${process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'}/admin/phone-numbers\n\n---\nThis is an automated admin notification from ${branding.companyName}`;\n\n  return { subject, html: rawHtml, text };\n}\n\nexport function generateAdminBackorderRequestNotificationTemplate(data: AdminBackorderRequestNotificationData): { subject: string; html: string; text: string } {\n  const { phoneNumber, user, request, requestType, numbersCount, branding } = data;\n  \n  const isPurchaseTypeDisplay = requestType === 'bulk' ? 'Bulk Backorder' : 'Backorder';\n  const numbersDisplay = requestType === 'bulk' ? `${numbersCount} Numbers` : phoneNumber.number;\n  \n  const subject = `🔔 Admin Alert: New ${isPurchaseTypeDisplay} Request - ${user.name} - ${branding.companyName}`;\n\n  const rawHtml = `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>${branding.companyName} Admin Alert - Backorder Request</title>\n</head>\n<body style=\"margin:0;padding:0;background-color:#f1f5f9;font-family:${branding.fontFamily},Arial,sans-serif;\">\n  \n  <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"margin:0;padding:0;background-color:#f1f5f9;\">\n    <tr>\n      <td align=\"center\" style=\"padding:20px 10px;\">\n        <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"600\" style=\"max-width:600px;background-color:#ffffff;border-radius:16px;overflow:hidden;\">\n          \n          <!-- Header -->\n          <tr>\n            <td align=\"center\" style=\"padding:24px 20px 16px;border-bottom:2px solid #8b5cf6;\">\n              <h1 style=\"margin:0;font-size:24px;font-weight:700;color:#1e293b;\">${branding.companyName}</h1>\n              <p style=\"margin:6px 0 0;color:#64748b;font-size:14px;\">Admin Notification System</p>\n            </td>\n          </tr>\n          \n          <!-- Alert banner -->\n          <tr>\n            <td style=\"padding:16px 20px;\">\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:#8b5cf6;border-radius:12px;\">\n                <tr>\n                  <td align=\"center\" style=\"padding:20px;\">\n                    <h2 style=\"margin:0;color:#ffffff;font-size:20px;font-weight:700;\">🔔 New ${isPurchaseTypeDisplay} Request</h2>\n                    <p style=\"margin:6px 0 0;color:#ffffff;opacity:0.9;font-size:16px;font-weight:600;\">${numbersDisplay}</p>\n                    <p style=\"margin:8px 0 0;color:#ffffff;font-size:14px;\">Request #${request.requestNumber}</p>\n                  </td>\n                </tr>\n              </table>\n            </td>\n          </tr>\n          \n          <!-- Customer Information -->\n          <tr>\n            <td style=\"padding:16px 20px;\">\n              <h3 style=\"margin:0 0 12px 0;font-size:16px;font-weight:700;color:#1e293b;\">Customer Information</h3>\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:#f8fafc;border-radius:8px;\">\n                <tr>\n                  <td style=\"padding:16px;\">\n                    <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\">\n                      <tr>\n                        <td width=\"30%\" style=\"font-size:14px;color:#64748b;padding:4px 0;\">Name:</td>\n                        <td style=\"font-size:14px;color:#1e293b;font-weight:600;padding:4px 0;\">${user.name}</td>\n                      </tr>\n                      <tr>\n                        <td style=\"font-size:14px;color:#64748b;padding:4px 0;\">Email:</td>\n                        <td style=\"font-size:14px;color:#1e293b;font-weight:600;padding:4px 0;\">${user.email}</td>\n                      </tr>\n                      ${user.company ? `\n                      <tr>\n                        <td style=\"font-size:14px;color:#64748b;padding:4px 0;\">Company:</td>\n                        <td style=\"font-size:14px;color:#1e293b;font-weight:600;padding:4px 0;\">${user.company}</td>\n                      </tr>\n                      ` : ''}\n                    </table>\n                  </td>\n                </tr>\n              </table>\n            </td>\n          </tr>\n          \n          <!-- Request Details -->\n          <tr>\n            <td style=\"padding:16px 20px;\">\n              <h3 style=\"margin:0 0 12px 0;font-size:16px;font-weight:700;color:#1e293b;\">Request Details</h3>\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:#f8fafc;border-radius:8px;\">\n                <tr>\n                  <td style=\"padding:16px;\">\n                    <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\">\n                      <tr>\n                        <td width=\"30%\" style=\"font-size:14px;color:#64748b;padding:4px 0;\">Request Number:</td>\n                        <td style=\"font-size:14px;color:#1e293b;font-weight:600;padding:4px 0;\">${request.requestNumber}</td>\n                      </tr>\n                      <tr>\n                        <td style=\"font-size:14px;color:#64748b;padding:4px 0;\">Submitted:</td>\n                        <td style=\"font-size:14px;color:#1e293b;font-weight:600;padding:4px 0;\">${new Date(request.submittedAt).toLocaleString()}</td>\n                      </tr>\n                      ${requestType === 'bulk' ? `\n                      <tr>\n                        <td style=\"font-size:14px;color:#64748b;padding:4px 0;\">Numbers Count:</td>\n                        <td style=\"font-size:14px;color:#1e293b;font-weight:600;padding:4px 0;\">${numbersCount} numbers</td>\n                      </tr>\n                      ` : `\n                      <tr>\n                        <td style=\"font-size:14px;color:#64748b;padding:4px 0;\">Phone Number:</td>\n                        <td style=\"font-size:14px;color:#1e293b;font-weight:600;padding:4px 0;\">${phoneNumber.number}</td>\n                      </tr>\n                      <tr>\n                        <td style=\"font-size:14px;color:#64748b;padding:4px 0;\">Country:</td>\n                        <td style=\"font-size:14px;color:#1e293b;font-weight:600;padding:4px 0;\">${phoneNumber.country}</td>\n                      </tr>\n                      <tr>\n                        <td style=\"font-size:14px;color:#64748b;padding:4px 0;\">Number Type:</td>\n                        <td style=\"font-size:14px;color:#1e293b;font-weight:600;padding:4px 0;\">${phoneNumber.numberType}</td>\n                      </tr>\n                      `}\n                      ${request.reason ? `\n                      <tr>\n                        <td style=\"font-size:14px;color:#64748b;padding:4px 0;vertical-align:top;\">Reason:</td>\n                        <td style=\"font-size:14px;color:#1e293b;font-weight:600;padding:4px 0;\">${request.reason}</td>\n                      </tr>\n                      ` : ''}\n                      ${request.businessJustification ? `\n                      <tr>\n                        <td style=\"font-size:14px;color:#64748b;padding:4px 0;vertical-align:top;\">Justification:</td>\n                        <td style=\"font-size:14px;color:#1e293b;font-weight:600;padding:4px 0;\">${request.businessJustification}</td>\n                      </tr>\n                      ` : ''}\n                    </table>\n                  </td>\n                </tr>\n              </table>\n            </td>\n          </tr>\n          \n          <!-- Action Required -->\n          <tr>\n            <td style=\"padding:16px 20px;\">\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:#fef3c7;border:1px solid #f59e0b;border-radius:8px;\">\n                <tr>\n                  <td style=\"padding:16px;\">\n                    <h3 style=\"margin:0 0 8px 0;font-size:16px;font-weight:700;color:#92400e;\">⚠️ Action Required</h3>\n                    <p style=\"margin:0 0 12px 0;font-size:14px;color:#92400e;\">This backorder request requires admin review and approval.</p>\n                    <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\">\n                      <tr>\n                        <td style=\"padding:8px 16px;background-color:${branding.primaryColor};border-radius:6px;\">\n                          <a href=\"${process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'}/admin/backorder-requests\" style=\"color:#ffffff;text-decoration:none;font-size:14px;font-weight:600;\">Review Request</a>\n                        </td>\n                      </tr>\n                    </table>\n                  </td>\n                </tr>\n              </table>\n            </td>\n          </tr>\n          \n          <!-- Footer -->\n          <tr>\n            <td style=\"padding:20px;background-color:#f8fafc;text-align:center;\">\n              <p style=\"margin:0;font-size:12px;color:#64748b;\">This is an automated admin notification from ${branding.companyName}</p>\n            </td>\n          </tr>\n        </table>\n      </td>\n    </tr>\n  </table>\n</body>\n</html>`;\n\n  const text = `Admin Alert: New ${isPurchaseTypeDisplay} Request\n\nCustomer: ${user.name} (${user.email})\n${user.company ? `Company: ${user.company}` : ''}\n\nRequest Details:\n- Request Number: ${request.requestNumber}\n- Submitted: ${new Date(request.submittedAt).toLocaleString()}\n${requestType === 'bulk' ? `- Numbers Count: ${numbersCount} numbers` : `\n- Phone Number: ${phoneNumber.number}\n- Country: ${phoneNumber.country}\n- Number Type: ${phoneNumber.numberType}`}\n${request.reason ? `- Reason: ${request.reason}` : ''}\n${request.businessJustification ? `- Justification: ${request.businessJustification}` : ''}\n\nACTION REQUIRED: This backorder request requires admin review and approval.\nReview at: ${process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'}/admin/backorder-requests\n\n---\nThis is an automated admin notification from ${branding.companyName}`;\n\n  return { subject, html: rawHtml, text };\n}\n\nexport function generateAdminCancellationRequestNotificationTemplate(data: AdminCancellationRequestNotificationData): { subject: string; html: string; text: string } {\n  const { phoneNumber, user, request, branding } = data;\n  \n  const subject = `🔔 Admin Alert: New Cancellation Request - ${phoneNumber.number} - ${user.name} - ${branding.companyName}`;\n\n  const rawHtml = `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>${branding.companyName} Admin Alert - Cancellation Request</title>\n</head>\n<body style=\"margin:0;padding:0;background-color:#f1f5f9;font-family:${branding.fontFamily},Arial,sans-serif;\">\n  \n  <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"margin:0;padding:0;background-color:#f1f5f9;\">\n    <tr>\n      <td align=\"center\" style=\"padding:20px 10px;\">\n        <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"600\" style=\"max-width:600px;background-color:#ffffff;border-radius:16px;overflow:hidden;\">\n          \n          <!-- Header -->\n          <tr>\n            <td align=\"center\" style=\"padding:24px 20px 16px;border-bottom:2px solid #ef4444;\">\n              <h1 style=\"margin:0;font-size:24px;font-weight:700;color:#1e293b;\">${branding.companyName}</h1>\n              <p style=\"margin:6px 0 0;color:#64748b;font-size:14px;\">Admin Notification System</p>\n            </td>\n          </tr>\n          \n          <!-- Alert banner -->\n          <tr>\n            <td style=\"padding:16px 20px;\">\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:#ef4444;border-radius:12px;\">\n                <tr>\n                  <td align=\"center\" style=\"padding:20px;\">\n                    <h2 style=\"margin:0;color:#ffffff;font-size:20px;font-weight:700;\">🔔 New Cancellation Request</h2>\n                    <p style=\"margin:6px 0 0;color:#ffffff;opacity:0.9;font-size:16px;font-weight:600;\">${phoneNumber.number}</p>\n                    <p style=\"margin:8px 0 0;color:#ffffff;font-size:14px;\">Request #${request.requestId}</p>\n                  </td>\n                </tr>\n              </table>\n            </td>\n          </tr>\n          \n          <!-- Customer Information -->\n          <tr>\n            <td style=\"padding:16px 20px;\">\n              <h3 style=\"margin:0 0 12px 0;font-size:16px;font-weight:700;color:#1e293b;\">Customer Information</h3>\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:#f8fafc;border-radius:8px;\">\n                <tr>\n                  <td style=\"padding:16px;\">\n                    <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\">\n                      <tr>\n                        <td width=\"30%\" style=\"font-size:14px;color:#64748b;padding:4px 0;\">Name:</td>\n                        <td style=\"font-size:14px;color:#1e293b;font-weight:600;padding:4px 0;\">${user.name}</td>\n                      </tr>\n                      <tr>\n                        <td style=\"font-size:14px;color:#64748b;padding:4px 0;\">Email:</td>\n                        <td style=\"font-size:14px;color:#1e293b;font-weight:600;padding:4px 0;\">${user.email}</td>\n                      </tr>\n                      ${user.company ? `\n                      <tr>\n                        <td style=\"font-size:14px;color:#64748b;padding:4px 0;\">Company:</td>\n                        <td style=\"font-size:14px;color:#1e293b;font-weight:600;padding:4px 0;\">${user.company}</td>\n                      </tr>\n                      ` : ''}\n                    </table>\n                  </td>\n                </tr>\n              </table>\n            </td>\n          </tr>\n          \n          <!-- Phone Number Details -->\n          <tr>\n            <td style=\"padding:16px 20px;\">\n              <h3 style=\"margin:0 0 12px 0;font-size:16px;font-weight:700;color:#1e293b;\">Phone Number Details</h3>\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:#f8fafc;border-radius:8px;\">\n                <tr>\n                  <td style=\"padding:16px;\">\n                    <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\">\n                      <tr>\n                        <td width=\"30%\" style=\"font-size:14px;color:#64748b;padding:4px 0;\">Phone Number:</td>\n                        <td style=\"font-size:14px;color:#1e293b;font-weight:600;padding:4px 0;\">${phoneNumber.number}</td>\n                      </tr>\n                      <tr>\n                        <td style=\"font-size:14px;color:#64748b;padding:4px 0;\">Country:</td>\n                        <td style=\"font-size:14px;color:#1e293b;font-weight:600;padding:4px 0;\">${phoneNumber.country}</td>\n                      </tr>\n                      <tr>\n                        <td style=\"font-size:14px;color:#64748b;padding:4px 0;\">Number Type:</td>\n                        <td style=\"font-size:14px;color:#1e293b;font-weight:600;padding:4px 0;\">${phoneNumber.numberType}</td>\n                      </tr>\n                      <tr>\n                        <td style=\"font-size:14px;color:#64748b;padding:4px 0;\">Monthly Rate:</td>\n                        <td style=\"font-size:14px;color:#1e293b;font-weight:600;padding:4px 0;\">${new Intl.NumberFormat('en-US', { style: 'currency', currency: phoneNumber.currency }).format(phoneNumber.monthlyRate)}/month</td>\n                      </tr>\n                    </table>\n                  </td>\n                </tr>\n              </table>\n            </td>\n          </tr>\n          \n          <!-- Request Details -->\n          <tr>\n            <td style=\"padding:16px 20px;\">\n              <h3 style=\"margin:0 0 12px 0;font-size:16px;font-weight:700;color:#1e293b;\">Cancellation Request</h3>\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:#f8fafc;border-radius:8px;\">\n                <tr>\n                  <td style=\"padding:16px;\">\n                    <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\">\n                      <tr>\n                        <td width=\"30%\" style=\"font-size:14px;color:#64748b;padding:4px 0;\">Request ID:</td>\n                        <td style=\"font-size:14px;color:#1e293b;font-weight:600;padding:4px 0;\">${request.requestId}</td>\n                      </tr>\n                      <tr>\n                        <td style=\"font-size:14px;color:#64748b;padding:4px 0;\">Submitted:</td>\n                        <td style=\"font-size:14px;color:#1e293b;font-weight:600;padding:4px 0;\">${new Date(request.submittedAt).toLocaleString()}</td>\n                      </tr>\n                      ${request.reason ? `\n                      <tr>\n                        <td style=\"font-size:14px;color:#64748b;padding:4px 0;vertical-align:top;\">Reason:</td>\n                        <td style=\"font-size:14px;color:#1e293b;font-weight:600;padding:4px 0;\">${request.reason}</td>\n                      </tr>\n                      ` : ''}\n                      ${request.businessJustification ? `\n                      <tr>\n                        <td style=\"font-size:14px;color:#64748b;padding:4px 0;vertical-align:top;\">Justification:</td>\n                        <td style=\"font-size:14px;color:#1e293b;font-weight:600;padding:4px 0;\">${request.businessJustification}</td>\n                      </tr>\n                      ` : ''}\n                    </table>\n                  </td>\n                </tr>\n              </table>\n            </td>\n          </tr>\n          \n          <!-- Action Required -->\n          <tr>\n            <td style=\"padding:16px 20px;\">\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:#fef3c7;border:1px solid #f59e0b;border-radius:8px;\">\n                <tr>\n                  <td style=\"padding:16px;\">\n                    <h3 style=\"margin:0 0 8px 0;font-size:16px;font-weight:700;color:#92400e;\">⚠️ Action Required</h3>\n                    <p style=\"margin:0 0 12px 0;font-size:14px;color:#92400e;\">This cancellation request requires admin review and approval.</p>\n                    <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\">\n                      <tr>\n                        <td style=\"padding:8px 16px;background-color:${branding.primaryColor};border-radius:6px;\">\n                          <a href=\"${process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'}/admin/phone-numbers/requests\" style=\"color:#ffffff;text-decoration:none;font-size:14px;font-weight:600;\">Review Request</a>\n                        </td>\n                      </tr>\n                    </table>\n                  </td>\n                </tr>\n              </table>\n            </td>\n          </tr>\n          \n          <!-- Footer -->\n          <tr>\n            <td style=\"padding:20px;background-color:#f8fafc;text-align:center;\">\n              <p style=\"margin:0;font-size:12px;color:#64748b;\">This is an automated admin notification from ${branding.companyName}</p>\n            </td>\n          </tr>\n        </table>\n      </td>\n    </tr>\n  </table>\n</body>\n</html>`;\n\n  const text = `Admin Alert: New Cancellation Request\n\nCustomer: ${user.name} (${user.email})\n${user.company ? `Company: ${user.company}` : ''}\n\nPhone Number Details:\n- Phone Number: ${phoneNumber.number}\n- Country: ${phoneNumber.country}\n- Number Type: ${phoneNumber.numberType}\n- Monthly Rate: ${new Intl.NumberFormat('en-US', { style: 'currency', currency: phoneNumber.currency }).format(phoneNumber.monthlyRate)}/month\n\nCancellation Request:\n- Request ID: ${request.requestId}\n- Submitted: ${new Date(request.submittedAt).toLocaleString()}\n${request.reason ? `- Reason: ${request.reason}` : ''}\n${request.businessJustification ? `- Justification: ${request.businessJustification}` : ''}\n\nACTION REQUIRED: This cancellation request requires admin review and approval.\nReview at: ${process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'}/admin/phone-numbers/requests\n\n---\nThis is an automated admin notification from ${branding.companyName}`;\n\n  return { subject, html: rawHtml, text };\n}\n\nexport function generateNumberUnassignmentNotificationTemplate(data: NumberUnassignmentNotificationData): { subject: string; html: string; text: string } {\n  const { phoneNumber, user, unassignment, branding } = data;\n  \n  const formatCurrency = (amount: number, currency: string) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: currency,\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 4,\n    }).format(amount);\n  };\n\n  const icon = '📞';\n  const title = 'Phone Number Unassigned from Your Account';\n  \n  const subject = `${icon} ${title} - ${phoneNumber.number} - ${branding.companyName}`;\n\n  const rawHtml = `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta name=\"format-detection\" content=\"telephone=no\">\n  <meta name=\"x-apple-disable-message-reformatting\">\n  <title>${branding.companyName}</title>\n  <style>\n    body, table, td, p, a, li, blockquote {\n      -webkit-text-size-adjust: 100%;\n      -ms-text-size-adjust: 100%;\n    }\n    table, td {\n      mso-table-lspace: 0pt;\n      mso-table-rspace: 0pt;\n    }\n    img {\n      -ms-interpolation-mode: bicubic;\n      border: 0;\n      height: auto;\n      line-height: 100%;\n      outline: none;\n      text-decoration: none;\n    }\n\n    /* Responsive design */\n    @media only screen and (max-width: 600px) {\n      .mobile-padding {\n        padding-left: 16px !important;\n        padding-right: 16px !important;\n      }\n      \n      .mobile-center {\n        text-align: center !important;\n      }\n      \n      .mobile-stack {\n        display: block !important;\n        width: 100% !important;\n        padding-left: 0 !important;\n        padding-right: 0 !important;\n      }\n      \n      .mobile-text-sm {\n        font-size: 14px !important;\n        line-height: 1.4 !important;\n      }\n    }\n  </style>\n</head>\n<body style=\"margin:0;padding:0;background-color:#f1f5f9;font-family:${branding.fontFamily},Arial,sans-serif;width:100%;min-width:100%;\">\n  \n  <div style=\"display:none;font-size:1px;color:#fefefe;line-height:1px;max-height:0px;max-width:0px;opacity:0;overflow:hidden;\">\n    ${title} - ${phoneNumber.number} unassigned by ${unassignment.unassignedBy}\n  </div>\n  \n  <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"margin:0;padding:0;background-color:#f1f5f9;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n    <tr>\n      <td align=\"center\" style=\"padding:20px 10px;\">\n        <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"600\" style=\"max-width:600px;background-color:#ffffff;border-radius:16px;box-shadow:0 4px 12px rgba(0,0,0,0.1);overflow:hidden;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n          \n          <!-- Header -->\n          <tr>\n            <td align=\"center\" style=\"padding:24px 20px 16px;\">\n              <h1 style=\"margin:0;font-size:24px;font-weight:700;color:#1e293b;line-height:1.2;font-family:${branding.fontFamily},Arial,sans-serif;\">${branding.companyName}</h1>\n              ${branding.companySlogan ? `<p style=\"margin:6px 0 0;color:#64748b;font-size:14px;line-height:1.3;font-family:${branding.fontFamily},Arial,sans-serif;\">${branding.companySlogan}</p>` : ''}\n            </td>\n          </tr>\n          \n          <!-- Unassignment banner -->\n          <tr>\n            <td style=\"padding:0 20px 16px;\">\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:#f59e0b;border-radius:12px;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                <tr>\n                  <td align=\"center\" style=\"padding:20px 16px;\">\n                    <h2 style=\"margin:0;color:#ffffff;font-size:20px;font-weight:700;line-height:1.2;font-family:${branding.fontFamily},Arial,sans-serif;\">${icon} ${title}</h2>\n                    <p style=\"margin:6px 0 0;color:#ffffff;opacity:0.9;font-size:14px;line-height:1.3;font-family:${branding.fontFamily},Arial,sans-serif;\">Unassigned by ${unassignment.unassignedBy}</p>\n                    <p style=\"margin:8px 0 0;color:#ffffff;font-size:18px;font-weight:600;line-height:1.3;font-family:${branding.fontFamily},Arial,sans-serif;\">📞 ${phoneNumber.number}</p>\n                  </td>\n                </tr>\n              </table>\n            </td>\n          </tr>\n          \n          <!-- Main content -->\n          <tr>\n            <td style=\"padding:0 20px 24px;\">\n              <h3 style=\"margin:0 0 16px 0;font-size:18px;color:#1e293b;font-weight:600;line-height:1.3;font-family:${branding.fontFamily},Arial,sans-serif;\">Hello ${user.name},</h3>\n              \n              <p style=\"margin:0 0 20px 0;font-size:16px;line-height:1.5;color:#475569;font-family:${branding.fontFamily},Arial,sans-serif;\">\n                A phone number has been unassigned from your account by an administrator. The number is no longer available to you and billing has been stopped.\n              </p>\n              \n              <!-- Phone number details -->\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:#fef3cd;border:2px solid #f59e0b;border-radius:12px;margin-bottom:20px;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                <tr>\n                  <td style=\"padding:20px;\">\n                    <h4 style=\"margin:0 0 16px 0;font-size:16px;font-weight:700;color:#92400e;line-height:1.3;font-family:${branding.fontFamily},Arial,sans-serif;\">📞 Unassigned Phone Number</h4>\n                    \n                    <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                      <tr>\n                        <td style=\"padding:6px 0;border-bottom:1px solid #fbbf24;\">\n                          <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                            <tr>\n                              <td width=\"40%\" style=\"font-size:14px;color:#92400e;font-family:${branding.fontFamily},Arial,sans-serif;\">Number:</td>\n                              <td style=\"font-size:16px;color:#f59e0b;font-weight:700;font-family:${branding.fontFamily},Arial,sans-serif;\">${phoneNumber.number}</td>\n                            </tr>\n                          </table>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td style=\"padding:6px 0;border-bottom:1px solid #fbbf24;\">\n                          <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                            <tr>\n                              <td width=\"40%\" style=\"font-size:14px;color:#92400e;font-family:${branding.fontFamily},Arial,sans-serif;\">Country:</td>\n                              <td style=\"font-size:14px;color:#92400e;font-weight:600;font-family:${branding.fontFamily},Arial,sans-serif;\">${phoneNumber.country}</td>\n                            </tr>\n                          </table>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td style=\"padding:6px 0;border-bottom:1px solid #fbbf24;\">\n                          <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                            <tr>\n                              <td width=\"40%\" style=\"font-size:14px;color:#92400e;font-family:${branding.fontFamily},Arial,sans-serif;\">Type:</td>\n                              <td style=\"font-size:14px;color:#92400e;font-weight:600;font-family:${branding.fontFamily},Arial,sans-serif;\">${phoneNumber.numberType}</td>\n                            </tr>\n                          </table>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td style=\"padding:6px 0;\">\n                          <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                            <tr>\n                              <td width=\"40%\" style=\"font-size:14px;color:#92400e;font-family:${branding.fontFamily},Arial,sans-serif;\">Was:</td>\n                              <td style=\"font-size:14px;color:#92400e;font-weight:600;font-family:${branding.fontFamily},Arial,sans-serif;\">${formatCurrency(phoneNumber.monthlyRate, phoneNumber.currency)}/month</td>\n                            </tr>\n                          </table>\n                        </td>\n                      </tr>\n                    </table>\n                  </td>\n                </tr>\n              </table>\n              \n              <!-- Unassignment details -->\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:#f8fafc;border:1px solid #e2e8f0;border-radius:12px;margin-bottom:20px;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                <tr>\n                  <td style=\"padding:20px;\">\n                    <h4 style=\"margin:0 0 16px 0;font-size:16px;font-weight:700;color:#1e293b;line-height:1.3;font-family:${branding.fontFamily},Arial,sans-serif;\">Unassignment Details</h4>\n                    \n                    <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                      <tr>\n                        <td style=\"padding:6px 0;border-bottom:1px solid #e2e8f0;\">\n                          <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                            <tr>\n                              <td width=\"40%\" style=\"font-size:14px;color:#64748b;font-family:${branding.fontFamily},Arial,sans-serif;\">Unassigned by:</td>\n                              <td style=\"font-size:14px;color:#1e293b;font-weight:600;font-family:${branding.fontFamily},Arial,sans-serif;\">${unassignment.unassignedBy}</td>\n                            </tr>\n                          </table>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td style=\"padding:6px 0;${unassignment.reason ? 'border-bottom:1px solid #e2e8f0;' : ''}\">\n                          <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                            <tr>\n                              <td width=\"40%\" style=\"font-size:14px;color:#64748b;font-family:${branding.fontFamily},Arial,sans-serif;\">Unassigned on:</td>\n                              <td style=\"font-size:14px;color:#1e293b;font-weight:600;font-family:${branding.fontFamily},Arial,sans-serif;\">${new Date(unassignment.unassignedAt).toLocaleDateString()}</td>\n                            </tr>\n                          </table>\n                        </td>\n                      </tr>\n                      ${unassignment.reason ? `\n                        <tr>\n                          <td style=\"padding:6px 0;\">\n                            <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                              <tr>\n                                <td width=\"40%\" style=\"font-size:14px;color:#64748b;font-family:${branding.fontFamily},Arial,sans-serif;vertical-align:top;\">Reason:</td>\n                                <td style=\"font-size:14px;color:#1e293b;font-weight:600;font-family:${branding.fontFamily},Arial,sans-serif;\">${unassignment.reason}</td>\n                              </tr>\n                            </table>\n                          </td>\n                        </tr>\n                      ` : ''}\n                    </table>\n                  </td>\n                </tr>\n              </table>\n              \n              <p style=\"margin:0 0 20px 0;font-size:14px;line-height:1.5;color:#64748b;font-family:${branding.fontFamily},Arial,sans-serif;\">\n                This phone number is no longer available to you and billing has been stopped. If you have any questions about this change, please contact support.\n              </p>\n              \n              <!-- Call to action -->\n              <div style=\"text-align:center;margin-bottom:20px;\">\n                <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" style=\"margin:0 auto;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                  <tr>\n                    <td style=\"border-radius:8px;background-color:${branding.primaryColor};padding:14px 28px;\">\n                      <a href=\"${process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'}/phone-numbers\" style=\"color:#ffffff;text-decoration:none;font-weight:600;font-size:14px;font-family:${branding.fontFamily},Arial,sans-serif;\">View My Numbers</a>\n                    </td>\n                  </tr>\n                </table>\n              </div>\n              \n              <!-- Footer -->\n              <div style=\"text-align:center;padding-top:20px;border-top:1px solid #e2e8f0;\">\n                <p style=\"margin:0;font-size:12px;color:#94a3b8;line-height:1.4;font-family:${branding.fontFamily},Arial,sans-serif;\">\n                  Thank you for choosing ${branding.companyName}\n                  <br>\n                  This is an automated email. Please do not reply to this message.\n                </p>\n              </div>\n            </td>\n          </tr>\n        </table>\n      </td>\n    </tr>\n  </table>\n</body>\n</html>`;\n\n  // Inline CSS with juice for email client compatibility\n  const html = juice(rawHtml, {\n    removeStyleTags: false,\n    applyStyleTags: true,\n    preserveMediaQueries: true,\n    webResources: {\n      relativeTo: process.cwd()\n    }\n  });\n\n  const textContent = `\n${title}\n\n📞 PHONE NUMBER: ${phoneNumber.number}\n\nHello ${user.name},\n\nA phone number has been unassigned from your account by an administrator. The number is no longer available to you and billing has been stopped.\n\n📞 Phone Number Details:\n- Number: ${phoneNumber.number}\n- Country: ${phoneNumber.country}\n- Type: ${phoneNumber.numberType}\n- Monthly Rate: ${formatCurrency(phoneNumber.monthlyRate, phoneNumber.currency)}\n\nUnassignment Details:\n- Unassigned by: ${unassignment.unassignedBy}\n- Unassigned on: ${new Date(unassignment.unassignedAt).toLocaleDateString()}\n${unassignment.reason ? `- Reason: ${unassignment.reason}` : ''}\n\nThis phone number is no longer available to you and billing has been stopped. If you have any questions about this change, please contact support.\n\nView My Numbers: ${process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'}/phone-numbers\n\nThank you for choosing ${branding.companyName}\n\nThis is an automated email. Please do not reply to this message.\n`;\n\n  return {\n    subject,\n    html,\n    text: textContent.trim()\n  };\n}","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/lib/emailTemplates/ticketNotifications.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":170,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":170,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5114,5117],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5114,5117],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":170,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":170,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5127,5130],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5127,5130],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":591,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":591,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[31401,31404],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[31401,31404],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":607,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":607,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[32648,32651],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[32648,32651],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":778,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":778,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[43964,43967],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[43964,43967],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":787,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":787,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[44501,44504],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[44501,44504],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import juice from 'juice';\n\nexport interface TicketNotificationData {\n  ticket: {\n    _id: string;\n    ticketNumber: string;\n    title: string;\n    description: string;\n    service: string;\n    priority: string;\n    status: string;\n    createdAt: Date;\n    updatedAt: Date;\n    resolvedAt?: Date;\n    closedAt?: Date;\n    customerSatisfactionRating?: number;\n    customerSatisfactionComment?: string;\n    assignedTo?: {\n      _id: string;\n      email: string;\n      name?: string;\n      firstName?: string;\n      lastName?: string;\n    };\n    user?: {\n      _id: string;\n      email: string;\n      name?: string;\n      firstName?: string;\n      lastName?: string;\n      company?: string;\n    };\n    replies?: {\n      authorType: string;\n      isInternal: boolean;\n      content: string;\n      createdAt: Date;\n      author?: {\n        email: string;\n        name?: string;\n        firstName?: string;\n        lastName?: string;\n        company?: string;\n      };\n    }[];\n  };\n  branding: {\n    companyName: string;\n    companySlogan?: string;\n    primaryColor: string;\n    fontFamily: string;\n  };\n  notificationType: 'ticket_created' | 'ticket_updated' | 'ticket_resolved' | 'ticket_assigned' | 'ticket_replied';\n  recipientType: 'customer' | 'admin';\n  actionDetails?: {\n    action: string;\n    changedBy?: {\n      email: string;\n      name?: string;\n      firstName?: string;\n      lastName?: string;\n      role?: string;\n    };\n    changes?: {\n      oldStatus?: string;\n      newStatus?: string;\n      oldPriority?: string;\n      newPriority?: string;\n      oldAssignedTo?: string;\n      newAssignedTo?: string;\n    };\n    replyContent?: string;\n    isInternal?: boolean;\n  };\n}\n\n// Helper functions\nconst formatUserName = (user?: { name?: string; firstName?: string; lastName?: string; email: string; role?: string } | string): string => {\n  if (!user) return 'Unknown User';\n  if (typeof user === 'string') return 'Support Agent'; // Fallback for string IDs\n  if (user.name && user.name.trim()) return user.name.trim();\n  if (user.firstName && user.lastName) return `${user.firstName} ${user.lastName}`;\n  if (user.firstName && user.firstName.trim()) return user.firstName.trim();\n  if (user.lastName && user.lastName.trim()) return user.lastName.trim();\n  \n  // Instead of showing email, show a role-based name\n  if (user.role === 'admin') {\n    return 'Support Agent';\n  }\n  \n  // Extract first part of email as friendly name\n  if (user.email) {\n    const emailPart = user.email.split('@')[0];\n    return emailPart.charAt(0).toUpperCase() + emailPart.slice(1);\n  }\n  \n  return 'Unknown User';\n};\n\nconst getServiceLabel = (service: string): string => {\n  const serviceLabels: { [key: string]: string } = {\n    'outbound_calls': 'Outbound Calls',\n    'inbound_calls': 'Inbound Calls',\n    'sms': 'SMS Services',\n    'number_services': 'Number Services',\n    'technical_support': 'Technical Support',\n    'billing': 'Billing',\n    'other': 'Other'\n  };\n  return serviceLabels[service] || service;\n};\n\nconst getServiceDescription = (service: string): string => {\n  const serviceDescriptions: { [key: string]: string } = {\n    'outbound_calls': 'Issues related to making outbound calls, call quality, routing, or configuration.',\n    'inbound_calls': 'Problems with receiving calls, IVR systems, call forwarding, or number setup.',\n    'sms': 'SMS delivery issues, messaging configuration, or text messaging services.',\n    'number_services': 'Phone number provisioning, porting, or number management requests.',\n    'technical_support': 'General technical assistance, API integration, or system configuration.',\n    'billing': 'Billing inquiries, payment issues, account charges, or usage questions.',\n    'other': 'General inquiries or issues not covered by specific service categories.'\n  };\n  return serviceDescriptions[service] || 'General support request requiring assistance.';\n};\n\nconst getPriorityLabel = (priority: string): string => {\n  const priorityLabels: { [key: string]: string } = {\n    'low': 'Low',\n    'medium': 'Medium',\n    'high': 'High',\n    'urgent': 'Urgent'\n  };\n  return priorityLabels[priority] || priority;\n};\n\nconst getStatusLabel = (status: string): string => {\n  const statusLabels: { [key: string]: string } = {\n    'open': 'Open',\n    'in_progress': 'In Progress',\n    'waiting_admin': 'Waiting for Support',\n    'waiting_user': 'Waiting for Response',\n    'resolved': 'Resolved',\n    'closed': 'Closed'\n  };\n  return statusLabels[status] || status;\n};\n\nconst getPriorityColor = (priority: string): string => {\n  const priorityColors: { [key: string]: string } = {\n    'low': '#10b981',\n    'medium': '#f59e0b',\n    'high': '#f97316',\n    'urgent': '#ef4444'\n  };\n  return priorityColors[priority] || '#6b7280';\n};\n\nconst getStatusColor = (status: string): string => {\n  const statusColors: { [key: string]: string } = {\n    'open': '#f59e0b',\n    'in_progress': '#3b82f6',\n    'waiting_admin': '#8b5cf6',\n    'waiting_user': '#f97316',\n    'resolved': '#10b981',\n    'closed': '#6b7280'\n  };\n  return statusColors[status] || '#6b7280';\n};\n\nconst formatReplyAuthor = (reply: any, ticket: any): string => {\n  if (reply.authorType === 'admin') {\n    // For admin/support replies: \"Support Agent Name - Support\"\n    const agentName = reply.author ? formatUserName(reply.author) : 'Support Team';\n    return `${agentName} - Support`;\n  } else {\n    // For customer replies: \"Customer Name - Company\"\n    let customerName = 'Customer';\n    let company = '';\n    \n    if (reply.author) {\n      customerName = formatUserName(reply.author);\n      company = reply.author.company || '';\n    } else if (ticket.user) {\n      customerName = formatUserName(ticket.user);\n      company = ticket.user.company || '';\n    }\n    \n    return company ? `${customerName} - ${company}` : customerName;\n  }\n};\n\nexport function generateTicketNotificationTemplate(data: TicketNotificationData): { subject: string; html: string; text: string } {\n  const { ticket, branding, notificationType, recipientType, actionDetails } = data;\n  const baseUrl = process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000';\n\n  // Determine notification details based on type and recipient\n  let notificationIcon = '🎫';\n  let notificationTitle = '';\n  let notificationMessage = '';\n  let headerColor = branding.primaryColor;\n  let actionUrl = `${baseUrl}/support/tickets/${ticket._id}`;\n\n  // Admin notifications have different URLs\n  if (recipientType === 'admin') {\n    actionUrl = `${baseUrl}/admin/support/tickets/${ticket._id}`;\n  }\n\n  switch (notificationType) {\n    case 'ticket_created':\n      notificationIcon = '🆕';\n      if (recipientType === 'admin') {\n        notificationTitle = 'New Support Ticket - Action Required';\n        notificationMessage = `A new support ticket has been created by ${formatUserName(ticket.user)} for ${getServiceLabel(ticket.service)}. Please review and respond.`;\n      } else {\n        notificationTitle = 'Support Ticket Created';\n        notificationMessage = `Your support ticket has been created for ${getServiceLabel(ticket.service)}. Our team will review and respond soon.`;\n      }\n      headerColor = '#10b981';\n      break;\n    case 'ticket_updated':\n      notificationIcon = '🔄';\n      if (recipientType === 'admin') {\n        notificationTitle = 'Ticket Updated - Review Required';\n        if (actionDetails?.changes?.newStatus) {\n          notificationMessage = `Ticket #${ticket.ticketNumber} status changed to \"${getStatusLabel(actionDetails.changes.newStatus)}\". Please review the update.`;\n        } else if (actionDetails?.changes?.newPriority) {\n          notificationMessage = `Ticket #${ticket.ticketNumber} priority changed to \"${getPriorityLabel(actionDetails.changes.newPriority)}\". Please review the update.`;\n        } else if (actionDetails?.changes?.newAssignedTo) {\n          const assignedName = formatUserName(ticket.assignedTo);\n          notificationMessage = `Ticket #${ticket.ticketNumber} has been assigned to ${assignedName}.`;\n        } else {\n          notificationMessage = `Ticket #${ticket.ticketNumber} has been updated. Please review the changes.`;\n        }\n      } else {\n        notificationTitle = 'Support Ticket Updated';\n        if (actionDetails?.changes?.newStatus) {\n          notificationMessage = `Your ticket status has been changed to \"${getStatusLabel(actionDetails.changes.newStatus)}\".`;\n        } else if (actionDetails?.changes?.newPriority) {\n          notificationMessage = `Your ticket priority has been changed to \"${getPriorityLabel(actionDetails.changes.newPriority)}\".`;\n        } else if (actionDetails?.changes?.newAssignedTo) {\n          const assignedName = formatUserName(ticket.assignedTo);\n          notificationMessage = `Your ticket has been assigned to ${assignedName} for personalized support.`;\n        } else {\n          notificationMessage = 'Your support ticket has been updated.';\n        }\n      }\n      headerColor = '#3b82f6';\n      break;\n    case 'ticket_resolved':\n      notificationIcon = '✅';\n      if (recipientType === 'admin') {\n        notificationTitle = 'Ticket Marked as Resolved';\n        notificationMessage = `Ticket #${ticket.ticketNumber} has been marked as resolved. Monitor for customer feedback.`;\n      } else {\n        notificationTitle = 'Support Ticket Resolved';\n        notificationMessage = 'Your support ticket has been resolved! Please review the solution and provide feedback if needed.';\n      }\n      headerColor = '#10b981';\n      break;\n    case 'ticket_assigned':\n      notificationIcon = '👤';\n      const assignedName = formatUserName(ticket.assignedTo);\n      if (recipientType === 'admin') {\n        notificationTitle = 'Ticket Assignment Update';\n        notificationMessage = `Ticket #${ticket.ticketNumber} has been assigned to ${assignedName}. Ensure proper handover if needed.`;\n      } else {\n        notificationTitle = 'Support Agent Assigned';\n        notificationMessage = `Your support ticket has been assigned to ${assignedName} for personalized assistance.`;\n      }\n      headerColor = '#8b5cf6';\n      break;\n    case 'ticket_replied':\n      notificationIcon = '💬';\n      const replyAuthor = actionDetails?.changedBy ? formatUserName(actionDetails.changedBy) : 'Support Team';\n      if (recipientType === 'admin') {\n        notificationTitle = 'New Reply on Ticket';\n        notificationMessage = `${replyAuthor} has added a reply to ticket #${ticket.ticketNumber}. Review and respond if necessary.`;\n      } else {\n        notificationTitle = 'New Reply from Support';\n        notificationMessage = `${replyAuthor} has replied to your support ticket. Check the response and reply if needed.`;\n      }\n      headerColor = '#06b6d4';\n      break;\n  }\n\n  const subject = `${notificationIcon} ${notificationTitle} - ${ticket.ticketNumber}`;\n\n  const rawHtml = `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta name=\"format-detection\" content=\"telephone=no\">\n  <meta name=\"x-apple-disable-message-reformatting\">\n  <!--[if !mso]><!-->\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <!--<![endif]-->\n  <title>${branding.companyName} Ticket Notification</title>\n  <style>\n    /* Minimal reset for email clients */\n    body, table, td, p, a, li, blockquote {\n      -webkit-text-size-adjust: 100%;\n      -ms-text-size-adjust: 100%;\n    }\n    \n    table, td {\n      mso-table-lspace: 0pt;\n      mso-table-rspace: 0pt;\n    }\n    \n    img {\n      -ms-interpolation-mode: bicubic;\n      border: 0;\n      height: auto;\n      line-height: 100%;\n      outline: none;\n      text-decoration: none;\n    }\n\n    /* Responsive design */\n    @media only screen and (max-width: 600px) {\n      .mobile-padding {\n        padding-left: 16px !important;\n        padding-right: 16px !important;\n      }\n      \n      .mobile-center {\n        text-align: center !important;\n      }\n      \n      .mobile-stack {\n        display: block !important;\n        width: 100% !important;\n        padding-left: 0 !important;\n        padding-right: 0 !important;\n      }\n      \n      .mobile-text-sm {\n        font-size: 14px !important;\n        line-height: 1.4 !important;\n      }\n    }\n  </style>\n</head>\n<body style=\"margin:0;padding:0;background-color:#f1f5f9;font-family:${branding.fontFamily},Arial,sans-serif;width:100%;min-width:100%;\">\n  \n  <!-- Hidden preheader -->\n  <div style=\"display:none;font-size:1px;color:#fefefe;line-height:1px;max-height:0px;max-width:0px;opacity:0;overflow:hidden;\">\n    ${notificationTitle} #${ticket.ticketNumber} - ${ticket.title}\n  </div>\n  \n  <!-- Email wrapper -->\n  <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"margin:0;padding:0;background-color:#f1f5f9;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n    <tr>\n      <td align=\"center\" style=\"padding:20px 10px;\" class=\"mobile-padding\">\n        \n        <!-- Main email container -->\n        <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"600\" style=\"max-width:600px;background-color:#ffffff;border-radius:16px;box-shadow:0 4px 12px rgba(0,0,0,0.1);overflow:hidden;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n          \n          <!-- Header -->\n          <tr>\n            <td align=\"center\" style=\"padding:24px 20px 16px;\" class=\"mobile-padding\">\n              <h1 style=\"margin:0;font-size:24px;font-weight:700;color:#1e293b;line-height:1.2;font-family:${branding.fontFamily},Arial,sans-serif;\">${branding.companyName}</h1>\n              ${branding.companySlogan ? `<p style=\"margin:6px 0 0;color:#64748b;font-size:14px;line-height:1.3;font-family:${branding.fontFamily},Arial,sans-serif;\">${branding.companySlogan}</p>` : ''}\n            </td>\n          </tr>\n          \n          <!-- Notification banner -->\n          <tr>\n            <td style=\"padding:0 20px 16px;\" class=\"mobile-padding\">\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:${headerColor};border-radius:12px;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                <tr>\n                  <td align=\"center\" style=\"padding:20px 16px;\">\n                    <h2 style=\"margin:0;color:#ffffff;font-size:20px;font-weight:700;line-height:1.2;font-family:${branding.fontFamily},Arial,sans-serif;\">${notificationIcon} ${notificationTitle}</h2>\n                    <p style=\"margin:6px 0 0;color:#ffffff;opacity:0.9;font-size:14px;line-height:1.3;font-family:${branding.fontFamily},Arial,sans-serif;\">${notificationMessage}</p>\n                  </td>\n                </tr>\n              </table>\n            </td>\n          </tr>\n\n          <!-- Ticket information -->\n          <tr>\n            <td style=\"padding:0 20px 20px;\" class=\"mobile-padding\">\n              \n              <!-- Ticket header -->\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:#f8fafc;border:1px solid #e2e8f0;border-radius:12px;margin-bottom:20px;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                <tr>\n                  <td style=\"padding:16px;\">\n                    <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                      <tr>\n                        <td style=\"padding-bottom:8px;\">\n                          <h3 style=\"margin:0;font-size:18px;font-weight:700;color:#1e293b;line-height:1.3;font-family:${branding.fontFamily},Arial,sans-serif;\">${ticket.title}</h3>\n                          <p style=\"margin:4px 0 0;font-size:13px;color:#64748b;font-family:${branding.fontFamily},Arial,sans-serif;\">Ticket #${ticket.ticketNumber}</p>\n                        </td>\n                      </tr>\n                    </table>\n                  </td>\n                </tr>\n              </table>\n\n              <!-- Ticket Description -->\n              ${ticket.description && notificationType !== 'ticket_updated' && notificationType !== 'ticket_replied' && notificationType !== 'ticket_resolved' ? `\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:#f8fafc;border:1px solid #e2e8f0;border-radius:12px;margin-bottom:20px;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                <tr>\n                  <td style=\"padding:16px;\">\n                    <h4 style=\"margin:0 0 12px 0;font-size:14px;font-weight:700;color:#1e293b;line-height:1.3;font-family:${branding.fontFamily},Arial,sans-serif;\">📝 Issue Description</h4>\n                    <div style=\"background-color:#ffffff;border:1px solid #e2e8f0;border-radius:8px;padding:16px;\">\n                      <p style=\"margin:0;font-size:14px;line-height:1.6;color:#374151;font-family:${branding.fontFamily},Arial,sans-serif;\">${ticket.description.replace(/\\n/g, '<br>')}</p>\n                    </div>\n                  </td>\n                </tr>\n              </table>\n              ` : ''}\n\n              <!-- Ticket details grid -->\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"margin-bottom:20px;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                <tr>\n                  <!-- Status Card -->\n                  <td width=\"24%\" style=\"padding-right:8px;vertical-align:top;\" class=\"mobile-stack\">\n                    <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:#f8fafc;border:2px solid ${getStatusColor(ticket.status)};border-radius:12px;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                      <tr>\n                        <td align=\"center\" style=\"padding:12px 8px;\">\n                          <p style=\"margin:0 0 4px 0;font-size:10px;font-weight:700;color:#64748b;letter-spacing:0.5px;text-transform:uppercase;line-height:1.2;font-family:${branding.fontFamily},Arial,sans-serif;\">STATUS</p>\n                          <p style=\"margin:0;font-size:14px;font-weight:700;color:${getStatusColor(ticket.status)};line-height:1;font-family:${branding.fontFamily},Arial,sans-serif;\">${getStatusLabel(ticket.status)}</p>\n                        </td>\n                      </tr>\n                    </table>\n                  </td>\n                  \n                  <!-- Priority Card -->\n                  <td width=\"24%\" style=\"padding:0 4px;vertical-align:top;\" class=\"mobile-stack\">\n                    <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:#f8fafc;border:2px solid ${getPriorityColor(ticket.priority)};border-radius:12px;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                      <tr>\n                        <td align=\"center\" style=\"padding:12px 8px;\">\n                          <p style=\"margin:0 0 4px 0;font-size:10px;font-weight:700;color:#64748b;letter-spacing:0.5px;text-transform:uppercase;line-height:1.2;font-family:${branding.fontFamily},Arial,sans-serif;\">PRIORITY</p>\n                          <p style=\"margin:0;font-size:14px;font-weight:700;color:${getPriorityColor(ticket.priority)};line-height:1;font-family:${branding.fontFamily},Arial,sans-serif;\">${getPriorityLabel(ticket.priority)}</p>\n                        </td>\n                      </tr>\n                    </table>\n                  </td>\n\n                  <!-- Service Card -->\n                  <td width=\"24%\" style=\"padding:0 4px;vertical-align:top;\" class=\"mobile-stack\">\n                    <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:#f8fafc;border:2px solid #6b7280;border-radius:12px;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                      <tr>\n                        <td align=\"center\" style=\"padding:12px 8px;\">\n                          <p style=\"margin:0 0 4px 0;font-size:10px;font-weight:700;color:#64748b;letter-spacing:0.5px;text-transform:uppercase;line-height:1.2;font-family:${branding.fontFamily},Arial,sans-serif;\">SERVICE</p>\n                          <p style=\"margin:0;font-size:12px;font-weight:700;color:#6b7280;line-height:1.1;text-align:center;font-family:${branding.fontFamily},Arial,sans-serif;\">${getServiceLabel(ticket.service)}</p>\n                        </td>\n                      </tr>\n                    </table>\n                  </td>\n\n                  <!-- Date Card -->\n                  <td width=\"24%\" style=\"padding-left:8px;vertical-align:top;\" class=\"mobile-stack\">\n                    <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:#f8fafc;border:2px solid #e2e8f0;border-radius:12px;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                      <tr>\n                        <td align=\"center\" style=\"padding:12px 8px;\">\n                          <p style=\"margin:0 0 4px 0;font-size:10px;font-weight:700;color:#64748b;letter-spacing:0.5px;text-transform:uppercase;line-height:1.2;font-family:${branding.fontFamily},Arial,sans-serif;\">CREATED</p>\n                          <p style=\"margin:0;font-size:12px;font-weight:700;color:#475569;line-height:1.1;text-align:center;font-family:${branding.fontFamily},Arial,sans-serif;\">${new Date(ticket.createdAt).toLocaleDateString()}</p>\n                        </td>\n                      </tr>\n                    </table>\n                  </td>\n                </tr>\n              </table>\n\n              <!-- Service Information -->\n              ${notificationType !== 'ticket_updated' && notificationType !== 'ticket_replied' && notificationType !== 'ticket_resolved' ? `\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:#f0f9ff;border:2px solid #0ea5e9;border-radius:12px;margin-bottom:20px;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                <tr>\n                  <td style=\"padding:16px;\">\n                    <h4 style=\"margin:0 0 8px 0;font-size:14px;font-weight:700;color:#0c4a6e;line-height:1.3;font-family:${branding.fontFamily},Arial,sans-serif;\">🎯 Service Category: ${getServiceLabel(ticket.service)}</h4>\n                    <p style=\"margin:0 0 12px 0;font-size:13px;color:#0369a1;line-height:1.4;font-family:${branding.fontFamily},Arial,sans-serif;\">${getServiceDescription(ticket.service)}</p>\n                    \n                    ${recipientType === 'customer' ? `\n                    <div style=\"background-color:#ffffff;border:1px solid #bae6fd;border-radius:8px;padding:12px;\">\n                      <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                        <tr>\n                          <td width=\"50%\" style=\"padding:4px 8px 4px 0;font-size:12px;vertical-align:top;\">\n                            <strong style=\"color:#0c4a6e;display:block;margin-bottom:2px;font-family:${branding.fontFamily},Arial,sans-serif;\">Expected Response:</strong>\n                            <span style=\"color:#0369a1;font-family:${branding.fontFamily},Arial,sans-serif;\">\n                              ${ticket.priority === 'urgent' ? 'Within 1 hour' : \n                                ticket.priority === 'high' ? 'Within 4 hours' : \n                                ticket.priority === 'medium' ? 'Within 24 hours' : 'Within 48 hours'}\n                            </span>\n                          </td>\n                          <td width=\"50%\" style=\"padding:4px 0 4px 8px;font-size:12px;vertical-align:top;\">\n                            <strong style=\"color:#0c4a6e;display:block;margin-bottom:2px;font-family:${branding.fontFamily},Arial,sans-serif;\">Support Hours:</strong>\n                            <span style=\"color:#0369a1;font-family:${branding.fontFamily},Arial,sans-serif;\">\n                              ${ticket.service === 'technical_support' || ticket.priority === 'urgent' ? '24/7 Available' : 'Mon-Fri 9AM-6PM'}\n                            </span>\n                          </td>\n                        </tr>\n                      </table>\n                    </div>\n                    ` : `\n                    <div style=\"background-color:#ffffff;border:1px solid #bae6fd;border-radius:8px;padding:12px;\">\n                      <p style=\"margin:0;font-size:12px;color:#0369a1;font-family:${branding.fontFamily},Arial,sans-serif;\">\n                        <strong>Priority Level:</strong> ${getPriorityLabel(ticket.priority)} | \n                        <strong>SLA Target:</strong> ${ticket.priority === 'urgent' ? '1 hour' : \n                          ticket.priority === 'high' ? '4 hours' : \n                          ticket.priority === 'medium' ? '24 hours' : '48 hours'} response time\n                      </p>\n                    </div>\n                    `}\n                  </td>\n                </tr>\n              </table>\n              ` : ''}\n\n              <!-- Customer information (if available) -->\n              ${ticket.user && notificationType !== 'ticket_updated' && notificationType !== 'ticket_replied' && notificationType !== 'ticket_resolved' ? `\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:#f8fafc;border:1px solid #e2e8f0;border-radius:12px;margin-bottom:20px;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                <tr>\n                  <td style=\"padding:16px;\">\n                    <h4 style=\"margin:0 0 12px 0;font-size:14px;font-weight:700;color:#1e293b;line-height:1.3;font-family:${branding.fontFamily},Arial,sans-serif;\">Customer Information</h4>\n                    <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                      <tr>\n                        <td width=\"50%\" style=\"padding:4px 8px 4px 0;font-size:13px;vertical-align:top;\">\n                          <strong style=\"color:#1e293b;display:block;margin-bottom:2px;font-family:${branding.fontFamily},Arial,sans-serif;\">Name:</strong>\n                          <span style=\"color:#475569;font-family:${branding.fontFamily},Arial,sans-serif;\">${formatUserName(ticket.user)}</span>\n                        </td>\n                        <td width=\"50%\" style=\"padding:4px 0 4px 8px;font-size:13px;vertical-align:top;\">\n                          <strong style=\"color:#1e293b;display:block;margin-bottom:2px;font-family:${branding.fontFamily},Arial,sans-serif;\">Email:</strong>\n                          <span style=\"color:#475569;font-family:${branding.fontFamily},Arial,sans-serif;\">${ticket.user.email}</span>\n                        </td>\n                      </tr>\n                      ${ticket.user.company ? `\n                      <tr>\n                        <td colspan=\"2\" style=\"padding:4px 0;font-size:13px;\">\n                          <strong style=\"color:#1e293b;display:block;margin-bottom:2px;font-family:${branding.fontFamily},Arial,sans-serif;\">Company:</strong>\n                          <span style=\"color:#475569;font-family:${branding.fontFamily},Arial,sans-serif;\">${ticket.user.company}</span>\n                        </td>\n                      </tr>\n                      ` : ''}\n                    </table>\n                  </td>\n                </tr>\n              </table>\n              ` : ''}\n\n              <!-- Update Details (for ticket updates) -->\n              ${notificationType === 'ticket_updated' && actionDetails ? `\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:#fef3c7;border:2px solid #f59e0b;border-radius:12px;margin-bottom:20px;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                <tr>\n                  <td style=\"padding:16px;\">\n                    <h4 style=\"margin:0 0 12px 0;font-size:14px;font-weight:700;color:#92400e;line-height:1.3;font-family:${branding.fontFamily},Arial,sans-serif;\">🔄 What Changed</h4>\n                    \n                    ${actionDetails.changes ? `\n                    <div style=\"background-color:#ffffff;border:1px solid #fbbf24;border-radius:8px;padding:12px;margin-bottom:12px;\">\n                      ${actionDetails.changes.oldStatus && actionDetails.changes.newStatus ? `\n                      <p style=\"margin:0 0 8px 0;font-size:13px;color:#374151;font-family:${branding.fontFamily},Arial,sans-serif;\">\n                        <strong>Status:</strong> ${getStatusLabel(actionDetails.changes.oldStatus)} → ${getStatusLabel(actionDetails.changes.newStatus)}\n                      </p>\n                      ` : ''}\n                      ${actionDetails.changes.oldPriority && actionDetails.changes.newPriority ? `\n                      <p style=\"margin:0 0 8px 0;font-size:13px;color:#374151;font-family:${branding.fontFamily},Arial,sans-serif;\">\n                        <strong>Priority:</strong> ${getPriorityLabel(actionDetails.changes.oldPriority)} → ${getPriorityLabel(actionDetails.changes.newPriority)}\n                      </p>\n                      ` : ''}\n                      ${actionDetails.changes.newAssignedTo ? `\n                      <p style=\"margin:0;font-size:13px;color:#374151;font-family:${branding.fontFamily},Arial,sans-serif;\">\n                        <strong>Assigned to:</strong> ${formatUserName(ticket.assignedTo)}\n                      </p>\n                      ` : ''}\n                    </div>\n                    ` : ''}\n                    \n                    ${actionDetails.changedBy ? `\n                    <p style=\"margin:0;font-size:12px;color:#92400e;font-style:italic;font-family:${branding.fontFamily},Arial,sans-serif;\">\n                      Updated by ${formatUserName(actionDetails.changedBy)} on ${new Date().toLocaleString()}\n                    </p>\n                    ` : ''}\n                  </td>\n                </tr>\n              </table>\n              ` : ''}\n\n              <!-- Recent Messages/Replies (for ticket updates and replies) -->\n              ${(notificationType === 'ticket_updated' || notificationType === 'ticket_replied') && ticket.replies && ticket.replies.length > 0 ? `\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:#f0fdf4;border:2px solid #22c55e;border-radius:12px;margin-bottom:20px;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                <tr>\n                  <td style=\"padding:16px;\">\n                    <h4 style=\"margin:0 0 12px 0;font-size:14px;font-weight:700;color:#15803d;line-height:1.3;font-family:${branding.fontFamily},Arial,sans-serif;\">💬 ${notificationType === 'ticket_replied' ? 'Latest Reply' : 'Recent Messages'}</h4>\n                    \n                    ${notificationType === 'ticket_replied' ? \n                      // For replies, show just the latest reply prominently\n                      ticket.replies.slice(-1).map((reply: any) => `\n                      <div style=\"background-color:#ffffff;border:2px solid #22c55e;border-radius:8px;padding:16px;margin-bottom:8px;\">\n                        <div style=\"display:flex;justify-content:space-between;align-items:center;margin-bottom:12px;\">\n                          <p style=\"margin:0;font-size:14px;font-weight:700;color:#15803d;font-family:${branding.fontFamily},Arial,sans-serif;\">\n                            ${formatReplyAuthor(reply, ticket)}${reply.isInternal ? ' (Internal Note)' : ''}\n                          </p>\n                          <p style=\"margin:0;font-size:12px;color:#6b7280;font-family:${branding.fontFamily},Arial,sans-serif;\">\n                            ${new Date(reply.createdAt).toLocaleString()}\n                          </p>\n                        </div>\n                        <p style=\"margin:0;font-size:14px;line-height:1.5;color:#374151;font-family:${branding.fontFamily},Arial,sans-serif;\">\n                          ${reply.content.replace(/\\n/g, '<br>')}\n                        </p>\n                      </div>\n                      `).join('') :\n                      // For updates, show last 3 messages as before\n                      ticket.replies.slice(-3).map((reply: any) => `\n                      <div style=\"background-color:#ffffff;border:1px solid #bbf7d0;border-radius:8px;padding:12px;margin-bottom:8px;\">\n                        <div style=\"display:flex;justify-content:space-between;align-items:center;margin-bottom:8px;\">\n                          <p style=\"margin:0;font-size:12px;font-weight:600;color:#15803d;font-family:${branding.fontFamily},Arial,sans-serif;\">\n                            ${formatReplyAuthor(reply, ticket)}${reply.isInternal ? ' (Internal Note)' : ''}\n                          </p>\n                          <p style=\"margin:0;font-size:11px;color:#6b7280;font-family:${branding.fontFamily},Arial,sans-serif;\">\n                            ${new Date(reply.createdAt).toLocaleString()}\n                          </p>\n                        </div>\n                        <p style=\"margin:0;font-size:13px;line-height:1.5;color:#374151;font-family:${branding.fontFamily},Arial,sans-serif;\">\n                          ${reply.content.replace(/\\n/g, '<br>').substring(0, 300)}${reply.content.length > 300 ? '...' : ''}\n                        </p>\n                      </div>\n                      `).join('')\n                    }\n                    \n                    ${notificationType === 'ticket_updated' && ticket.replies.length > 3 ? `\n                    <p style=\"margin:8px 0 0;font-size:12px;color:#15803d;text-align:center;font-family:${branding.fontFamily},Arial,sans-serif;\">\n                      + ${ticket.replies.length - 3} more message${ticket.replies.length - 3 === 1 ? '' : 's'} in the full ticket\n                    </p>\n                    ` : ''}\n                  </td>\n                </tr>\n              </table>\n              ` : ''}\n\n              <!-- Assignment information (if assigned) -->\n              ${ticket.assignedTo ? `\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:#f0f9ff;border:2px solid #0ea5e9;border-radius:12px;margin-bottom:20px;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                <tr>\n                  <td style=\"padding:16px;\">\n                    <h4 style=\"margin:0 0 8px 0;font-size:14px;font-weight:700;color:#0c4a6e;line-height:1.3;font-family:${branding.fontFamily},Arial,sans-serif;\">👤 Assigned Support Agent</h4>\n                    <p style=\"margin:0;font-size:15px;font-weight:600;color:#0369a1;font-family:${branding.fontFamily},Arial,sans-serif;\">${formatUserName(ticket.assignedTo)}</p>\n                    <p style=\"margin:4px 0 0;font-size:13px;color:#0c4a6e;font-family:${branding.fontFamily},Arial,sans-serif;\">Your dedicated support agent for this ticket</p>\n                  </td>\n                </tr>\n              </table>\n              ` : ''}\n\n              <!-- Action details (if provided) -->\n              ${actionDetails?.replyContent && !actionDetails.isInternal && notificationType !== 'ticket_replied' ? `\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:#f0fdf4;border:2px solid #22c55e;border-radius:12px;margin-bottom:20px;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                <tr>\n                  <td style=\"padding:16px;\">\n                    <h4 style=\"margin:0 0 8px 0;font-size:14px;font-weight:700;color:#15803d;line-height:1.3;font-family:${branding.fontFamily},Arial,sans-serif;\">💬 Latest Reply</h4>\n                    <div style=\"background-color:#ffffff;border:1px solid #bbf7d0;border-radius:8px;padding:12px;margin-top:8px;\">\n                      <p style=\"margin:0;font-size:14px;line-height:1.5;color:#374151;font-family:${branding.fontFamily},Arial,sans-serif;\">${actionDetails.replyContent.replace(/\\n/g, '<br>')}</p>\n                    </div>\n                  </td>\n                </tr>\n              </table>\n              ` : ''}\n\n              <!-- Rating information (if resolved with rating) -->\n              ${ticket.customerSatisfactionRating && notificationType === 'ticket_resolved' ? `\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:#fefce8;border:2px solid #eab308;border-radius:12px;margin-bottom:20px;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                <tr>\n                  <td style=\"padding:16px;\">\n                    <h4 style=\"margin:0 0 8px 0;font-size:14px;font-weight:700;color:#a16207;line-height:1.3;font-family:${branding.fontFamily},Arial,sans-serif;\">⭐ Customer Feedback</h4>\n                    <p style=\"margin:0;font-size:16px;font-weight:600;color:#a16207;font-family:${branding.fontFamily},Arial,sans-serif;\">${'★'.repeat(ticket.customerSatisfactionRating)}${'☆'.repeat(5 - ticket.customerSatisfactionRating)} (${ticket.customerSatisfactionRating}/5)</p>\n                    ${ticket.customerSatisfactionComment ? `\n                    <div style=\"background-color:#ffffff;border:1px solid #fde047;border-radius:8px;padding:12px;margin-top:8px;\">\n                      <p style=\"margin:0;font-size:14px;line-height:1.5;color:#374151;font-style:italic;font-family:${branding.fontFamily},Arial,sans-serif;\">\"${ticket.customerSatisfactionComment}\"</p>\n                    </div>\n                    ` : ''}\n                  </td>\n                </tr>\n              </table>\n              ` : ''}\n\n              <!-- Call to Action Button -->\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" align=\"center\" style=\"margin:0 auto 20px;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                <tr>\n                  <td align=\"center\" style=\"border-radius:12px;background-color:${headerColor};box-shadow:0 4px 12px rgba(0,0,0,0.15);\">\n                    <a href=\"${actionUrl}\" style=\"display:inline-block;padding:18px 32px;font-size:16px;font-weight:700;color:#ffffff;text-decoration:none;border-radius:12px;text-align:center;min-width:200px;line-height:1.2;font-family:${branding.fontFamily},Arial,sans-serif;\">\n                      <font color=\"#ffffff\">View Ticket Details</font>\n                    </a>\n                  </td>\n                </tr>\n              </table>\n\n              <!-- Help and support info -->\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background-color:#f8fafc;border:1px solid #e2e8f0;border-radius:12px;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                <tr>\n                  <td style=\"padding:16px;text-align:center;\">\n                    <p style=\"margin:0 0 8px 0;font-size:14px;font-weight:600;color:#1e293b;font-family:${branding.fontFamily},Arial,sans-serif;\">Need additional help?</p>\n                    <p style=\"margin:0;font-size:13px;color:#64748b;line-height:1.4;font-family:${branding.fontFamily},Arial,sans-serif;\">\n                      Reply to this ticket or contact our support team for immediate assistance.\n                    </p>\n                  </td>\n                </tr>\n              </table>\n            </td>\n          </tr>\n\n          <!-- Footer -->\n          <tr>\n            <td style=\"padding:20px;background-color:#f8fafc;border-top:1px solid #e2e8f0;\" class=\"mobile-padding\">\n              <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;\">\n                <tr>\n                  <td align=\"center\">\n                    <p style=\"margin:0 0 6px;font-size:12px;color:#94a3b8;line-height:1.3;font-family:${branding.fontFamily},Arial,sans-serif;\">\n                      <a href=\"${baseUrl}\" style=\"color:${branding.primaryColor};text-decoration:none;margin:0 8px;font-family:${branding.fontFamily},Arial,sans-serif;\">Dashboard</a> •\n                      <a href=\"${baseUrl}/support\" style=\"color:${branding.primaryColor};text-decoration:none;margin:0 8px;font-family:${branding.fontFamily},Arial,sans-serif;\">Support</a> •\n                      <a href=\"${baseUrl}/contact\" style=\"color:${branding.primaryColor};text-decoration:none;margin:0 8px;font-family:${branding.fontFamily},Arial,sans-serif;\">Contact</a>\n                    </p>\n                    <p style=\"margin:0 0 6px;font-size:11px;color:#94a3b8;line-height:1.3;font-family:${branding.fontFamily},Arial,sans-serif;\">© 2024 ${branding.companyName}. All rights reserved.</p>\n                    <p style=\"margin:0;font-size:11px;color:#94a3b8;line-height:1.3;font-family:${branding.fontFamily},Arial,sans-serif;\">This is an automated ticket notification.</p>\n                  </td>\n                </tr>\n              </table>\n            </td>\n          </tr>\n          \n        </table>\n      </td>\n    </tr>\n  </table>\n</body>\n</html>`;\n\n  // Use juice to inline CSS while preserving media queries\n  const html = juice(rawHtml, {\n    removeStyleTags: false,   // keeps the <style> block for the media query\n    applyStyleTags: true,     // applies styles from <style> tags to elements\n    preserveMediaQueries: true, // keeps @media rules intact\n    webResources: {\n      relativeTo: process.cwd()\n    }\n  });\n\n  // Generate plain text version\n  const text = `\n${notificationTitle.toUpperCase()} - ${branding.companyName}\n\n${notificationMessage}\n\nTICKET DETAILS:\n- Ticket Number: #${ticket.ticketNumber}\n- Title: ${ticket.title}\n- Service: ${getServiceLabel(ticket.service)}\n- Priority: ${getPriorityLabel(ticket.priority)}\n- Status: ${getStatusLabel(ticket.status)}\n- Created: ${new Date(ticket.createdAt).toLocaleString()}\n\n${ticket.description && notificationType !== 'ticket_updated' && notificationType !== 'ticket_replied' && notificationType !== 'ticket_resolved' ? `\nISSUE DESCRIPTION:\n${ticket.description}\n` : ''}\n\n${notificationType !== 'ticket_updated' && notificationType !== 'ticket_replied' && notificationType !== 'ticket_resolved' ? `\nSERVICE INFORMATION:\n- Category: ${getServiceLabel(ticket.service)}\n- Description: ${getServiceDescription(ticket.service)}\n- Expected Response: ${ticket.priority === 'urgent' ? 'Within 1 hour' : \n  ticket.priority === 'high' ? 'Within 4 hours' : \n  ticket.priority === 'medium' ? 'Within 24 hours' : 'Within 48 hours'}\n- Support Hours: ${ticket.service === 'technical_support' || ticket.priority === 'urgent' ? '24/7 Available' : 'Mon-Fri 9AM-6PM'}\n` : ''}\n\n${notificationType === 'ticket_updated' && actionDetails ? `\nWHAT CHANGED:\n${actionDetails.changes?.oldStatus && actionDetails.changes?.newStatus ? `- Status: ${getStatusLabel(actionDetails.changes.oldStatus)} → ${getStatusLabel(actionDetails.changes.newStatus)}` : ''}\n${actionDetails.changes?.oldPriority && actionDetails.changes?.newPriority ? `- Priority: ${getPriorityLabel(actionDetails.changes.oldPriority)} → ${getPriorityLabel(actionDetails.changes.newPriority)}` : ''}\n${actionDetails.changes?.newAssignedTo ? `- Assigned to: ${formatUserName(ticket.assignedTo)}` : ''}\n${actionDetails.changedBy ? `\\nUpdated by ${formatUserName(actionDetails.changedBy)} on ${new Date().toLocaleString()}` : ''}\n` : ''}\n\n${notificationType === 'ticket_updated' && ticket.replies && ticket.replies.length > 0 ? `\nRECENT MESSAGES:\n${ticket.replies.slice(-3).map((reply: any) => `\n${formatReplyAuthor(reply, ticket)}${reply.isInternal ? ' (Internal Note)' : ''} - ${new Date(reply.createdAt).toLocaleString()}\n${reply.content.substring(0, 300)}${reply.content.length > 300 ? '...' : ''}\n`).join('\\n---\\n')}\n${ticket.replies.length > 3 ? `\\n+ ${ticket.replies.length - 3} more message${ticket.replies.length - 3 === 1 ? '' : 's'} in the full ticket` : ''}\n` : ''}\n\n${notificationType === 'ticket_replied' && ticket.replies && ticket.replies.length > 0 ? `\nLATEST REPLY:\n${ticket.replies.slice(-1).map((reply: any) => `\n${formatReplyAuthor(reply, ticket)}${reply.isInternal ? ' (Internal Note)' : ''} - ${new Date(reply.createdAt).toLocaleString()}\n${reply.content}\n`).join('')}\n` : ''}\n\n${ticket.user && notificationType !== 'ticket_updated' && notificationType !== 'ticket_replied' && notificationType !== 'ticket_resolved' ? `\nCUSTOMER INFORMATION:\n- Name: ${formatUserName(ticket.user)}\n- Email: ${ticket.user.email}\n${ticket.user.company ? `- Company: ${ticket.user.company}` : ''}\n` : ''}\n\n${ticket.assignedTo ? `\nASSIGNED TO: ${formatUserName(ticket.assignedTo)}\n` : ''}\n\n${actionDetails?.replyContent && !actionDetails.isInternal && notificationType !== 'ticket_replied' ? `\nLATEST REPLY:\n${actionDetails.replyContent}\n` : ''}\n\n${ticket.customerSatisfactionRating ? `\nCUSTOMER RATING: ${ticket.customerSatisfactionRating}/5 stars\n${ticket.customerSatisfactionComment ? `FEEDBACK: \"${ticket.customerSatisfactionComment}\"` : ''}\n` : ''}\n\nView full ticket details: ${actionUrl}\n\nNeed help? Contact our support team.\n\n© 2024 ${branding.companyName}. All rights reserved.\nThis is an automated ticket notification.\n  `;\n\n  return { subject, html, text };\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/lib/hooks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/lib/invoiceUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/lib/notification-integration.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":379,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":379,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9708,9711],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9708,9711],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'notificationType' is defined but never used.","line":398,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":398,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'data' is defined but never used.","line":399,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":399,"endColumn":7},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":399,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":399,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10238,10241],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10238,10241],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { InternalNotificationService } from '@/services/InternalNotificationService';\nimport { NotificationType } from '@/types/notifications';\n\n/**\n * Production-ready notification integration functions\n * These functions should be called from your existing business logic\n */\n\nconst notificationService = InternalNotificationService.getInstance();\n\n/**\n * Ticket-related notifications\n */\nexport async function notifyTicketCreated(\n  userId: string,\n  ticketData: {\n    ticketNumber: string;\n    title: string;\n    priority?: string;\n    category?: string;\n    assignedTo?: string;\n  }\n) {\n  await notificationService.createNotification(userId, 'ticket_created', {\n    ticketNumber: ticketData.ticketNumber,\n    title: ticketData.title,\n    priority: ticketData.priority,\n    category: ticketData.category,\n    assignedTo: ticketData.assignedTo,\n    actionUrl: `/tickets/${ticketData.ticketNumber}`\n  });\n}\n\nexport async function notifyTicketUpdated(\n  userId: string,\n  ticketData: {\n    ticketNumber: string;\n    title: string;\n    status: string;\n    updatedBy: string;\n  }\n) {\n  await notificationService.createNotification(userId, 'ticket_updated', {\n    ticketNumber: ticketData.ticketNumber,\n    title: ticketData.title,\n    status: ticketData.status,\n    updatedBy: ticketData.updatedBy,\n    actionUrl: `/tickets/${ticketData.ticketNumber}`\n  });\n}\n\nexport async function notifyTicketAssigned(\n  userId: string,\n  ticketData: {\n    ticketNumber: string;\n    title: string;\n    assignedBy: string;\n    priority?: string;\n  }\n) {\n  await notificationService.createNotification(userId, 'ticket_assigned', {\n    ticketNumber: ticketData.ticketNumber,\n    title: ticketData.title,\n    assignedBy: ticketData.assignedBy,\n    priority: ticketData.priority,\n    actionUrl: `/tickets/${ticketData.ticketNumber}`\n  });\n}\n\nexport async function notifyTicketReply(\n  userId: string,\n  ticketData: {\n    ticketNumber: string;\n    title: string;\n    repliedBy: string;\n    isCustomerReply: boolean;\n  }\n) {\n  await notificationService.createNotification(userId, 'ticket_reply', {\n    ticketNumber: ticketData.ticketNumber,\n    title: ticketData.title,\n    repliedBy: ticketData.repliedBy,\n    isCustomerReply: ticketData.isCustomerReply,\n    actionUrl: `/tickets/${ticketData.ticketNumber}`\n  });\n}\n\nexport async function notifyTicketResolved(\n  userId: string,\n  ticketData: {\n    ticketNumber: string;\n    title: string;\n    resolvedBy: string;\n    resolution?: string;\n  }\n) {\n  await notificationService.createNotification(userId, 'ticket_resolved', {\n    ticketNumber: ticketData.ticketNumber,\n    title: ticketData.title,\n    resolvedBy: ticketData.resolvedBy,\n    resolution: ticketData.resolution,\n    actionUrl: `/tickets/${ticketData.ticketNumber}`\n  });\n}\n\n/**\n * Payment-related notifications\n */\nexport async function notifyPaymentSuccess(\n  userId: string,\n  paymentData: {\n    amount: string;\n    currency: string;\n    paymentId: string;\n    paymentMethod?: string;\n    description?: string;\n  }\n) {\n  await notificationService.createNotification(userId, 'payment_success', {\n    amount: paymentData.amount,\n    currency: paymentData.currency,\n    paymentId: paymentData.paymentId,\n    paymentMethod: paymentData.paymentMethod,\n    description: paymentData.description,\n    actionUrl: `/billing/payments/${paymentData.paymentId}`\n  });\n}\n\nexport async function notifyPaymentFailed(\n  userId: string,\n  paymentData: {\n    amount: string;\n    currency: string;\n    paymentId?: string;\n    reason: string;\n    retryUrl?: string;\n  }\n) {\n  await notificationService.createNotification(userId, 'payment_failed', {\n    amount: paymentData.amount,\n    currency: paymentData.currency,\n    paymentId: paymentData.paymentId,\n    reason: paymentData.reason,\n    actionUrl: paymentData.retryUrl || '/billing'\n  });\n}\n\n/**\n * Balance-related notifications\n */\nexport async function notifyLowBalance(\n  userId: string,\n  balanceData: {\n    balance: string;\n    currency: string;\n    threshold: string;\n    lastTopUp?: Date;\n  }\n) {\n  await notificationService.createNotification(userId, 'low_balance', {\n    balance: balanceData.balance,\n    currency: balanceData.currency,\n    threshold: balanceData.threshold,\n    lastTopUp: balanceData.lastTopUp,\n    actionUrl: '/billing/top-up'\n  });\n}\n\nexport async function notifyZeroBalance(\n  userId: string,\n  balanceData: {\n    balance: string;\n    currency: string;\n    servicesAffected?: string[];\n  }\n) {\n  await notificationService.createNotification(userId, 'zero_balance', {\n    balance: balanceData.balance,\n    currency: balanceData.currency,\n    servicesAffected: balanceData.servicesAffected,\n    actionUrl: '/billing/top-up'\n  });\n}\n\n/**\n * Phone number-related notifications\n */\nexport async function notifyPhoneNumberApproved(\n  userId: string,\n  phoneData: {\n    phoneNumber: string;\n    country: string;\n    type: string;\n    monthlyCost?: string;\n  }\n) {\n  await notificationService.createNotification(userId, 'phone_number_approved', {\n    phoneNumber: phoneData.phoneNumber,\n    country: phoneData.country,\n    type: phoneData.type,\n    monthlyCost: phoneData.monthlyCost,\n    actionUrl: '/phone-numbers'\n  });\n}\n\nexport async function notifyPhoneNumberRejected(\n  userId: string,\n  phoneData: {\n    phoneNumber: string;\n    country: string;\n    reason: string;\n  }\n) {\n  await notificationService.createNotification(userId, 'phone_number_rejected', {\n    phoneNumber: phoneData.phoneNumber,\n    country: phoneData.country,\n    reason: phoneData.reason,\n    actionUrl: '/phone-numbers'\n  });\n}\n\nexport async function notifyPhoneNumberPurchased(\n  userId: string,\n  phoneData: {\n    phoneNumber: string;\n    country: string;\n    type: string;\n    cost: string;\n    currency: string;\n  }\n) {\n  await notificationService.createNotification(userId, 'phone_number_purchased', {\n    phoneNumber: phoneData.phoneNumber,\n    country: phoneData.country,\n    type: phoneData.type,\n    cost: phoneData.cost,\n    currency: phoneData.currency,\n    actionUrl: '/phone-numbers'\n  });\n}\n\nexport async function notifyPhoneNumberAssigned(\n  userId: string,\n  phoneData: {\n    phoneNumber: string;\n    assignedTo: string;\n    purpose: string;\n  }\n) {\n  await notificationService.createNotification(userId, 'phone_number_assigned', {\n    phoneNumber: phoneData.phoneNumber,\n    assignedTo: phoneData.assignedTo,\n    purpose: phoneData.purpose,\n    actionUrl: '/phone-numbers'\n  });\n}\n\n/**\n * System and admin notifications\n */\nexport async function notifySystemMaintenance(\n  userId: string,\n  maintenanceData: {\n    scheduledDate: Date;\n    duration: string;\n    affectedServices: string[];\n    description?: string;\n  }\n) {\n  await notificationService.createNotification(userId, 'system_maintenance', {\n    scheduledDate: maintenanceData.scheduledDate,\n    duration: maintenanceData.duration,\n    affectedServices: maintenanceData.affectedServices,\n    description: maintenanceData.description\n  });\n}\n\nexport async function notifySecurityAlert(\n  userId: string,\n  securityData: {\n    alertType: string;\n    description: string;\n    ipAddress?: string;\n    location?: string;\n    actionRequired?: boolean;\n  }\n) {\n  await notificationService.createNotification(userId, 'security_alert', {\n    alertType: securityData.alertType,\n    description: securityData.description,\n    ipAddress: securityData.ipAddress,\n    location: securityData.location,\n    actionRequired: securityData.actionRequired,\n    actionUrl: '/account/security'\n  });\n}\n\nexport async function notifyAdminAlert(\n  userId: string,\n  alertData: {\n    alertType: string;\n    message: string;\n    severity: 'low' | 'medium' | 'high' | 'urgent';\n    source?: string;\n    actionUrl?: string;\n  }\n) {\n  await notificationService.createNotification(userId, 'admin_alert', {\n    alertType: alertData.alertType,\n    message: alertData.message,\n    severity: alertData.severity,\n    source: alertData.source,\n    actionUrl: alertData.actionUrl || '/admin/alerts'\n  });\n}\n\nexport async function notifyUserVerification(\n  userId: string,\n  verificationData: {\n    verificationType: string;\n    status: 'pending' | 'approved' | 'rejected';\n    documentsRequired?: string[];\n    deadline?: Date;\n  }\n) {\n  await notificationService.createNotification(userId, 'user_verification', {\n    verificationType: verificationData.verificationType,\n    status: verificationData.status,\n    documentsRequired: verificationData.documentsRequired,\n    deadline: verificationData.deadline,\n    actionUrl: '/account/verification'\n  });\n}\n\nexport async function notifyCallQualityAlert(\n  userId: string,\n  qualityData: {\n    route: string;\n    qualityScore: number;\n    issueType: string;\n    affectedCalls: number;\n    timeFrame: string;\n  }\n) {\n  await notificationService.createNotification(userId, 'call_quality_alert', {\n    route: qualityData.route,\n    qualityScore: qualityData.qualityScore,\n    issueType: qualityData.issueType,\n    affectedCalls: qualityData.affectedCalls,\n    timeFrame: qualityData.timeFrame,\n    actionUrl: '/call-quality/reports'\n  });\n}\n\nexport async function notifyRateDeckUpdated(\n  userId: string,\n  rateDeckData: {\n    rateDeckName: string;\n    updatedBy: string;\n    changesCount: number;\n    effectiveDate: Date;\n  }\n) {\n  await notificationService.createNotification(userId, 'rate_deck_updated', {\n    rateDeckName: rateDeckData.rateDeckName,\n    updatedBy: rateDeckData.updatedBy,\n    changesCount: rateDeckData.changesCount,\n    effectiveDate: rateDeckData.effectiveDate,\n    actionUrl: '/rate-decks'\n  });\n}\n\n/**\n * Bulk notification functions for admin use\n */\nexport async function notifyMultipleUsers(\n  userIds: string[],\n  notificationType: NotificationType,\n  data: Record<string, any>\n) {\n  const promises = userIds.map(userId => \n    notificationService.createNotification(userId, notificationType, data)\n  );\n  \n  try {\n    await Promise.all(promises);\n    console.log(`Successfully sent ${notificationType} notifications to ${userIds.length} users`);\n  } catch (error) {\n    console.error('Error sending bulk notifications:', error);\n    throw error;\n  }\n}\n\n/**\n * Utility function to notify all admins\n */\nexport async function notifyAllAdmins(\n  notificationType: NotificationType,\n  data: Record<string, any>\n) {\n  // This would need to be implemented with your user management system\n  // Example: const adminUserIds = await getUsersByRole('admin');\n  // await notifyMultipleUsers(adminUserIds, notificationType, data);\n  console.warn('notifyAllAdmins: Please implement admin user retrieval logic');\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/lib/passwordResetService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":56,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2083,2086],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2083,2086],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":90,"column":97,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":100,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3149,3152],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3149,3152],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { logAndSendEmail } from './emailLogger';\nimport { generatePasswordResetEmail, PasswordResetEmailData } from './emailTemplates/authNotifications';\nimport { sendEmail } from './emailService';\nimport BrandingSettings from '@/models/BrandingSettings';\nimport User from '@/models/User';\nimport { connectToDatabase } from './db';\n\n// Send password reset email\nexport const sendPasswordResetEmail = async (email: string): Promise<{ success: boolean; message: string }> => {\n  try {\n    await connectToDatabase();\n    \n    // Find user by email\n    const user = await User.findByEmail(email);\n    if (!user) {\n      // Don't reveal if email exists or not for security\n      return {\n        success: true,\n        message: 'If an account with this email exists, you will receive a password reset link shortly.'\n      };\n    }\n    \n    // Generate reset token\n    const resetToken = user.createPasswordResetToken();\n    await user.save({ validateBeforeSave: false });\n    \n    // Get branding settings\n    const brandingSettings = await BrandingSettings.findOne({});\n    const branding = {\n      companyName: brandingSettings?.companyName || 'OVOKY',\n      companySlogan: brandingSettings?.companySlogan || 'Your trusted communications partner',\n      primaryColor: brandingSettings?.primaryColor || '#667eea',\n      fontFamily: brandingSettings?.fontFamily || 'Arial, sans-serif',\n      supportEmail: brandingSettings?.supportEmail || 'support@ovoky.com',\n      websiteUrl: brandingSettings?.websiteUrl || 'https://ovoky.com'\n    };\n    \n    // Create reset URL\n    const baseUrl = process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000';\n    const resetUrl = `${baseUrl}/reset-password?token=${resetToken}`;\n    \n    // Prepare email data\n    const emailData: PasswordResetEmailData = {\n      name: user.name,\n      email: user.email,\n      resetToken,\n      resetUrl,\n      branding\n    };\n    \n    // Generate email content\n    const htmlContent = generatePasswordResetEmail(emailData);\n    \n    // Send email with logging\n    const emailLogData = {\n      userId: (user._id as any).toString(),\n      userEmail: user.email,\n      userName: user.name,\n      notificationType: 'password_reset' as const,\n      emailSubject: `Reset Your Password - ${branding.companyName}`,\n      emailBody: htmlContent.html,\n      metadata: {\n        resetTokenSent: true,\n        expiresAt: user.passwordResetExpires\n      }\n    };\n\n    await logAndSendEmail(emailLogData, async () => {\n      // Send the actual email using the email service\n      await sendEmail({\n        to: user.email,\n        subject: emailLogData.emailSubject,\n        html: htmlContent.html,\n        text: htmlContent.text\n      });\n    });\n    \n    return {\n      success: true,\n      message: 'Password reset email sent successfully. Please check your email for instructions.'\n    };\n    \n  } catch (error) {\n    console.error('Password reset email error:', error);\n    throw new Error('Failed to send password reset email. Please try again later.');\n  }\n};\n\n// Verify password reset token\nexport const verifyPasswordResetToken = async (token: string): Promise<{ valid: boolean; user?: any; message: string }> => {\n  try {\n    await connectToDatabase();\n    \n    // Find user with valid reset token\n    const user = await User.findOne({\n      passwordResetToken: { $exists: true },\n      passwordResetExpires: { $gt: Date.now() }\n    });\n    \n    if (!user || !user.isPasswordResetTokenValid(token)) {\n      return {\n        valid: false,\n        message: 'Invalid or expired password reset token. Please request a new password reset.'\n      };\n    }\n    \n    return {\n      valid: true,\n      user: {\n        id: user._id.toString(),\n        email: user.email,\n        name: user.name\n      },\n      message: 'Token is valid'\n    };\n    \n  } catch (error) {\n    console.error('Token verification error:', error);\n    return {\n      valid: false,\n      message: 'Error verifying token. Please try again.'\n    };\n  }\n};\n\n// Reset password with token\nexport const resetPasswordWithToken = async (\n  token: string, \n  newPassword: string\n): Promise<{ success: boolean; message: string }> => {\n  try {\n    await connectToDatabase();\n    \n    // Verify token first\n    const verification = await verifyPasswordResetToken(token);\n    if (!verification.valid) {\n      return {\n        success: false,\n        message: verification.message\n      };\n    }\n    \n    // Find user and update password\n    const user = await User.findById(verification.user!.id);\n    if (!user) {\n      return {\n        success: false,\n        message: 'User not found. Please request a new password reset.'\n      };\n    }\n    \n    // Update password and clear reset token\n    user.password = newPassword;\n    user.passwordResetToken = undefined;\n    user.passwordResetExpires = undefined;\n    await user.save();\n    \n    return {\n      success: true,\n      message: 'Password reset successfully. You can now log in with your new password.'\n    };\n    \n  } catch (error) {\n    console.error('Password reset error:', error);\n    return {\n      success: false,\n      message: 'Failed to reset password. Please try again later.'\n    };\n  }\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/lib/paymentEmailService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'sendEmail' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { generatePaymentSuccessTemplate, PaymentSuccessData } from '@/lib/emailTemplates';\nimport { sendEmail } from '@/lib/emailService';\nimport { logAndSendEmail } from '@/lib/emailLogger';\nimport User from '@/models/User';\nimport BrandingSettings from '@/models/BrandingSettings';\nimport SmtpService from '@/services/SmtpService';\n\nexport interface PaymentEmailData {\n  userId: string;\n  paymentAmount: number;\n  currency: string;\n  paymentType: 'gateway_payment' | 'admin_credit' | 'admin_debit';\n  paymentMethod?: string;\n  transactionId?: string;\n  fees?: {\n    processingFee?: number;\n    fixedFee?: number;\n  };\n  gateway?: string;\n  notes?: string;\n  processedBy?: string; // Admin name for admin credits\n  currentBalance?: number; // Updated balance after payment\n}\n\nexport async function sendPaymentSuccessEmail(data: PaymentEmailData): Promise<boolean> {\n  try {\n    // Get user details\n    const user = await User.findById(data.userId);\n    if (!user) {\n      console.error('User not found for payment notification:', data.userId);\n      return false;\n    }\n\n    // Get branding settings\n    const brandingSettings = await BrandingSettings.findOne({});\n    if (!brandingSettings) {\n      console.error('Branding settings not found');\n      return false;\n    }\n\n    // Prepare email template data\n    const templateData: PaymentSuccessData = {\n      account: {\n        name: user.name,\n        email: user.email,\n        sippyAccountId: user.sippyAccountId || 0,\n        balance: data.currentBalance,\n        currency: data.currency,\n      },\n      payment: {\n        amount: data.paymentAmount,\n        currency: data.currency,\n        paymentMethod: data.paymentMethod,\n        transactionId: data.transactionId,\n        fees: data.fees,\n        gateway: data.gateway,\n        notes: data.notes,\n      },\n      paymentType: data.paymentType,\n      processedBy: data.processedBy,\n      branding: {\n        companyName: brandingSettings.companyName,\n        companySlogan: brandingSettings.companySlogan,\n        primaryColor: brandingSettings.primaryColor,\n        fontFamily: brandingSettings.fontFamily || 'Arial, sans-serif',\n      },\n    };\n\n    // Generate email content\n    const emailContent = generatePaymentSuccessTemplate(templateData);\n\n    // Determine notification type\n    const notificationType: 'payment_success_gateway' | 'payment_success_admin' = data.paymentType === 'gateway_payment' \n      ? 'payment_success_gateway' \n      : data.paymentType === 'admin_credit' ? 'payment_success_admin' : 'payment_success_admin';\n\n    // Send email using logAndSendEmail for proper logging\n    const emailLogResult = await logAndSendEmail(\n      {\n        userId: data.userId,\n        userEmail: user.email,\n        userName: user.name,\n        sippyAccountId: user.sippyAccountId,\n        notificationType,\n        emailSubject: emailContent.subject,\n        emailBody: emailContent.html,\n        paymentData: {\n          amount: data.paymentAmount,\n          currency: data.currency,\n          paymentMethod: data.paymentMethod || 'Unknown',\n          transactionId: data.transactionId,\n          fees: data.fees,\n          gateway: data.gateway,\n          notes: data.notes,\n          processedBy: data.processedBy\n        }\n      },\n      async () => {\n        const smtpService = SmtpService.getInstance();\n        const result = await smtpService.sendBillingEmail({\n          to: user.email,\n          subject: emailContent.subject,\n          html: emailContent.html,\n          text: emailContent.text\n        });\n        \n        if (!result.success) {\n          throw new Error(`Failed to send payment notification: ${result.error}`);\n        }\n        \n        return result;\n      }\n    );\n\n    if (emailLogResult) {\n      console.log(`✅ Payment success email sent to ${user.email} for ${data.paymentType}`);\n      return true;\n    } else {\n      console.error(`❌ Failed to send payment success email to ${user.email}`);\n      return false;\n    }\n  } catch (error) {\n    console.error('Error sending payment success email:', error);\n    return false;\n  }\n}\n\nexport async function sendGatewayPaymentSuccessEmail(params: {\n  userId: string;\n  amount: number;\n  currency: string;\n  paymentMethod?: string;\n  transactionId?: string;\n  fees?: {\n    processingFee?: number;\n    fixedFee?: number;\n  };\n  gateway?: string;\n  currentBalance?: number;\n}): Promise<boolean> {\n  return sendPaymentSuccessEmail({\n    ...params,\n    paymentAmount: params.amount,\n    paymentType: 'gateway_payment',\n  });\n}\n\nexport async function sendAdminCreditSuccessEmail(params: {\n  userId: string;\n  amount: number;\n  currency: string;\n  processedBy: string;\n  notes?: string;\n  currentBalance?: number;\n}): Promise<boolean> {\n  return sendPaymentSuccessEmail({\n    ...params,\n    paymentAmount: params.amount,\n    paymentType: 'admin_credit',\n    paymentMethod: 'Admin Credit',\n  });\n}\n\nexport async function sendAdminDebitNotificationEmail(params: {\n  userId: string;\n  amount: number;\n  currency: string;\n  processedBy: string;\n  notes?: string;\n  currentBalance?: number;\n}): Promise<boolean> {\n  // For debit operations, use the admin_debit payment type\n  return sendPaymentSuccessEmail({\n    ...params,\n    paymentAmount: params.amount, // Keep positive amount, template will handle display\n    paymentType: 'admin_debit', // Use new admin_debit type\n    paymentMethod: 'Admin Debit',\n  });\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/lib/services/kpiAlertService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/lib/sippy/core/SippyBaseClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/lib/sippy/core/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/lib/sippy/index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":109,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3514,3517],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3514,3517],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":113,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":113,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3646,3649],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3646,3649],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":117,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":117,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3773,3776],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3773,3776],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Barrel exports for the modular Sippy client architecture\n\n// Core exports\nexport { SippyBaseClient } from './core/SippyBaseClient';\nexport type { SippyCredentials, RequestOptions } from './core/SippyBaseClient';\nexport * from './core/types';\n\n// Module exports\nexport { SippyDashboardClient } from './modules/SippyDashboardClient';\nexport type { DashboardCDROptions, DashboardAccountOptions } from './modules/SippyDashboardClient';\n\nexport { SippyPaymentsClient } from './modules/SippyPaymentsClient';\nexport type { \n  PaymentListOptions, \n  PaymentInfoOptions, \n  BalanceOperationOptions \n} from './modules/SippyPaymentsClient';\n\nexport { SippyCallsClient } from './modules/SippyCallsClient';\nexport type { \n  ActiveCallsOptions, \n  DisconnectCallOptions,\n  ActiveCall\n} from './modules/SippyCallsClient';\n\n// Import classes for factory use\nimport { SippyCredentials } from './core/SippyBaseClient';\nimport { SippyDashboardClient } from './modules/SippyDashboardClient';\nimport { SippyPaymentsClient } from './modules/SippyPaymentsClient';\nimport { SippyCallsClient } from './modules/SippyCallsClient';\n\n// Factory function for creating specialized clients\nexport class SippyClientFactory {\n  /**\n   * Create a dashboard client optimized for widget performance\n   */\n  static createDashboardClient(credentials: SippyCredentials): SippyDashboardClient {\n    return new SippyDashboardClient(credentials);\n  }\n\n  /**\n   * Create a payments client with intelligent method detection\n   */\n  static createPaymentsClient(credentials: SippyCredentials): SippyPaymentsClient {\n    return new SippyPaymentsClient(credentials);\n  }\n\n  /**\n   * Create a calls client for real-time call management\n   */\n  static createCallsClient(credentials: SippyCredentials): SippyCallsClient {\n    return new SippyCallsClient(credentials);\n  }\n\n  /**\n   * Get information about available client modules\n   */\n  static getAvailableModules() {\n    return {\n      dashboard: {\n        name: 'SippyDashboardClient',\n        description: 'Optimized for dashboard widgets with lightweight parsing',\n        features: [\n          'Fast timeouts (45s)',\n          'Memory-optimized CDR parsing (~95% reduction)',\n          'Essential fields only',\n          'Dashboard-specific error handling'\n        ]\n      },\n      payments: {\n        name: 'SippyPaymentsClient',\n        description: 'Enhanced payment operations with intelligent method detection',\n        features: [\n          'Intelligent payment method detection',\n          'Enhanced payment data parsing',\n          'Support for all payment operations',\n          'Payment-specific error handling'\n        ]\n      },\n      calls: {\n        name: 'SippyCallsClient',\n        description: 'Real-time call management with robust XML parsing',\n        features: [\n          'Real-time active calls monitoring',\n          'Call disconnection capabilities',\n          'Robust XML parsing for call data',\n          'Call-specific error handling'\n        ]\n      },\n      // Future modules\n      cdrs: {\n        name: 'SippyCdrClient',\n        description: 'Full CDR parsing for detailed reports (coming soon)',\n        status: 'planned'\n      },\n      rates: {\n        name: 'SippyRatesClient',\n        description: 'Rate management and pricing (coming soon)',\n        status: 'planned'\n      }\n    };\n  }\n}\n\n// Convenience exports for backward compatibility\nexport { SippyClientFactory as SippyClient };\n\n// Type guards for client identification\nexport function isDashboardClient(client: any): client is SippyDashboardClient {\n  return client instanceof SippyDashboardClient;\n}\n\nexport function isPaymentsClient(client: any): client is SippyPaymentsClient {\n  return client instanceof SippyPaymentsClient;\n}\n\nexport function isCallsClient(client: any): client is SippyCallsClient {\n  return client instanceof SippyCallsClient;\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/lib/sippy/modules/SippyCallsClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/lib/sippy/modules/SippyDashboardClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/lib/sippy/modules/SippyPaymentsClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/lib/sippyClient.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":184,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":184,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4394,4397],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4394,4397],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":188,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":188,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4500,4503],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4500,4503],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":205,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":205,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5244,5247],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5244,5247],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":228,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":228,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6273,6276],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6273,6276],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":283,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":283,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8803,8806],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8803,8806],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'err' is defined but never used.","line":438,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":438,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":574,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":574,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20214,20217],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20214,20217],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":579,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":579,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20489,20492],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20489,20492],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":630,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":630,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22117,22120],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22117,22120],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":631,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":631,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22152,22155],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22152,22155],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import axios from 'axios';\nimport 'isomorphic-fetch';\nimport { Agent } from 'https';\nimport crypto from 'crypto';\n\nexport interface SippyCredentials {\n  username: string;\n  password: string;\n  host: string; // e.g. \"https://switch.example.com\"\n}\n\nexport interface Call {\n  i_call: number;\n  cli: string;\n  cld: string;\n  connect_time: string;\n  call_duration: number;\n  disconnect_cause: string;\n  account_id: number;\n  account_name: string;\n  node_id: string;\n  status: string;\n}\n\nexport interface Stats {\n  total_calls: number;\n  connected_calls: number;\n  average_duration: number;\n  total_minutes: number;\n}\n\nexport interface CdrRow {\n  i_cdr: number;\n  connect_time: string;\n  disconnect_time: string;\n  cli: string;\n  cld: string;\n  account_id: number;\n  account_name: string;\n  duration: number;\n  charged_amount: number;\n  disconnect_cause: string;\n}\n\n// Account info interface based on Sippy API documentation\nexport interface AccountInfo {\n  i_account: number;\n  username: string;\n  authname: string;\n  balance: number;\n  credit_limit: number;\n  max_sessions: number;\n  max_credit_time: number;\n  translation_rule: string;\n  cli_translation_rule: string;\n  i_routing_group: number;\n  i_billing_plan: number;\n  i_account_class?: number;\n  i_time_zone: number;\n  cpe_number: string;\n  vm_enabled: number;\n  vm_password?: string;\n  vm_timeout?: number;\n  vm_check_number?: string;\n  blocked: number;\n  i_lang: string;\n  payment_currency: string;\n  payment_method: number;\n  i_export_type: number;\n  lifetime: number;\n  i_commission_agent?: number;\n  commission_size?: number;\n  preferred_codec?: number;\n  use_preferred_codec_only: boolean;\n  reg_allowed: number;\n  welcome_call_ivr?: number;\n  on_payment_action?: number;\n  min_payment_amount: number;\n  trust_cli: boolean;\n  disallow_loops: boolean;\n  vm_notify_emails?: string;\n  vm_forward_emails?: string;\n  vm_del_after_fwd: boolean;\n  company_name?: string;\n  salutation?: string;\n  first_name?: string;\n  last_name?: string;\n  mid_init?: string;\n  street_addr?: string;\n  state?: string;\n  postal_code?: string;\n  city?: string;\n  country?: string;\n  contact?: string;\n  phone?: string;\n  fax?: string;\n  alt_phone?: string;\n  alt_contact?: string;\n  email?: string;\n  cc?: string;\n  bcc?: string;\n  i_password_policy: number;\n  i_media_relay_type: number;\n  lan_access?: boolean;\n  batch_tag?: string;\n  i_provisioning?: number;\n  invoicing_enabled?: boolean;\n  i_invoice_template?: number;\n  i_caller_name_type?: number;\n  caller_name?: string;\n  followme_enabled?: boolean;\n  vm_dialin_access?: boolean;\n  hide_own_cli?: boolean;\n  block_incoming_anonymous?: boolean;\n  i_incoming_anonymous_action?: number;\n  dnd_enabled?: boolean;\n  description?: string;\n  pass_p_asserted_id?: boolean;\n  p_assrt_id_translation_rule?: string;\n  dncl_lookup?: boolean;\n  generate_ringbacktone?: boolean;\n  max_calls_per_second?: number;\n  allow_free_onnet_calls?: boolean;\n  start_page?: number;\n  trust_privacy_hdrs?: boolean;\n  privacy_schemas?: string[];\n  created_on?: string;\n  created_by?: string;\n  updated_on?: string;\n  updated_by?: string;\n  deleted_by?: string;\n  record_version?: number;\n  first_use?: string;\n  next_billing_time?: string;\n  call_recording?: boolean;\n}\n\n// Payment interfaces based on Sippy API documentation\nexport interface PaymentInfo {\n  result: string;\n  payment_time: string; // '%H:%M:%S.000 GMT %a %b %d %Y' format\n  amount: number;\n  currency: string;\n  tx_id: string;\n  tx_error: string;\n  tx_result: number; // 1 = successful, 2 = failed\n  by_credit_debit_card: boolean;\n  by_voucher: boolean;\n  notes: string;\n}\n\nexport interface Payment {\n  payment_time: string; // '%H:%M:%S.000 GMT %a %b %d %Y' format\n  amount: number;\n  currency: string;\n  i_payment: number;\n  tx_id: string;\n  tx_error: string;\n  tx_result: number; // 1 = successful, 2 = failed\n  i_account: number;\n  i_customer: number;\n  by_credit_debit_card: boolean;\n  by_voucher: boolean;\n  notes: string;\n}\n\nexport interface PaymentsList {\n  result: string;\n  payments: Payment[];\n}\n\nexport interface BalanceOperation {\n  result: string;\n  tx_id?: string;\n  payment_id?: string;\n  error?: string;\n  tx_error?: string;\n  tx_result?: number; // 1 = successful, 2 = failed\n  amount?: number;\n  currency?: string;\n  payment_time?: string;\n  i_payment?: number;\n  // Additional fields that might be present in Sippy response\n  [key: string]: any;\n}\n\n// Simple XML-RPC parser for Sippy API responses\nfunction parseXmlRpcResponse(xmlString: string): any {\n  try {\n    // Remove XML declaration and whitespace\n    const cleanXml = xmlString.replace(/<\\?xml[^>]*\\?>/, '').trim();\n    \n    // Check if it's a fault response\n    if (cleanXml.includes('<fault>')) {\n      const faultCodeMatch = cleanXml.match(/<name>faultCode<\\/name>\\s*<value><int>(\\d+)<\\/int><\\/value>/);\n      const faultStringMatch = cleanXml.match(/<name>faultString<\\/name>\\s*<value><string>([^<]*)<\\/string><\\/value>/);\n      \n      const faultCode = faultCodeMatch ? parseInt(faultCodeMatch[1]) : 0;\n      const faultString = faultStringMatch ? faultStringMatch[1] : 'Unknown error';\n      \n      throw new Error(`Sippy API Fault ${faultCode}: ${faultString}`);\n    }\n    \n    // Parse successful response\n    const result: any = {};\n    \n    // Extract result field\n    const resultMatch = cleanXml.match(/<name>result<\\/name>\\s*<value><string>([^<]*)<\\/string><\\/value>/);\n    if (resultMatch) {\n      result.result = resultMatch[1];\n    }\n    \n    // Extract payments array if present\n    if (cleanXml.includes('<name>payments</name>')) {\n      result.payments = [];\n      \n      // Find the payments array content\n      const paymentsMatch = cleanXml.match(/<name>payments<\\/name>\\s*<value><array><data>([\\s\\S]*?)<\\/data><\\/array><\\/value>/);\n      if (paymentsMatch) {\n        const paymentsData = paymentsMatch[1];\n        \n        // Extract individual payment structs\n        const paymentStructMatches = paymentsData.match(/<value><struct>[\\s\\S]*?<\\/struct><\\/value>/g);\n        if (paymentStructMatches) {\n          for (const paymentStructMatch of paymentStructMatches) {\n            const structContent = paymentStructMatch.match(/<value><struct>([\\s\\S]*?)<\\/struct><\\/value>/);\n            if (structContent) {\n              const payment: any = {};\n              \n              // Extract payment fields\n              const fieldMatches = structContent[1].match(/<member>\\s*<name>([^<]+)<\\/name>\\s*<value>(?:<(\\w+)>)?([^<]*?)(?:<\\/\\2>)?<\\/value>\\s*<\\/member>/g);\n              if (fieldMatches) {\n                for (const fieldMatch of fieldMatches) {\n                  const fieldParts = fieldMatch.match(/<name>([^<]+)<\\/name>\\s*<value>(?:<(\\w+)>)?([^<]*?)(?:<\\/\\2>)?<\\/value>/);\n                  if (fieldParts) {\n                    const fieldName = fieldParts[1];\n                    const fieldType = fieldParts[2];\n                    const fieldValue = fieldParts[3];\n                    \n                    // Convert based on type\n                    if (fieldType === 'int' || fieldType === 'i4') {\n                      payment[fieldName] = parseInt(fieldValue) || 0;\n                    } else if (fieldType === 'double') {\n                      payment[fieldName] = parseFloat(fieldValue) || 0;\n                    } else if (fieldType === 'boolean') {\n                      payment[fieldName] = fieldValue === '1' || fieldValue === 'true';\n                    } else {\n                      payment[fieldName] = fieldValue || '';\n                    }\n                  }\n                }\n              }\n              \n              if (Object.keys(payment).length > 0) {\n                result.payments.push(payment);\n              }\n            }\n          }\n        }\n      }\n    }\n    \n    // Extract other arrays (like CDRs, accounts, etc.)\n    const arrayMatches = cleanXml.match(/<name>(\\w+)<\\/name>\\s*<value><array><data>[\\s\\S]*?<\\/data><\\/array><\\/value>/g);\n    if (arrayMatches) {\n      for (const arrayMatch of arrayMatches) {\n        const arrayParts = arrayMatch.match(/<name>(\\w+)<\\/name>\\s*<value><array><data>([\\s\\S]*?)<\\/data><\\/array><\\/value>/);\n        if (arrayParts) {\n          const arrayName = arrayParts[1];\n          const arrayData = arrayParts[2];\n          \n          // Skip if we already processed payments\n          if (arrayName === 'payments') continue;\n          \n          result[arrayName] = [];\n          \n          // Extract array items\n          const itemStructMatches = arrayData.match(/<value><struct>[\\s\\S]*?<\\/struct><\\/value>/g);\n          if (itemStructMatches) {\n            for (const itemStructMatch of itemStructMatches) {\n              const structContent = itemStructMatch.match(/<value><struct>([\\s\\S]*?)<\\/struct><\\/value>/);\n              if (structContent) {\n                const item: any = {};\n                \n                const fieldMatches = structContent[1].match(/<member>\\s*<name>([^<]+)<\\/name>\\s*<value>(?:<(\\w+)>)?([^<]*?)(?:<\\/\\2>)?<\\/value>\\s*<\\/member>/g);\n                if (fieldMatches) {\n                  for (const fieldMatch of fieldMatches) {\n                    const fieldParts = fieldMatch.match(/<name>([^<]+)<\\/name>\\s*<value>(?:<(\\w+)>)?([^<]*?)(?:<\\/\\2>)?<\\/value>/);\n                    if (fieldParts) {\n                      const fieldName = fieldParts[1];\n                      const fieldType = fieldParts[2];\n                      const fieldValue = fieldParts[3];\n                      \n                      if (fieldType === 'int' || fieldType === 'i4') {\n                        item[fieldName] = parseInt(fieldValue) || 0;\n                      } else if (fieldType === 'double') {\n                        item[fieldName] = parseFloat(fieldValue) || 0;\n                      } else if (fieldType === 'boolean') {\n                        item[fieldName] = fieldValue === '1' || fieldValue === 'true';\n                      } else {\n                        item[fieldName] = fieldValue || '';\n                      }\n                    }\n                  }\n                }\n                \n                if (Object.keys(item).length > 0) {\n                  result[arrayName].push(item);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    \n    // Extract simple fields for single object responses\n    const simpleFieldMatches = cleanXml.match(/<member>\\s*<name>([^<]+)<\\/name>\\s*<value>(?:<(\\w+)>)?([^<]*?)(?:<\\/\\2>)?<\\/value>\\s*<\\/member>/g);\n    if (simpleFieldMatches) {\n      for (const fieldMatch of simpleFieldMatches) {\n        const fieldParts = fieldMatch.match(/<name>([^<]+)<\\/name>\\s*<value>(?:<(\\w+)>)?([^<]*?)(?:<\\/\\2>)?<\\/value>/);\n        if (fieldParts) {\n          const fieldName = fieldParts[1];\n          const fieldType = fieldParts[2];\n          const fieldValue = fieldParts[3];\n          \n          // Skip if we already have this field (arrays take precedence)\n          if (result[fieldName] !== undefined) continue;\n          \n          if (fieldType === 'int' || fieldType === 'i4') {\n            result[fieldName] = parseInt(fieldValue) || 0;\n          } else if (fieldType === 'double') {\n            result[fieldName] = parseFloat(fieldValue) || 0;\n          } else if (fieldType === 'boolean') {\n            result[fieldName] = fieldValue === '1' || fieldValue === 'true';\n          } else {\n            result[fieldName] = fieldValue || '';\n          }\n        }\n      }\n    }\n    \n    return result;\n    \n  } catch (error) {\n    console.error('Error parsing XML-RPC response:', error);\n    console.error('XML content:', xmlString.substring(0, 1000));\n    throw new Error(`Failed to parse XML-RPC response: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}\n\nexport class SippyClient {\n  private credentials: SippyCredentials;\n  private apiUrl: string;\n\n  constructor(creds: SippyCredentials) {\n    this.credentials = creds;\n    \n    // Normalize host URL format - remove any existing path components\n    let host = creds.host;\n    if (!host.startsWith('http://') && !host.startsWith('https://')) {\n      host = 'https://' + host;\n    }\n    \n    // Remove any trailing /xmlapi/xmlapi that might be part of the host\n    if (host.endsWith('/xmlapi/xmlapi')) {\n      host = host.substring(0, host.length - 13);\n    }\n    \n    // Set the correct URL for Sippy API\n    this.apiUrl = `${host}/xmlapi/xmlapi`;\n  }\n  \n  /**\n   * Creates an XML-RPC request payload following Sippy's example curl format\n   */\n  private createXmlRpcRequest(method: string, params: Record<string, unknown> = {}): string {\n    // Build XML-RPC request parameters\n    const paramElements: string[] = [];\n    \n    for (const [key, value] of Object.entries(params)) {\n      let valueXml;\n      \n      if (typeof value === 'number') {\n        if (Number.isInteger(value)) {\n          valueXml = `<int>${value}</int>`;\n        } else {\n          valueXml = `<double>${value}</double>`;\n        }\n      } else if (typeof value === 'boolean') {\n        valueXml = `<boolean>${value ? '1' : '0'}</boolean>`;\n      } else if (typeof value === 'string') {\n        valueXml = `<string>${value}</string>`;\n      } else if (Array.isArray(value)) {\n        valueXml = `<array><data>${value.map(item => \n          `<value>${typeof item === 'string' ? `<string>${item}</string>` : `<int>${item}</int>`}</value>`\n        ).join('')}</data></array>`;\n      } else {\n        valueXml = `<string>${String(value)}</string>`;\n      }\n      \n      paramElements.push(`<member><name>${key}</name><value>${valueXml}</value></member>`);\n    }\n    \n    // Format exactly following Sippy's example from curl\n    const xml = `<?xml version=\"1.0\"?>\n<methodCall><methodName>${method}</methodName>\n<params><param><value><struct>\n${paramElements.join('\\n')}\n</struct></value></param></params></methodCall>`;\n\n    return xml;\n  }\n\n  /**\n   * Make a request to the Sippy API using Digest Authentication\n   */\n  private async makeRequest<T>(method: string, params: Record<string, unknown> = {}, customTimeout?: number, parseXml: boolean = true): Promise<T> {\n    try {\n      // Format the XML-RPC request\n      const xmlData = this.createXmlRpcRequest(method, params);\n\n      // First request to get the digest challenge\n      let response;\n      try {\n        response = await axios({\n          method: 'post',\n          url: this.apiUrl,\n          data: xmlData,\n          headers: {\n            'Content-Type': 'text/xml',\n            'User-Agent': 'Sippy-Dashboard/1.0'\n          },\n          httpsAgent: new Agent({ rejectUnauthorized: false }),\n          validateStatus: status => status === 401,\n          timeout: customTimeout || 60000 // Use custom timeout or default 60 seconds\n        });\n      } catch (err) {\n        throw new Error('Failed to get digest challenge from Sippy API.');\n      }\n\n      // Extract digest parameters from WWW-Authenticate header\n      const authHeader = response.headers['www-authenticate'];\n      if (!authHeader) throw new Error('No WWW-Authenticate header received from Sippy API.');\n      const realm = authHeader.match(/realm=\"([^\"]+)\"/)[1];\n      const nonce = authHeader.match(/nonce=\"([^\"]+)\"/)[1];\n      const qop = authHeader.match(/qop=\"([^\"]+)\"/)[1];\n      const uri = '/xmlapi/xmlapi';\n      const methodStr = 'POST';\n      const nc = '00000001';\n      const cnonce = crypto.randomBytes(16).toString('hex');\n      const ha1 = crypto.createHash('md5').update(`${this.credentials.username}:${realm}:${this.credentials.password}`).digest('hex');\n      const ha2 = crypto.createHash('md5').update(`${methodStr}:${uri}`).digest('hex');\n      const responseDigest = crypto.createHash('md5').update(`${ha1}:${nonce}:${nc}:${cnonce}:${qop}:${ha2}`).digest('hex');\n      const digestAuth = `Digest username=\"${this.credentials.username}\", realm=\"${realm}\", nonce=\"${nonce}\", uri=\"${uri}\", algorithm=MD5, qop=${qop}, nc=${nc}, cnonce=\"${cnonce}\", response=\"${responseDigest}\"`;\n\n      // Second request with digest authentication\n      const authenticatedResponse = await axios({\n        method: 'post',\n        url: this.apiUrl,\n        data: xmlData,\n        headers: {\n          'Content-Type': 'text/xml',\n          'User-Agent': 'Sippy-Dashboard/1.0',\n          'Authorization': digestAuth\n        },\n        httpsAgent: new Agent({ rejectUnauthorized: false }),\n        timeout: customTimeout || 60000 // Use custom timeout or default 60 seconds\n      });\n\n      // Validate response content type\n      const contentType = authenticatedResponse.headers['content-type'] || '';\n      if (contentType.includes('text/html')) {\n        throw new Error('Received HTML response instead of XML-RPC. Check API endpoint and authentication.');\n      }\n      \n      // Return raw XML if parseXml is false, otherwise parse it\n      if (!parseXml) {\n        return authenticatedResponse.data as unknown as T;\n      }\n      \n      const parsedResult = parseXmlRpcResponse(authenticatedResponse.data as string) as unknown as T;\n      \n      return parsedResult;\n    } catch (error) {\n      console.error(`Error in Sippy API request ${method}:`, error);\n      if (axios.isAxiosError(error)) {\n        if (error.response) {\n          const contentType = error.response.headers['content-type'] || '';\n          if (contentType.includes('text/html')) {\n            throw new Error('Authentication error or invalid Sippy API endpoint. Please check your credentials.');\n          }\n          console.error('Error response:', error.response.status, error.response.data);\n          throw new Error(`Sippy API Error: ${error.response.status} - ${error.response.statusText}`);\n        } else if (error.request) {\n          throw new Error('No response received from Sippy API. Check network connectivity and API endpoint.');\n        }\n      }\n      throw error;\n    }\n  }\n\n  async listAllCalls(opts: { i_account?: number } = {}): Promise<Call[]> {\n    const result = await this.makeRequest<Call[]>('listAllCalls', opts);\n    return result || [];\n  }\n\n  async listActiveCalls(opts: { i_account?: number } = {}): Promise<Call[]> {\n    const result = await this.makeRequest<Call[]>('listActiveCalls', opts);\n    return result || [];\n  }\n\n  async disconnectCall(opts: { i_call: number }): Promise<void> {\n    await this.makeRequest<void>('disconnectCall', opts);\n  }\n\n  async disconnectAccount(opts: { i_account: number }): Promise<void> {\n    await this.makeRequest<void>('disconnectAccount', opts);\n  }\n\n  async getAccountCallStatsCustomer(opts: { i_account?: number } = {}): Promise<Stats> {\n    const result = await this.makeRequest<Stats>('getAccountCallStatsCustomer', opts);\n    return result || {\n      total_calls: 0,\n      connected_calls: 0,\n      average_duration: 0,\n      total_minutes: 0\n    };\n  }\n\n  async getAccountCDRs(opts: {\n    i_account?: number;\n    start_date?: string; // ISO\n    end_date?: string;\n    offset?: number;\n    limit?: number;\n    type?: string; // Add type parameter for CDR filtering\n    cli?: string;\n    cld?: string;\n    i_cdr?: string;\n  } = {}, customTimeout?: number): Promise<CdrRow[]> {\n    console.log('🔍 SippyClient.getAccountCDRs called with options:', opts);\n    // Use custom timeout if provided, otherwise use default axios timeout (60s)\n    // Return raw XML for compatibility with existing CDR parsers\n    const result = await this.makeRequest<CdrRow[]>('getAccountCDRs', opts, customTimeout, false);\n    return result || [];\n  }\n\n  /**\n   * Get CDRs optimized for dashboard widgets - extracts only essential fields\n   * This reduces memory usage by ~95% compared to full CDR data\n   */\n  async getAccountCDRsForWidgets(opts: {\n    i_account?: number;\n    start_date?: string;\n    end_date?: string;\n    offset?: number;\n    limit?: number;\n    type?: string;\n    cli?: string;\n    cld?: string;\n    i_cdr?: string;\n  } = {}, customTimeout?: number): Promise<{\n    cost: string;\n    duration: number;\n    result: number;\n    payment_currency?: string;\n    connect_time: string;\n  }[]> {\n    console.log('🔍 SippyClient.getAccountCDRsForWidgets called with options:', opts);\n    console.log('⚡ Optimized for dashboard widgets - extracting only essential fields');\n    \n    // Get the raw XML response\n    const rawResult = await this.makeRequest<any>('getAccountCDRs', opts, customTimeout);\n    \n    // If the result is already parsed (array), extract essential fields\n    if (Array.isArray(rawResult)) {\n      console.log(`📊 Extracting essential fields from ${rawResult.length} CDRs`);\n      return rawResult.map((cdr: any) => ({\n        cost: cdr.cost || '0',\n        duration: cdr.duration || 0,\n        result: cdr.result || 0,\n        payment_currency: cdr.payment_currency,\n        connect_time: cdr.connect_time || ''\n      }));\n    }\n    \n    // If it's raw XML, we need to parse it and extract only essential fields\n    // This would require implementing a lightweight XML parser here\n    // For now, return empty array if not already parsed\n    console.log('⚠️ Raw XML response received - full parsing required');\n    return [];\n  }\n\n  /**\n   * Get detailed account information from Sippy API\n   * @param opts Options object with account ID\n   * @returns Account information (raw XML for compatibility with existing parsers)\n   */\n  async getAccountInfo(opts: { i_account: number }): Promise<AccountInfo> {\n    const result = await this.makeRequest<AccountInfo>('getAccountInfo', opts, undefined, false);\n    return result;\n  }\n\n  /**\n   * Get multiple accounts information from Sippy API\n   * @param opts Options for filtering accounts\n   * @returns Array of account information\n   */\n  async getAccountsList(opts: {\n    offset?: number;\n    limit?: number;\n    i_customer?: number;\n    i_account_class?: number;\n    account_status?: string;\n  } = {}): Promise<AccountInfo[]> {\n    const result = await this.makeRequest<AccountInfo[]>('getAccountsList', opts);\n    return result || [];\n  }\n\n  /**\n   * Get rates for a specific account\n   * Based on Sippy XML-RPC API documentation: getAccountRates()\n   */\n  async getAccountRates(opts: {\n    i_account: number;\n    offset?: number;\n    limit?: number;\n    prefix?: string;\n  }): Promise<any> {\n    return this.makeRequest<any>('getAccountRates', opts);\n  }\n\n  // Payment Methods based on Sippy API documentation\n\n  /**\n   * Get payment details for a specific payment\n   * @param opts Options with payment ID and account/customer ID\n   * @returns Payment information\n   */\n  async getPaymentInfo(opts: {\n    i_payment: number;\n    i_account?: number;\n    i_customer?: number;\n  }): Promise<PaymentInfo> {\n    return this.makeRequest<PaymentInfo>('getPaymentInfo', opts);\n  }\n\n  /**\n   * Get list of payments for an account or customer\n   * @param opts Options for filtering payments\n   * @returns List of payments\n   */\n  async getPaymentsList(opts: {\n    i_account?: number;\n    i_customer?: number;\n    offset?: number;\n    limit?: number;\n    start_date?: string; // '%H:%M:%S.000 GMT %a %b %d %Y' format\n    end_date?: string; // '%H:%M:%S.000 GMT %a %b %d %Y' format\n    type?: 'credit' | 'debit';\n  } = {}): Promise<PaymentsList> {\n    return this.makeRequest<PaymentsList>('getPaymentsList', opts);\n  }\n\n  /**\n   * Add funds to an account (credit the balance)\n   * @param opts Options with account ID, amount, and currency\n   * @returns Operation result\n   */\n  async accountAddFunds(opts: {\n    i_account: number;\n    amount: number;\n    currency: string;\n    payment_notes?: string;\n    payment_time?: string; // '%H:%M:%S.000 GMT %a %b %d %Y' format\n  }): Promise<BalanceOperation> {\n    return this.makeRequest<BalanceOperation>('accountAddFunds', opts);\n  }\n\n  /**\n   * Credit an account's balance\n   * @param opts Options with account ID, amount, and currency\n   * @returns Operation result\n   */\n  async accountCredit(opts: {\n    i_account: number;\n    amount: number;\n    currency: string;\n    payment_notes?: string;\n    payment_time?: string; // '%H:%M:%S.000 GMT %a %b %d %Y' format\n  }): Promise<BalanceOperation> {\n    return this.makeRequest<BalanceOperation>('accountCredit', opts);\n  }\n\n  /**\n   * Debit an account's balance\n   * @param opts Options with account ID, amount, and currency\n   * @returns Operation result\n   */\n  async accountDebit(opts: {\n    i_account: number;\n    amount: number;\n    currency: string;\n    payment_notes?: string;\n    payment_time?: string; // '%H:%M:%S.000 GMT %a %b %d %Y' format\n  }): Promise<BalanceOperation> {\n    return this.makeRequest<BalanceOperation>('accountDebit', opts);\n  }\n\n  /**\n   * Add credit to an account's balance (alias for accountCredit)\n   * Used by payment processing webhooks\n   * @param opts Options with account ID, amount, and currency\n   * @returns Operation result\n   */\n  async addAccountCredit(opts: {\n    i_account: number;\n    amount: number;\n    currency: string;\n    payment_notes?: string;\n    payment_time?: string; // '%H:%M:%S.000 GMT %a %b %d %Y' format\n  }): Promise<BalanceOperation> {\n    return this.accountCredit(opts);\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/lib/sippyClientConfig.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/lib/startup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/lib/toast-utils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[790,793],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[790,793],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { InternalNotification, NotificationType, NotificationTemplates } from '@/types/notifications';\n\n/**\n * Utility functions for triggering custom toast notifications\n */\n\n// Global function to show toast (will be attached by ToastContainer)\ndeclare global {\n  interface Window {\n    showNotificationToast?: (\n      notification: InternalNotification,\n      options?: {\n        position?: 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left' | 'top-center' | 'bottom-center';\n        duration?: number;\n      }\n    ) => void;\n  }\n}\n\ninterface ToastOptions {\n  position?: 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left' | 'top-center' | 'bottom-center';\n  duration?: number;\n  priority?: 'low' | 'medium' | 'high' | 'urgent';\n  actionUrl?: string;\n  data?: Record<string, any>;\n  userId?: string;\n}\n\n/**\n * Generate a unique ID for toast notifications\n */\nfunction generateToastId(): string {\n  return `toast-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n}\n\n/**\n * Show a quick toast notification\n */\nexport function showToast(\n  type: NotificationType,\n  title?: string,\n  message?: string,\n  options: ToastOptions = {}\n) {\n  if (typeof window === 'undefined' || !window.showNotificationToast) {\n    console.warn('Toast system not initialized');\n    return;\n  }\n\n  const template = NotificationTemplates[type];\n  \n  const notification: InternalNotification = {\n    id: generateToastId(),\n    userId: options.userId || 'anonymous',\n    type,\n    title: title || template.getTitle(options.data),\n    message: message || template.getMessage(options.data),\n    priority: options.priority || 'medium',\n    status: 'unread',\n    data: options.data,\n    actionUrl: options.actionUrl,\n    icon: template.icon,\n    sound: template.sound,\n    showToast: true,\n    showPush: false,\n    persistent: false,\n    createdAt: new Date()\n  };\n\n  window.showNotificationToast(notification, {\n    position: options.position,\n    duration: options.duration\n  });\n}\n\n/**\n * Show a success toast\n */\nexport function showSuccessToast(\n  message: string,\n  title?: string,\n  options: ToastOptions = {}\n) {\n  showToast(\n    'payment_success', // Using payment_success as a generic success type\n    title || 'Success',\n    message,\n    { ...options, priority: 'medium' }\n  );\n}\n\n/**\n * Show an error toast\n */\nexport function showErrorToast(\n  message: string,\n  title?: string,\n  options: ToastOptions = {}\n) {\n  showToast(\n    'payment_failed', // Using payment_failed as a generic error type\n    title || 'Error',\n    message,\n    { ...options, priority: 'high' }\n  );\n}\n\n/**\n * Show a warning toast\n */\nexport function showWarningToast(\n  message: string,\n  title?: string,\n  options: ToastOptions = {}\n) {\n  showToast(\n    'low_balance', // Using low_balance as a generic warning type\n    title || 'Warning',\n    message,\n    { ...options, priority: 'high' }\n  );\n}\n\n/**\n * Show an info toast\n */\nexport function showInfoToast(\n  message: string,\n  title?: string,\n  options: ToastOptions = {}\n) {\n  showToast(\n    'system_maintenance', // Using system_maintenance as a generic info type\n    title || 'Information',\n    message,\n    { ...options, priority: 'low' }\n  );\n}\n\n/**\n * Show an urgent toast\n */\nexport function showUrgentToast(\n  message: string,\n  title?: string,\n  options: ToastOptions = {}\n) {\n  showToast(\n    'security_alert', // Using security_alert as a generic urgent type\n    title || 'Urgent',\n    message,\n    { ...options, priority: 'urgent' }\n  );\n}\n\n/**\n * Show a ticket-related toast\n */\nexport function showTicketToast(\n  action: 'created' | 'updated' | 'assigned' | 'resolved' | 'reply',\n  ticketNumber: string,\n  options: ToastOptions = {}\n) {\n  const typeMap = {\n    created: 'ticket_created',\n    updated: 'ticket_updated',\n    assigned: 'ticket_assigned',\n    resolved: 'ticket_resolved',\n    reply: 'ticket_reply'\n  } as const;\n\n  showToast(\n    typeMap[action],\n    undefined,\n    undefined,\n    {\n      ...options,\n      data: { ticketNumber, ...options.data }\n    }\n  );\n}\n\n/**\n * Show a payment-related toast\n */\nexport function showPaymentToast(\n  success: boolean,\n  amount: string,\n  currency: string = 'USD',\n  options: ToastOptions = {}\n) {\n  showToast(\n    success ? 'payment_success' : 'payment_failed',\n    undefined,\n    undefined,\n    {\n      ...options,\n      priority: success ? 'medium' : 'high',\n      data: { amount, currency, ...options.data }\n    }\n  );\n}\n\n/**\n * Show a phone number related toast\n */\nexport function showPhoneNumberToast(\n  action: 'approved' | 'rejected' | 'purchased' | 'assigned',\n  phoneNumber: string,\n  options: ToastOptions = {}\n) {\n  const typeMap = {\n    approved: 'phone_number_approved',\n    rejected: 'phone_number_rejected',\n    purchased: 'phone_number_purchased',\n    assigned: 'phone_number_assigned'\n  } as const;\n\n  showToast(\n    typeMap[action],\n    undefined,\n    undefined,\n    {\n      ...options,\n      data: { phoneNumber, ...options.data }\n    }\n  );\n}\n\n/**\n * Show a balance-related toast\n */\nexport function showBalanceToast(\n  balance: number,\n  threshold: number,\n  currency: string = 'USD',\n  options: ToastOptions = {}\n) {\n  const type = balance <= 0 ? 'zero_balance' : 'low_balance';\n  const priority = balance <= 0 ? 'urgent' : 'high';\n\n  showToast(\n    type,\n    undefined,\n    undefined,\n    {\n      ...options,\n      priority,\n      data: { balance: balance.toFixed(2), threshold: threshold.toFixed(2), currency, ...options.data }\n    }\n  );\n}\n\n/**\n * Hook to easily show toasts from React components\n */\nexport function useToast() {\n  return {\n    showToast,\n    showSuccessToast,\n    showErrorToast,\n    showWarningToast,\n    showInfoToast,\n    showUrgentToast,\n    showTicketToast,\n    showPaymentToast,\n    showPhoneNumberToast,\n    showBalanceToast\n  };\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/lib/userSetup.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[603,606],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[603,606],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[635,638],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[635,638],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { connectToDatabase } from '@/lib/db';\nimport DashboardPreferencesModel from '@/models/DashboardPreferences';\nimport { NotificationPreferencesModel } from '@/models/InternalNotification';\nimport { createDefaultDashboardPreferences } from '@/lib/defaultDashboardPreferences';\nimport { createDefaultPreferences } from '@/types/notifications';\n\n/**\n * Initialize default preferences for a new user\n * This should be called during user registration/signup\n */\nexport async function initializeUserDefaults(\n  userId: string, \n  userRole: 'admin' | 'user' = 'user'\n): Promise<{\n  dashboardPreferences: any;\n  notificationPreferences: any;\n  success: boolean;\n  error?: string;\n}> {\n  try {\n    await connectToDatabase();\n\n    // Initialize default dashboard preferences\n    const defaultDashboardPrefs = createDefaultDashboardPreferences(userId, userRole);\n    \n    const dashboardPreferences = await DashboardPreferencesModel.findOneAndUpdate(\n      { userId },\n      { $setOnInsert: defaultDashboardPrefs },\n      { \n        new: true, \n        upsert: true \n      }\n    );\n\n    // Initialize default notification preferences\n    const defaultNotificationPrefs = createDefaultPreferences(userId);\n    \n    const notificationPreferences = await NotificationPreferencesModel.findOneAndUpdate(\n      { userId },\n      { $setOnInsert: defaultNotificationPrefs },\n      { \n        new: true, \n        upsert: true \n      }\n    );\n\n    console.log(`✅ Initialized default preferences for user ${userId} (role: ${userRole})`);\n\n    return {\n      dashboardPreferences,\n      notificationPreferences,\n      success: true\n    };\n\n  } catch (error) {\n    console.error('❌ Error initializing user defaults:', error);\n    return {\n      dashboardPreferences: null,\n      notificationPreferences: null,\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    };\n  }\n}\n\n/**\n * Reset user preferences to defaults\n * Useful for troubleshooting or when a user requests a reset\n */\nexport async function resetUserPreferences(\n  userId: string,\n  userRole: 'admin' | 'user' = 'user',\n  options: {\n    resetDashboard?: boolean;\n    resetNotifications?: boolean;\n  } = { resetDashboard: true, resetNotifications: true }\n): Promise<{\n  success: boolean;\n  error?: string;\n  reset: string[];\n}> {\n  try {\n    await connectToDatabase();\n    const reset: string[] = [];\n\n    if (options.resetDashboard) {\n      const defaultDashboardPrefs = createDefaultDashboardPreferences(userId, userRole);\n      \n      await DashboardPreferencesModel.findOneAndUpdate(\n        { userId },\n        defaultDashboardPrefs,\n        { upsert: true }\n      );\n      \n      reset.push('dashboard');\n    }\n\n    if (options.resetNotifications) {\n      const defaultNotificationPrefs = createDefaultPreferences(userId);\n      \n      await NotificationPreferencesModel.findOneAndUpdate(\n        { userId },\n        defaultNotificationPrefs,\n        { upsert: true }\n      );\n      \n      reset.push('notifications');\n    }\n\n    console.log(`✅ Reset preferences for user ${userId}: ${reset.join(', ')}`);\n\n    return {\n      success: true,\n      reset\n    };\n\n  } catch (error) {\n    console.error('❌ Error resetting user preferences:', error);\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error',\n      reset: []\n    };\n  }\n}\n\n/**\n * Check if user has default preferences set up\n * Useful for determining if initialization is needed\n */\nexport async function checkUserPreferences(userId: string): Promise<{\n  hasDashboardPreferences: boolean;\n  hasNotificationPreferences: boolean;\n  needsInitialization: boolean;\n}> {\n  try {\n    await connectToDatabase();\n\n    const [dashboardPrefs, notificationPrefs] = await Promise.all([\n      DashboardPreferencesModel.findOne({ userId }),\n      NotificationPreferencesModel.findOne({ userId })\n    ]);\n\n    const hasDashboardPreferences = !!dashboardPrefs;\n    const hasNotificationPreferences = !!notificationPrefs;\n    const needsInitialization = !hasDashboardPreferences || !hasNotificationPreferences;\n\n    return {\n      hasDashboardPreferences,\n      hasNotificationPreferences,\n      needsInitialization\n    };\n\n  } catch (error) {\n    console.error('Error checking user preferences:', error);\n    return {\n      hasDashboardPreferences: false,\n      hasNotificationPreferences: false,\n      needsInitialization: true\n    };\n  }\n}\n\n/**\n * Bulk initialize preferences for multiple users\n * Useful for migrating existing users or batch operations\n */\nexport async function bulkInitializeUsers(\n  users: Array<{ userId: string; role: 'admin' | 'user' }>\n): Promise<{\n  success: number;\n  failed: number;\n  errors: Array<{ userId: string; error: string }>;\n}> {\n  const results = {\n    success: 0,\n    failed: 0,\n    errors: [] as Array<{ userId: string; error: string }>\n  };\n\n  for (const user of users) {\n    try {\n      const result = await initializeUserDefaults(user.userId, user.role);\n      \n      if (result.success) {\n        results.success++;\n      } else {\n        results.failed++;\n        results.errors.push({\n          userId: user.userId,\n          error: result.error || 'Unknown error'\n        });\n      }\n    } catch (error) {\n      results.failed++;\n      results.errors.push({\n        userId: user.userId,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      });\n    }\n  }\n\n  console.log(`Bulk initialization complete: ${results.success} success, ${results.failed} failed`);\n  return results;\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/lib/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/middleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/models/BackorderRequest.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/models/BrandingSettings.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/models/Country.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/models/CustomerNotification.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Model' is defined but never used.","line":1,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CustomerNotificationTemplate' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ScheduledCustomerNotification' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CustomerNotificationDelivery' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":31},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":149,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":149,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3470,3473],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3470,3473],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":171,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":171,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4162,4165],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4162,4165],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":364,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":364,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8416,8419],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8416,8419],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'now' is assigned a value but never used.","line":447,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":447,"endColumn":12},{"ruleId":"prefer-const","severity":2,"message":"'nextDate' is never reassigned. Use 'const' instead.","line":449,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":449,"endColumn":15,"fix":{"range":[10294,10328],"text":"const nextDate = new Date(baseDate);"}}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import mongoose, { Document, Model, Schema, Types } from 'mongoose';\nimport { \n  CustomerNotificationType, \n  ScheduleStatus, \n  RecurrenceType, \n  DeliveryChannel,\n  NotificationPriority,\n  CustomerNotificationTemplate,\n  ScheduledCustomerNotification,\n  CustomerNotificationDelivery,\n  ScheduleConfig\n} from '@/types/notifications';\n\n// Template Model\nexport interface ICustomerNotificationTemplate extends Document {\n  name: string;\n  type: CustomerNotificationType;\n  subject: string;\n  content: {\n    html: string;\n    text: string;\n    pushTitle?: string;\n    pushBody?: string;\n    smsContent?: string;\n  };\n  variables: string[];\n  channels: DeliveryChannel[];\n  priority: NotificationPriority;\n  category: string;\n  isActive: boolean;\n  createdBy: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nconst CustomerNotificationTemplateSchema = new Schema<ICustomerNotificationTemplate>({\n  name: {\n    type: String,\n    required: true,\n    maxlength: 200,\n    index: true\n  },\n  type: {\n    type: String,\n    enum: [\n      'service_update', 'maintenance_scheduled', 'feature_announcement', 'billing_reminder',\n      'account_expiry', 'promotional_offer', 'system_alert', 'security_notice',\n      'welcome_message', 'onboarding_tip', 'payment_reminder', 'service_disruption',\n      'new_feature', 'policy_update', 'survey_request'\n    ] as CustomerNotificationType[],\n    required: true,\n    index: true\n  },\n  subject: {\n    type: String,\n    required: true,\n    maxlength: 300\n  },\n  content: {\n    html: {\n      type: String,\n      required: true\n    },\n    text: {\n      type: String,\n      required: true\n    },\n    pushTitle: {\n      type: String,\n      maxlength: 100\n    },\n    pushBody: {\n      type: String,\n      maxlength: 300\n    },\n    smsContent: {\n      type: String,\n      maxlength: 160\n    }\n  },\n  variables: [{\n    type: String,\n    maxlength: 50\n  }],\n  channels: [{\n    type: String,\n    enum: ['email', 'push', 'sms', 'in_app', 'all'] as DeliveryChannel[]\n  }],\n  priority: {\n    type: String,\n    enum: ['low', 'medium', 'high', 'urgent'] as NotificationPriority[],\n    required: true,\n    default: 'medium'\n  },\n  category: {\n    type: String,\n    required: true,\n    maxlength: 100,\n    index: true\n  },\n  isActive: {\n    type: Boolean,\n    default: true,\n    index: true\n  },\n  createdBy: {\n    type: String,\n    required: true,\n    index: true\n  }\n}, {\n  timestamps: true,\n  toJSON: { virtuals: true },\n  toObject: { virtuals: true }\n});\n\n// Indexes for efficient querying\nCustomerNotificationTemplateSchema.index({ isActive: 1, type: 1 });\nCustomerNotificationTemplateSchema.index({ category: 1, isActive: 1 });\n\n// Scheduled Notification Model\nexport interface IScheduledCustomerNotification extends Document {\n  _id: Types.ObjectId;\n  templateId: string;\n  template?: ICustomerNotificationTemplate;\n  schedule: ScheduleConfig;\n  status: ScheduleStatus;\n  targetUsers: {\n    type: 'all' | 'role' | 'specific' | 'filter';\n    userIds?: string[];\n    roles?: string[];\n    filters?: {\n      accountStatus?: string[];\n      balanceRange?: { min?: number; max?: number };\n      registrationDateRange?: { from?: Date; to?: Date };\n      lastLoginRange?: { from?: Date; to?: Date };\n      country?: string[];\n      plan?: string[];\n    };\n  };\n  contentOverrides?: {\n    subject?: string;\n    html?: string;\n    text?: string;\n    pushTitle?: string;\n    pushBody?: string;\n    smsContent?: string;\n  };\n  templateVariables?: Record<string, any>;\n  channels: DeliveryChannel[];\n  estimatedRecipients?: number;\n  actualRecipients?: number;\n  deliveryStats?: {\n    email?: { sent: number; delivered: number; opened: number; clicked: number; failed: number };\n    push?: { sent: number; delivered: number; clicked: number; failed: number };\n    sms?: { sent: number; delivered: number; failed: number };\n    inApp?: { sent: number; read: number };\n  };\n  name: string;\n  description?: string;\n  createdBy: string;\n  approvedBy?: string;\n  approvedAt?: Date;\n  sentAt?: Date;\n  lastExecutedAt?: Date;\n  nextExecutionAt?: Date;\n  executionCount: number;\n  executionErrors?: Array<{\n    timestamp: Date;\n    message: string;\n    details?: any;\n  }>;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nconst ScheduledCustomerNotificationSchema = new Schema<IScheduledCustomerNotification>({\n  templateId: {\n    type: String,\n    required: true,\n    index: true\n  },\n  schedule: {\n    type: {\n      type: String,\n      enum: ['immediate', 'scheduled', 'recurring'],\n      required: true\n    },\n    scheduledAt: Date,\n    recurrence: {\n      type: {\n        type: String,\n        enum: ['none', 'daily', 'weekly', 'monthly', 'yearly'] as RecurrenceType[]\n      },\n      interval: Number,\n      endDate: Date,\n      maxOccurrences: Number\n    },\n    timezone: {\n      type: String,\n      required: true,\n      default: 'UTC'\n    }\n  },\n  status: {\n    type: String,\n    enum: ['draft', 'scheduled', 'sending', 'sent', 'cancelled', 'failed'] as ScheduleStatus[],\n    required: true,\n    default: 'draft',\n    index: true\n  },\n  targetUsers: {\n    type: {\n      type: String,\n      enum: ['all', 'role', 'specific', 'filter'],\n      required: true\n    },\n    userIds: [String],\n    roles: [String],\n    filters: {\n      accountStatus: [String],\n      balanceRange: {\n        min: Number,\n        max: Number\n      },\n      registrationDateRange: {\n        from: Date,\n        to: Date\n      },\n      lastLoginRange: {\n        from: Date,\n        to: Date\n      },\n      country: [String],\n      plan: [String]\n    }\n  },\n  contentOverrides: {\n    subject: String,\n    html: String,\n    text: String,\n    pushTitle: String,\n    pushBody: String,\n    smsContent: String\n  },\n  templateVariables: {\n    type: Schema.Types.Mixed,\n    default: {}\n  },\n  channels: [{\n    type: String,\n    enum: ['email', 'push', 'sms', 'in_app', 'all'] as DeliveryChannel[],\n    required: true\n  }],\n  estimatedRecipients: {\n    type: Number,\n    default: 0\n  },\n  actualRecipients: {\n    type: Number,\n    default: 0\n  },\n  deliveryStats: {\n    email: {\n      sent: { type: Number, default: 0 },\n      delivered: { type: Number, default: 0 },\n      opened: { type: Number, default: 0 },\n      clicked: { type: Number, default: 0 },\n      failed: { type: Number, default: 0 }\n    },\n    push: {\n      sent: { type: Number, default: 0 },\n      delivered: { type: Number, default: 0 },\n      clicked: { type: Number, default: 0 },\n      failed: { type: Number, default: 0 }\n    },\n    sms: {\n      sent: { type: Number, default: 0 },\n      delivered: { type: Number, default: 0 },\n      failed: { type: Number, default: 0 }\n    },\n    inApp: {\n      sent: { type: Number, default: 0 },\n      read: { type: Number, default: 0 }\n    }\n  },\n  name: {\n    type: String,\n    required: true,\n    maxlength: 200,\n    index: true\n  },\n  description: {\n    type: String,\n    maxlength: 1000\n  },\n  createdBy: {\n    type: String,\n    required: true,\n    index: true\n  },\n  approvedBy: {\n    type: String,\n    index: true\n  },\n  approvedAt: Date,\n  sentAt: Date,\n  lastExecutedAt: Date,\n  nextExecutionAt: {\n    type: Date,\n    index: true\n  },\n  executionCount: {\n    type: Number,\n    default: 0\n  },\n  executionErrors: [{\n    timestamp: {\n      type: Date,\n      default: Date.now\n    },\n    message: {\n      type: String,\n      required: true\n    },\n    details: Schema.Types.Mixed\n  }]\n}, {\n  timestamps: true,\n  toJSON: { virtuals: true },\n  toObject: { virtuals: true }\n});\n\n// Indexes for efficient querying\nScheduledCustomerNotificationSchema.index({ createdBy: 1, status: 1 });\nScheduledCustomerNotificationSchema.index({ status: 1, nextExecutionAt: 1 });\nScheduledCustomerNotificationSchema.index({ 'schedule.type': 1, status: 1 });\n\n// Virtual for populated template\nScheduledCustomerNotificationSchema.virtual('template', {\n  ref: 'CustomerNotificationTemplate',\n  localField: 'templateId',\n  foreignField: '_id',\n  justOne: true\n});\n\n// Delivery Tracking Model\nexport interface ICustomerNotificationDelivery extends Document {\n  notificationId: string;\n  userId: string;\n  userEmail: string;\n  channel: DeliveryChannel;\n  status: 'pending' | 'sent' | 'delivered' | 'opened' | 'clicked' | 'failed';\n  subject?: string;\n  content?: string;\n  sentAt?: Date;\n  deliveredAt?: Date;\n  openedAt?: Date;\n  clickedAt?: Date;\n  error?: string;\n  retryCount: number;\n  maxRetries: number;\n  trackingId?: string;\n  metadata?: Record<string, any>;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nconst CustomerNotificationDeliverySchema = new Schema<ICustomerNotificationDelivery>({\n  notificationId: {\n    type: String,\n    required: true,\n    index: true\n  },\n  userId: {\n    type: String,\n    required: true,\n    index: true\n  },\n  userEmail: {\n    type: String,\n    required: true,\n    index: true\n  },\n  channel: {\n    type: String,\n    enum: ['email', 'push', 'sms', 'in_app'] as DeliveryChannel[],\n    required: true,\n    index: true\n  },\n  status: {\n    type: String,\n    enum: ['pending', 'sent', 'delivered', 'opened', 'clicked', 'failed'],\n    required: true,\n    default: 'pending',\n    index: true\n  },\n  subject: {\n    type: String,\n    maxlength: 300\n  },\n  content: String,\n  sentAt: Date,\n  deliveredAt: Date,\n  openedAt: Date,\n  clickedAt: Date,\n  error: String,\n  retryCount: {\n    type: Number,\n    default: 0\n  },\n  maxRetries: {\n    type: Number,\n    default: 3\n  },\n  trackingId: {\n    type: String,\n    index: { sparse: true }\n  },\n  metadata: {\n    type: Schema.Types.Mixed,\n    default: {}\n  }\n}, {\n  timestamps: true,\n  toJSON: { virtuals: true },\n  toObject: { virtuals: true }\n});\n\n// Indexes for efficient querying\nCustomerNotificationDeliverySchema.index({ notificationId: 1, status: 1 });\nCustomerNotificationDeliverySchema.index({ userId: 1, channel: 1 });\nCustomerNotificationDeliverySchema.index({ status: 1, createdAt: -1 });\n\n// Helper methods\nScheduledCustomerNotificationSchema.methods.calculateNextExecution = function(): Date | null {\n  if (this.schedule.type !== 'recurring' || !this.schedule.recurrence) {\n    return null;\n  }\n\n  const { type, interval, endDate, maxOccurrences } = this.schedule.recurrence;\n  \n  if (maxOccurrences && this.executionCount >= maxOccurrences) {\n    return null;\n  }\n\n  const now = new Date();\n  const baseDate = this.lastExecutedAt || this.createdAt;\n  let nextDate = new Date(baseDate);\n\n  switch (type) {\n    case 'daily':\n      nextDate.setDate(nextDate.getDate() + interval);\n      break;\n    case 'weekly':\n      nextDate.setDate(nextDate.getDate() + (interval * 7));\n      break;\n    case 'monthly':\n      nextDate.setMonth(nextDate.getMonth() + interval);\n      break;\n    case 'yearly':\n      nextDate.setFullYear(nextDate.getFullYear() + interval);\n      break;\n    default:\n      return null;\n  }\n\n  if (endDate && nextDate > endDate) {\n    return null;\n  }\n\n  return nextDate;\n};\n\nCustomerNotificationDeliverySchema.methods.canRetry = function(): boolean {\n  return this.retryCount < this.maxRetries && this.status === 'failed';\n};\n\n// Export models\nexport const CustomerNotificationTemplateModel = mongoose.models.CustomerNotificationTemplate || \n  mongoose.model<ICustomerNotificationTemplate>('CustomerNotificationTemplate', CustomerNotificationTemplateSchema);\n\nexport const ScheduledCustomerNotificationModel = mongoose.models.ScheduledCustomerNotification || \n  mongoose.model<IScheduledCustomerNotification>('ScheduledCustomerNotification', ScheduledCustomerNotificationSchema);\n\nexport const CustomerNotificationDeliveryModel = mongoose.models.CustomerNotificationDelivery || \n  mongoose.model<ICustomerNotificationDelivery>('CustomerNotificationDelivery', CustomerNotificationDeliverySchema); ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/models/DashboardPreferences.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1050,1053],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1050,1053],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":62,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":62,"endColumn":44,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[2015,2099],"text":"type IDashboardPreferencesModel = Model<IDashboardPreferencesDocument>"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import mongoose, { Document, Model, Schema } from 'mongoose';\n\n// Widget configuration interface\nexport interface IWidgetConfig {\n  id: string;\n  enabled: boolean;\n  collapsed: boolean;\n  collapsible: boolean; // Whether the card can be collapsed\n  order: number;\n  size?: 'small' | 'medium' | 'large' | 'full';\n  gridCols?: number; // Number of grid columns to span (1-12)\n  gridRows?: number; // Number of grid rows to span (1-6)\n  position?: {\n    row: number;\n    col: number;\n  };\n  // Advanced features\n  locked?: boolean; // Prevent moving/resizing\n  alwaysVisible?: boolean; // Prevent hiding (for critical cards)\n  minSize?: 'small' | 'medium' | 'large';\n  maxSize?: 'medium' | 'large' | 'full';\n  category?: string; // Group related cards\n  aspectRatio?: 'auto' | 'square' | 'wide' | 'tall'; // Maintain proportions\n  refreshInterval?: number; // Auto-refresh in seconds (0 = disabled)\n  priority?: number; // Display priority (higher = more important)\n  showTitle?: boolean; // Whether to show the card title\n  settings?: { [key: string]: any }; // Widget-specific settings\n  responsive?: {\n    mobile?: {\n      gridCols?: number;\n      size?: 'small' | 'medium' | 'large' | 'full';\n    };\n    tablet?: {\n      gridCols?: number;\n      size?: 'small' | 'medium' | 'large' | 'full';\n    };\n  };\n}\n\n// Dashboard preferences interface\nexport interface IDashboardPreferences {\n  userId: string;\n  layout: 'grid' | 'list' | 'masonry' | 'custom';\n  gridColumns: number; // Total grid columns (default 12)\n  widgets: IWidgetConfig[];\n  theme?: 'light' | 'dark' | 'auto';\n  compactMode?: boolean;\n  autoSave?: boolean; // Auto-save preferences\n  showCategories?: boolean; // Group widgets by category\n  categoryOrder?: string[]; // Order of categories\n  lastUpdated: Date;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n// Dashboard preferences document interface\nexport interface IDashboardPreferencesDocument extends IDashboardPreferences, Document {\n  id: string;\n}\n\n// Dashboard preferences model interface\nexport interface IDashboardPreferencesModel extends Model<IDashboardPreferencesDocument> {}\n\n// Export types for use in other files\nexport type DashboardPreferences = IDashboardPreferences;\nexport type WidgetConfig = IWidgetConfig;\n\n// Responsive configuration schema\nconst responsiveConfigSchema = new Schema({\n  gridCols: { type: Number, min: 1, max: 12 },\n  size: { type: String, enum: ['small', 'medium', 'large', 'full'] },\n}, { _id: false });\n\n// Dashboard preferences schema\nconst widgetConfigSchema = new Schema<IWidgetConfig>({\n  id: {\n    type: String,\n    required: true,\n  },\n  enabled: {\n    type: Boolean,\n    required: true,\n    default: true,\n  },\n  collapsed: {\n    type: Boolean,\n    required: true,\n    default: false,\n  },\n  collapsible: {\n    type: Boolean,\n    default: true,\n  },\n  order: {\n    type: Number,\n    required: true,\n    default: 0,\n  },\n  size: {\n    type: String,\n    enum: ['small', 'medium', 'large', 'full'],\n    default: 'medium',\n  },\n  gridCols: {\n    type: Number,\n    min: 1,\n    max: 12,\n    default: 3, // Default to 3 columns in a 12-column grid\n  },\n  gridRows: {\n    type: Number,\n    min: 1,\n    max: 6,\n    default: 1,\n  },\n  position: {\n    row: { type: Number, default: 0 },\n    col: { type: Number, default: 0 },\n  },\n  // Advanced features\n  locked: {\n    type: Boolean,\n    default: false,\n  },\n  alwaysVisible: {\n    type: Boolean,\n    default: false,\n  },\n  minSize: {\n    type: String,\n    enum: ['small', 'medium', 'large'],\n    default: 'small',\n  },\n  maxSize: {\n    type: String,\n    enum: ['medium', 'large', 'full'],\n    default: 'full',\n  },\n  category: {\n    type: String,\n    default: 'general',\n  },\n  aspectRatio: {\n    type: String,\n    enum: ['auto', 'square', 'wide', 'tall'],\n    default: 'auto',\n  },\n  refreshInterval: {\n    type: Number,\n    min: 0,\n    max: 3600, // Max 1 hour\n    default: 0, // Disabled\n  },\n  priority: {\n    type: Number,\n    min: 0,\n    max: 10,\n    default: 5,\n  },\n  showTitle: {\n    type: Boolean,\n    default: true,\n  },\n  settings: {\n    type: Map,\n    of: Schema.Types.Mixed,\n  },\n  responsive: {\n    mobile: responsiveConfigSchema,\n    tablet: responsiveConfigSchema,\n  },\n}, { _id: false });\n\nconst dashboardPreferencesSchema = new Schema<IDashboardPreferencesDocument, IDashboardPreferencesModel>(\n  {\n    userId: {\n      type: String,\n      required: true,\n      unique: true,\n    },\n    layout: {\n      type: String,\n      enum: ['grid', 'list', 'masonry', 'custom'],\n      default: 'grid',\n    },\n    gridColumns: {\n      type: Number,\n      min: 1,\n      max: 24,\n      default: 12,\n    },\n    widgets: [widgetConfigSchema],\n    theme: {\n      type: String,\n      enum: ['light', 'dark', 'auto'],\n      default: 'auto',\n    },\n    compactMode: {\n      type: Boolean,\n      default: false,\n    },\n    autoSave: {\n      type: Boolean,\n      default: true,\n    },\n    showCategories: {\n      type: Boolean,\n      default: false,\n    },\n    categoryOrder: [{\n      type: String,\n    }],\n    lastUpdated: {\n      type: Date,\n      default: Date.now,\n    },\n  },\n  {\n    timestamps: true,\n    collection: 'dashboard_preferences',\n  }\n);\n\n// Add indexes for better performance\ndashboardPreferencesSchema.index({ lastUpdated: -1 });\ndashboardPreferencesSchema.index({ 'widgets.category': 1 });\n\n// Create and export the model\nconst DashboardPreferencesModel = (mongoose.models.DashboardPreferences as IDashboardPreferencesModel) || \n  mongoose.model<IDashboardPreferencesDocument, IDashboardPreferencesModel>('DashboardPreferences', dashboardPreferencesSchema);\n\nexport default DashboardPreferencesModel; ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/models/EmailVerification.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/models/InternalNotification.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[507,510],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[507,510],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import mongoose, { Schema, Document } from 'mongoose';\nimport { \n  NotificationType, \n  NotificationPriority, \n  NotificationStatus,\n  NotificationSoundType \n} from '@/types/notifications';\n\n// Internal Notification Schema - omit 'id' from our interface since Mongoose provides it\nexport interface IInternalNotification extends Document {\n  userId: string;\n  type: NotificationType;\n  title: string;\n  message: string;\n  priority: NotificationPriority;\n  status: NotificationStatus;\n  data?: Record<string, any>;\n  actionUrl?: string;\n  icon?: string;\n  sound?: NotificationSoundType;\n  showToast?: boolean;\n  showPush?: boolean;\n  persistent?: boolean;\n  readAt?: Date;\n  archivedAt?: Date;\n  expiresAt?: Date;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nconst InternalNotificationSchema = new Schema<IInternalNotification>({\n  userId: {\n    type: String,\n    required: true,\n    index: true\n  },\n  type: {\n    type: String,\n    enum: [\n      'ticket_created', 'ticket_updated', 'ticket_assigned', 'ticket_reply', 'ticket_resolved',\n      'payment_success', 'payment_failed', 'low_balance', 'zero_balance',\n      'phone_number_approved', 'phone_number_rejected', 'phone_number_purchased', 'phone_number_assigned',\n      'system_maintenance', 'user_verification', 'admin_alert', 'rate_deck_updated',\n      'call_quality_alert', 'security_alert'\n    ] as NotificationType[],\n    required: true,\n    index: true\n  },\n  title: {\n    type: String,\n    required: true,\n    maxlength: 200\n  },\n  message: {\n    type: String,\n    required: true,\n    maxlength: 1000\n  },\n  priority: {\n    type: String,\n    enum: ['low', 'medium', 'high', 'urgent'] as NotificationPriority[],\n    required: true,\n    default: 'medium',\n    index: true\n  },\n  status: {\n    type: String,\n    enum: ['unread', 'read', 'archived'] as NotificationStatus[],\n    required: true,\n    default: 'unread',\n    index: true\n  },\n  data: {\n    type: Schema.Types.Mixed,\n    default: {}\n  },\n  actionUrl: {\n    type: String,\n    maxlength: 500\n  },\n  icon: {\n    type: String,\n    maxlength: 50\n  },\n  sound: {\n    type: String,\n    enum: ['default', 'subtle', 'success', 'warning', 'error', 'urgent', 'ticket', 'payment', 'chime', 'bell', 'piano', 'none'] as NotificationSoundType[],\n    default: 'default'\n  },\n  showToast: {\n    type: Boolean,\n    default: true\n  },\n  showPush: {\n    type: Boolean,\n    default: false\n  },\n  persistent: {\n    type: Boolean,\n    default: false\n  },\n  readAt: {\n    type: Date\n  },\n  archivedAt: {\n    type: Date\n  },\n  expiresAt: {\n    type: Date,\n    index: { expireAfterSeconds: 0 } // MongoDB TTL index\n  }\n}, {\n  timestamps: true,\n  toJSON: { virtuals: true },\n  toObject: { virtuals: true }\n});\n\n// Indexes for efficient querying\nInternalNotificationSchema.index({ userId: 1, createdAt: -1 });\nInternalNotificationSchema.index({ userId: 1, status: 1, createdAt: -1 });\nInternalNotificationSchema.index({ userId: 1, type: 1, createdAt: -1 });\nInternalNotificationSchema.index({ userId: 1, priority: 1, createdAt: -1 });\nInternalNotificationSchema.index({ createdAt: 1 }, { expireAfterSeconds: 2592000 }); // Auto-delete after 30 days\n\n// Virtual for formatted creation time\nInternalNotificationSchema.virtual('timeAgo').get(function() {\n  const now = new Date();\n  const diff = now.getTime() - this.createdAt.getTime();\n  const minutes = Math.floor(diff / 60000);\n  const hours = Math.floor(diff / 3600000);\n  const days = Math.floor(diff / 86400000);\n  \n  if (minutes < 1) return 'Just now';\n  if (minutes < 60) return `${minutes}m ago`;\n  if (hours < 24) return `${hours}h ago`;\n  if (days < 7) return `${days}d ago`;\n  return this.createdAt.toLocaleDateString();\n});\n\n// Static methods\nInternalNotificationSchema.statics.getUnreadCount = function(userId: string) {\n  return this.countDocuments({ userId, status: 'unread' });\n};\n\nInternalNotificationSchema.statics.getUserStats = async function(userId: string) {\n  const pipeline = [\n    { $match: { userId } },\n    {\n      $group: {\n        _id: null,\n        total: { $sum: 1 },\n        unread: {\n          $sum: {\n            $cond: [{ $eq: ['$status', 'unread'] }, 1, 0]\n          }\n        },\n        todayCount: {\n          $sum: {\n            $cond: [\n              { $gte: ['$createdAt', new Date(new Date().setHours(0, 0, 0, 0))] },\n              1,\n              0\n            ]\n          }\n        },\n        weekCount: {\n          $sum: {\n            $cond: [\n              { $gte: ['$createdAt', new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)] },\n              1,\n              0\n            ]\n          }\n        }\n      }\n    }\n  ];\n  \n  const typeStats = await this.aggregate([\n    { $match: { userId } },\n    { $group: { _id: '$type', count: { $sum: 1 } } }\n  ]);\n  \n  const priorityStats = await this.aggregate([\n    { $match: { userId } },\n    { $group: { _id: '$priority', count: { $sum: 1 } } }\n  ]);\n  \n  const result = await this.aggregate(pipeline);\n  const stats = result[0] || { total: 0, unread: 0, todayCount: 0, weekCount: 0 };\n  \n  const byType: Record<string, number> = {};\n  typeStats.forEach(stat => byType[stat._id] = stat.count);\n  \n  const byPriority: Record<string, number> = {};\n  priorityStats.forEach(stat => byPriority[stat._id] = stat.count);\n  \n  return {\n    ...stats,\n    byType,\n    byPriority\n  };\n};\n\n// Notification Preferences Schema - omit 'id' from our interface since Mongoose provides it\nexport interface INotificationPreferences extends Document {\n  userId: string;\n  showToasts: boolean;\n  toastDuration: number;\n  toastPosition: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right' | 'top-center' | 'bottom-center';\n  enableSounds: boolean;\n  soundVolume: number;\n  soundTheme: NotificationSoundType;\n  enablePushNotifications: boolean;\n  pushOnlyWhenAway: boolean;\n  typePreferences: {\n    [K in NotificationType]: {\n      enabled: boolean;\n      showToast: boolean;\n      playSound: boolean;\n      enablePush: boolean;\n      priority: NotificationPriority;\n    };\n  };\n  doNotDisturbEnabled: boolean;\n  doNotDisturbStart?: string;\n  doNotDisturbEnd?: string;\n  emailFallbackEnabled: boolean;\n  emailFallbackDelay: number;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nconst TypePreferenceSchema = new Schema({\n  enabled: { type: Boolean, default: true },\n  showToast: { type: Boolean, default: true },\n  playSound: { type: Boolean, default: true },\n  enablePush: { type: Boolean, default: false },\n  priority: {\n    type: String,\n    enum: ['low', 'medium', 'high', 'urgent'] as NotificationPriority[],\n    default: 'medium'\n  }\n}, { _id: false });\n\nconst NotificationPreferencesSchema = new Schema<INotificationPreferences>({\n  userId: {\n    type: String,\n    required: true,\n    unique: true,\n    index: true\n  },\n  \n  // Toast notifications\n  showToasts: {\n    type: Boolean,\n    default: true\n  },\n  toastDuration: {\n    type: Number,\n    default: 5,\n    min: 1,\n    max: 30\n  },\n  toastPosition: {\n    type: String,\n    enum: ['top-left', 'top-right', 'bottom-left', 'bottom-right', 'top-center', 'bottom-center'],\n    default: 'top-right'\n  },\n  \n  // Sound preferences\n  enableSounds: {\n    type: Boolean,\n    default: true\n  },\n  soundVolume: {\n    type: Number,\n    default: 0.7,\n    min: 0,\n    max: 1\n  },\n  soundTheme: {\n    type: String,\n    enum: ['default', 'subtle', 'success', 'warning', 'error', 'urgent', 'ticket', 'payment', 'chime', 'bell', 'piano', 'none'] as NotificationSoundType[],\n    default: 'default'\n  },\n  \n  // Push notifications\n  enablePushNotifications: {\n    type: Boolean,\n    default: false\n  },\n  pushOnlyWhenAway: {\n    type: Boolean,\n    default: true\n  },\n  \n  // Notification types preferences\n  typePreferences: {\n    ticket_created: { type: TypePreferenceSchema, default: () => ({}) },\n    ticket_updated: { type: TypePreferenceSchema, default: () => ({}) },\n    ticket_assigned: { type: TypePreferenceSchema, default: () => ({}) },\n    ticket_reply: { type: TypePreferenceSchema, default: () => ({}) },\n    ticket_resolved: { type: TypePreferenceSchema, default: () => ({}) },\n    payment_success: { type: TypePreferenceSchema, default: () => ({}) },\n    payment_failed: { type: TypePreferenceSchema, default: () => ({}) },\n    low_balance: { type: TypePreferenceSchema, default: () => ({}) },\n    zero_balance: { type: TypePreferenceSchema, default: () => ({}) },\n    phone_number_approved: { type: TypePreferenceSchema, default: () => ({}) },\n    phone_number_rejected: { type: TypePreferenceSchema, default: () => ({}) },\n    phone_number_purchased: { type: TypePreferenceSchema, default: () => ({}) },\n    phone_number_assigned: { type: TypePreferenceSchema, default: () => ({}) },\n    system_maintenance: { type: TypePreferenceSchema, default: () => ({}) },\n    user_verification: { type: TypePreferenceSchema, default: () => ({}) },\n    admin_alert: { type: TypePreferenceSchema, default: () => ({}) },\n    rate_deck_updated: { type: TypePreferenceSchema, default: () => ({}) },\n    call_quality_alert: { type: TypePreferenceSchema, default: () => ({}) },\n    security_alert: { type: TypePreferenceSchema, default: () => ({}) }\n  },\n  \n  // Do not disturb\n  doNotDisturbEnabled: {\n    type: Boolean,\n    default: false\n  },\n  doNotDisturbStart: {\n    type: String,\n    match: /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/ // HH:MM format\n  },\n  doNotDisturbEnd: {\n    type: String,\n    match: /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/ // HH:MM format\n  },\n  \n  // Email fallback\n  emailFallbackEnabled: {\n    type: Boolean,\n    default: true\n  },\n  emailFallbackDelay: {\n    type: Number,\n    default: 15,\n    min: 1,\n    max: 1440 // 24 hours in minutes\n  }\n}, {\n  timestamps: true,\n  toJSON: { virtuals: true },\n  toObject: { virtuals: true }\n});\n\n// Methods\nNotificationPreferencesSchema.methods.isInDoNotDisturbPeriod = function(): boolean {\n  if (!this.doNotDisturbEnabled || !this.doNotDisturbStart || !this.doNotDisturbEnd) {\n    return false;\n  }\n  \n  const now = new Date();\n  const currentTime = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;\n  \n  // Handle cases where DND period spans midnight\n  if (this.doNotDisturbStart <= this.doNotDisturbEnd) {\n    return currentTime >= this.doNotDisturbStart && currentTime <= this.doNotDisturbEnd;\n  } else {\n    return currentTime >= this.doNotDisturbStart || currentTime <= this.doNotDisturbEnd;\n  }\n};\n\nNotificationPreferencesSchema.methods.shouldShowNotification = function(type: NotificationType): boolean {\n  const typePrefs = this.typePreferences[type];\n  if (!typePrefs || !typePrefs.enabled) return false;\n  if (this.isInDoNotDisturbPeriod()) return false;\n  return true;\n};\n\n// Export models\nexport const InternalNotificationModel = mongoose.models.InternalNotification || \n  mongoose.model<IInternalNotification>('InternalNotification', InternalNotificationSchema);\n\nexport const NotificationPreferencesModel = mongoose.models.NotificationPreferences || \n  mongoose.model<INotificationPreferences>('NotificationPreferences', NotificationPreferencesSchema);\n\nexport default InternalNotificationModel; ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/models/KpiSettings.ts","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":59,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":59,"endColumn":35,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[1846,1912],"text":"type IKpiSettingsModel = Model<IKpiSettingsDocument>"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import mongoose, { Document, Model, Schema } from 'mongoose';\n\n// Cost of Day thresholds\nexport interface ICostThresholds {\n  low: number;        // Below this = low cost\n  medium: number;     // Between low and medium = medium cost\n  // Above medium = high cost\n}\n\n// ASR (Answer Seizure Ratio) thresholds\nexport interface IAsrThresholds {\n  critical: number;   // Below this = critical\n  poor: number;       // Between critical and poor = poor\n  fair: number;       // Between poor and fair = fair\n  good: number;       // Between fair and good = good\n  // Above good = excellent\n}\n\n// ACD (Average Call Duration) thresholds in seconds\nexport interface IAcdThresholds {\n  short: number;      // Below this = short/quick calls\n  normal: number;     // Between short and normal = normal/optimal\n  long: number;       // Between normal and long = long/extended\n  // Above long = very long\n}\n\n// Total Minutes thresholds in minutes\nexport interface ITotalMinutesThresholds {\n  light: number;      // Below this = light usage\n  moderate: number;   // Between light and moderate = moderate usage\n  heavy: number;      // Between moderate and heavy = heavy usage\n  // Above heavy = very heavy usage\n}\n\n// Main KPI Settings interface\nexport interface IKpiSettings {\n  userId: string;\n  costThresholds: ICostThresholds;\n  asrThresholds: IAsrThresholds;\n  acdThresholds: IAcdThresholds;\n  totalMinutesThresholds: ITotalMinutesThresholds;\n  currency: string;\n  timezone: string;\n  refreshInterval: number; // Auto-refresh interval in seconds\n  enableNotifications: boolean;\n  notificationThresholds: {\n    highCostAlert: boolean;\n    lowAsrAlert: boolean;\n    extremeUsageAlert: boolean;\n  };\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n// Document interface\nexport interface IKpiSettingsDocument extends IKpiSettings, Document {}\n\n// Model interface\nexport interface IKpiSettingsModel extends Model<IKpiSettingsDocument> {}\n\n// Cost thresholds schema\nconst costThresholdsSchema = new Schema<ICostThresholds>({\n  low: {\n    type: Number,\n    required: true,\n    min: 0,\n    default: 1.0\n  },\n  medium: {\n    type: Number,\n    required: true,\n    min: 0,\n    default: 10.0\n  }\n}, { _id: false });\n\n// ASR thresholds schema\nconst asrThresholdsSchema = new Schema<IAsrThresholds>({\n  critical: {\n    type: Number,\n    required: true,\n    min: 0,\n    max: 100,\n    default: 50\n  },\n  poor: {\n    type: Number,\n    required: true,\n    min: 0,\n    max: 100,\n    default: 70\n  },\n  fair: {\n    type: Number,\n    required: true,\n    min: 0,\n    max: 100,\n    default: 85\n  },\n  good: {\n    type: Number,\n    required: true,\n    min: 0,\n    max: 100,\n    default: 95\n  }\n}, { _id: false });\n\n// ACD thresholds schema (in seconds)\nconst acdThresholdsSchema = new Schema<IAcdThresholds>({\n  short: {\n    type: Number,\n    required: true,\n    min: 0,\n    default: 30\n  },\n  normal: {\n    type: Number,\n    required: true,\n    min: 0,\n    default: 120\n  },\n  long: {\n    type: Number,\n    required: true,\n    min: 0,\n    default: 300\n  }\n}, { _id: false });\n\n// Total minutes thresholds schema (in minutes)\nconst totalMinutesThresholdsSchema = new Schema<ITotalMinutesThresholds>({\n  light: {\n    type: Number,\n    required: true,\n    min: 0,\n    default: 60\n  },\n  moderate: {\n    type: Number,\n    required: true,\n    min: 0,\n    default: 300\n  },\n  heavy: {\n    type: Number,\n    required: true,\n    min: 0,\n    default: 600\n  }\n}, { _id: false });\n\n// Notification thresholds schema\nconst notificationThresholdsSchema = new Schema({\n  highCostAlert: {\n    type: Boolean,\n    default: true\n  },\n  lowAsrAlert: {\n    type: Boolean,\n    default: true\n  },\n  extremeUsageAlert: {\n    type: Boolean,\n    default: true\n  }\n}, { _id: false });\n\n// Main KPI settings schema\nconst kpiSettingsSchema = new Schema<IKpiSettingsDocument, IKpiSettingsModel>(\n  {\n    userId: {\n      type: String,\n      required: true,\n      unique: true,\n    },\n    costThresholds: {\n      type: costThresholdsSchema,\n      required: true,\n      default: () => ({})\n    },\n    asrThresholds: {\n      type: asrThresholdsSchema,\n      required: true,\n      default: () => ({})\n    },\n    acdThresholds: {\n      type: acdThresholdsSchema,\n      required: true,\n      default: () => ({})\n    },\n    totalMinutesThresholds: {\n      type: totalMinutesThresholdsSchema,\n      required: true,\n      default: () => ({})\n    },\n    currency: {\n      type: String,\n      default: 'EUR',\n      enum: ['USD', 'EUR', 'GBP', 'CAD', 'AUD', 'JPY', 'CHF', 'CNY']\n    },\n    timezone: {\n      type: String,\n      default: 'Europe/London'\n    },\n    refreshInterval: {\n      type: Number,\n      min: 30,\n      max: 3600,\n      default: 300 // 5 minutes\n    },\n    enableNotifications: {\n      type: Boolean,\n      default: true\n    },\n    notificationThresholds: {\n      type: notificationThresholdsSchema,\n      required: true,\n      default: () => ({})\n    }\n  },\n  {\n    timestamps: true,\n    collection: 'kpi_settings',\n  }\n);\n\n// Add indexes for better performance\n// Note: userId already has unique: true which creates an index automatically\n\n// Validation middleware\nkpiSettingsSchema.pre('save', function(next) {\n  // Validate that thresholds are in ascending order\n  if (this.costThresholds.low >= this.costThresholds.medium) {\n    return next(new Error('Cost thresholds must be in ascending order: low < medium'));\n  }\n  \n  if (this.asrThresholds.critical >= this.asrThresholds.poor ||\n      this.asrThresholds.poor >= this.asrThresholds.fair ||\n      this.asrThresholds.fair >= this.asrThresholds.good) {\n    return next(new Error('ASR thresholds must be in ascending order: critical < poor < fair < good'));\n  }\n  \n  if (this.acdThresholds.short >= this.acdThresholds.normal ||\n      this.acdThresholds.normal >= this.acdThresholds.long) {\n    return next(new Error('ACD thresholds must be in ascending order: short < normal < long'));\n  }\n  \n  if (this.totalMinutesThresholds.light >= this.totalMinutesThresholds.moderate ||\n      this.totalMinutesThresholds.moderate >= this.totalMinutesThresholds.heavy) {\n    return next(new Error('Total minutes thresholds must be in ascending order: light < moderate < heavy'));\n  }\n  \n  next();\n});\n\n// Create and export the model\nconst KpiSettingsModel = mongoose.models.KpiSettings || mongoose.model<IKpiSettingsDocument, IKpiSettingsModel>('KpiSettings', kpiSettingsSchema);\n\nexport default KpiSettingsModel; ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/models/NotificationLog.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1186,1189],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1186,1189],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":23,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1232,1235],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1232,1235],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":54,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":54,"endColumn":39,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[1954,2028],"text":"type INotificationLogModel = Model<INotificationLogDocument>"},"desc":"Replace empty interface with a type alias."}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":73,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":73,"endColumn":42,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[2648,2728],"text":"type ILowBalanceSettingsModel = Model<ILowBalanceSettingsDocument>"},"desc":"Replace empty interface with a type alias."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":248,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":248,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8267,8270],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8267,8270],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":251,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":251,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8313,8316],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8313,8316],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import mongoose, { Document, Model, Schema } from 'mongoose';\n\n// Notification Log interface\nexport interface INotificationLog {\n  userId: string;\n  userEmail: string;\n  userName: string;\n  sippyAccountId?: number; // Make optional for auth templates\n  notificationType: 'low_balance' | 'zero_balance' | 'negative_balance' | 'email_verification' | 'account_activation' | 'high_cost_alert' | 'low_asr_alert' | 'extreme_usage_alert' | 'payment_success_gateway' | 'payment_success_admin' | 'payment_debit_admin' | 'password_reset' | 'ticket_created' | 'ticket_updated' | 'ticket_resolved' | 'ticket_assigned' | 'ticket_replied' | 'backorder_approved' | 'backorder_rejected' | 'cancellation_approved' | 'cancellation_rejected' | 'number_purchase_single' | 'number_purchase_bulk' | 'number_assignment' | 'number_unassignment' | 'admin_user_purchase_single' | 'admin_user_purchase_bulk' | 'admin_backorder_request' | 'admin_cancellation_request';\n  \n  // Balance notification fields (optional for other types)\n  balanceAmount?: number;\n  thresholdAmount?: number;\n  currency?: string;\n  \n  // Email verification fields\n  otpCode?: string;\n  \n  // Account activation fields\n  activationData?: any;\n  \n  // KPI alert fields  \n  alertData?: any;\n  \n  // Payment notification fields\n  paymentData?: {\n    amount: number;\n    currency: string;\n    paymentMethod?: string;\n    transactionId?: string;\n    fees?: {\n      processingFee?: number;\n      fixedFee?: number;\n    };\n    gateway?: string;\n    notes?: string;\n    processedBy?: string; // For admin credits\n  };\n  \n  status: 'pending' | 'sent' | 'failed';\n  errorMessage?: string;\n  emailSubject: string;\n  emailBody: string;\n  fromEmail?: string; // SMTP account used to send the email\n  sentAt?: Date;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n// Notification Log document interface\nexport interface INotificationLogDocument extends INotificationLog, Document {}\n\n// Notification Log model interface\nexport interface INotificationLogModel extends Model<INotificationLogDocument> {}\n\n// Low Balance Settings interface\nexport interface ILowBalanceSettings {\n  lowBalanceThreshold: number;\n  zeroBalanceThreshold: number;\n  negativeBalanceThreshold: number;\n  enableLowBalanceNotifications: boolean;\n  enableZeroBalanceNotifications: boolean;\n  enableNegativeBalanceNotifications: boolean;\n  notificationFrequencyHours: number; // How often to send notifications for the same condition\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n// Low Balance Settings document interface\nexport interface ILowBalanceSettingsDocument extends ILowBalanceSettings, Document {}\n\n// Low Balance Settings model interface\nexport interface ILowBalanceSettingsModel extends Model<ILowBalanceSettingsDocument> {}\n\n// Notification Log schema\nconst notificationLogSchema = new Schema<INotificationLogDocument, INotificationLogModel>(\n  {\n    userId: {\n      type: String,\n      required: [true, 'User ID is required'],\n      index: true,\n    },\n    userEmail: {\n      type: String,\n      required: [true, 'User email is required'],\n      trim: true,\n      lowercase: true,\n    },\n    userName: {\n      type: String,\n      required: [true, 'User name is required'],\n      trim: true,\n    },\n    sippyAccountId: {\n      type: Number,\n      index: true,\n      // Not required anymore as auth templates may not have this\n    },\n    notificationType: {\n      type: String,\n      required: true,\n      enum: ['low_balance', 'zero_balance', 'negative_balance', 'email_verification', 'account_activation', 'high_cost_alert', 'low_asr_alert', 'extreme_usage_alert', 'payment_success_gateway', 'payment_success_admin', 'payment_debit_admin', 'password_reset', 'ticket_created', 'ticket_updated', 'ticket_resolved', 'ticket_assigned', 'ticket_replied', 'backorder_approved', 'backorder_rejected', 'cancellation_approved', 'cancellation_rejected', 'number_purchase_single', 'number_purchase_bulk', 'number_assignment', 'number_unassignment', 'admin_user_purchase_single', 'admin_user_purchase_bulk', 'admin_backorder_request', 'admin_cancellation_request'],\n      index: true,\n    },\n    // Balance notification fields (optional)\n    balanceAmount: {\n      type: Number,\n    },\n    thresholdAmount: {\n      type: Number,\n    },\n    currency: {\n      type: String,\n      default: 'EUR',\n      uppercase: true,\n    },\n    // Email verification fields\n    otpCode: {\n      type: String,\n      trim: true,\n    },\n    // Account activation fields\n    activationData: {\n      type: Schema.Types.Mixed,\n    },\n    // KPI alert fields\n    alertData: {\n      type: Schema.Types.Mixed,\n    },\n    // Payment notification fields\n    paymentData: {\n      type: Schema.Types.Mixed,\n    },\n    status: {\n      type: String,\n      required: true,\n      enum: ['pending', 'sent', 'failed'],\n      default: 'pending',\n      index: true,\n    },\n    errorMessage: {\n      type: String,\n      trim: true,\n    },\n    emailSubject: {\n      type: String,\n      required: [true, 'Email subject is required'],\n      trim: true,\n    },\n    emailBody: {\n      type: String,\n      required: [true, 'Email body is required'],\n    },\n    fromEmail: {\n      type: String,\n      trim: true,\n    },\n    sentAt: {\n      type: Date,\n    },\n  },\n  {\n    timestamps: true,\n    collection: 'notification_logs',\n  }\n);\n\n// Low Balance Settings schema\nconst lowBalanceSettingsSchema = new Schema<ILowBalanceSettingsDocument, ILowBalanceSettingsModel>(\n  {\n    lowBalanceThreshold: {\n      type: Number,\n      required: true,\n      default: 10.0000,\n      min: [0, 'Threshold cannot be negative'],\n    },\n    zeroBalanceThreshold: {\n      type: Number,\n      required: true,\n      default: 0.0000,\n    },\n    negativeBalanceThreshold: {\n      type: Number,\n      required: true,\n      default: -1.0000,\n    },\n    enableLowBalanceNotifications: {\n      type: Boolean,\n      required: true,\n      default: true,\n    },\n    enableZeroBalanceNotifications: {\n      type: Boolean,\n      required: true,\n      default: true,\n    },\n    enableNegativeBalanceNotifications: {\n      type: Boolean,\n      required: true,\n      default: true,\n    },\n    notificationFrequencyHours: {\n      type: Number,\n      required: true,\n      default: 24,\n      min: [1, 'Frequency must be at least 1 hour'],\n      max: [168, 'Frequency cannot exceed 168 hours (1 week)'],\n    },\n  },\n  {\n    timestamps: true,\n    collection: 'low_balance_settings',\n  }\n);\n\n// Add indexes for better query performance\nnotificationLogSchema.index({ userId: 1, notificationType: 1, createdAt: -1 });\nnotificationLogSchema.index({ status: 1, createdAt: -1 });\nnotificationLogSchema.index({ createdAt: -1 });\n\n// Create and export the models\nconst NotificationLog = (mongoose.models.NotificationLog as INotificationLogModel) || \n  mongoose.model<INotificationLogDocument, INotificationLogModel>('NotificationLog', notificationLogSchema);\n\nconst LowBalanceSettings = (mongoose.models.LowBalanceSettings as ILowBalanceSettingsModel) || \n  mongoose.model<ILowBalanceSettingsDocument, ILowBalanceSettingsModel>('LowBalanceSettings', lowBalanceSettingsSchema);\n\nexport { NotificationLog, LowBalanceSettings };\n\n// Legacy interfaces for compatibility\nexport interface NotificationLog {\n  id: string;\n  userId: string;\n  userEmail: string;\n  userName: string;\n  sippyAccountId?: number; // Optional for auth templates\n  notificationType: 'low_balance' | 'zero_balance' | 'negative_balance' | 'email_verification' | 'account_activation' | 'high_cost_alert' | 'low_asr_alert' | 'extreme_usage_alert' | 'payment_success_gateway' | 'payment_success_admin' | 'payment_debit_admin' | 'password_reset' | 'ticket_created' | 'ticket_updated' | 'ticket_resolved' | 'ticket_assigned' | 'ticket_replied' | 'backorder_approved' | 'backorder_rejected' | 'cancellation_approved' | 'cancellation_rejected' | 'number_purchase_single' | 'number_purchase_bulk' | 'number_assignment' | 'number_unassignment' | 'admin_user_purchase_single' | 'admin_user_purchase_bulk' | 'admin_backorder_request' | 'admin_cancellation_request';\n  \n  // Balance notification fields (optional for other types)\n  balanceAmount?: number;\n  thresholdAmount?: number;\n  currency?: string;\n  \n  // Email verification fields\n  otpCode?: string;\n  \n  // Account activation fields\n  activationData?: any;\n  \n  // KPI alert fields  \n  alertData?: any;\n  \n  // Payment notification fields\n  paymentData?: {\n    amount: number;\n    currency: string;\n    paymentMethod?: string;\n    transactionId?: string;\n    fees?: {\n      processingFee?: number;\n      fixedFee?: number;\n    };\n    gateway?: string;\n    notes?: string;\n    processedBy?: string; // For admin credits\n  };\n  \n  status: 'pending' | 'sent' | 'failed';\n  errorMessage?: string;\n  emailSubject: string;\n  emailBody: string;\n  fromEmail?: string; // SMTP account used to send the email\n  sentAt?: Date;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface LowBalanceSettings {\n  id: string;\n  lowBalanceThreshold: number;\n  zeroBalanceThreshold: number;\n  negativeBalanceThreshold: number;\n  enableLowBalanceNotifications: boolean;\n  enableZeroBalanceNotifications: boolean;\n  enableNegativeBalanceNotifications: boolean;\n  notificationFrequencyHours: number;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface NotificationStats {\n  totalSent: number;\n  totalFailed: number;\n  totalPending: number;\n  last24Hours: {\n    sent: number;\n    failed: number;\n  };\n  last7Days: {\n    sent: number;\n    failed: number;\n  };\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/models/NumberRate.ts","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":24,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":24,"endColumn":34,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[606,670],"text":"type INumberRateModel = Model<INumberRateDocument>"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import mongoose, { Document, Model, Schema } from 'mongoose';\n\n// Number Rate interface\nexport interface INumberRate {\n  rateDeckId: mongoose.Types.ObjectId;\n  prefix: string;\n  country: string;\n  description: string;\n  rate: number;\n  setupFee: number;\n  type: 'Geographic/Local' | 'Mobile' | 'National' | 'Toll-free' | 'Shared Cost' | 'NPV (Verified Numbers)';\n  effectiveDate: Date;\n  createdBy: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n// Number Rate document interface\nexport interface INumberRateDocument extends INumberRate, Document {\n  id: string;\n}\n\n// Number Rate model interface\nexport interface INumberRateModel extends Model<INumberRateDocument> {}\n\n// Number Rate schema\nconst numberRateSchema = new Schema<INumberRateDocument, INumberRateModel>(\n  {\n    rateDeckId: {\n      type: Schema.Types.ObjectId,\n      ref: 'NumberRateDeck',\n      required: [true, 'Rate deck ID is required'],\n      index: true,\n    },\n    prefix: {\n      type: String,\n      required: [true, 'Prefix is required'],\n      trim: true,\n      maxlength: [20, 'Prefix cannot exceed 20 characters'],\n    },\n    country: {\n      type: String,\n      required: [true, 'Country is required'],\n      trim: true,\n      maxlength: [100, 'Country cannot exceed 100 characters'],\n    },\n    description: {\n      type: String,\n      trim: true,\n      maxlength: [500, 'Description cannot exceed 500 characters'],\n      default: '',\n    },\n    rate: {\n      type: Number,\n      required: [true, 'Rate is required'],\n      min: [0, 'Rate cannot be negative'],\n    },\n    setupFee: {\n      type: Number,\n      required: false,\n      default: 0,\n      min: [0, 'Setup fee cannot be negative'],\n    },\n    type: {\n      type: String,\n      required: [true, 'Rate type is required'],\n      enum: {\n        values: ['Geographic/Local', 'Mobile', 'National', 'Toll-free', 'Shared Cost', 'NPV (Verified Numbers)'],\n        message: 'Invalid rate type',\n      },\n    },\n    effectiveDate: {\n      type: Date,\n      required: [true, 'Effective date is required'],\n    },\n    createdBy: {\n      type: String,\n      required: [true, 'Created by is required'],\n      trim: true,\n    },\n  },\n  {\n    timestamps: true,\n    collection: 'number_rates',\n  }\n);\n\n// Add indexes for better query performance\nnumberRateSchema.index({ rateDeckId: 1, prefix: 1 }, { unique: true }); // Unique prefix per rate deck\nnumberRateSchema.index({ prefix: 1 });\nnumberRateSchema.index({ country: 1 });\nnumberRateSchema.index({ type: 1 });\nnumberRateSchema.index({ rate: 1 });\nnumberRateSchema.index({ effectiveDate: 1 });\nnumberRateSchema.index({ createdAt: -1 });\n\n// Create and export the NumberRate model\nconst NumberRate = (mongoose.models.NumberRate as INumberRateModel) || \n  mongoose.model<INumberRateDocument, INumberRateModel>('NumberRate', numberRateSchema);\n\nexport default NumberRate; ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/models/NumberRateDeck.ts","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":23,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":23,"endColumn":38,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[514,586],"text":"type INumberRateDeckModel = Model<INumberRateDeckDocument>"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import mongoose, { Document, Model, Schema } from 'mongoose';\n\n// Number Rate Deck interface\nexport interface INumberRateDeck {\n  name: string;\n  description: string;\n  currency: string;\n  isActive: boolean;\n  isDefault: boolean;\n  rateCount: number;\n  assignedUsers: number;\n  createdBy: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n// Number Rate Deck document interface\nexport interface INumberRateDeckDocument extends INumberRateDeck, Document {\n  id: string;\n}\n\n// Number Rate Deck model interface\nexport interface INumberRateDeckModel extends Model<INumberRateDeckDocument> {}\n\n// Number Rate Deck schema\nconst numberRateDeckSchema = new Schema<INumberRateDeckDocument, INumberRateDeckModel>(\n  {\n    name: {\n      type: String,\n      required: [true, 'Rate deck name is required'],\n      trim: true,\n      maxlength: [100, 'Name cannot exceed 100 characters'],\n    },\n    description: {\n      type: String,\n      trim: true,\n      maxlength: [500, 'Description cannot exceed 500 characters'],\n      default: '',\n    },\n    currency: {\n      type: String,\n      required: [true, 'Currency is required'],\n      uppercase: true,\n      trim: true,\n      minlength: [3, 'Currency must be 3 characters'],\n      maxlength: [3, 'Currency must be 3 characters'],\n      default: 'USD',\n    },\n    isActive: {\n      type: Boolean,\n      required: true,\n      default: true,\n    },\n    isDefault: {\n      type: Boolean,\n      required: true,\n      default: false,\n    },\n    rateCount: {\n      type: Number,\n      required: true,\n      default: 0,\n      min: [0, 'Rate count cannot be negative'],\n    },\n    assignedUsers: {\n      type: Number,\n      required: true,\n      default: 0,\n      min: [0, 'Assigned users count cannot be negative'],\n    },\n    createdBy: {\n      type: String,\n      required: [true, 'Created by is required'],\n      trim: true,\n    },\n  },\n  {\n    timestamps: true,\n    collection: 'number_rate_decks',\n  }\n);\n\n// Add indexes for better query performance\nnumberRateDeckSchema.index({ name: 1 });\nnumberRateDeckSchema.index({ isActive: 1 });\nnumberRateDeckSchema.index({ isDefault: 1 });\nnumberRateDeckSchema.index({ createdBy: 1 });\nnumberRateDeckSchema.index({ createdAt: -1 });\n\n// Ensure only one default rate deck exists\nnumberRateDeckSchema.pre('save', async function (next) {\n  if (this.isDefault && this.isModified('isDefault')) {\n    // If this deck is being set as default, unset all other defaults\n    await mongoose.model('NumberRateDeck').updateMany(\n      { _id: { $ne: this._id }, isDefault: true },\n      { isDefault: false }\n    );\n  }\n  next();\n});\n\n// Create and export the NumberRateDeck model\nconst NumberRateDeck = (mongoose.models.NumberRateDeck as INumberRateDeckModel) || \n  mongoose.model<INumberRateDeckDocument, INumberRateDeckModel>('NumberRateDeck', numberRateDeckSchema);\n\nexport default NumberRateDeck; ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/models/Payment.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":60,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2234,2237],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2234,2237],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":61,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2274,2277],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2274,2277],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":352,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":352,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8821,8824],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8821,8824],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import mongoose, { Schema, Document } from 'mongoose';\n\n// Payment interface for MongoDB storage (complementing Sippy data)\nexport interface IPayment extends Document {\n  // Core payment identification\n  paymentIntentId: string; // Stripe payment intent ID\n  webhookEventId: string; // Reference to webhook event that created this\n  sippyPaymentId?: number; // Sippy's i_payment ID (when available)\n  \n  // User and account info\n  userId: string;\n  userEmail: string;\n  sippyAccountId: number;\n  sippyCustomerId?: number;\n  \n  // Payment amounts (for invoicing and detailed tracking)\n  topupAmount: number; // Amount that actually goes to user's balance\n  processingFee: number; // Gateway processing fee (percentage-based)\n  fixedFee: number; // Gateway fixed fee\n  totalChargedAmount: number; // Total amount charged to user's card\n  currency: string;\n  \n  // Payment method details (not stored in Sippy)\n  provider: 'stripe' | 'paypal' | 'square' | 'razorpay';\n  gatewayId: string; // Reference to PaymentGateway document\n  gatewayName: string;\n  \n  // Card/Payment method details\n  paymentMethodType: 'card' | 'bank_transfer' | 'wallet' | 'other';\n  cardBrand?: string; // visa, mastercard, amex, etc.\n  cardLast4?: string;\n  cardCountry?: string;\n  cardFingerprint?: string; // For identifying same card across payments\n  \n  // Payment status and timing\n  status: 'pending' | 'processing' | 'succeeded' | 'failed' | 'canceled' | 'requires_action';\n  paymentIntentStatus: string; // Raw status from payment provider\n  failureCode?: string;\n  failureMessage?: string;\n  \n  // Timestamps\n  paymentInitiatedAt: Date; // When payment intent was created\n  paymentCompletedAt?: Date; // When payment was completed\n  sippyProcessedAt?: Date; // When credit was added to Sippy\n  \n  // Invoice and billing details\n  paymentReference?: string; // Payment reference number (e.g., PAY-20240528-123456)\n  invoiceId?: string; // Reference to actual invoice when generated\n  taxAmount?: number;\n  taxRate?: number;\n  receiptUrl?: string;\n  \n  // Additional metadata\n  userAgent?: string;\n  ipAddress?: string;\n  description?: string;\n  notes?: string;\n  \n  // Raw provider data (for debugging and completeness)\n  rawPaymentData?: Record<string, any>;\n  rawWebhookData?: Record<string, any>;\n  \n  // Audit trail\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nconst paymentSchema = new Schema<IPayment>(\n  {\n    // Core identification\n    paymentIntentId: {\n      type: String,\n      required: true,\n      unique: true,\n      index: true\n    },\n    webhookEventId: {\n      type: String,\n      required: true,\n      index: true\n    },\n    sippyPaymentId: {\n      type: Number,\n      index: true\n    },\n    \n    // User and account info\n    userId: {\n      type: String,\n      required: true,\n      index: true\n    },\n    userEmail: {\n      type: String,\n      required: true,\n      lowercase: true,\n      trim: true\n    },\n    sippyAccountId: {\n      type: Number,\n      required: true,\n      index: true\n    },\n    sippyCustomerId: {\n      type: Number,\n      index: true\n    },\n    \n    // Payment amounts\n    topupAmount: {\n      type: Number,\n      required: true,\n      min: 0\n    },\n    processingFee: {\n      type: Number,\n      required: true,\n      min: 0\n    },\n    fixedFee: {\n      type: Number,\n      required: true,\n      min: 0\n    },\n    totalChargedAmount: {\n      type: Number,\n      required: true,\n      min: 0\n    },\n    currency: {\n      type: String,\n      required: true,\n      uppercase: true,\n      trim: true,\n      minlength: 3,\n      maxlength: 3\n    },\n    \n    // Payment gateway info\n    provider: {\n      type: String,\n      required: true,\n      enum: ['stripe', 'paypal', 'square', 'razorpay']\n    },\n    gatewayId: {\n      type: String,\n      required: true,\n      index: true\n    },\n    gatewayName: {\n      type: String,\n      required: true,\n      trim: true\n    },\n    \n    // Payment method details\n    paymentMethodType: {\n      type: String,\n      required: true,\n      enum: ['card', 'bank_transfer', 'wallet', 'other'],\n      default: 'card'\n    },\n    cardBrand: {\n      type: String,\n      trim: true,\n      lowercase: true\n    },\n    cardLast4: {\n      type: String,\n      trim: true,\n      validate: {\n        validator: function(v: string) {\n          // Allow empty/null values, but if provided, must be 4 digits\n          return !v || /^\\d{4}$/.test(v);\n        },\n        message: 'Card last 4 digits must be exactly 4 digits'\n      }\n    },\n    cardCountry: {\n      type: String,\n      trim: true,\n      uppercase: true,\n      validate: {\n        validator: function(v: string) {\n          // Allow empty/null values, but if provided, must be 2 characters\n          return !v || (v.length >= 2 && v.length <= 2);\n        },\n        message: 'Card country must be exactly 2 characters'\n      }\n    },\n    cardFingerprint: {\n      type: String,\n      trim: true,\n      index: true\n    },\n    \n    // Payment status\n    status: {\n      type: String,\n      required: true,\n      enum: ['pending', 'processing', 'succeeded', 'failed', 'canceled', 'requires_action'],\n      default: 'pending',\n      index: true\n    },\n    paymentIntentStatus: {\n      type: String,\n      required: true,\n      trim: true\n    },\n    failureCode: {\n      type: String,\n      trim: true\n    },\n    failureMessage: {\n      type: String,\n      trim: true\n    },\n    \n    // Timestamps\n    paymentInitiatedAt: {\n      type: Date,\n      required: true,\n      index: true\n    },\n    paymentCompletedAt: {\n      type: Date,\n      index: true\n    },\n    sippyProcessedAt: {\n      type: Date,\n      index: true\n    },\n    \n    // Invoice details\n    paymentReference: {\n      type: String,\n      trim: true,\n      unique: true,\n      sparse: true\n    },\n    invoiceId: {\n      type: String,\n      trim: true,\n      unique: true,\n      sparse: true\n    },\n    taxAmount: {\n      type: Number,\n      min: 0\n    },\n    taxRate: {\n      type: Number,\n      min: 0,\n      max: 1 // Percentage as decimal (0.2 = 20%)\n    },\n    receiptUrl: {\n      type: String,\n      trim: true\n    },\n    \n    // Additional metadata\n    userAgent: {\n      type: String,\n      trim: true\n    },\n    ipAddress: {\n      type: String,\n      trim: true\n    },\n    description: {\n      type: String,\n      trim: true,\n      maxlength: 500\n    },\n    notes: {\n      type: String,\n      trim: true,\n      maxlength: 1000\n    },\n    \n    // Raw data storage\n    rawPaymentData: {\n      type: Schema.Types.Mixed\n    },\n    rawWebhookData: {\n      type: Schema.Types.Mixed\n    }\n  },\n  {\n    timestamps: true,\n    collection: 'payments'\n  }\n);\n\n// Compound indexes for efficient queries\npaymentSchema.index({ userId: 1, createdAt: -1 });\npaymentSchema.index({ sippyAccountId: 1, createdAt: -1 });\npaymentSchema.index({ provider: 1, status: 1 });\npaymentSchema.index({ status: 1, createdAt: -1 });\npaymentSchema.index({ paymentCompletedAt: -1 });\npaymentSchema.index({ cardFingerprint: 1, userId: 1 }); // For identifying repeat customers\npaymentSchema.index({ currency: 1, paymentCompletedAt: -1 }); // For financial reporting\n\n// Virtual for calculating effective fee rate\npaymentSchema.virtual('effectiveFeeRate').get(function() {\n  if (this.topupAmount > 0) {\n    return ((this.processingFee + this.fixedFee) / this.topupAmount) * 100;\n  }\n  return 0;\n});\n\n// Instance methods\npaymentSchema.methods.generatePaymentReference = function() {\n  if (!this.paymentReference) {\n    // Use current date instead of this.createdAt since createdAt is set after save\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = String(now.getMonth() + 1).padStart(2, '0');\n    const day = String(now.getDate()).padStart(2, '0');\n    const timestamp = Date.now().toString().slice(-6);\n    this.paymentReference = `PAY-${year}${month}${day}-${timestamp}`;\n  }\n  return this.paymentReference;\n};\n\npaymentSchema.methods.getReceiptData = function() {\n  return {\n    paymentReference: this.generatePaymentReference(),\n    paymentDate: this.paymentCompletedAt || this.createdAt,\n    userEmail: this.userEmail,\n    topupAmount: this.topupAmount,\n    processingFee: this.processingFee,\n    fixedFee: this.fixedFee,\n    totalAmount: this.totalChargedAmount,\n    currency: this.currency,\n    paymentMethod: `${this.cardBrand} ending in ${this.cardLast4}`,\n    gatewayName: this.gatewayName,\n    paymentIntentId: this.paymentIntentId\n  };\n};\n\n// Static methods\npaymentSchema.statics.findByUser = function(userId: string) {\n  return this.find({ userId }).sort({ createdAt: -1 });\n};\n\npaymentSchema.statics.findBySippyAccount = function(sippyAccountId: number) {\n  return this.find({ sippyAccountId }).sort({ createdAt: -1 });\n};\n\npaymentSchema.statics.getPaymentStats = function(userId?: string, dateRange?: { start: Date; end: Date }) {\n  const match: any = {};\n  if (userId) match.userId = userId;\n  if (dateRange) {\n    match.createdAt = {\n      $gte: dateRange.start,\n      $lte: dateRange.end\n    };\n  }\n\n  return this.aggregate([\n    { $match: match },\n    {\n      $group: {\n        _id: null,\n        totalPayments: { $sum: 1 },\n        successfulPayments: { $sum: { $cond: [{ $eq: ['$status', 'succeeded'] }, 1, 0] } },\n        totalTopupAmount: { $sum: '$topupAmount' },\n        totalFeesCollected: { $sum: { $add: ['$processingFee', '$fixedFee'] } },\n        totalChargedAmount: { $sum: '$totalChargedAmount' },\n        averagePaymentAmount: { $avg: '$topupAmount' },\n        currencies: { $addToSet: '$currency' }\n      }\n    }\n  ]);\n};\n\nexport const Payment = mongoose.models.Payment || mongoose.model<IPayment>('Payment', paymentSchema); ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/models/PaymentGateway.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/models/PhoneNumber.ts","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":66,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":66,"endColumn":35,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[1735,1801],"text":"type IPhoneNumberModel = Model<IPhoneNumberDocument>"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import mongoose, { Document, Model, Schema } from 'mongoose';\n\n// Phone Number interface\nexport interface IPhoneNumber {\n  number: string;\n  country: string;\n  countryCode: string;\n  numberType: 'Geographic/Local' | 'Mobile' | 'National' | 'Toll-free' | 'Shared Cost' | 'NPV (Verified Numbers)' | 'Premium';\n  provider: string;\n  status: 'available' | 'assigned' | 'reserved' | 'suspended' | 'cancelled';\n  \n  // Backorder configuration\n  backorderOnly: boolean; // If true, users must place backorder requests instead of direct purchase\n  \n  // Rate deck assignment\n  rateDeckId?: mongoose.Types.ObjectId;\n  monthlyRate?: number;\n  setupFee?: number;\n  currency: string;\n  \n  // Assignment details\n  assignedTo?: mongoose.Types.ObjectId;\n  assignedBy?: string;\n  assignedAt?: Date;\n  unassignedAt?: Date;\n  unassignedBy?: string;\n  unassignedReason?: string;\n  \n  // Billing details\n  billingCycle: 'monthly' | 'yearly';\n  nextBillingDate?: Date;\n  lastBilledDate?: Date;\n  billingDayOfMonth: number; // 1-28, for monthly billing\n  \n  // Additional metadata\n  description?: string;\n  capabilities: ('voice' | 'sms' | 'fax')[];\n  region?: string;\n  timeZone?: string;\n  \n  // Technical connection parameters\n  connectionType?: 'ip_routing' | 'credentials';\n  // For IP routing\n  ipAddress?: string;\n  port?: number;\n  // For credentials\n  login?: string;\n  password?: string;\n  domain?: string; // Can be IP or domain name\n  credentialsPort?: number;\n  \n  // Admin fields\n  createdBy: string;\n  notes?: string;\n  \n  createdAt: Date;\n  updatedAt: Date;\n}\n\n// Phone Number document interface\nexport interface IPhoneNumberDocument extends IPhoneNumber, Document {\n  _id: mongoose.Types.ObjectId;\n}\n\n// Phone Number model interface\nexport interface IPhoneNumberModel extends Model<IPhoneNumberDocument> {}\n\n// Phone Number schema\nconst phoneNumberSchema = new Schema<IPhoneNumberDocument, IPhoneNumberModel>(\n  {\n    number: {\n      type: String,\n      required: [true, 'Phone number is required'],\n      unique: true,\n      trim: true,\n      index: true,\n    },\n    country: {\n      type: String,\n      required: [true, 'Country is required'],\n      trim: true,\n      maxlength: [100, 'Country cannot exceed 100 characters'],\n      index: true,\n    },\n    countryCode: {\n      type: String,\n      required: [true, 'Country code is required'],\n      trim: true,\n      maxlength: [10, 'Country code cannot exceed 10 characters'],\n    },\n    numberType: {\n      type: String,\n      required: [true, 'Number type is required'],\n      enum: {\n        values: ['Geographic/Local', 'Mobile', 'National', 'Toll-free', 'Shared Cost', 'NPV (Verified Numbers)', 'Premium'],\n        message: 'Invalid number type',\n      },\n      index: true,\n    },\n    provider: {\n      type: String,\n      required: [true, 'Provider is required'],\n      trim: true,\n      maxlength: [100, 'Provider cannot exceed 100 characters'],\n    },\n    status: {\n      type: String,\n      required: true,\n      enum: {\n        values: ['available', 'assigned', 'reserved', 'suspended', 'cancelled'],\n        message: 'Invalid status',\n      },\n      default: 'available',\n      index: true,\n    },\n    \n    // Backorder configuration\n    backorderOnly: {\n      type: Boolean,\n      required: true,\n      default: false, // Default to allowing direct purchase\n      index: true, // Index for filtering queries\n    },\n    \n    // Rate deck assignment\n    rateDeckId: {\n      type: Schema.Types.ObjectId,\n      ref: 'NumberRateDeck',\n      index: true,\n    },\n    monthlyRate: {\n      type: Number,\n      min: [0, 'Monthly rate cannot be negative'],\n    },\n    setupFee: {\n      type: Number,\n      min: [0, 'Setup fee cannot be negative'],\n      default: 0,\n    },\n    currency: {\n      type: String,\n      required: [true, 'Currency is required'],\n      uppercase: true,\n      trim: true,\n      minlength: [3, 'Currency must be 3 characters'],\n      maxlength: [3, 'Currency must be 3 characters'],\n      default: 'USD',\n    },\n    \n    // Assignment details\n    assignedTo: {\n      type: Schema.Types.ObjectId,\n      ref: 'User',\n      index: true,\n    },\n    assignedBy: {\n      type: String,\n      trim: true,\n    },\n    assignedAt: {\n      type: Date,\n      index: true,\n    },\n    unassignedAt: {\n      type: Date,\n    },\n    unassignedBy: {\n      type: String,\n      trim: true,\n    },\n    unassignedReason: {\n      type: String,\n      trim: true,\n      maxlength: [500, 'Unassigned reason cannot exceed 500 characters'],\n    },\n    \n    // Billing details\n    billingCycle: {\n      type: String,\n      required: true,\n      enum: {\n        values: ['monthly', 'yearly'],\n        message: 'Billing cycle must be monthly or yearly',\n      },\n      default: 'monthly',\n    },\n    nextBillingDate: {\n      type: Date,\n      index: true,\n    },\n    lastBilledDate: {\n      type: Date,\n    },\n    billingDayOfMonth: {\n      type: Number,\n      required: true,\n      min: [1, 'Billing day must be between 1 and 28'],\n      max: [28, 'Billing day must be between 1 and 28'],\n      default: 1,\n    },\n    \n    // Additional metadata\n    description: {\n      type: String,\n      trim: true,\n      maxlength: [500, 'Description cannot exceed 500 characters'],\n    },\n    capabilities: [{\n      type: String,\n      enum: {\n        values: ['voice', 'sms', 'fax'],\n        message: 'Invalid capability',\n      },\n    }],\n    region: {\n      type: String,\n      trim: true,\n      maxlength: [100, 'Region cannot exceed 100 characters'],\n    },\n    timeZone: {\n      type: String,\n      trim: true,\n      maxlength: [100, 'Time zone cannot exceed 100 characters'],\n    },\n    \n    // Technical connection parameters\n    connectionType: {\n      type: String,\n      enum: {\n        values: ['ip_routing', 'credentials'],\n        message: 'Invalid connection type',\n      },\n    },\n    // For IP routing\n    ipAddress: {\n      type: String,\n      trim: true,\n    },\n    port: {\n      type: Number,\n    },\n    // For credentials\n    login: {\n      type: String,\n      trim: true,\n    },\n    password: {\n      type: String,\n      trim: true,\n    },\n    domain: {\n      type: String,\n      trim: true,\n    },\n    credentialsPort: {\n      type: Number,\n    },\n    \n    // Admin fields\n    createdBy: {\n      type: String,\n      required: [true, 'Created by is required'],\n      trim: true,\n    },\n    notes: {\n      type: String,\n      trim: true,\n      maxlength: [1000, 'Notes cannot exceed 1000 characters'],\n    },\n  },\n  {\n    timestamps: true,\n    collection: 'phone_numbers',\n  }\n);\n\n// Add indexes for better query performance\nphoneNumberSchema.index({ status: 1, assignedTo: 1 });\nphoneNumberSchema.index({ nextBillingDate: 1, status: 1 });\nphoneNumberSchema.index({ country: 1, numberType: 1 });\nphoneNumberSchema.index({ assignedTo: 1, status: 1 });\n\n// Export the model\nconst PhoneNumber: IPhoneNumberModel = mongoose.models.PhoneNumber || mongoose.model<IPhoneNumberDocument, IPhoneNumberModel>('PhoneNumber', phoneNumberSchema);\nexport default PhoneNumber; ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/models/PhoneNumberAssignment.ts","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":30,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":30,"endColumn":45,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[787,873],"text":"type IPhoneNumberAssignmentModel = Model<IPhoneNumberAssignmentDocument>"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import mongoose, { Document, Model, Schema } from 'mongoose';\n\n// Phone Number Assignment interface\nexport interface IPhoneNumberAssignment {\n  phoneNumberId: mongoose.Types.ObjectId;\n  userId: mongoose.Types.ObjectId;\n  assignedBy: string;\n  assignedAt: Date;\n  unassignedAt?: Date;\n  unassignedBy?: string;\n  unassignedReason?: string;\n  monthlyRate: number;\n  setupFee: number;\n  currency: string;\n  billingStartDate: Date;\n  billingEndDate?: Date;\n  totalBilled?: number;\n  status: 'active' | 'ended';\n  notes?: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n// Phone Number Assignment document interface\nexport interface IPhoneNumberAssignmentDocument extends IPhoneNumberAssignment, Document {\n  _id: mongoose.Types.ObjectId;\n}\n\n// Phone Number Assignment model interface\nexport interface IPhoneNumberAssignmentModel extends Model<IPhoneNumberAssignmentDocument> {}\n\n// Phone Number Assignment schema\nconst phoneNumberAssignmentSchema = new Schema<IPhoneNumberAssignmentDocument, IPhoneNumberAssignmentModel>(\n  {\n    phoneNumberId: {\n      type: Schema.Types.ObjectId,\n      ref: 'PhoneNumber',\n      required: [true, 'Phone number ID is required'],\n      index: true,\n    },\n    userId: {\n      type: Schema.Types.ObjectId,\n      ref: 'User',\n      required: [true, 'User ID is required'],\n      index: true,\n    },\n    assignedBy: {\n      type: String,\n      required: [true, 'Assigned by is required'],\n      trim: true,\n    },\n    assignedAt: {\n      type: Date,\n      required: [true, 'Assigned at date is required'],\n      default: Date.now,\n      index: true,\n    },\n    unassignedAt: {\n      type: Date,\n      index: true,\n    },\n    unassignedBy: {\n      type: String,\n      trim: true,\n    },\n    unassignedReason: {\n      type: String,\n      trim: true,\n      maxlength: [500, 'Unassigned reason cannot exceed 500 characters'],\n    },\n    monthlyRate: {\n      type: Number,\n      required: [true, 'Monthly rate is required'],\n      min: [0, 'Monthly rate cannot be negative'],\n    },\n    setupFee: {\n      type: Number,\n      required: [true, 'Setup fee is required'],\n      min: [0, 'Setup fee cannot be negative'],\n      default: 0,\n    },\n    currency: {\n      type: String,\n      required: [true, 'Currency is required'],\n      uppercase: true,\n      trim: true,\n      minlength: [3, 'Currency must be 3 characters'],\n      maxlength: [3, 'Currency must be 3 characters'],\n      default: 'USD',\n    },\n    billingStartDate: {\n      type: Date,\n      required: [true, 'Billing start date is required'],\n      index: true,\n    },\n    billingEndDate: {\n      type: Date,\n      index: true,\n    },\n    totalBilled: {\n      type: Number,\n      min: [0, 'Total billed cannot be negative'],\n      default: 0,\n    },\n    status: {\n      type: String,\n      required: true,\n      enum: {\n        values: ['active', 'ended'],\n        message: 'Status must be active or ended',\n      },\n      default: 'active',\n      index: true,\n    },\n    notes: {\n      type: String,\n      trim: true,\n      maxlength: [1000, 'Notes cannot exceed 1000 characters'],\n    },\n  },\n  {\n    timestamps: true,\n    collection: 'phone_number_assignments',\n  }\n);\n\n// Add compound indexes for better query performance\nphoneNumberAssignmentSchema.index({ phoneNumberId: 1, status: 1 });\nphoneNumberAssignmentSchema.index({ userId: 1, status: 1 });\nphoneNumberAssignmentSchema.index({ billingStartDate: 1, billingEndDate: 1 });\nphoneNumberAssignmentSchema.index({ assignedAt: -1 });\n\n// Export the model\nconst PhoneNumberAssignment: IPhoneNumberAssignmentModel = mongoose.models.PhoneNumberAssignment || mongoose.model<IPhoneNumberAssignmentDocument, IPhoneNumberAssignmentModel>('PhoneNumberAssignment', phoneNumberAssignmentSchema);\nexport default PhoneNumberAssignment; ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/models/PhoneNumberBilling.ts","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":43,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":43,"endColumn":42,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[1079,1159],"text":"type IPhoneNumberBillingModel = Model<IPhoneNumberBillingDocument>"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import mongoose, { Document, Model, Schema } from 'mongoose';\n\n// Phone Number Billing interface\nexport interface IPhoneNumberBilling {\n  phoneNumberId: mongoose.Types.ObjectId;\n  userId: mongoose.Types.ObjectId;\n  assignmentId: mongoose.Types.ObjectId;\n  \n  // Billing details\n  billingPeriodStart: Date;\n  billingPeriodEnd: Date;\n  amount: number;\n  currency: string;\n  \n  // Payment details\n  status: 'pending' | 'paid' | 'failed' | 'cancelled' | 'refunded';\n  billingDate: Date;\n  paidDate?: Date;\n  failureReason?: string;\n  \n  // Transaction details\n  transactionType: 'monthly_fee' | 'setup_fee' | 'prorated_fee' | 'refund';\n  prorationDays?: number;\n  \n  // Integration with payments\n  paymentId?: mongoose.Types.ObjectId;\n  sippyTransactionId?: string;\n  \n  // Admin fields\n  processedBy?: string;\n  notes?: string;\n  \n  createdAt: Date;\n  updatedAt: Date;\n}\n\n// Phone Number Billing document interface\nexport interface IPhoneNumberBillingDocument extends IPhoneNumberBilling, Document {\n  _id: mongoose.Types.ObjectId;\n}\n\n// Phone Number Billing model interface\nexport interface IPhoneNumberBillingModel extends Model<IPhoneNumberBillingDocument> {}\n\n// Phone Number Billing schema\nconst phoneNumberBillingSchema = new Schema<IPhoneNumberBillingDocument, IPhoneNumberBillingModel>(\n  {\n    phoneNumberId: {\n      type: Schema.Types.ObjectId,\n      ref: 'PhoneNumber',\n      required: [true, 'Phone number ID is required'],\n      index: true,\n    },\n    userId: {\n      type: Schema.Types.ObjectId,\n      ref: 'User',\n      required: [true, 'User ID is required'],\n      index: true,\n    },\n    assignmentId: {\n      type: Schema.Types.ObjectId,\n      ref: 'PhoneNumberAssignment',\n      required: [true, 'Assignment ID is required'],\n      index: true,\n    },\n    \n    // Billing details\n    billingPeriodStart: {\n      type: Date,\n      required: [true, 'Billing period start is required'],\n      index: true,\n    },\n    billingPeriodEnd: {\n      type: Date,\n      required: [true, 'Billing period end is required'],\n      index: true,\n    },\n    amount: {\n      type: Number,\n      required: [true, 'Amount is required'],\n      min: [0, 'Amount cannot be negative'],\n    },\n    currency: {\n      type: String,\n      required: [true, 'Currency is required'],\n      uppercase: true,\n      trim: true,\n      minlength: [3, 'Currency must be 3 characters'],\n      maxlength: [3, 'Currency must be 3 characters'],\n      default: 'USD',\n    },\n    \n    // Payment details\n    status: {\n      type: String,\n      required: true,\n      enum: {\n        values: ['pending', 'paid', 'failed', 'cancelled', 'refunded'],\n        message: 'Invalid status',\n      },\n      default: 'pending',\n      index: true,\n    },\n    billingDate: {\n      type: Date,\n      required: [true, 'Billing date is required'],\n      index: true,\n    },\n    paidDate: {\n      type: Date,\n      index: true,\n    },\n    failureReason: {\n      type: String,\n      trim: true,\n      maxlength: [500, 'Failure reason cannot exceed 500 characters'],\n    },\n    \n    // Transaction details\n    transactionType: {\n      type: String,\n      required: [true, 'Transaction type is required'],\n      enum: {\n        values: ['monthly_fee', 'setup_fee', 'prorated_fee', 'refund'],\n        message: 'Invalid transaction type',\n      },\n      index: true,\n    },\n    prorationDays: {\n      type: Number,\n      min: [0, 'Proration days cannot be negative'],\n      max: [31, 'Proration days cannot exceed 31'],\n    },\n    \n    // Integration with payments\n    paymentId: {\n      type: Schema.Types.ObjectId,\n      ref: 'Payment',\n      index: true,\n    },\n    sippyTransactionId: {\n      type: String,\n      trim: true,\n      index: true,\n    },\n    \n    // Admin fields\n    processedBy: {\n      type: String,\n      trim: true,\n    },\n    notes: {\n      type: String,\n      trim: true,\n      maxlength: [1000, 'Notes cannot exceed 1000 characters'],\n    },\n  },\n  {\n    timestamps: true,\n    collection: 'phone_number_billing',\n  }\n);\n\n// Add compound indexes for better query performance\nphoneNumberBillingSchema.index({ userId: 1, status: 1, billingDate: -1 });\nphoneNumberBillingSchema.index({ phoneNumberId: 1, billingPeriodStart: 1, billingPeriodEnd: 1 });\nphoneNumberBillingSchema.index({ assignmentId: 1, transactionType: 1 });\nphoneNumberBillingSchema.index({ billingDate: 1, status: 1 });\nphoneNumberBillingSchema.index({ status: 1, createdAt: -1 });\n\n// Export the model\nconst PhoneNumberBilling: IPhoneNumberBillingModel = mongoose.models.PhoneNumberBilling || mongoose.model<IPhoneNumberBillingDocument, IPhoneNumberBillingModel>('PhoneNumberBilling', phoneNumberBillingSchema);\nexport default PhoneNumberBilling; ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/models/PhoneNumberRequest.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/models/Provider.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/models/PushSubscription.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[221,224],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[221,224],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import mongoose, { Document, Schema } from 'mongoose';\n\nexport interface IPushSubscription extends Document {\n  userId: string;\n  endpoint: string;\n  keys: {\n    p256dh: string;\n    auth: string;\n  };\n  subscriptionData: any;\n  isActive: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nconst PushSubscriptionSchema = new Schema<IPushSubscription>({\n  userId: {\n    type: String,\n    required: true,\n    index: true\n  },\n  endpoint: {\n    type: String,\n    required: true\n  },\n  keys: {\n    p256dh: {\n      type: String,\n      required: true\n    },\n    auth: {\n      type: String,\n      required: true\n    }\n  },\n  subscriptionData: {\n    type: Schema.Types.Mixed,\n    required: true\n  },\n  isActive: {\n    type: Boolean,\n    default: true\n  },\n  createdAt: {\n    type: Date,\n    default: Date.now\n  },\n  updatedAt: {\n    type: Date,\n    default: Date.now\n  }\n});\n\n// Index for efficient queries\nPushSubscriptionSchema.index({ userId: 1, isActive: 1 });\n\nexport const PushSubscriptionModel = mongoose.models.PushSubscription || \n  mongoose.model<IPushSubscription>('PushSubscription', PushSubscriptionSchema); ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/models/RateDeckAssignment.ts","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":21,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":21,"endColumn":42,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[540,620],"text":"type IRateDeckAssignmentModel = Model<IRateDeckAssignmentDocument>"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import mongoose, { Document, Model, Schema } from 'mongoose';\n\n// Rate deck assignment interface\nexport interface IRateDeckAssignment {\n  userId: mongoose.Types.ObjectId;\n  rateDeckId: mongoose.Types.ObjectId;\n  rateDeckType: 'number' | 'sms';\n  assignedBy: string;\n  assignedAt: Date;\n  isActive: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n// Rate deck assignment document interface\nexport interface IRateDeckAssignmentDocument extends IRateDeckAssignment, Document {\n  id: string;\n}\n\n// Rate deck assignment model interface\nexport interface IRateDeckAssignmentModel extends Model<IRateDeckAssignmentDocument> {}\n\n// Rate deck assignment schema\nconst rateDeckAssignmentSchema = new Schema<IRateDeckAssignmentDocument, IRateDeckAssignmentModel>(\n  {\n    userId: {\n      type: Schema.Types.ObjectId,\n      ref: 'User',\n      required: [true, 'User ID is required'],\n      index: true,\n    },\n    rateDeckId: {\n      type: Schema.Types.ObjectId,\n      required: [true, 'Rate deck ID is required'],\n      index: true,\n    },\n    rateDeckType: {\n      type: String,\n      required: [true, 'Rate deck type is required'],\n      enum: {\n        values: ['number', 'sms'],\n        message: 'Rate deck type must be either number or sms',\n      },\n      index: true,\n    },\n    assignedBy: {\n      type: String,\n      required: [true, 'Assigned by is required'],\n      trim: true,\n    },\n    assignedAt: {\n      type: Date,\n      required: [true, 'Assigned at date is required'],\n      default: Date.now,\n    },\n    isActive: {\n      type: Boolean,\n      default: true,\n      index: true,\n    },\n  },\n  {\n    timestamps: true,\n    collection: 'rate_deck_assignments',\n  }\n);\n\n// Add compound indexes for better query performance\nrateDeckAssignmentSchema.index({ userId: 1, rateDeckType: 1, isActive: 1 });\nrateDeckAssignmentSchema.index({ rateDeckId: 1, rateDeckType: 1, isActive: 1 });\nrateDeckAssignmentSchema.index({ userId: 1, rateDeckId: 1, rateDeckType: 1 }, { unique: true }); // Prevent duplicate assignments\n\n// Create and export the RateDeckAssignment model\nconst RateDeckAssignment = (mongoose.models.RateDeckAssignment as IRateDeckAssignmentModel) || \n  mongoose.model<IRateDeckAssignmentDocument, IRateDeckAssignmentModel>('RateDeckAssignment', rateDeckAssignmentSchema);\n\nexport default RateDeckAssignment; ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/models/SchedulerSettings.ts","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":20,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":20,"endColumn":41,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[479,557],"text":"type ISchedulerSettingsModel = Model<ISchedulerSettingsDocument>"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import mongoose, { Document, Model, Schema } from 'mongoose';\n\n// Scheduler Settings interface\nexport interface ISchedulerSettings {\n  enabled: boolean;\n  checkInterval: number; // in minutes\n  timezone: string;\n  lastCheck?: Date;\n  nextCheck?: Date;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n// Scheduler Settings document interface\nexport interface ISchedulerSettingsDocument extends ISchedulerSettings, Document {\n  id: string;\n}\n\n// Scheduler Settings model interface\nexport interface ISchedulerSettingsModel extends Model<ISchedulerSettingsDocument> {}\n\n// Export the main interface for use in other files\nexport type SchedulerSettings = ISchedulerSettings;\n\n// Scheduler Settings schema\nconst schedulerSettingsSchema = new Schema<ISchedulerSettingsDocument, ISchedulerSettingsModel>(\n  {\n    enabled: {\n      type: Boolean,\n      required: true,\n      default: true,\n    },\n    checkInterval: {\n      type: Number,\n      required: true,\n      default: 360, // 6 hours in minutes\n      min: [30, 'Check interval cannot be less than 30 minutes'],\n      max: [10080, 'Check interval cannot exceed 7 days (10080 minutes)'],\n    },\n    timezone: {\n      type: String,\n      required: true,\n      default: 'Europe/London',\n    },\n    lastCheck: {\n      type: Date,\n    },\n    nextCheck: {\n      type: Date,\n    },\n  },\n  {\n    timestamps: true,\n    collection: 'scheduler_settings',\n  }\n);\n\n// Add indexes for better query performance\nschedulerSettingsSchema.index({ enabled: 1 });\n\n// Create and export the SchedulerSettings model\nconst SchedulerSettingsModel = (mongoose.models.SchedulerSettings as ISchedulerSettingsModel) || \n  mongoose.model<ISchedulerSettingsDocument, ISchedulerSettingsModel>('SchedulerSettings', schedulerSettingsSchema);\n\nexport default SchedulerSettingsModel; ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/models/Settings.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/models/SmsRate.ts","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":22,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":22,"endColumn":31,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[459,517],"text":"type ISmsRateModel = Model<ISmsRateDocument>"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import mongoose, { Document, Model, Schema } from 'mongoose';\n\n// SMS Rate interface\nexport interface ISmsRate {\n  rateDeckId: mongoose.Types.ObjectId;\n  prefix: string;\n  country: string;\n  description: string;\n  rate: number;\n  effectiveDate: Date;\n  createdBy: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n// SMS Rate document interface\nexport interface ISmsRateDocument extends ISmsRate, Document {\n  id: string;\n}\n\n// SMS Rate model interface\nexport interface ISmsRateModel extends Model<ISmsRateDocument> {}\n\n// SMS Rate schema\nconst smsRateSchema = new Schema<ISmsRateDocument, ISmsRateModel>(\n  {\n    rateDeckId: {\n      type: Schema.Types.ObjectId,\n      ref: 'SmsRateDeck',\n      required: [true, 'Rate deck ID is required'],\n      index: true,\n    },\n    prefix: {\n      type: String,\n      required: [true, 'Prefix is required'],\n      trim: true,\n      maxlength: [20, 'Prefix cannot exceed 20 characters'],\n    },\n    country: {\n      type: String,\n      required: [true, 'Country is required'],\n      trim: true,\n      maxlength: [100, 'Country cannot exceed 100 characters'],\n    },\n    description: {\n      type: String,\n      trim: true,\n      maxlength: [500, 'Description cannot exceed 500 characters'],\n      default: '',\n    },\n    rate: {\n      type: Number,\n      required: [true, 'Rate is required'],\n      min: [0, 'Rate cannot be negative'],\n    },\n    effectiveDate: {\n      type: Date,\n      required: [true, 'Effective date is required'],\n    },\n    createdBy: {\n      type: String,\n      required: [true, 'Created by is required'],\n      trim: true,\n    },\n  },\n  {\n    timestamps: true,\n    collection: 'sms_rates',\n  }\n);\n\n// Add indexes for better query performance\nsmsRateSchema.index({ rateDeckId: 1, prefix: 1 }, { unique: true }); // Unique prefix per rate deck\nsmsRateSchema.index({ rateDeckId: 1 });\nsmsRateSchema.index({ prefix: 1 });\nsmsRateSchema.index({ country: 1 });\nsmsRateSchema.index({ rate: 1 });\nsmsRateSchema.index({ effectiveDate: 1 });\nsmsRateSchema.index({ createdAt: -1 });\n\n// Create and export the SmsRate model\nconst SmsRate = (mongoose.models.SmsRate as ISmsRateModel) || \n  mongoose.model<ISmsRateDocument, ISmsRateModel>('SmsRate', smsRateSchema);\n\nexport default SmsRate; ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/models/SmsRateDeck.ts","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":23,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":23,"endColumn":35,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[496,562],"text":"type ISmsRateDeckModel = Model<ISmsRateDeckDocument>"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import mongoose, { Document, Model, Schema } from 'mongoose';\n\n// SMS Rate Deck interface\nexport interface ISmsRateDeck {\n  name: string;\n  description: string;\n  currency: string;\n  isActive: boolean;\n  isDefault: boolean;\n  rateCount: number;\n  assignedUsers: number;\n  createdBy: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n// SMS Rate Deck document interface\nexport interface ISmsRateDeckDocument extends ISmsRateDeck, Document {\n  id: string;\n}\n\n// SMS Rate Deck model interface\nexport interface ISmsRateDeckModel extends Model<ISmsRateDeckDocument> {}\n\n// SMS Rate Deck schema\nconst smsRateDeckSchema = new Schema<ISmsRateDeckDocument, ISmsRateDeckModel>(\n  {\n    name: {\n      type: String,\n      required: [true, 'Rate deck name is required'],\n      trim: true,\n      maxlength: [100, 'Name cannot exceed 100 characters'],\n    },\n    description: {\n      type: String,\n      trim: true,\n      maxlength: [500, 'Description cannot exceed 500 characters'],\n      default: '',\n    },\n    currency: {\n      type: String,\n      required: [true, 'Currency is required'],\n      uppercase: true,\n      trim: true,\n      minlength: [3, 'Currency must be 3 characters'],\n      maxlength: [3, 'Currency must be 3 characters'],\n      default: 'USD',\n    },\n    isActive: {\n      type: Boolean,\n      required: true,\n      default: true,\n    },\n    isDefault: {\n      type: Boolean,\n      required: true,\n      default: false,\n    },\n    rateCount: {\n      type: Number,\n      required: true,\n      default: 0,\n      min: [0, 'Rate count cannot be negative'],\n    },\n    assignedUsers: {\n      type: Number,\n      required: true,\n      default: 0,\n      min: [0, 'Assigned users count cannot be negative'],\n    },\n    createdBy: {\n      type: String,\n      required: [true, 'Created by is required'],\n      trim: true,\n    },\n  },\n  {\n    timestamps: true,\n    collection: 'sms_rate_decks',\n  }\n);\n\n// Add indexes for better query performance\nsmsRateDeckSchema.index({ name: 1 });\nsmsRateDeckSchema.index({ isActive: 1 });\nsmsRateDeckSchema.index({ isDefault: 1 });\nsmsRateDeckSchema.index({ createdBy: 1 });\nsmsRateDeckSchema.index({ createdAt: -1 });\n\n// Ensure only one default rate deck exists\nsmsRateDeckSchema.pre('save', async function (next) {\n  if (this.isDefault && this.isModified('isDefault')) {\n    // If this deck is being set as default, unset all other defaults\n    await mongoose.model('SmsRateDeck').updateMany(\n      { _id: { $ne: this._id }, isDefault: true },\n      { isDefault: false }\n    );\n  }\n  next();\n});\n\n// Create and export the SmsRateDeck model\nconst SmsRateDeck = (mongoose.models.SmsRateDeck as ISmsRateDeckModel) || \n  mongoose.model<ISmsRateDeckDocument, ISmsRateDeckModel>('SmsRateDeck', smsRateDeckSchema);\n\nexport default SmsRateDeck; ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/models/SmtpSettings.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'EmailCategory' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SmtpTestResult' is defined but never used.","line":2,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":54},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'EmailRoutingConfig' is defined but never used.","line":2,"column":56,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":74},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'EMAIL_CATEGORY_DESCRIPTIONS' is defined but never used.","line":2,"column":76,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":103},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'EMAIL_CATEGORY_EXAMPLES' is defined but never used.","line":2,"column":105,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":128},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":8,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":8,"endColumn":36,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[378,446],"text":"type ISmtpSettingsModel = Model<ISmtpSettingsDocument>"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import mongoose, { Document, Model, Schema } from 'mongoose';\nimport { EmailCategory, ISmtpSettings, SmtpTestResult, EmailRoutingConfig, EMAIL_CATEGORY_DESCRIPTIONS, EMAIL_CATEGORY_EXAMPLES } from '@/types/smtp';\n\n// SMTP Settings document interface\nexport interface ISmtpSettingsDocument extends Omit<ISmtpSettings, '_id'>, Document {}\n\n// SMTP Settings model interface\nexport interface ISmtpSettingsModel extends Model<ISmtpSettingsDocument> {}\n\n// SMTP Settings schema\nconst smtpSettingsSchema = new Schema<ISmtpSettingsDocument, ISmtpSettingsModel>(\n  {\n    name: {\n      type: String,\n      required: [true, 'SMTP account name is required'],\n      trim: true,\n    },\n    category: {\n      type: String,\n      required: [true, 'Email category is required'],\n      enum: ['billing', 'authentication', 'support', 'default'],\n      default: 'default',\n    },\n    host: {\n      type: String,\n      required: [true, 'SMTP host is required'],\n      trim: true,\n    },\n    port: {\n      type: Number,\n      required: [true, 'SMTP port is required'],\n      min: [1, 'Port must be at least 1'],\n      max: [65535, 'Port must be at most 65535'],\n    },\n    secure: {\n      type: Boolean,\n      required: true,\n      default: false,\n    },\n    username: {\n      type: String,\n      trim: true,\n      default: '',\n    },\n    password: {\n      type: String,\n      select: false, // Don't return password by default for security\n      default: '',\n    },\n    fromEmail: {\n      type: String,\n      required: [true, 'From email is required'],\n      trim: true,\n      lowercase: true,\n      match: [/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, 'Please provide a valid email address'],\n    },\n    fromName: {\n      type: String,\n      trim: true,\n      default: 'Sippy Dashboard',\n    },\n    enabled: {\n      type: Boolean,\n      required: true,\n      default: false,\n    },\n    isDefault: {\n      type: Boolean,\n      required: true,\n      default: false,\n    },\n    priority: {\n      type: Number,\n      required: true,\n      default: 0,\n      min: [0, 'Priority must be at least 0'],\n    },\n    description: {\n      type: String,\n      trim: true,\n      maxlength: [500, 'Description must be less than 500 characters'],\n    },\n  },\n  {\n    timestamps: true,\n    collection: 'smtp_settings',\n  }\n);\n\n// Indexes for efficient querying\nsmtpSettingsSchema.index({ category: 1, enabled: 1, priority: 1 });\nsmtpSettingsSchema.index({ isDefault: 1 });\n\n// Ensure only one default SMTP account exists\nsmtpSettingsSchema.pre('save', async function (next) {\n  if (this.isDefault) {\n    // Remove default flag from other accounts\n    await (this.constructor as ISmtpSettingsModel).updateMany(\n      { _id: { $ne: this._id }, isDefault: true },\n      { isDefault: false }\n    );\n  }\n  next();\n});\n\n// Create and export the SmtpSettings model\nconst SmtpSettings = (mongoose.models.SmtpSettings as ISmtpSettingsModel) || \n  mongoose.model<ISmtpSettingsDocument, ISmtpSettingsModel>('SmtpSettings', smtpSettingsSchema);\n\nexport default SmtpSettings;\n\n// Re-export types for server-side use\nexport type { EmailCategory, ISmtpSettings, SmtpTestResult, EmailRoutingConfig } from '@/types/smtp';\nexport { EMAIL_CATEGORY_DESCRIPTIONS, EMAIL_CATEGORY_EXAMPLES } from '@/types/smtp'; ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/models/Ticket.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":312,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":312,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6783,6786],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6783,6786],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import mongoose, { Document, Model, Schema } from 'mongoose';\n\n// Ticket attachment interface\nexport interface ITicketAttachment {\n  filename: string;\n  originalName: string;\n  mimeType: string;\n  size: number;\n  uploadedAt: Date;\n  uploadedBy: string; // User ID\n}\n\n// Outbound call example interface\nexport interface IOutboundCallExample {\n  number: string;\n  callDate: Date;\n  description?: string;\n}\n\n// Outbound call data interface\nexport interface IOutboundCallData {\n  examples: IOutboundCallExample[];\n}\n\n// Assigned number interface\nexport interface IAssignedNumber {\n  number: string;\n  description?: string;\n  type?: string;\n  country?: string;\n  rate?: number;\n  currency?: string;\n}\n\n// Ticket reply interface\nexport interface ITicketReply {\n  content: string;\n  attachments?: ITicketAttachment[];\n  authorId: string; // User ID\n  authorType: 'user' | 'admin';\n  createdAt: Date;\n  isInternal?: boolean; // For admin-only notes\n}\n\n// Ticket interface\nexport interface ITicket {\n  ticketNumber?: string; // Auto-generated unique ticket number\n  title: string;\n  description: string;\n  \n  // Service and priority\n  service: 'outbound_calls' | 'inbound_calls' | 'did_numbers' | 'sms' | 'emailing' | 'whatsapp_business' | 'billing' | 'technical' | 'other';\n  priority: 'low' | 'medium' | 'high' | 'urgent';\n  \n  // User information\n  userId: string;\n  userEmail: string; // Stored for quick access\n  \n  // Status and assignment\n  status: 'open' | 'in_progress' | 'waiting_user' | 'waiting_admin' | 'resolved' | 'closed';\n  assignedTo?: string; // Admin user ID\n  \n  // Attachments and replies\n  attachments?: ITicketAttachment[];\n  replies: ITicketReply[];\n  \n  // Service-specific fields\n  country?: string; // For services that need country\n  outboundCallData?: IOutboundCallData; // For outbound calls\n  assignedNumbers?: IAssignedNumber[]; // For numbers/inbound services\n  \n  // Timestamps\n  createdAt: Date;\n  updatedAt: Date;\n  resolvedAt?: Date;\n  closedAt?: Date;\n  \n  // Additional metadata\n  tags?: string[];\n  internalNotes?: string; // Admin-only notes\n  customerSatisfactionRating?: number; // 1-5 scale\n  customerSatisfactionComment?: string; // Comment for low ratings\n  estimatedResolutionTime?: Date;\n}\n\n// Document interface\nexport interface ITicketDocument extends ITicket, Document {\n  id: string;\n}\n\n// Model interface\nexport interface ITicketModel extends Model<ITicketDocument> {\n  generateTicketNumber(): Promise<string>;\n}\n\n// Attachment schema\nconst attachmentSchema = new Schema<ITicketAttachment>({\n  filename: {\n    type: String,\n    required: true,\n  },\n  originalName: {\n    type: String,\n    required: true,\n  },\n  mimeType: {\n    type: String,\n    required: true,\n  },\n  size: {\n    type: Number,\n    required: true,\n  },\n  uploadedAt: {\n    type: Date,\n    default: Date.now,\n  },\n  uploadedBy: {\n    type: String,\n    required: true,\n  },\n}, { _id: false });\n\n// Reply schema\nconst replySchema = new Schema<ITicketReply>({\n  content: {\n    type: String,\n    required: true,\n    maxlength: 5000,\n  },\n  attachments: [attachmentSchema],\n  authorId: {\n    type: String,\n    required: true,\n  },\n  authorType: {\n    type: String,\n    enum: ['user', 'admin'],\n    required: true,\n  },\n  createdAt: {\n    type: Date,\n    default: Date.now,\n  },\n  isInternal: {\n    type: Boolean,\n    default: false,\n  },\n});\n\n// Ticket schema\nconst ticketSchema = new Schema<ITicketDocument, ITicketModel>({\n  ticketNumber: {\n    type: String,\n    unique: true,\n  },\n  title: {\n    type: String,\n    required: true,\n    trim: true,\n    maxlength: 200,\n  },\n  description: {\n    type: String,\n    required: true,\n    maxlength: 2000,\n  },\n  service: {\n    type: String,\n    enum: ['outbound_calls', 'inbound_calls', 'did_numbers', 'sms', 'emailing', 'whatsapp_business', 'billing', 'technical', 'other'],\n    required: true,\n  },\n  priority: {\n    type: String,\n    enum: ['low', 'medium', 'high', 'urgent'],\n    required: true,\n  },\n  userId: {\n    type: String,\n    required: true,\n  },\n  userEmail: {\n    type: String,\n    required: true,\n  },\n  status: {\n    type: String,\n    enum: ['open', 'in_progress', 'waiting_user', 'waiting_admin', 'resolved', 'closed'],\n    default: 'open',\n  },\n  assignedTo: {\n    type: String,\n  },\n  attachments: [attachmentSchema],\n  replies: [replySchema],\n  resolvedAt: {\n    type: Date,\n  },\n  closedAt: {\n    type: Date,\n  },\n  tags: [{\n    type: String,\n    trim: true,\n  }],\n  internalNotes: {\n    type: String,\n    maxlength: 2000,\n  },\n  customerSatisfactionRating: {\n    type: Number,\n    min: 1,\n    max: 5,\n  },\n  customerSatisfactionComment: {\n    type: String,\n    maxlength: 2000,\n  },\n  estimatedResolutionTime: {\n    type: Date,\n  },\n  country: {\n    type: String,\n    trim: true,\n    maxlength: 10,\n  },\n  outboundCallData: {\n    examples: [{\n      number: {\n        type: String,\n        required: true,\n        trim: true,\n      },\n      callDate: {\n        type: Date,\n        required: true,\n      },\n      description: {\n        type: String,\n        trim: true,\n        maxlength: 500,\n      },\n    }],\n  },\n  assignedNumbers: [{\n    number: {\n      type: String,\n      required: true,\n      trim: true,\n    },\n    description: {\n      type: String,\n      trim: true,\n    },\n    type: {\n      type: String,\n      trim: true,\n    },\n    country: {\n      type: String,\n      trim: true,\n    },\n    rate: {\n      type: Number,\n    },\n    currency: {\n      type: String,\n      trim: true,\n    },\n  }],\n}, {\n  timestamps: true,\n  collection: 'tickets',\n});\n\n// Indexes\nticketSchema.index({ userId: 1 });\nticketSchema.index({ status: 1 });\nticketSchema.index({ service: 1 });\nticketSchema.index({ priority: 1 });\nticketSchema.index({ assignedTo: 1 });\nticketSchema.index({ createdAt: -1 });\n\n// Static method to generate ticket number\nticketSchema.statics.generateTicketNumber = async function(): Promise<string> {\n  const currentYear = new Date().getFullYear();\n  const prefix = `TKT-${currentYear}`;\n  \n  // Find the latest ticket number for the current year\n  const latestTicket = await this.findOne({\n    ticketNumber: { $regex: `^${prefix}` }\n  }).sort({ ticketNumber: -1 });\n  \n  let nextNumber = 1;\n  if (latestTicket && latestTicket.ticketNumber) {\n    const currentNumber = parseInt(latestTicket.ticketNumber.split('-')[2] || '0');\n    nextNumber = currentNumber + 1;\n  }\n  \n  return `${prefix}-${nextNumber.toString().padStart(6, '0')}`;\n};\n\n// Pre-save middleware to generate ticket number\nticketSchema.pre('save', async function(next) {\n  try {\n    if (this.isNew && !this.ticketNumber) {\n      this.ticketNumber = await (this.constructor as ITicketModel).generateTicketNumber();\n    }\n    next();\n  } catch (error) {\n    console.error('Error generating ticket number:', error);\n    next(error as any);\n  }\n});\n\n// Export types\nexport type Ticket = ITicket;\nexport type TicketAttachment = ITicketAttachment;\nexport type TicketReply = ITicketReply;\n\n// Create and export the model\nconst TicketModel = (mongoose.models.Ticket as ITicketModel) || \n  mongoose.model<ITicketDocument, ITicketModel>('Ticket', ticketSchema);\n\nexport default TicketModel; ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/models/User.ts","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"The `{}` (\"empty object\") type allows any non-nullish value, including literals like `0` and `\"\"`.\n- If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.","line":36,"column":49,"nodeType":"TSTypeLiteral","messageId":"noEmptyObject","endLine":36,"endColumn":51,"suggestions":[{"messageId":"replaceEmptyObjectType","data":{"replacement":"object"},"fix":{"range":[975,977],"text":"object"},"desc":"Replace `{}` with `object`."},{"messageId":"replaceEmptyObjectType","data":{"replacement":"unknown"},"fix":{"range":[975,977],"text":"unknown"},"desc":"Replace `{}` with `unknown`."}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"The `{}` (\"empty object\") type allows any non-nullish value, including literals like `0` and `\"\"`.\n- If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.","line":37,"column":58,"nodeType":"TSTypeLiteral","messageId":"noEmptyObject","endLine":37,"endColumn":60,"suggestions":[{"messageId":"replaceEmptyObjectType","data":{"replacement":"object"},"fix":{"range":[1052,1054],"text":"object"},"desc":"Replace `{}` with `object`."},{"messageId":"replaceEmptyObjectType","data":{"replacement":"unknown"},"fix":{"range":[1052,1054],"text":"unknown"},"desc":"Replace `{}` with `unknown`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import mongoose, { Document, Model, Schema } from 'mongoose';\nimport bcrypt from 'bcryptjs';\nimport crypto from 'crypto';\nimport { UserRole } from '@/types/user';\n\n// Re-export the enum for backward compatibility\nexport { UserRole };\n\n// User interface\nexport interface IUser {\n  email: string;\n  name: string;\n  password: string;\n  role: UserRole;\n  sippyAccountId?: number;\n  sippyCustomerId?: number;\n  isEmailVerified: boolean;\n  emailVerifiedAt?: Date;\n  passwordResetToken?: string;\n  passwordResetExpires?: Date;\n  creationMethod: 'signup' | 'admin';\n  notificationPermissionRequested: boolean;\n  notificationPermissionRequestedAt?: Date;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n// User methods interface\nexport interface IUserMethods {\n  comparePassword(candidatePassword: string): Promise<boolean>;\n  createPasswordResetToken(): string;\n  isPasswordResetTokenValid(token: string): boolean;\n}\n\n// User model interface\nexport interface UserModel extends Model<IUser, {}, IUserMethods> {\n  findByEmail(email: string): Promise<(Document<unknown, {}, IUser> & IUser & IUserMethods) | null>;\n}\n\n// User schema\nconst userSchema = new Schema<IUser, UserModel, IUserMethods>(\n  {\n    email: {\n      type: String,\n      required: [true, 'Please provide an email'],\n      unique: true,\n      lowercase: true,\n      trim: true,\n    },\n    name: {\n      type: String,\n      required: [true, 'Please provide a name'],\n      trim: true,\n    },\n    password: {\n      type: String,\n      required: [true, 'Please provide a password'],\n      minlength: [6, 'Password should be at least 6 characters'],\n      select: false, // Don't return password by default\n    },\n    role: {\n      type: String,\n      enum: Object.values(UserRole),\n      default: UserRole.CLIENT,\n    },\n    sippyAccountId: {\n      type: Number,\n    },\n    sippyCustomerId: {\n      type: Number,\n    },\n    isEmailVerified: {\n      type: Boolean,\n      default: false,\n    },\n    emailVerifiedAt: {\n      type: Date,\n    },\n    passwordResetToken: {\n      type: String,\n    },\n    passwordResetExpires: {\n      type: Date,\n    },\n    creationMethod: {\n      type: String,\n      enum: ['signup', 'admin'],\n      required: true,\n    },\n    notificationPermissionRequested: {\n      type: Boolean,\n      default: false,\n    },\n    notificationPermissionRequestedAt: {\n      type: Date,\n    },\n  },\n  {\n    timestamps: true,\n  }\n);\n\n// Pre-save hook to hash password\nuserSchema.pre('save', async function (next) {\n  // Only hash the password if it's modified (or new)\n  if (!this.isModified('password')) return next();\n\n  try {\n    const salt = await bcrypt.genSalt(10);\n    this.password = await bcrypt.hash(this.password, salt);\n    next();\n  } catch (error) {\n    next(error as Error);\n  }\n});\n\n// Method to compare passwords\nuserSchema.method('comparePassword', async function (candidatePassword: string): Promise<boolean> {\n  return bcrypt.compare(candidatePassword, this.password);\n});\n\n// Static method to find user by email\nuserSchema.static('findByEmail', async function findByEmail(email: string) {\n  return this.findOne({ email }).select('+password');\n});\n\n// Method to create a password reset token\nuserSchema.method('createPasswordResetToken', function () {\n  const resetToken = crypto.randomBytes(32).toString('hex');\n  this.passwordResetToken = crypto.createHash('sha256').update(resetToken).digest('hex');\n  this.passwordResetExpires = new Date(Date.now() + 10 * 60 * 1000); // 10 minutes\n  return resetToken;\n});\n\n// Method to check if a password reset token is valid\nuserSchema.method('isPasswordResetTokenValid', function (token: string): boolean {\n  return (\n    this.passwordResetToken === crypto.createHash('sha256').update(token).digest('hex') &&\n    !!this.passwordResetExpires &&\n    this.passwordResetExpires > new Date()\n  );\n});\n\n// Create and export the User model\nconst User = (mongoose.models.User as UserModel) || mongoose.model<IUser, UserModel>('User', userSchema);\n\nexport default User; ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/models/UserNotificationSettings.ts","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":25,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":25,"endColumn":48,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[733,825],"text":"type IUserNotificationSettingsModel = Model<IUserNotificationSettingsDocument>"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import mongoose, { Document, Model, Schema } from 'mongoose';\n\n// User Notification Settings interface\nexport interface IUserNotificationSettings {\n  userId: string;\n  userEmail: string;\n  lowBalanceThreshold: number;\n  zeroBalanceThreshold: number;\n  negativeBalanceThreshold: number;\n  enableLowBalanceNotifications: boolean;\n  enableZeroBalanceNotifications: boolean;\n  enableNegativeBalanceNotifications: boolean;\n  notificationFrequencyHours: number;\n  currency: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n// User Notification Settings document interface\nexport interface IUserNotificationSettingsDocument extends IUserNotificationSettings, Document {\n  id: string;\n}\n\n// User Notification Settings model interface\nexport interface IUserNotificationSettingsModel extends Model<IUserNotificationSettingsDocument> {}\n\n// Export the main interface for use in other files\nexport type UserNotificationSettings = IUserNotificationSettings;\n\n// User Notification Settings schema\nconst userNotificationSettingsSchema = new Schema<IUserNotificationSettingsDocument, IUserNotificationSettingsModel>(\n  {\n    userId: {\n      type: String,\n      required: [true, 'User ID is required'],\n      unique: true,\n    },\n    userEmail: {\n      type: String,\n      required: [true, 'User email is required'],\n      trim: true,\n      lowercase: true,\n    },\n    lowBalanceThreshold: {\n      type: Number,\n      required: true,\n      default: 10.0000,\n      min: [0, 'Threshold cannot be negative'],\n    },\n    zeroBalanceThreshold: {\n      type: Number,\n      required: true,\n      default: 0.0000,\n    },\n    negativeBalanceThreshold: {\n      type: Number,\n      required: true,\n      default: -0.0001,\n    },\n    enableLowBalanceNotifications: {\n      type: Boolean,\n      required: true,\n      default: true,\n    },\n    enableZeroBalanceNotifications: {\n      type: Boolean,\n      required: true,\n      default: true,\n    },\n    enableNegativeBalanceNotifications: {\n      type: Boolean,\n      required: true,\n      default: true,\n    },\n    notificationFrequencyHours: {\n      type: Number,\n      required: true,\n      default: 24,\n      min: [1, 'Frequency must be at least 1 hour'],\n      max: [168, 'Frequency cannot exceed 168 hours (1 week)'],\n    },\n    currency: {\n      type: String,\n      required: true,\n      default: 'EUR',\n      uppercase: true,\n    },\n  },\n  {\n    timestamps: true,\n    collection: 'user_notification_settings',\n  }\n);\n\n// Add indexes for better query performance\nuserNotificationSettingsSchema.index({ userEmail: 1 });\n\n// Create and export the UserNotificationSettings model\nconst UserNotificationSettingsModel = (mongoose.models.UserNotificationSettings as IUserNotificationSettingsModel) || \n  mongoose.model<IUserNotificationSettingsDocument, IUserNotificationSettingsModel>('UserNotificationSettings', userNotificationSettingsSchema);\n\nexport default UserNotificationSettingsModel; ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/models/UserOnboarding.ts","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":66,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":66,"endColumn":38,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[1610,1682],"text":"type IUserOnboardingModel = Model<IUserOnboardingDocument>"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import mongoose, { Document, Model, Schema } from 'mongoose';\n\n// Contact method interface\nexport interface IContactMethod {\n  type: 'phone' | 'email' | 'whatsapp' | 'other';\n  value: string;\n  description?: string; // For 'other' type\n}\n\n// Service interest interface\nexport interface IServiceInterest {\n  service: 'outbound_calls' | 'inbound_calls' | 'did_numbers' | 'sms' | 'emailing' | 'whatsapp_business' | 'other';\n  description?: string; // For 'other' service\n  countries?: string[]; // For calls, SMS, WhatsApp\n}\n\n// Traffic volume interface\nexport interface ITrafficVolume {\n  type: 'volume' | 'agents';\n  value: number;\n  unit: 'minutes' | 'calls' | 'sms' | 'agents';\n  period: 'daily' | 'weekly' | 'monthly' | 'yearly';\n}\n\n// User onboarding interface\nexport interface IUserOnboarding {\n  userId: string;\n  // Company details\n  companyName: string;\n  address: {\n    street: string;\n    city: string;\n    postalCode: string;\n    country: string;\n    state?: string;\n  };\n  phoneNumber: string;\n  preferredContactMethods: IContactMethod[];\n  \n  // Services\n  servicesInterested: IServiceInterest[];\n  trafficVolume: ITrafficVolume;\n  \n  // Additional info\n  additionalNotes?: string;\n  \n  // Status\n  completed: boolean;\n  completedAt?: Date;\n  reviewedBy?: string; // Admin user ID who reviewed\n  reviewedAt?: Date;\n  approved?: boolean;\n  adminNotes?: string; // Admin notes about the onboarding\n  \n  // Timestamps\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n// Document interface\nexport interface IUserOnboardingDocument extends IUserOnboarding, Document {\n  id: string;\n}\n\n// Model interface\nexport interface IUserOnboardingModel extends Model<IUserOnboardingDocument> {}\n\n// Contact method schema\nconst contactMethodSchema = new Schema<IContactMethod>({\n  type: {\n    type: String,\n    enum: ['phone', 'email', 'whatsapp', 'other'],\n    required: true,\n  },\n  value: {\n    type: String,\n    required: true,\n  },\n  description: {\n    type: String,\n  },\n}, { _id: false });\n\n// Service interest schema\nconst serviceInterestSchema = new Schema<IServiceInterest>({\n  service: {\n    type: String,\n    enum: ['outbound_calls', 'inbound_calls', 'did_numbers', 'sms', 'emailing', 'whatsapp_business', 'other'],\n    required: true,\n  },\n  description: {\n    type: String,\n  },\n  countries: [{\n    type: String,\n  }],\n}, { _id: false });\n\n// Traffic volume schema\nconst trafficVolumeSchema = new Schema<ITrafficVolume>({\n  type: {\n    type: String,\n    enum: ['volume', 'agents'],\n    required: true,\n  },\n  value: {\n    type: Number,\n    required: true,\n    min: 0,\n  },\n  unit: {\n    type: String,\n    enum: ['minutes', 'calls', 'sms', 'agents'],\n    required: true,\n  },\n  period: {\n    type: String,\n    enum: ['daily', 'weekly', 'monthly', 'yearly'],\n    required: true,\n  },\n}, { _id: false });\n\n// Address schema\nconst addressSchema = new Schema({\n  street: {\n    type: String,\n    required: true,\n  },\n  city: {\n    type: String,\n    required: true,\n  },\n  postalCode: {\n    type: String,\n    required: true,\n  },\n  country: {\n    type: String,\n    required: true,\n  },\n  state: {\n    type: String,\n  },\n}, { _id: false });\n\n// User onboarding schema\nconst userOnboardingSchema = new Schema<IUserOnboardingDocument, IUserOnboardingModel>({\n  userId: {\n    type: String,\n    required: true,\n    unique: true,\n  },\n  companyName: {\n    type: String,\n    required: true,\n    trim: true,\n  },\n  address: {\n    type: addressSchema,\n    required: true,\n  },\n  phoneNumber: {\n    type: String,\n    required: true,\n    trim: true,\n  },\n  preferredContactMethods: {\n    type: [contactMethodSchema],\n    required: true,\n    validate: {\n      validator: function(methods: IContactMethod[]) {\n        return methods.length > 0;\n      },\n      message: 'At least one contact method is required',\n    },\n  },\n  servicesInterested: {\n    type: [serviceInterestSchema],\n    required: true,\n    validate: {\n      validator: function(services: IServiceInterest[]) {\n        return services.length > 0;\n      },\n      message: 'At least one service must be selected',\n    },\n  },\n  trafficVolume: {\n    type: trafficVolumeSchema,\n    required: true,\n  },\n  additionalNotes: {\n    type: String,\n    maxlength: 1000,\n  },\n  completed: {\n    type: Boolean,\n    default: false,\n  },\n  completedAt: {\n    type: Date,\n  },\n  reviewedBy: {\n    type: String,\n  },\n  reviewedAt: {\n    type: Date,\n  },\n  approved: {\n    type: Boolean,\n  },\n  adminNotes: {\n    type: String,\n    maxlength: 1000,\n  },\n}, {\n  timestamps: true,\n  collection: 'user_onboarding',\n});\n\n// Indexes\nuserOnboardingSchema.index({ completed: 1 });\nuserOnboardingSchema.index({ approved: 1 });\nuserOnboardingSchema.index({ createdAt: -1 });\n\n// Export types\nexport type UserOnboarding = IUserOnboarding;\nexport type ContactMethod = IContactMethod;\nexport type ServiceInterest = IServiceInterest;\nexport type TrafficVolume = ITrafficVolume;\n\n// Create and export the model\nconst UserOnboardingModel = (mongoose.models.UserOnboarding as IUserOnboardingModel) || \n  mongoose.model<IUserOnboardingDocument, IUserOnboardingModel>('UserOnboarding', userOnboardingSchema);\n\nexport default UserOnboardingModel; ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/models/WebhookEvent.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/services/AccountActivationService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":72,"column":88,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":91,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2427,2430],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2427,2430],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":88,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2772,2775],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2772,2775],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import SmtpSettingsModel from '@/models/SmtpSettings';\nimport BrandingSettings from '@/models/BrandingSettings';\nimport { connectToDatabase } from '@/lib/db';\nimport { getEmailBrandingStyles } from '@/lib/brandingUtils';\nimport { generateAccountActivationTemplate } from '@/lib/emailTemplates';\nimport { logAndSendEmail } from '@/lib/emailLogger';\nimport nodemailer from 'nodemailer';\n\nexport class AccountActivationService {\n  private static instance: AccountActivationService;\n\n  public static getInstance(): AccountActivationService {\n    if (!AccountActivationService.instance) {\n      AccountActivationService.instance = new AccountActivationService();\n    }\n    return AccountActivationService.instance;\n  }\n\n  /**\n   * Send account activation email when Sippy Account ID is assigned\n   */\n  public async sendActivationEmail(\n    email: string, \n    name: string, \n    sippyAccountId: number,\n    userId?: string\n  ): Promise<void> {\n    try {\n      await connectToDatabase();\n\n      // Get SMTP settings\n      const smtpSettings = await SmtpSettingsModel.findOne().select('+password');\n      if (!smtpSettings || !smtpSettings.enabled) {\n        throw new Error('SMTP not configured or disabled');\n      }\n\n      // Get branding settings\n      const brandingSettings = await BrandingSettings.getSettings();\n      const branding = getEmailBrandingStyles(brandingSettings || {});\n\n      // Create email content\n      const emailContent = this.createActivationEmailContent(name, sippyAccountId, branding);\n\n      // Log and send email\n      await logAndSendEmail(\n        {\n          userId: userId || 'system', // Use provided userId or fallback to 'system'\n          userEmail: email,\n          userName: name,\n          sippyAccountId: sippyAccountId,\n          notificationType: 'account_activation',\n          emailSubject: emailContent.subject,\n          emailBody: emailContent.html,\n          activationData: {\n            sippyAccountId,\n            activatedAt: new Date()\n          }\n        },\n        () => this.sendEmail(email, name, emailContent, smtpSettings)\n      );\n\n      console.log(`Account activation email sent to ${email}`);\n    } catch (error) {\n      console.error(`Failed to send activation email to ${email}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Create account activation email template\n   */\n  private createActivationEmailContent(name: string, sippyAccountId: number, branding: any) {\n    // Use centralized template\n    return generateAccountActivationTemplate({\n      name,\n      sippyAccountId,\n      branding\n    });\n  }\n\n  /**\n   * Send email using nodemailer\n   */\n  private async sendEmail(\n    email: string, \n    name: string, \n    emailContent: { subject: string; html: string; text: string }, \n    smtpSettings: any\n  ): Promise<void> {\n    try {\n      const transporter = nodemailer.createTransport({\n        host: smtpSettings.host,\n        port: smtpSettings.port,\n        secure: smtpSettings.secure,\n        auth: smtpSettings.username && smtpSettings.password ? {\n          user: smtpSettings.username,\n          pass: smtpSettings.password,\n        } : undefined,\n        connectionTimeout: 10000,\n        socketTimeout: 10000,\n        tls: {\n          rejectUnauthorized: false\n        }\n      });\n\n      // Verify connection\n      await transporter.verify();\n\n      await transporter.sendMail({\n        from: smtpSettings.fromName ? `\"${smtpSettings.fromName}\" <${smtpSettings.fromEmail}>` : smtpSettings.fromEmail,\n        to: email,\n        subject: emailContent.subject,\n        text: emailContent.text,\n        html: emailContent.html\n      });\n\n      console.log(`Account activation email sent successfully to ${email}`);\n    } catch (error) {\n      console.error(`Error sending activation email to ${email}:`, error);\n      throw error;\n    }\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/services/CustomerNotificationService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":355,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":355,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11685,11688],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11685,11688],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":450,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":450,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14700,14703],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14700,14703],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_deliveryId' is defined but never used.","line":450,"column":71,"nodeType":null,"messageId":"unusedVar","endLine":450,"endColumn":82},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":474,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":474,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15382,15385],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15382,15385],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":564,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":564,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18533,18536],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18533,18536],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":599,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":599,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19714,19717],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19714,19717],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_deliveryId' is defined but never used.","line":599,"column":69,"nodeType":null,"messageId":"unusedVar","endLine":599,"endColumn":80},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":629,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":629,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20679,20682],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20679,20682],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":703,"column":111,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":703,"endColumn":114,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22665,22668],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22665,22668],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":981,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":981,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[31168,31171],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[31168,31171],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { connectToDatabase } from '@/lib/db';\nimport {\n  CustomerNotificationTemplateModel,\n  ScheduledCustomerNotificationModel,\n  CustomerNotificationDeliveryModel,\n  ICustomerNotificationTemplate,\n  IScheduledCustomerNotification\n} from '@/models/CustomerNotification';\nimport UserModel from '@/models/User';\nimport {\n  CustomerNotificationType,\n  ScheduleStatus,\n  DeliveryChannel,\n  CustomerNotificationTemplate,\n  ScheduledCustomerNotification\n} from '@/types/notifications';\nimport SmtpService from './SmtpService';\nimport { InternalNotificationModel } from '@/models/InternalNotification';\nimport { PushSubscriptionModel } from '@/models/PushSubscription';\nimport webpush from 'web-push';\n\n// Configure webpush\nwebpush.setVapidDetails(\n  'mailto:' + (process.env.VAPID_EMAIL || 'your-email@example.com'),\n  process.env.NEXT_PUBLIC_VAPID_PUBLIC_KEY || '',\n  process.env.VAPID_PRIVATE_KEY || ''\n);\n\ninterface UserFilter {\n  accountStatus?: string[];\n  balanceRange?: { min?: number; max?: number };\n  registrationDateRange?: { from?: Date; to?: Date };\n  lastLoginRange?: { from?: Date; to?: Date };\n  country?: string[];\n  plan?: string[];\n}\n\ninterface DeliveryResult {\n  success: boolean;\n  deliveryId?: string;\n  error?: string;\n  trackingId?: string;\n}\n\ninterface TargetingResult {\n  users: Array<{ id: string; email: string; name?: string }>;\n  count: number;\n  filters: UserFilter;\n}\n\ninterface NotificationUser {\n  id: string;\n  email: string;\n  name?: string;\n  preferences?: {\n    email?: boolean;\n    push?: boolean;\n    sms?: boolean;\n    inApp?: boolean;\n  };\n}\n\n\n\ninterface FilterQuery {\n  [key: string]: unknown;\n  isEmailVerified?: boolean;\n  accountStatus?: { $in: string[] };\n  createdAt?: { $gte?: Date; $lte?: Date };\n  lastLoginAt?: { $gte?: Date; $lte?: Date };\n  'profile.country'?: { $in: string[] };\n  'profile.plan'?: { $in: string[] };\n}\n\ninterface TemplateQuery {\n  [key: string]: unknown;\n  isActive?: boolean;\n  type?: CustomerNotificationType;\n  category?: string;\n  createdBy?: string;\n}\n\ninterface NotificationQuery {\n  [key: string]: unknown;\n  status?: { $in: ScheduleStatus[] };\n  createdBy?: string;\n  templateId?: string;\n}\n\ninterface DeliveryStatsResult {\n  email: { sent: number; delivered: number; opened: number; clicked: number; failed: number };\n  push: { sent: number; delivered: number; clicked: number; failed: number };\n  sms: { sent: number; delivered: number; failed: number };\n  inApp: { sent: number; read: number };\n}\n\ninterface AnalyticsResult {\n  _id: string;\n  count: number;\n  totalRecipients: number;\n}\n\ninterface AnalyticsQuery {\n  [key: string]: unknown;\n  createdAt?: { $gte: Date; $lte: Date };\n}\n\nexport class CustomerNotificationService {\n  private static instance: CustomerNotificationService;\n\n  private constructor() {}\n\n  public static getInstance(): CustomerNotificationService {\n    if (!CustomerNotificationService.instance) {\n      CustomerNotificationService.instance = new CustomerNotificationService();\n    }\n    return CustomerNotificationService.instance;\n  }\n\n  // Template Management\n  async createTemplate(template: Omit<CustomerNotificationTemplate, 'id' | 'createdAt' | 'updatedAt'>): Promise<ICustomerNotificationTemplate> {\n    await connectToDatabase();\n\n    const newTemplate = new CustomerNotificationTemplateModel({\n      ...template,\n      variables: this.extractVariablesFromContent(template.content.html, template.content.text)\n    });\n\n    return await newTemplate.save();\n  }\n\n  async updateTemplate(id: string, updates: Partial<CustomerNotificationTemplate>): Promise<ICustomerNotificationTemplate | null> {\n    await connectToDatabase();\n\n    if (updates.content) {\n      updates.variables = this.extractVariablesFromContent(updates.content.html || '', updates.content.text || '');\n    }\n\n    return await CustomerNotificationTemplateModel.findByIdAndUpdate(\n      id,\n      { ...updates, updatedAt: new Date() },\n      { new: true }\n    );\n  }\n\n  async getTemplate(id: string): Promise<ICustomerNotificationTemplate | null> {\n    await connectToDatabase();\n    return await CustomerNotificationTemplateModel.findById(id);\n  }\n\n  async getTemplates(filters: {\n    isActive?: boolean;\n    type?: CustomerNotificationType;\n    category?: string;\n    createdBy?: string;\n  } = {}): Promise<ICustomerNotificationTemplate[]> {\n    await connectToDatabase();\n\n    const query: TemplateQuery = {};\n    if (filters.isActive !== undefined) query.isActive = filters.isActive;\n    if (filters.type) query.type = filters.type;\n    if (filters.category) query.category = filters.category;\n    if (filters.createdBy) query.createdBy = filters.createdBy;\n\n    return await CustomerNotificationTemplateModel.find(query).sort({ createdAt: -1 });\n  }\n\n  async deleteTemplate(id: string): Promise<boolean> {\n    await connectToDatabase();\n    \n    // Check if template is being used by scheduled notifications\n    const usageCount = await ScheduledCustomerNotificationModel.countDocuments({\n      templateId: id,\n      status: { $in: ['draft', 'scheduled', 'sending'] }\n    });\n\n    if (usageCount > 0) {\n      throw new Error('Cannot delete template that is being used by active notifications');\n    }\n\n    const result = await CustomerNotificationTemplateModel.findByIdAndDelete(id);\n    return !!result;\n  }\n\n  // Scheduled Notification Management\n  async scheduleNotification(notification: Omit<ScheduledCustomerNotification, 'id' | 'createdAt' | 'updatedAt' | 'executionCount' | 'deliveryStats'>): Promise<IScheduledCustomerNotification> {\n    await connectToDatabase();\n\n    // Validate template exists\n    const template = await this.getTemplate(notification.templateId);\n    if (!template) {\n      throw new Error('Template not found');\n    }\n\n    // Calculate estimated recipients\n    const targeting = await this.calculateTargeting(notification.targetUsers);\n\n    const scheduledNotification = new ScheduledCustomerNotificationModel({\n      ...notification,\n      estimatedRecipients: targeting.count,\n      executionCount: 0,\n      deliveryStats: {\n        email: { sent: 0, delivered: 0, opened: 0, clicked: 0, failed: 0 },\n        push: { sent: 0, delivered: 0, clicked: 0, failed: 0 },\n        sms: { sent: 0, delivered: 0, failed: 0 },\n        inApp: { sent: 0, read: 0 }\n      }\n    });\n\n    // Set next execution time\n    if (notification.schedule.type === 'immediate') {\n      scheduledNotification.nextExecutionAt = new Date();\n      scheduledNotification.status = 'scheduled';\n    } else if (notification.schedule.type === 'scheduled' && notification.schedule.scheduledAt) {\n      scheduledNotification.nextExecutionAt = notification.schedule.scheduledAt;\n      scheduledNotification.status = 'scheduled';\n    } else if (notification.schedule.type === 'recurring') {\n      scheduledNotification.nextExecutionAt = notification.schedule.scheduledAt || new Date();\n      scheduledNotification.status = 'scheduled';\n    }\n\n    return await scheduledNotification.save();\n  }\n\n  async updateScheduledNotification(id: string, updates: Partial<ScheduledCustomerNotification>): Promise<IScheduledCustomerNotification | null> {\n    await connectToDatabase();\n\n    const notification = await ScheduledCustomerNotificationModel.findById(id);\n    if (!notification) {\n      return null;\n    }\n\n    // Prevent updates to sent/sending notifications unless it's status change to cancel\n    if (['sending', 'sent'].includes(notification.status) && updates.status !== 'cancelled') {\n      throw new Error('Cannot update notification that is sending or has been sent');\n    }\n\n    // Recalculate targeting if targeting changed\n    if (updates.targetUsers) {\n      const targeting = await this.calculateTargeting(updates.targetUsers);\n      updates.estimatedRecipients = targeting.count;\n    }\n\n    return await ScheduledCustomerNotificationModel.findByIdAndUpdate(\n      id,\n      { ...updates, updatedAt: new Date() },\n      { new: true }\n    ).populate('template');\n  }\n\n  async getScheduledNotification(id: string): Promise<IScheduledCustomerNotification | null> {\n    await connectToDatabase();\n    return await ScheduledCustomerNotificationModel.findById(id).populate('template');\n  }\n\n  async getScheduledNotifications(filters: {\n    status?: ScheduleStatus[];\n    createdBy?: string;\n    templateId?: string;\n  } = {}): Promise<IScheduledCustomerNotification[]> {\n    await connectToDatabase();\n\n    const query: NotificationQuery = {};\n    if (filters.status?.length) query.status = { $in: filters.status };\n    if (filters.createdBy) query.createdBy = filters.createdBy;\n    if (filters.templateId) query.templateId = filters.templateId;\n\n    return await ScheduledCustomerNotificationModel.find(query)\n      .populate('template')\n      .sort({ createdAt: -1 });\n  }\n\n  async deleteScheduledNotification(id: string): Promise<boolean> {\n    await connectToDatabase();\n    \n    const notification = await ScheduledCustomerNotificationModel.findById(id);\n    if (!notification) {\n      return false;\n    }\n\n    // Only allow deletion of draft/cancelled notifications\n    if (!['draft', 'cancelled', 'failed'].includes(notification.status)) {\n      throw new Error('Can only delete draft, cancelled, or failed notifications');\n    }\n\n    const result = await ScheduledCustomerNotificationModel.findByIdAndDelete(id);\n    return !!result;\n  }\n\n  // Execution and Delivery\n  async executeScheduledNotifications(): Promise<void> {\n    await connectToDatabase();\n\n    const now = new Date();\n    const dueNotifications = await ScheduledCustomerNotificationModel.find({\n      status: 'scheduled',\n      nextExecutionAt: { $lte: now }\n    }).populate('template');\n\n    console.log(`Found ${dueNotifications.length} notifications due for execution`);\n\n    for (const notification of dueNotifications) {\n      try {\n        await this.executeNotification(notification);\n      } catch (error) {\n        console.error(`Error executing notification ${notification._id}:`, error);\n        await this.addExecutionError(notification._id.toString(), error instanceof Error ? error.message : 'Unknown error', error);\n      }\n    }\n  }\n\n  private async executeNotification(notification: IScheduledCustomerNotification): Promise<void> {\n    console.log(`Executing notification: ${notification.name} (${notification._id})`);\n\n    // Update status to sending\n    await ScheduledCustomerNotificationModel.findByIdAndUpdate(notification._id.toString(), {\n      status: 'sending',\n      lastExecutedAt: new Date()\n    });\n\n    try {\n      // Get target users\n      const targeting = await this.calculateTargeting(notification.targetUsers);\n      \n      console.log(`Targeting ${targeting.users.length} users`);\n\n      // Update actual recipients count\n      await ScheduledCustomerNotificationModel.findByIdAndUpdate(notification._id.toString(), {\n        actualRecipients: targeting.users.length\n      });\n\n      // Send to each user\n      let totalSent = 0;\n      let totalFailed = 0;\n\n      for (const user of targeting.users) {\n        for (const channel of notification.channels) {\n          if (channel === 'all') {\n            // Send via all available channels\n            await this.deliverToUser(notification, user, 'email');\n            await this.deliverToUser(notification, user, 'push');\n            await this.deliverToUser(notification, user, 'in_app');\n          } else {\n            const result = await this.deliverToUser(notification, user, channel);\n            if (result.success) {\n              totalSent++;\n            } else {\n              totalFailed++;\n            }\n          }\n        }\n      }\n\n      // Update execution count and schedule next execution if recurring\n      const updates: any = {\n        executionCount: notification.executionCount + 1,\n        status: 'sent',\n        sentAt: new Date()\n      };\n\n      if (notification.schedule.type === 'recurring') {\n        const nextExecution = this.calculateNextExecution(notification);\n        if (nextExecution) {\n          updates.nextExecutionAt = nextExecution;\n          updates.status = 'scheduled';\n        } else {\n          updates.status = 'sent'; // No more executions\n        }\n      }\n\n      await ScheduledCustomerNotificationModel.findByIdAndUpdate(notification._id.toString(), updates);\n\n      console.log(`Notification execution completed: ${totalSent} sent, ${totalFailed} failed`);\n\n    } catch (error) {\n      console.error(`Error during notification execution:`, error);\n      \n      await ScheduledCustomerNotificationModel.findByIdAndUpdate(notification._id.toString(), {\n        status: 'failed'\n      });\n\n      await this.addExecutionError(\n        notification._id.toString(), \n        error instanceof Error ? error.message : 'Execution failed', \n        error\n      );\n\n      throw error;\n    }\n  }\n\n  private async deliverToUser(\n    notification: IScheduledCustomerNotification, \n    user: NotificationUser, \n    channel: DeliveryChannel\n  ): Promise<DeliveryResult> {\n    try {\n      // Create delivery record\n      const delivery = new CustomerNotificationDeliveryModel({\n        notificationId: notification._id.toString(),\n        userId: user.id,\n        userEmail: user.email,\n        channel,\n        status: 'pending'\n      });\n\n      const savedDelivery = await delivery.save();\n\n      // Get content (template or overrides)\n      const content = await this.prepareContent(notification, user);\n\n      // Deliver based on channel\n      let result: DeliveryResult;\n      switch (channel) {\n        case 'email':\n          result = await this.deliverViaEmail(content, user, savedDelivery._id.toString());\n          break;\n        case 'push':\n          result = await this.deliverViaPush(content, user, savedDelivery._id.toString());\n          break;\n        case 'in_app':\n          result = await this.deliverViaInApp(content, user, savedDelivery._id.toString());\n          break;\n        case 'sms':\n          result = await this.deliverViaSms(content, user, savedDelivery._id.toString());\n          break;\n        default:\n          result = { success: false, error: 'Invalid channel' };\n      }\n\n      // Update delivery record\n      await CustomerNotificationDeliveryModel.findByIdAndUpdate(savedDelivery._id, {\n        status: result.success ? 'sent' : 'failed',\n        error: result.error,\n        sentAt: result.success ? new Date() : undefined,\n        trackingId: result.trackingId\n      });\n\n      return result;\n\n    } catch (error) {\n      console.error(`Error delivering to user ${user.id} via ${channel}:`, error);\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : 'Delivery failed' \n      };\n    }\n  }\n\n  private async deliverViaEmail(content: any, user: NotificationUser, _deliveryId: string): Promise<DeliveryResult> {\n    try {\n      const smtpService = SmtpService.getInstance();\n      \n      const result = await smtpService.sendDefaultEmail({\n        to: user.email,\n        subject: content.subject,\n        html: content.html,\n        text: content.text\n      });\n\n      return {\n        success: result.success,\n        error: result.success ? undefined : result.error,\n        trackingId: result.messageId\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Email delivery failed'\n      };\n    }\n  }\n\n  private async deliverViaPush(content: any, user: NotificationUser, deliveryId: string): Promise<DeliveryResult> {\n    try {\n      await connectToDatabase();\n      \n      // Get active push subscriptions for the user\n      const subscriptions = await PushSubscriptionModel.find({ \n        userId: user.id, \n        isActive: true \n      });\n\n      if (subscriptions.length === 0) {\n        console.log(`No active push subscriptions found for user ${user.id}`);\n        return { \n          success: false, \n          deliveryId, \n          error: 'No active push subscriptions found' \n        };\n      }\n\n      // Send browser push notifications\n      const pushPromises = subscriptions.map(async (sub) => {\n        try {\n          const payload = JSON.stringify({\n            title: content.title || content.pushTitle || content.subject,\n            body: content.body || content.pushBody || content.text || content.message,\n            icon: '/icons/notification-icon.svg',\n            badge: '/icons/notification-badge.svg',\n            tag: `customer_notification_${deliveryId}`,\n            data: {\n              deliveryId: deliveryId,\n              type: 'customer_notification',\n              channel: 'push'\n            },\n            actions: [\n              {\n                action: 'view',\n                title: 'View'\n              },\n              {\n                action: 'dismiss',\n                title: 'Dismiss'\n              }\n            ]\n          });\n\n          await webpush.sendNotification(sub.subscriptionData, payload);\n          console.log(`Browser push notification sent to user ${user.id}`);\n          return { success: true, endpoint: sub.endpoint };\n        } catch (error) {\n          console.error('Failed to send push notification to:', sub.endpoint, error);\n          \n          // If subscription is invalid, mark it as inactive\n          if (error instanceof Error && (\n            error.message.includes('410') || // Gone\n            error.message.includes('invalid') ||\n            error.message.includes('expired')\n          )) {\n            await PushSubscriptionModel.findByIdAndUpdate(sub._id, { \n              isActive: false,\n              updatedAt: new Date()\n            });\n          }\n          \n          return { success: false, endpoint: sub.endpoint, error: error instanceof Error ? error.message : 'Unknown error' };\n        }\n      });\n\n      const results = await Promise.allSettled(pushPromises);\n      const successCount = results.filter(r => r.status === 'fulfilled' && r.value.success).length;\n      \n      if (successCount > 0) {\n        console.log(`Push notifications sent successfully to ${successCount}/${results.length} subscriptions`);\n        return { success: true, deliveryId };\n      } else {\n        return { \n          success: false, \n          deliveryId, \n          error: `Failed to send to all ${results.length} subscriptions` \n        };\n      }\n\n    } catch (error) {\n      console.error('Push notification error:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Push delivery failed'\n      };\n    }\n  }\n\n  private async deliverViaInApp(content: any, user: NotificationUser, deliveryId: string): Promise<DeliveryResult> {\n    try {\n      // Create notification directly in database for the target user\n      await connectToDatabase();\n      const notification = new InternalNotificationModel({\n        userId: user.id,\n        type: 'admin_alert',\n        title: content.title || content.subject,\n        message: content.message || content.text,\n        priority: content.priority || 'medium',\n        status: 'unread',\n        data: {\n          type: 'customer_notification',\n          deliveryId: deliveryId,\n          channel: 'in_app'\n        },\n        icon: '💬',\n        sound: 'default',\n        showToast: true,\n        showPush: false,\n        persistent: false\n      });\n\n      await notification.save();\n      console.log(`In-app notification created for user ${user.id}: ${content.title || content.subject}`);\n      return { success: true, deliveryId };\n    } catch (error) {\n      console.error('In-app notification error:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'In-app delivery failed'\n      };\n    }\n  }\n\n  private async deliverViaSms(content: any, user: NotificationUser, _deliveryId: string): Promise<DeliveryResult> {\n    try {\n      // This would integrate with your SMS service\n      console.log(`SMS sent to user ${user.id}: ${content.smsContent}`);\n      return { success: true };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'SMS delivery failed'\n      };\n    }\n  }\n\n  // Helper Methods\n  private extractVariablesFromContent(html: string, text: string): string[] {\n    const content = `${html} ${text}`;\n    const variableRegex = /\\{\\{([^}]+)\\}\\}/g;\n    const variables = new Set<string>();\n    \n    let match;\n    while ((match = variableRegex.exec(content)) !== null) {\n      variables.add(match[1].trim());\n    }\n    \n    return Array.from(variables);\n  }\n\n  private async calculateTargeting(targetUsers: ScheduledCustomerNotification['targetUsers']): Promise<TargetingResult> {\n    await connectToDatabase();\n\n    let query: any = {};\n\n    switch (targetUsers.type) {\n      case 'all':\n        // No additional filters\n        break;\n      case 'role':\n        if (targetUsers.roles?.length) {\n          query.role = { $in: targetUsers.roles };\n        }\n        break;\n      case 'specific':\n        if (targetUsers.userIds?.length) {\n          query._id = { $in: targetUsers.userIds };\n        } else {\n          return {\n            users: [],\n            count: 0,\n            filters: query\n          };\n        }\n        break;\n      case 'filter':\n        if (targetUsers.filters) {\n          query = this.buildFilterQuery(targetUsers.filters);\n        }\n        break;\n    }\n    \n    try {\n      const users = await UserModel.find(query, { _id: 1, email: 1, name: 1 }).lean();\n      \n      const result = {\n        users: users.map(u => ({ id: u._id.toString(), email: u.email, name: u.name })),\n        count: users.length,\n        filters: query\n      };\n      \n      return result;\n    } catch (error) {\n      console.error('Error in targeting calculation:', error);\n      throw error;\n    }\n  }\n\n  private buildFilterQuery(filters: UserFilter): FilterQuery {\n    const query: FilterQuery = {};\n\n    if (filters.accountStatus?.length) {\n      query.accountStatus = { $in: filters.accountStatus };\n    }\n\n    if (filters.registrationDateRange) {\n      const dateQuery: { $gte?: Date; $lte?: Date } = {};\n      if (filters.registrationDateRange.from) {\n        dateQuery.$gte = filters.registrationDateRange.from;\n      }\n      if (filters.registrationDateRange.to) {\n        dateQuery.$lte = filters.registrationDateRange.to;\n      }\n      if (Object.keys(dateQuery).length > 0) {\n        query.createdAt = dateQuery;\n      }\n    }\n\n    if (filters.country?.length) {\n      query.country = { $in: filters.country };\n    }\n\n    // Add more filter conditions as needed\n\n    return query;\n  }\n\n  private async prepareContent(notification: IScheduledCustomerNotification, user: NotificationUser): Promise<any> {\n    const template = notification.template;\n    if (!template) {\n      throw new Error('Template not found');\n    }\n\n    // Start with template content\n    const content = {\n      subject: notification.contentOverrides?.subject || template.subject,\n      html: notification.contentOverrides?.html || template.content.html,\n      text: notification.contentOverrides?.text || template.content.text,\n      pushTitle: notification.contentOverrides?.pushTitle || template.content.pushTitle,\n      pushBody: notification.contentOverrides?.pushBody || template.content.pushBody,\n      smsContent: notification.contentOverrides?.smsContent || template.content.smsContent\n    };\n\n    // Replace variables\n    const variables = {\n      name: user.name || 'Customer',\n      email: user.email,\n      ...notification.templateVariables\n    };\n\n    for (const [key, value] of Object.entries(variables)) {\n      const regex = new RegExp(`\\\\{\\\\{\\\\s*${key}\\\\s*\\\\}\\\\}`, 'g');\n      content.subject = content.subject.replace(regex, String(value));\n      content.html = content.html.replace(regex, String(value));\n      content.text = content.text.replace(regex, String(value));\n      if (content.pushTitle) content.pushTitle = content.pushTitle.replace(regex, String(value));\n      if (content.pushBody) content.pushBody = content.pushBody.replace(regex, String(value));\n      if (content.smsContent) content.smsContent = content.smsContent.replace(regex, String(value));\n    }\n\n    return content;\n  }\n\n  private calculateNextExecution(notification: IScheduledCustomerNotification): Date | null {\n    if (notification.schedule.type !== 'recurring' || !notification.schedule.recurrence) {\n      return null;\n    }\n\n    const { type, interval, endDate, maxOccurrences } = notification.schedule.recurrence;\n    \n    if (maxOccurrences && notification.executionCount >= maxOccurrences) {\n      return null;\n    }\n\n    const baseDate = notification.lastExecutedAt || notification.createdAt;\n    const nextDate = new Date(baseDate);\n\n    switch (type) {\n      case 'daily':\n        nextDate.setDate(nextDate.getDate() + interval);\n        break;\n      case 'weekly':\n        nextDate.setDate(nextDate.getDate() + (interval * 7));\n        break;\n      case 'monthly':\n        nextDate.setMonth(nextDate.getMonth() + interval);\n        break;\n      case 'yearly':\n        nextDate.setFullYear(nextDate.getFullYear() + interval);\n        break;\n      default:\n        return null;\n    }\n\n    if (endDate && nextDate > endDate) {\n      return null;\n    }\n\n    return nextDate;\n  }\n\n  private async addExecutionError(notificationId: string, message: string, details?: unknown): Promise<void> {\n    await ScheduledCustomerNotificationModel.findByIdAndUpdate(notificationId, {\n      $push: {\n        executionErrors: {\n          timestamp: new Date(),\n          message,\n          details\n        }\n      }\n    });\n  }\n\n  // Analytics and Reporting\n  async getDeliveryStats(notificationId: string): Promise<DeliveryStatsResult> {\n    await connectToDatabase();\n\n    const deliveries = await CustomerNotificationDeliveryModel.aggregate([\n      { $match: { notificationId } },\n      {\n        $group: {\n          _id: { channel: '$channel', status: '$status' },\n          count: { $sum: 1 }\n        }\n      }\n    ]);\n\n    const stats: DeliveryStatsResult = {\n      email: { sent: 0, delivered: 0, opened: 0, clicked: 0, failed: 0 },\n      push: { sent: 0, delivered: 0, clicked: 0, failed: 0 },\n      sms: { sent: 0, delivered: 0, failed: 0 },\n      inApp: { sent: 0, read: 0 }\n    };\n\n    deliveries.forEach(item => {\n      const { channel, status } = item._id;\n      if (channel in stats && typeof stats[channel as keyof DeliveryStatsResult] === 'object') {\n        const channelStats = stats[channel as keyof DeliveryStatsResult] as Record<string, number>;\n        if (status in channelStats) {\n          channelStats[status] = item.count;\n        }\n      }\n    });\n\n    return stats;\n  }\n\n  async getNotificationAnalytics(dateRange?: { from: Date; to: Date }): Promise<AnalyticsResult[]> {\n    await connectToDatabase();\n\n    const matchQuery: AnalyticsQuery = {};\n    if (dateRange) {\n      matchQuery.createdAt = {\n        $gte: dateRange.from,\n        $lte: dateRange.to\n      };\n    }\n\n    const analytics = await ScheduledCustomerNotificationModel.aggregate([\n      { $match: matchQuery },\n      {\n        $group: {\n          _id: '$status',\n          count: { $sum: 1 },\n          totalRecipients: { $sum: '$actualRecipients' }\n        }\n      }\n    ]);\n\n    return analytics;\n  }\n\n  // Instant Notification\n  async sendInstantNotification(notification: {\n    title: string;\n    message: string;\n    targetUsers: ScheduledCustomerNotification['targetUsers'];\n    priority: string;\n    channels: DeliveryChannel[];\n    createdBy: string;\n  }): Promise<{ recipientCount: number; deliveryIds: string[] }> {\n    await connectToDatabase();\n\n    // Calculate target users\n    const targeting = await this.calculateTargeting(notification.targetUsers);\n    \n    if (targeting.count === 0) {\n      throw new Error('No users match the targeting criteria');\n    }\n\n    const deliveryIds: string[] = [];\n    const deliveryPromises: Promise<void>[] = [];\n\n    // Process each user and channel combination\n    for (const user of targeting.users) {\n      for (const channel of notification.channels) {\n        const deliveryPromise = this.deliverInstantMessage(\n          notification,\n          user,\n          channel\n        ).then((result: DeliveryResult) => {\n          if (result.deliveryId) {\n            deliveryIds.push(result.deliveryId);\n          }\n        }).catch((error: unknown) => {\n          console.error(`Failed to deliver instant message to ${user.id} via ${channel}:`, error);\n        });\n        \n        deliveryPromises.push(deliveryPromise);\n      }\n    }\n\n    // Execute all delivery operations in parallel\n    await Promise.allSettled(deliveryPromises);\n\n    return {\n      recipientCount: targeting.count,\n      deliveryIds\n    };\n  }\n\n  private async deliverInstantMessage(\n    notification: {\n      title: string;\n      message: string;\n      priority: string;\n      createdBy: string;\n    },\n    user: NotificationUser,\n    channel: DeliveryChannel\n  ): Promise<DeliveryResult> {\n    const deliveryId = `instant_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    try {\n      // Create delivery record\n      await connectToDatabase();\n      const delivery = new CustomerNotificationDeliveryModel({\n        notificationId: 'instant',\n        userId: user.id,\n        userEmail: user.email,\n        channel,\n        content: JSON.stringify({\n          title: notification.title,\n          message: notification.message\n        }),\n        status: 'pending',\n        metadata: {\n          deliveryId,\n          createdBy: notification.createdBy,\n          priority: notification.priority\n        }\n      });\n      \n      await delivery.save();\n\n      // Deliver based on channel\n      let result: DeliveryResult;\n      \n      switch (channel) {\n        case 'email':\n          result = await this.deliverViaEmail({\n            subject: notification.title,\n            html: `<p>${notification.message}</p>`,\n            text: notification.message\n          }, user, deliveryId);\n          break;\n          \n        case 'push':\n          result = await this.deliverViaPush({\n            title: notification.title,\n            body: notification.message,\n            priority: notification.priority\n          }, user, deliveryId);\n          break;\n          \n        case 'in_app':\n          result = await this.deliverViaInApp({\n            title: notification.title,\n            message: notification.message,\n            priority: notification.priority\n          }, user, deliveryId);\n          break;\n          \n        case 'sms':\n          result = await this.deliverViaSms({\n            message: `${notification.title}\\n\\n${notification.message}`\n          }, user, deliveryId);\n          break;\n          \n        default:\n          throw new Error(`Unsupported delivery channel: ${channel}`);\n      }\n\n      // Update delivery status\n      await CustomerNotificationDeliveryModel.findOneAndUpdate(\n        { deliveryId },\n        {\n          status: result.success ? 'sent' : 'failed',\n          deliveredAt: result.success ? new Date() : undefined,\n          error: result.error,\n          trackingId: result.trackingId\n        }\n      );\n\n      return result;\n    } catch (error: any) {\n      console.error(`Delivery failed for user ${user.id} via ${channel}:`, error);\n      // Update delivery status to failed\n      await CustomerNotificationDeliveryModel.findOneAndUpdate(\n        { deliveryId },\n        {\n          status: 'failed',\n          error: error.message,\n          failedAt: new Date()\n        }\n      );\n\n      return {\n        success: false,\n        deliveryId,\n        error: error.message\n      };\n    }\n  }\n}\n\nexport default CustomerNotificationService; ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/services/EmailVerificationService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/services/InternalNotificationService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'createDefaultPreferences' is defined but never used.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":57,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1917,1920],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1917,1920],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'userId' is defined but never used.","line":111,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":111,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'userId' is defined but never used.","line":331,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":331,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":331,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":331,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9689,9692],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9689,9692],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":507,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":507,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14468,14471],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14468,14471],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":519,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":519,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14928,14931],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14928,14931],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":544,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":544,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15597,15600],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15597,15600],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":560,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":560,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16094,16097],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16094,16097],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n  InternalNotification, \n  NotificationPreferences, \n  NotificationType, \n  NotificationTemplates,\n  createDefaultPreferences \n} from '@/types/notifications';\nimport NotificationSoundService from './NotificationSoundService';\n\nexport class InternalNotificationService {\n  private static instance: InternalNotificationService;\n  private soundService: NotificationSoundService;\n  private pushNotificationSupported: boolean = false;\n  private pushSubscription: PushSubscription | null = null;\n  private isClient: boolean = false;\n\n  private constructor() {\n    this.isClient = typeof window !== 'undefined';\n    this.soundService = NotificationSoundService.getInstance();\n    if (this.isClient) {\n      this.initializePushNotifications();\n    }\n  }\n\n  public static getInstance(): InternalNotificationService {\n    if (!InternalNotificationService.instance) {\n      InternalNotificationService.instance = new InternalNotificationService();\n    }\n    return InternalNotificationService.instance;\n  }\n\n  private async initializePushNotifications(): Promise<void> {\n    if (!this.isClient) return;\n    \n    if ('serviceWorker' in navigator && 'PushManager' in window) {\n      this.pushNotificationSupported = true;\n      try {\n        // Register service worker for push notifications\n        const registration = await navigator.serviceWorker.register('/sw.js');\n        console.log('Service Worker registered for push notifications');\n        \n        // Check for existing subscription\n        this.pushSubscription = await registration.pushManager.getSubscription();\n      } catch (error) {\n        console.warn('Push notification initialization failed:', error);\n        this.pushNotificationSupported = false;\n      }\n    }\n  }\n\n  /**\n   * Create and send a new internal notification via API\n   */\n  public async createNotification(\n    userId: string,\n    type: NotificationType,\n    data?: Record<string, any>\n  ): Promise<InternalNotification | null> {\n    if (!this.isClient) return null;\n    \n    try {\n      const response = await fetch('/api/notifications', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include', // Include cookies for authentication\n        body: JSON.stringify({\n          type,\n          data\n        })\n      });\n\n      if (!response.ok) {\n        console.error('Failed to create notification:', await response.text());\n        return null;\n      }\n\n      const notification = await response.json();\n\n      // Get user preferences to handle client-side effects\n      const preferences = await this.getUserPreferences(userId);\n      if (preferences) {\n        const template = NotificationTemplates[type];\n        const typePrefs = preferences.typePreferences[type];\n\n        // Handle sound notification\n        if (preferences.enableSounds && typePrefs?.playSound) {\n          await this.soundService.playSound(\n            preferences.soundTheme || template.sound,\n            preferences.soundVolume\n          );\n        }\n\n        // Handle push notification\n        if (preferences.enablePushNotifications && typePrefs?.enablePush) {\n          await this.sendPushNotification(notification, preferences);\n        }\n      }\n\n      return notification;\n    } catch (error) {\n      console.error('Error creating internal notification:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Get user's notification preferences via API\n   */\n  public async getUserPreferences(userId: string): Promise<NotificationPreferences | null> {\n    if (!this.isClient) return null;\n    \n    try {\n      const response = await fetch('/api/notifications/preferences', {\n        credentials: 'include' // Include cookies for authentication\n      });\n\n      if (!response.ok) {\n        console.error('Failed to fetch preferences:', await response.text());\n        return null;\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error getting user preferences:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Update user's notification preferences via API\n   */\n  public async updateUserPreferences(\n    userId: string,\n    updates: Partial<NotificationPreferences>\n  ): Promise<NotificationPreferences | null> {\n    if (!this.isClient) return null;\n    \n    try {\n      const response = await fetch('/api/notifications/preferences', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include', // Include cookies for authentication\n        body: JSON.stringify(updates) // Don't include userId, use authentication\n      });\n\n      if (!response.ok) {\n        console.error('Failed to update preferences:', await response.text());\n        return null;\n      }\n\n      const preferences = await response.json();\n\n      // Update sound service settings\n      if (updates.enableSounds !== undefined) {\n        this.soundService.setEnabled(updates.enableSounds);\n      }\n      if (updates.soundVolume !== undefined) {\n        this.soundService.setVolume(updates.soundVolume);\n      }\n\n      return preferences;\n    } catch (error) {\n      console.error('Error updating user preferences:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Get user's notifications with filtering via API\n   */\n  public async getUserNotifications(\n    userId: string,\n    options: {\n      status?: string[];\n      types?: NotificationType[];\n      limit?: number;\n      offset?: number;\n      search?: string;\n    } = {}\n  ): Promise<{ notifications: InternalNotification[]; total: number }> {\n    if (!this.isClient) return { notifications: [], total: 0 };\n    \n    try {\n      const params = new URLSearchParams();\n      \n      if (options.limit) params.append('limit', options.limit.toString());\n      if (options.offset) params.append('offset', options.offset.toString());\n      if (options.search) params.append('search', options.search);\n      if (options.types?.length) params.append('types', options.types.join(','));\n      if (options.status?.length) params.append('statuses', options.status.join(','));\n\n      const response = await fetch(`/api/notifications?${params}`, {\n        credentials: 'include' // Include cookies for authentication\n      });\n      \n      if (!response.ok) {\n        console.error('Failed to fetch notifications:', await response.text());\n        return { notifications: [], total: 0 };\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error getting user notifications:', error);\n      return { notifications: [], total: 0 };\n    }\n  }\n\n  /**\n   * Mark notification as read via API\n   */\n  public async markAsRead(notificationId: string, userId: string): Promise<boolean> {\n    if (!this.isClient) return false;\n    \n    try {\n      const response = await fetch(`/api/notifications/${notificationId}/read`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ userId })\n      });\n\n      return response.ok;\n    } catch (error) {\n      console.error('Error marking notification as read:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Mark all notifications as read for a user via API\n   */\n  public async markAllAsRead(userId: string): Promise<number> {\n    if (!this.isClient) return 0;\n    \n    try {\n      const response = await fetch('/api/notifications/mark-all-read', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ userId })\n      });\n\n      if (!response.ok) return 0;\n      \n      const result = await response.json();\n      return result.count || 0;\n    } catch (error) {\n      console.error('Error marking all notifications as read:', error);\n      return 0;\n    }\n  }\n\n  /**\n   * Archive notification via API\n   */\n  public async archiveNotification(notificationId: string, userId: string): Promise<boolean> {\n    if (!this.isClient) return false;\n    \n    try {\n      const response = await fetch(`/api/notifications/${notificationId}/archive`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ userId })\n      });\n\n      return response.ok;\n    } catch (error) {\n      console.error('Error archiving notification:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Delete notification via API\n   */\n  public async deleteNotification(notificationId: string, userId: string): Promise<boolean> {\n    if (!this.isClient) return false;\n    \n    try {\n      const response = await fetch(`/api/notifications/${notificationId}`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ userId })\n      });\n\n      return response.ok;\n    } catch (error) {\n      console.error('Error deleting notification:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Clear all notifications for a user via API\n   */\n  public async clearAllNotifications(userId: string): Promise<number> {\n    if (!this.isClient) return 0;\n    \n    try {\n      const response = await fetch('/api/notifications/clear-all', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ userId })\n      });\n\n      if (!response.ok) return 0;\n      \n      const result = await response.json();\n      return result.count || 0;\n    } catch (error) {\n      console.error('Error clearing all notifications:', error);\n      return 0;\n    }\n  }\n\n  /**\n   * Get user's notification statistics via API\n   */\n  public async getUserStats(userId: string): Promise<any> {\n    if (!this.isClient) return {};\n    \n    try {\n      const response = await fetch('/api/notifications/stats', {\n        credentials: 'include' // Include cookies for authentication\n      });\n\n      if (!response.ok) {\n        console.error('Failed to fetch stats:', await response.text());\n        return {};\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error getting user stats:', error);\n      return {};\n    }\n  }\n\n  /**\n   * Send push notification\n   */\n  private async sendPushNotification(\n    notification: InternalNotification,\n    preferences: NotificationPreferences\n  ): Promise<void> {\n    if (!this.pushNotificationSupported || !this.pushSubscription || !this.isClient) {\n      return;\n    }\n\n    // Don't send push if user is currently active (tab is focused)\n    if (preferences.pushOnlyWhenAway && !document.hidden) {\n      return;\n    }\n\n    try {\n      const pushPayload = {\n        title: notification.title,\n        body: notification.message,\n        icon: '/icons/notification-icon.svg',\n        badge: '/icons/notification-badge.svg',\n        tag: notification.type,\n        data: {\n          notificationId: notification.id,\n          actionUrl: notification.actionUrl,\n          type: notification.type\n        },\n        actions: [\n          {\n            action: 'view',\n            title: 'View'\n          },\n          {\n            action: 'dismiss',\n            title: 'Dismiss'\n          }\n        ]\n      };\n\n      // Send to service worker for push notification\n      navigator.serviceWorker.ready.then(registration => {\n        registration.showNotification(pushPayload.title, pushPayload);\n      });\n\n    } catch (error) {\n      console.error('Error sending push notification:', error);\n    }\n  }\n\n  /**\n   * Request push notification permission\n   */\n  public async requestPushPermission(): Promise<boolean> {\n    if (!this.pushNotificationSupported || !this.isClient) {\n      return false;\n    }\n\n    try {\n      const permission = await Notification.requestPermission();\n      if (permission === 'granted') {\n        // Subscribe to push notifications\n        const registration = await navigator.serviceWorker.ready;\n        const subscription = await registration.pushManager.subscribe({\n          userVisibleOnly: true,\n          applicationServerKey: this.urlBase64ToUint8Array(\n            process.env.NEXT_PUBLIC_VAPID_PUBLIC_KEY || ''\n          )\n        });\n\n        this.pushSubscription = subscription;\n\n        // Send subscription to server\n        await this.savePushSubscription(subscription);\n        return true;\n      }\n    } catch (error) {\n      console.error('Error requesting push permission:', error);\n    }\n\n    return false;\n  }\n\n  /**\n   * Save push subscription to server\n   */\n  private async savePushSubscription(subscription: PushSubscription): Promise<void> {\n    if (!this.isClient) return;\n    \n    try {\n      const response = await fetch('/api/notifications/push-subscription', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include', // Include cookies for authentication\n        body: JSON.stringify(subscription.toJSON())\n      });\n\n      if (!response.ok) {\n        console.error('Failed to save push subscription:', await response.text());\n        return;\n      }\n\n      console.log('Push subscription saved successfully');\n    } catch (error) {\n      console.error('Error saving push subscription:', error);\n    }\n  }\n\n  /**\n   * Test notification (for settings/preferences)\n   */\n  public async testNotification(\n    userId: string,\n    type: NotificationType\n  ): Promise<void> {\n    const testData = {\n      ticketNumber: 'TEST-123',\n      amount: '50.00',\n      currency: 'USD',\n      phoneNumber: '+1234567890',\n      message: 'This is a test notification'\n    };\n\n    await this.createNotification(userId, type, testData);\n  }\n\n  /**\n   * Helper function to convert VAPID key\n   */\n  private urlBase64ToUint8Array(base64String: string): Uint8Array {\n    if (!this.isClient) return new Uint8Array();\n    \n    const padding = '='.repeat((4 - base64String.length % 4) % 4);\n    const base64 = (base64String + padding)\n      .replace(/\\-/g, '+')\n      .replace(/_/g, '/');\n\n    const rawData = window.atob(base64);\n    const outputArray = new Uint8Array(rawData.length);\n\n    for (let i = 0; i < rawData.length; ++i) {\n      outputArray[i] = rawData.charCodeAt(i);\n    }\n    return outputArray;\n  }\n\n  /**\n   * Integration methods for existing notification systems\n   */\n\n  // Called when email notifications are sent to also create internal notifications\n  public async onEmailNotificationSent(\n    userId: string,\n    type: NotificationType,\n    data: Record<string, any>\n  ): Promise<void> {\n    // Only create internal notification if different from email\n    const preferences = await this.getUserPreferences(userId);\n    if (preferences?.typePreferences[type]?.enabled) {\n      await this.createNotification(userId, type, data);\n    }\n  }\n\n  // Called when tickets are created/updated to send notifications\n  public async onTicketEvent(\n    event: 'created' | 'updated' | 'assigned' | 'reply' | 'resolved',\n    ticketData: any,\n    userId: string\n  ): Promise<void> {\n    const typeMap: Record<string, NotificationType> = {\n      created: 'ticket_created',\n      updated: 'ticket_updated',\n      assigned: 'ticket_assigned',\n      reply: 'ticket_reply',\n      resolved: 'ticket_resolved'\n    };\n\n    const type = typeMap[event];\n    if (type) {\n      await this.createNotification(userId, type, {\n        ticketNumber: ticketData.ticketNumber,\n        status: ticketData.status,\n        priority: ticketData.priority,\n        title: ticketData.title\n      });\n    }\n  }\n\n  // Called when payments are processed\n  public async onPaymentEvent(\n    event: 'success' | 'failed',\n    paymentData: any,\n    userId: string\n  ): Promise<void> {\n    const type = event === 'success' ? 'payment_success' : 'payment_failed';\n    \n    await this.createNotification(userId, type, {\n      amount: paymentData.amount,\n      currency: paymentData.currency,\n      paymentId: paymentData.id,\n      reason: paymentData.failureReason\n    });\n  }\n\n  // Called when phone number events occur\n  public async onPhoneNumberEvent(\n    event: 'approved' | 'rejected' | 'purchased' | 'assigned',\n    phoneNumberData: any,\n    userId: string\n  ): Promise<void> {\n    const typeMap: Record<string, NotificationType> = {\n      approved: 'phone_number_approved',\n      rejected: 'phone_number_rejected',\n      purchased: 'phone_number_purchased',\n      assigned: 'phone_number_assigned'\n    };\n\n    const type = typeMap[event];\n    if (type) {\n      await this.createNotification(userId, type, {\n        phoneNumber: phoneNumberData.number,\n        country: phoneNumberData.country,\n        type: phoneNumberData.type\n      });\n    }\n  }\n}\n\nexport default InternalNotificationService; ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/services/NotificationService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":74,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3119,3122],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3119,3122],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":287,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":287,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10362,10365],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10362,10365],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":308,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":308,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11309,11312],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11309,11312],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":350,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":350,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12516,12519],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12516,12519],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":406,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":406,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14399,14402],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14399,14402],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":453,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":453,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16154,16157],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16154,16157],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":527,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":527,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18498,18501],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18498,18501],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":599,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":599,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21168,21171],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21168,21171],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":645,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":645,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23150,23153],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23150,23153],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":665,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":665,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23978,23981],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23978,23981],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NotificationLog, LowBalanceSettings } from '@/models/NotificationLog';\nimport { ISmtpSettings } from '@/types/smtp';\nimport UserNotificationSettingsModel, { UserNotificationSettings } from '@/models/UserNotificationSettings';\nimport SmtpSettingsModel from '@/models/SmtpSettings';\nimport BrandingSettings from '@/models/BrandingSettings';\nimport { NotificationLog as NotificationLogModel } from '@/models/NotificationLog';\nimport User from '@/models/User';\nimport { connectToDatabase } from '@/lib/db';\nimport { getSippyApiCredentials } from '@/lib/sippyClientConfig';\nimport { SippyClient, AccountInfo } from '@/lib/sippyClient';\nimport { getEmailBrandingStyles } from '@/lib/brandingUtils';\nimport { generateBalanceNotificationTemplate } from '@/lib/emailTemplates';\nimport nodemailer from 'nodemailer';\nimport SmtpService from '@/services/SmtpService';\n\n// This would typically integrate with your user database and Sippy API\ninterface UserAccount {\n  id: string;\n  name: string;\n  email: string;\n  sippyAccountId: number;\n  balance: number;\n  currency: string;\n}\n\n/**\n * Parse XML-RPC response from Sippy API to extract account information\n */\nfunction parseAccountInfoXml(xmlString: string): AccountInfo | null {\n  try {\n    if (typeof xmlString !== 'string') {\n      // If it's already parsed, return it\n      return xmlString as AccountInfo;\n    }\n\n    console.log('Parsing XML response, length:', xmlString.length);\n    console.log('XML preview:', xmlString.substring(0, 500));\n\n    // Check for fault response first\n    const faultRegex = new RegExp('<fault>\\\\s*<value>\\\\s*<struct>(.*?)</struct>\\\\s*</value>\\\\s*</fault>', 's');\n    const faultMatch = xmlString.match(faultRegex);\n    if (faultMatch) {\n      const faultContent = faultMatch[1];\n      const codeMatch = faultContent.match(/<name>faultCode<\\/name>\\s*<value>\\s*<int>(\\d+)<\\/int>/);\n      const messageMatch = faultContent.match(/<name>faultString<\\/name>\\s*<value>\\s*<string>([^<]*)<\\/string>/);\n      \n      const faultCode = codeMatch ? parseInt(codeMatch[1], 10) : 'Unknown';\n      const faultMessage = messageMatch ? messageMatch[1] : 'Unknown error';\n      \n      throw new Error(`Sippy API Fault ${faultCode}: ${faultMessage}`);\n    }\n\n    // Look for the main struct containing account data\n    const structRegex = new RegExp('<methodResponse>\\\\s*<params>\\\\s*<param>\\\\s*<value>\\\\s*<struct>(.*?)</struct>\\\\s*</value>\\\\s*</param>\\\\s*</params>\\\\s*</methodResponse>', 's');\n    const structMatch = xmlString.match(structRegex);\n    \n    if (!structMatch) {\n      console.log('No struct found in XML response');\n      return null;\n    }\n\n    const structContent = structMatch[1];\n    const result: Partial<AccountInfo> = {};\n    \n    // Extract all members from the struct\n    const memberRegex = new RegExp('<member>\\\\s*<name>([^<]+)</name>\\\\s*<value>\\\\s*<([^>]+)>([^<]*)</[^>]+>\\\\s*</value>\\\\s*</member>', 'g');\n    let memberMatch;\n    let memberCount = 0;\n    \n    while ((memberMatch = memberRegex.exec(structContent)) !== null) {\n      memberCount++;\n      const [, name, type, value] = memberMatch;\n      \n      let parsedValue: any;\n      switch (type) {\n        case 'int':\n          parsedValue = parseInt(value || '0', 10);\n          break;\n        case 'double':\n          parsedValue = parseFloat(value || '0');\n          break;\n        case 'string':\n          parsedValue = value || '';\n          break;\n        case 'boolean':\n          parsedValue = value === '1' || value === 'true';\n          break;\n        case 'nil':\n          parsedValue = null;\n          break;\n        default:\n          parsedValue = value || '';\n      }\n      \n      // Convert field names to match the AccountInfo interface\n      const fieldName = name as keyof AccountInfo;\n      result[fieldName] = parsedValue;\n    }\n\n    console.log(`Parsed ${memberCount} fields from XML response`);\n    console.log('Parsed balance field:', result.balance, typeof result.balance);\n    \n    return result as AccountInfo;\n  } catch (error) {\n    console.error('Error parsing account info XML:', error);\n    return null;\n  }\n}\n\nexport class NotificationService {\n  private static instance: NotificationService;\n  \n  private constructor() {}\n  \n  public static getInstance(): NotificationService {\n    if (!NotificationService.instance) {\n      NotificationService.instance = new NotificationService();\n    }\n    return NotificationService.instance;\n  }\n\n  /**\n   * Main method to check all user balances and send notifications\n   */\n  public async checkAndNotifyLowBalances(): Promise<void> {\n    try {\n      console.log('Starting low balance check...');\n      \n      // Check if we have any SMTP accounts configured\n      const smtpService = SmtpService.getInstance();\n      const smtpAccounts = await smtpService.getAllSmtpAccounts();\n      \n      const hasEnabledAccount = Object.values(smtpAccounts).some(accounts => accounts.length > 0);\n      if (!hasEnabledAccount) {\n        console.log('No SMTP accounts configured, skipping notifications');\n        return;\n      }\n\n      // Get all user accounts (this would come from your database)\n      const userAccounts = await this.getUserAccounts();\n      \n      for (const account of userAccounts) {\n        // Get individual user notification settings\n        const userSettings = await this.getUserNotificationSettings(account.id, account.email);\n        if (userSettings) {\n          await this.processAccountBalance(account, userSettings);\n        } else {\n          console.log(`No notification settings found for user ${account.id}, skipping`);\n        }\n      }\n      \n      console.log('Low balance check completed');\n    } catch (error) {\n      console.error('Error in low balance check:', error);\n    }\n  }\n\n  /**\n   * Process a single account's balance and send notifications if needed\n   */\n  private async processAccountBalance(\n    account: UserAccount, \n    settings: UserNotificationSettings\n  ): Promise<void> {\n    const notifications = this.determineNotificationsNeeded(account, settings);\n    \n    for (const notification of notifications) {\n      // Check if we've already sent this type of notification recently\n      const recentNotification = await this.getRecentNotification(\n        account.id,\n        notification.type,\n        settings.notificationFrequencyHours\n      );\n      \n      if (recentNotification) {\n        console.log(`Skipping ${notification.type} notification for user ${account.id} - recent notification exists`);\n        continue;\n      }\n\n      // Create notification log entry\n      const notificationLog = await this.createNotificationLog(account, notification);\n      \n      // Send email using the new SMTP service with billing category\n      try {\n        const smtpService = SmtpService.getInstance();\n        const emailContent = await this.createEmailContent(account, notification.type, notification.threshold);\n        \n        const result = await smtpService.sendBillingEmail({\n          to: account.email,\n          subject: emailContent.subject,\n          html: emailContent.html,\n          text: emailContent.text\n        });\n\n        if (result.success) {\n          await this.updateNotificationStatus(notificationLog.id, 'sent', new Date(), undefined, result.accountUsed?.fromEmail);\n          console.log(`Sent ${notification.type} notification to ${account.email} using ${result.accountUsed?.name} (${result.accountUsed?.category})`);\n        } else {\n          await this.updateNotificationStatus(\n            notificationLog.id, \n            'failed', \n            undefined, \n            result.error || 'Unknown error',\n            result.accountUsed?.fromEmail\n          );\n          console.error(`Failed to send ${notification.type} notification to ${account.email}: ${result.error}`);\n        }\n      } catch (error) {\n        await this.updateNotificationStatus(\n          notificationLog.id, \n          'failed', \n          undefined, \n          error instanceof Error ? error.message : 'Unknown error',\n          undefined\n        );\n        console.error(`Failed to send ${notification.type} notification to ${account.email}:`, error);\n      }\n    }\n  }\n\n  /**\n   * Determine what notifications are needed for an account\n   */\n  private determineNotificationsNeeded(\n    account: UserAccount, \n    settings: UserNotificationSettings\n  ): Array<{ type: 'low_balance' | 'zero_balance' | 'negative_balance', threshold: number }> {\n    const notifications = [];\n\n    // Check negative balance first (most critical)\n    if (settings.enableNegativeBalanceNotifications && \n        account.balance <= settings.negativeBalanceThreshold) {\n      notifications.push({ \n        type: 'negative_balance' as const, \n        threshold: settings.negativeBalanceThreshold \n      });\n    }\n    // Check zero balance\n    else if (settings.enableZeroBalanceNotifications && \n             account.balance <= settings.zeroBalanceThreshold) {\n      notifications.push({ \n        type: 'zero_balance' as const, \n        threshold: settings.zeroBalanceThreshold \n      });\n    }\n    // Check low balance\n    else if (settings.enableLowBalanceNotifications && \n             account.balance <= settings.lowBalanceThreshold) {\n      notifications.push({ \n        type: 'low_balance' as const, \n        threshold: settings.lowBalanceThreshold \n      });\n    }\n\n    return notifications;\n  }\n\n  /**\n   * Create email content based on notification type\n   */\n  public async createEmailContent(account: UserAccount, notificationType: string, threshold: number): Promise<{ subject: string; html: string; text: string }> {\n    // Get branding settings\n    const brandingSettings = await BrandingSettings.getSettings();\n    const branding = getEmailBrandingStyles(brandingSettings || {});\n\n    // Use centralized template\n    const emailContent = generateBalanceNotificationTemplate({\n      account,\n      threshold,\n      notificationType: notificationType as 'low_balance' | 'zero_balance' | 'negative_balance',\n      branding\n    });\n\n    return emailContent;\n  }\n\n  /**\n   * Real implementation methods - replacing the mock ones\n   */\n  private async getLowBalanceSettings(): Promise<LowBalanceSettings | null> {\n    try {\n      await connectToDatabase();\n      const settings = await LowBalanceSettings.findOne();\n      if (!settings) return null;\n      \n      return {\n        id: (settings._id as any).toString(),\n        lowBalanceThreshold: settings.lowBalanceThreshold,\n        zeroBalanceThreshold: settings.zeroBalanceThreshold,\n        negativeBalanceThreshold: settings.negativeBalanceThreshold,\n        enableLowBalanceNotifications: settings.enableLowBalanceNotifications,\n        enableZeroBalanceNotifications: settings.enableZeroBalanceNotifications,\n        enableNegativeBalanceNotifications: settings.enableNegativeBalanceNotifications,\n        notificationFrequencyHours: settings.notificationFrequencyHours,\n        createdAt: settings.createdAt,\n        updatedAt: settings.updatedAt\n      };\n    } catch (error) {\n      console.error('Error fetching low balance settings:', error);\n      return null;\n    }\n  }\n\n  private async getSmtpSettings(): Promise<ISmtpSettings | null> {\n    try {\n      await connectToDatabase();\n      const settings = await SmtpSettingsModel.findOne().select('+password');\n      return settings as any;\n    } catch (error) {\n      console.error('Error fetching SMTP settings:', error);\n      return null;\n    }\n  }\n\n  private async getUserAccounts(): Promise<UserAccount[]> {\n    try {\n      await connectToDatabase();\n      \n      // Get all users with Sippy account IDs (filter out undefined/null values)\n      const users = await User.find({ \n        sippyAccountId: { $exists: true, $ne: null, $type: 'number' } \n      });\n      \n      if (users.length === 0) {\n        return [];\n      }\n\n      // Get Sippy API credentials\n      const credentials = await getSippyApiCredentials();\n      if (!credentials) {\n        return [];\n      }\n\n      const sippyClient = new SippyClient(credentials);\n      const accounts: UserAccount[] = [];\n\n      // Fetch balance for each user\n      for (const user of users) {\n        // Type guard: skip users without sippyAccountId\n        if (!user.sippyAccountId) {\n          continue;\n        }\n\n        try {\n          const rawResponse = await sippyClient.getAccountInfo({ \n            i_account: user.sippyAccountId \n          });\n          \n          // Parse the XML response to get account info\n          const accountInfo = parseAccountInfoXml(rawResponse as any);\n          \n          if (!accountInfo) {\n            console.error(`Failed to parse account info for user ${user.email}`);\n            continue;\n          }\n          \n          // Sippy API returns inverted balance values (negative for positive, positive for negative)\n          // According to documentation: \"For historical reasons the function returns negative number for positive balance and positive number for the negative balance\"\n          const rawBalance = accountInfo.balance || 0;\n          const actualBalance = -rawBalance; // Invert the balance to get the correct value\n          \n          const userAccount = {\n            id: user._id.toString(),\n            name: user.name,\n            email: user.email,\n            sippyAccountId: user.sippyAccountId,\n            balance: actualBalance,\n            currency: accountInfo.payment_currency || 'EUR'\n          };\n          \n          accounts.push(userAccount);\n          \n        } catch (error) {\n          console.error(`Error fetching balance for user ${user.email} (Account ID: ${user.sippyAccountId}):`, error);\n          // Continue with other users\n        }\n      }\n\n      return accounts;\n    } catch (error) {\n      console.error('Error fetching user accounts:', error);\n      return [];\n    }\n  }\n\n  private async getRecentNotification(\n    userId: string, \n    type: string, \n    hoursBack: number\n  ): Promise<NotificationLog | null> {\n    try {\n      await connectToDatabase();\n      \n      const cutoffDate = new Date();\n      cutoffDate.setHours(cutoffDate.getHours() - hoursBack);\n      \n      const recentNotification = await NotificationLogModel.findOne({\n        userId: userId,\n        notificationType: type,\n        createdAt: { $gte: cutoffDate }\n      }).sort({ createdAt: -1 });\n\n      if (!recentNotification) return null;\n\n      return {\n        id: (recentNotification._id as any).toString(),\n        userId: recentNotification.userId,\n        userEmail: recentNotification.userEmail,\n        userName: recentNotification.userName,\n        sippyAccountId: recentNotification.sippyAccountId,\n        notificationType: recentNotification.notificationType,\n        balanceAmount: recentNotification.balanceAmount,\n        thresholdAmount: recentNotification.thresholdAmount,\n        currency: recentNotification.currency,\n        status: recentNotification.status,\n        errorMessage: recentNotification.errorMessage,\n        emailSubject: recentNotification.emailSubject,\n        emailBody: recentNotification.emailBody,\n        sentAt: recentNotification.sentAt,\n        createdAt: recentNotification.createdAt,\n        updatedAt: recentNotification.updatedAt\n      };\n    } catch (error) {\n      console.error('Error checking for recent notifications:', error);\n      return null;\n    }\n  }\n\n  private async createNotificationLog(\n    account: UserAccount, \n    notification: { type: string, threshold: number }\n  ): Promise<NotificationLog> {\n    try {\n      await connectToDatabase();\n      \n      const emailContent = await this.createEmailContent(account, notification.type, notification.threshold);\n\n      const log = await NotificationLogModel.create({\n        userId: account.id,\n        userEmail: account.email,\n        userName: account.name,\n        sippyAccountId: account.sippyAccountId,\n        notificationType: notification.type,\n        balanceAmount: account.balance,\n        thresholdAmount: notification.threshold,\n        currency: account.currency,\n        status: 'pending',\n        emailSubject: emailContent.subject,\n        emailBody: emailContent.html\n      });\n\n      return {\n        id: (log._id as any).toString(),\n        userId: log.userId,\n        userEmail: log.userEmail,\n        userName: log.userName,\n        sippyAccountId: log.sippyAccountId,\n        notificationType: log.notificationType,\n        balanceAmount: log.balanceAmount,\n        thresholdAmount: log.thresholdAmount,\n        currency: log.currency,\n        status: log.status,\n        errorMessage: log.errorMessage,\n        emailSubject: log.emailSubject,\n        emailBody: log.emailBody,\n        sentAt: log.sentAt,\n        createdAt: log.createdAt,\n        updatedAt: log.updatedAt\n      };\n    } catch (error) {\n      console.error('Error creating notification log:', error);\n      throw error;\n    }\n  }\n\n  private async sendEmail(log: NotificationLog, smtpSettings: ISmtpSettings): Promise<void> {\n    try {\n      const transporter = nodemailer.createTransport({\n        host: smtpSettings.host,\n        port: smtpSettings.port,\n        secure: smtpSettings.secure,\n        auth: smtpSettings.username && smtpSettings.password ? {\n          user: smtpSettings.username,\n          pass: smtpSettings.password,\n        } : undefined,\n        connectionTimeout: 10000,\n        socketTimeout: 10000,\n        tls: {\n          rejectUnauthorized: false\n        }\n      });\n\n      // Verify connection before sending\n      await transporter.verify();\n\n      // Generate plain text version for accessibility\n      const textVersion = (log.emailBody || '')\n        .replace(/<[^>]*>/g, '') // Remove HTML tags\n        .replace(/&nbsp;/g, ' ') // Replace &nbsp; with spaces\n        .replace(/\\s+/g, ' ') // Normalize whitespace\n        .trim();\n\n      await transporter.sendMail({\n        from: smtpSettings.fromName ? `\"${smtpSettings.fromName}\" <${smtpSettings.fromEmail}>` : smtpSettings.fromEmail,\n        to: log.userEmail,\n        subject: log.emailSubject,\n        text: textVersion, // Plain text version\n        html: log.emailBody // Rich HTML version with inlined CSS\n      });\n\n    } catch (error) {\n      console.error(`Error sending email to ${log.userEmail}:`, error);\n      throw error;\n    }\n  }\n\n  private async updateNotificationStatus(\n    logId: string, \n    status: 'sent' | 'failed', \n    sentAt?: Date, \n    errorMessage?: string,\n    fromEmail?: string\n  ): Promise<void> {\n    try {\n      await connectToDatabase();\n      \n      const updateData: any = { status, updatedAt: new Date() };\n      if (sentAt) updateData.sentAt = sentAt;\n      if (errorMessage) updateData.errorMessage = errorMessage;\n      if (fromEmail) updateData.fromEmail = fromEmail;\n\n      await NotificationLogModel.findByIdAndUpdate(logId, updateData);\n    } catch (error) {\n      console.error(`Error updating notification status for ${logId}:`, error);\n    }\n  }\n\n  private async getUserNotificationSettings(userId: string, email: string): Promise<UserNotificationSettings | null> {\n    try {\n      // Try to get existing settings\n      let settings = await UserNotificationSettingsModel.findOne({ userId });\n      \n      if (!settings) {\n        // Create default settings for user\n        console.log(`Creating default notification settings for user ${userId}`);\n        settings = await UserNotificationSettingsModel.create({\n          userId: userId,\n          userEmail: email,\n          lowBalanceThreshold: 10.0000,\n          zeroBalanceThreshold: 0.0000,\n          negativeBalanceThreshold: -0.0001, // Any balance below -0.0001 (i.e., any significant negative balance)\n          enableLowBalanceNotifications: true,\n          enableZeroBalanceNotifications: true,\n          enableNegativeBalanceNotifications: true,\n          notificationFrequencyHours: 24,\n          currency: 'EUR'\n        });\n      }\n      \n      return settings;\n    } catch (error) {\n      console.error(`Error fetching notification settings for user ${userId}:`, error);\n      return null;\n    }\n  }\n\n  /**\n   * Resend a specific notification by log ID with fresh balance data\n   */\n  public async resendNotification(logId: string): Promise<void> {\n    try {\n      await connectToDatabase();\n      \n      // Get the notification log\n      const log = await NotificationLogModel.findById(logId);\n      if (!log) {\n        throw new Error('Notification log not found');\n      }\n\n      // Get SMTP settings\n      const smtpSettings = await this.getSmtpSettings();\n      if (!smtpSettings || !smtpSettings.enabled) {\n        throw new Error('SMTP not configured or disabled');\n      }\n\n      // Get current balance from Sippy API for fresh data\n      const credentials = await getSippyApiCredentials();\n      if (!credentials) {\n        throw new Error('Sippy API credentials not configured');\n      }\n\n      const sippyClient = new SippyClient(credentials);\n      let currentBalance = log.balanceAmount; // fallback to original balance\n      \n      try {\n        const rawResponse = await sippyClient.getAccountInfo({ \n          i_account: log.sippyAccountId || 0 // Provide default value\n        });\n        const accountInfo = parseAccountInfoXml(rawResponse as any);\n        if (accountInfo && accountInfo.balance !== undefined) {\n          // Sippy API returns inverted balance values\n          currentBalance = -accountInfo.balance;\n        }\n      } catch (error) {\n        console.warn(`Failed to fetch current balance for account ${log.sippyAccountId}, using original balance:`, error);\n      }\n\n      // Create fresh user account object with current balance\n      const userAccount: UserAccount = {\n        id: log.userId,\n        name: log.userName,\n        email: log.userEmail,\n        sippyAccountId: log.sippyAccountId || 0, // Provide default value\n        balance: currentBalance || 0, // Provide default value\n        currency: log.currency || 'EUR' // Provide default value\n      };\n\n      // Generate fresh email content with current balance and resend indicator\n      const emailContent = await this.createEmailContent(userAccount, log.notificationType, log.thresholdAmount || 0);\n      \n      // Add [RESEND] prefix to subject line\n      const resendSubject = `[RESEND] ${emailContent.subject}`;\n\n      // Validate that we have the required emailBody before attempting to save\n      if (!emailContent.html || typeof emailContent.html !== 'string' || emailContent.html.trim() === '') {\n        throw new Error('Generated email content is invalid - no HTML body');\n      }\n\n      // Create new notification log for the resend with current data\n      const resendLog = await NotificationLogModel.create({\n        userId: log.userId,\n        userEmail: log.userEmail,\n        userName: log.userName,\n        sippyAccountId: log.sippyAccountId,\n        notificationType: log.notificationType,\n        balanceAmount: currentBalance, // Use current balance\n        thresholdAmount: log.thresholdAmount,\n        currency: log.currency,\n        status: 'pending',\n        emailSubject: resendSubject,\n        emailBody: emailContent.html\n      });\n\n      const resendNotificationLog: NotificationLog = {\n        id: (resendLog._id as any).toString(),\n        userId: resendLog.userId,\n        userEmail: resendLog.userEmail,\n        userName: resendLog.userName,\n        sippyAccountId: resendLog.sippyAccountId,\n        notificationType: resendLog.notificationType,\n        balanceAmount: resendLog.balanceAmount,\n        thresholdAmount: resendLog.thresholdAmount,\n        currency: resendLog.currency,\n        status: resendLog.status,\n        errorMessage: resendLog.errorMessage,\n        emailSubject: resendLog.emailSubject,\n        emailBody: resendLog.emailBody,\n        sentAt: resendLog.sentAt,\n        createdAt: resendLog.createdAt,\n        updatedAt: resendLog.updatedAt\n      };\n\n      // Send the email with fresh content\n      await this.sendEmail(resendNotificationLog, smtpSettings);\n      await this.updateNotificationStatus((resendLog._id as any).toString(), 'sent', new Date(), undefined, resendLog.fromEmail);\n      \n    } catch (error) {\n      console.error(`Failed to resend notification ${logId}:`, error);\n      throw error;\n    }\n  }\n}\n\n// Usage example:\n// const notificationService = NotificationService.getInstance();\n// await notificationService.checkAndNotifyLowBalances(); ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/services/NotificationSoundService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":62,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2589,2592],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2589,2592],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prefer-const","severity":2,"message":"'duration' is never reassigned. Use 'const' instead.","line":158,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":158,"endColumn":17,"fix":{"range":[6431,6450],"text":"const duration = 0.4;"}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { NotificationSoundType } from '@/types/notifications';\n\nexport class NotificationSoundService {\n  private static instance: NotificationSoundService;\n  private audioContext: AudioContext | null = null;\n  private soundBuffers: Map<NotificationSoundType, AudioBuffer> = new Map();\n  private volume: number = 0.7;\n  private enabled: boolean = true;\n  private isClient: boolean = false;\n\n  // Sound URLs - these will be generated programmatically or use presets\n  private soundUrls: Record<NotificationSoundType, string> = {\n    default: '/sounds/notification-default.mp3',\n    subtle: '/sounds/notification-subtle.mp3',\n    success: '/sounds/notification-success.mp3',\n    warning: '/sounds/notification-warning.mp3',\n    error: '/sounds/notification-error.mp3',\n    urgent: '/sounds/notification-urgent.mp3',\n    ticket: '/sounds/notification-ticket.mp3',\n    payment: '/sounds/notification-payment.mp3',\n    chime: '/sounds/notification-chime.mp3',\n    bell: '/sounds/notification-bell.mp3',\n    piano: '/sounds/notification-piano.mp3',\n    none: ''\n  };\n\n  // Better, more pleasant sound frequencies and patterns\n  private static readonly SOUND_FREQUENCIES: Record<NotificationSoundType, number[]> = {\n    default: [523.25, 659.25], // C5, E5 - gentle major third\n    subtle: [261.63, 293.66], // C4, D4 - very soft whole tone\n    success: [523.25, 659.25, 783.99], // C5, E5, G5 - major chord (pleasant)\n    warning: [493.88, 587.33], // B4, D5 - gentle alert without harshness\n    error: [349.23, 415.30], // F4, G#4 - lower, less aggressive\n    urgent: [698.46, 830.61], // F5, G#5 - higher but musical\n    ticket: [440.00, 554.37], // A4, C#5 - pleasant interval\n    payment: [523.25, 698.46, 880.00], // C5, F5, A5 - major sixth chord\n    chime: [523.25, 659.25, 783.99, 1046.50], // C5, E5, G5, C6 - ascending major chord\n    bell: [880.00, 1108.73, 1318.51], // A5, C#6, E6 - bell-like harmonics\n    piano: [261.63], // C4 - single clean piano-like note\n    none: []\n  };\n\n  private constructor() {\n    // Check if we're in a browser environment\n    this.isClient = typeof window !== 'undefined';\n    if (this.isClient) {\n      this.initializeAudioContext();\n    }\n  }\n\n  public static getInstance(): NotificationSoundService {\n    if (!NotificationSoundService.instance) {\n      NotificationSoundService.instance = new NotificationSoundService();\n    }\n    return NotificationSoundService.instance;\n  }\n\n  private async initializeAudioContext(): Promise<void> {\n    if (!this.isClient) return;\n    \n    try {\n      this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n      await this.preloadSounds();\n    } catch (error) {\n      console.warn('Web Audio API not supported:', error);\n      this.audioContext = null;\n    }\n  }\n\n  private async preloadSounds(): Promise<void> {\n    if (!this.audioContext || !this.isClient) return;\n\n    const loadPromises = Object.entries(this.soundUrls).map(async ([type, url]) => {\n      if (type === 'none' || !url) return;\n\n      // Generate high-quality synthetic sounds\n      console.log(`Generating high-quality sound for ${type}`);\n      \n      // Use specialized generation for certain types\n      if (['chime', 'bell', 'piano'].includes(type)) {\n        const buffer = this.generateSpecialSound(type as NotificationSoundType);\n        this.soundBuffers.set(type as NotificationSoundType, buffer);\n      } else {\n        // Use regular synthetic sound generation\n        const frequencies = NotificationSoundService.SOUND_FREQUENCIES[type as NotificationSoundType];\n        if (frequencies && frequencies.length > 0) {\n          const buffer = this.generateSyntheticSound(frequencies);\n          this.soundBuffers.set(type as NotificationSoundType, buffer);\n        }\n      }\n    });\n\n    await Promise.allSettled(loadPromises);\n  }\n\n  private generateSyntheticSound(frequencies: number[]): AudioBuffer {\n    if (!this.audioContext) throw new Error('Audio context not available');\n\n    const sampleRate = this.audioContext.sampleRate;\n    const duration = 0.25; // Shorter, 250ms duration\n    const fadeTime = 0.05; // 50ms fade in/out\n    const buffer = this.audioContext.createBuffer(1, sampleRate * duration, sampleRate);\n    const data = buffer.getChannelData(0);\n\n    frequencies.forEach((freq, index) => {\n      const startTime = index * (duration / frequencies.length);\n      const endTime = (index + 1) * (duration / frequencies.length);\n      const startSample = Math.floor(startTime * sampleRate);\n      const endSample = Math.floor(endTime * sampleRate);\n\n      for (let i = startSample; i < endSample; i++) {\n        const time = i / sampleRate;\n        const relativeTime = (time - startTime) / (endTime - startTime);\n        \n        // Create a warmer sound with multiple harmonics\n        const fundamental = Math.sin(2 * Math.PI * freq * time);\n        const harmonic2 = Math.sin(2 * Math.PI * freq * 2 * time) * 0.3; // Second harmonic (octave)\n        const harmonic3 = Math.sin(2 * Math.PI * freq * 3 * time) * 0.1; // Third harmonic\n        \n        // Combine harmonics for a warmer, less harsh sound\n        let amplitude = (fundamental + harmonic2 + harmonic3) * 0.15; // Reduced volume\n        \n        // Apply smooth envelope (attack, sustain, release)\n        if (relativeTime < fadeTime) {\n          // Smooth attack\n          amplitude *= Math.sin((relativeTime / fadeTime) * Math.PI / 2);\n        } else if (relativeTime > 1 - fadeTime) {\n          // Smooth release\n          amplitude *= Math.sin(((1 - relativeTime) / fadeTime) * Math.PI / 2);\n        } else {\n          // Sustain with slight decay\n          const sustainTime = relativeTime - fadeTime;\n          const sustainLength = 1 - 2 * fadeTime;\n          amplitude *= (1 - sustainTime / sustainLength * 0.2); // 20% decay during sustain\n        }\n\n        data[i] += amplitude;\n      }\n    });\n\n    // Apply soft limiting to prevent clipping\n    const maxValue = Math.max(...Array.from(data).map(Math.abs));\n    if (maxValue > 0.8) {\n      const scale = 0.8 / maxValue;\n      for (let i = 0; i < data.length; i++) {\n        data[i] *= scale;\n      }\n    }\n\n    return buffer;\n  }\n\n  // Specialized sound generation for specific types\n  private generateSpecialSound(soundType: NotificationSoundType): AudioBuffer {\n    if (!this.audioContext) throw new Error('Audio context not available');\n\n    const sampleRate = this.audioContext.sampleRate;\n    let duration = 0.4; // Longer for special sounds\n    \n    switch (soundType) {\n      case 'chime':\n        return this.generateChimeSound(sampleRate, duration);\n      case 'bell':\n        return this.generateBellSound(sampleRate, duration);\n      case 'piano':\n        return this.generatePianoSound(sampleRate, duration * 1.5); // Longer for piano\n      default:\n        return this.generateSyntheticSound(NotificationSoundService.SOUND_FREQUENCIES[soundType]);\n    }\n  }\n\n  private generateChimeSound(sampleRate: number, duration: number): AudioBuffer {\n    const buffer = this.audioContext!.createBuffer(1, sampleRate * duration, sampleRate);\n    const data = buffer.getChannelData(0);\n    const frequencies = [523.25, 659.25, 783.99, 1046.50]; // C major arpeggio\n\n    frequencies.forEach((freq, index) => {\n      const noteStart = index * 0.1; // Stagger notes by 100ms\n      const noteDuration = duration - noteStart;\n      \n      for (let i = 0; i < data.length; i++) {\n        const time = i / sampleRate;\n        if (time < noteStart || time > noteStart + noteDuration) continue;\n        \n        const relativeTime = (time - noteStart) / noteDuration;\n        const envelope = Math.exp(-relativeTime * 4); // Exponential decay like a real chime\n        \n        // Clean sine wave with subtle harmonics\n        const fundamental = Math.sin(2 * Math.PI * freq * time);\n        const harmonic = Math.sin(2 * Math.PI * freq * 2 * time) * 0.2;\n        \n        data[i] += (fundamental + harmonic) * envelope * 0.1;\n      }\n    });\n\n    return buffer;\n  }\n\n  private generateBellSound(sampleRate: number, duration: number): AudioBuffer {\n    const buffer = this.audioContext!.createBuffer(1, sampleRate * duration, sampleRate);\n    const data = buffer.getChannelData(0);\n    const baseFreq = 880; // A5\n\n    for (let i = 0; i < data.length; i++) {\n      const time = i / sampleRate;\n      const envelope = Math.exp(-time * 3); // Bell-like decay\n      \n      // Bell has inharmonic partials\n      const partial1 = Math.sin(2 * Math.PI * baseFreq * time);\n      const partial2 = Math.sin(2 * Math.PI * baseFreq * 1.19 * time) * 0.6;\n      const partial3 = Math.sin(2 * Math.PI * baseFreq * 1.56 * time) * 0.4;\n      const partial4 = Math.sin(2 * Math.PI * baseFreq * 2.0 * time) * 0.2;\n      \n      data[i] = (partial1 + partial2 + partial3 + partial4) * envelope * 0.08;\n    }\n\n    return buffer;\n  }\n\n  private generatePianoSound(sampleRate: number, duration: number): AudioBuffer {\n    const buffer = this.audioContext!.createBuffer(1, sampleRate * duration, sampleRate);\n    const data = buffer.getChannelData(0);\n    const freq = 261.63; // C4\n\n    for (let i = 0; i < data.length; i++) {\n      const time = i / sampleRate;\n      \n      // Piano-like envelope: quick attack, slow decay\n      let envelope;\n      if (time < 0.01) {\n        envelope = time / 0.01; // Quick attack\n      } else {\n        envelope = Math.exp(-(time - 0.01) * 2); // Slow decay\n      }\n      \n      // Piano has rich harmonic content\n      const fundamental = Math.sin(2 * Math.PI * freq * time);\n      const harmonic2 = Math.sin(2 * Math.PI * freq * 2 * time) * 0.5;\n      const harmonic3 = Math.sin(2 * Math.PI * freq * 3 * time) * 0.3;\n      const harmonic4 = Math.sin(2 * Math.PI * freq * 4 * time) * 0.2;\n      const harmonic5 = Math.sin(2 * Math.PI * freq * 5 * time) * 0.1;\n      \n      data[i] = (fundamental + harmonic2 + harmonic3 + harmonic4 + harmonic5) * envelope * 0.06;\n    }\n\n    return buffer;\n  }\n\n  public async playSound(\n    soundType: NotificationSoundType, \n    customVolume?: number\n  ): Promise<void> {\n    if (!this.enabled || soundType === 'none' || !this.audioContext || !this.isClient) {\n      return;\n    }\n\n    // Resume audio context if suspended (browser autoplay policy)\n    if (this.audioContext.state === 'suspended') {\n      try {\n        await this.audioContext.resume();\n      } catch (error) {\n        console.warn('Failed to resume audio context:', error);\n        return;\n      }\n    }\n\n    const buffer = this.soundBuffers.get(soundType);\n    if (!buffer) {\n      console.warn(`Sound buffer not found for type: ${soundType}`);\n      return;\n    }\n\n    try {\n      const source = this.audioContext.createBufferSource();\n      const gainNode = this.audioContext.createGain();\n      \n      source.buffer = buffer;\n      source.connect(gainNode);\n      gainNode.connect(this.audioContext.destination);\n      \n      // Set volume\n      const volume = customVolume !== undefined ? customVolume : this.volume;\n      gainNode.gain.setValueAtTime(volume, this.audioContext.currentTime);\n      \n      source.start(0);\n    } catch (error) {\n      console.error('Error playing notification sound:', error);\n    }\n  }\n\n  public setVolume(volume: number): void {\n    this.volume = Math.max(0, Math.min(1, volume));\n  }\n\n  public getVolume(): number {\n    return this.volume;\n  }\n\n  public setEnabled(enabled: boolean): void {\n    this.enabled = enabled;\n  }\n\n  public isEnabled(): boolean {\n    return this.enabled;\n  }\n\n  public async testSound(soundType: NotificationSoundType): Promise<void> {\n    await this.playSound(soundType);\n  }\n\n  public getSupportedSounds(): NotificationSoundType[] {\n    return Object.keys(this.soundUrls) as NotificationSoundType[];\n  }\n\n  public async addCustomSound(\n    type: NotificationSoundType, \n    audioBuffer: ArrayBuffer\n  ): Promise<void> {\n    if (!this.audioContext || !this.isClient) {\n      throw new Error('Audio context not available');\n    }\n\n    try {\n      const buffer = await this.audioContext.decodeAudioData(audioBuffer);\n      this.soundBuffers.set(type, buffer);\n    } catch (error) {\n      console.error('Failed to add custom sound:', error);\n      throw error;\n    }\n  }\n\n  // Helper method to request audio permission for iOS/Safari\n  public async requestAudioPermission(): Promise<boolean> {\n    if (!this.audioContext || !this.isClient) return false;\n\n    try {\n      if (this.audioContext.state === 'suspended') {\n        await this.audioContext.resume();\n      }\n      \n      // Play a very short, silent sound to \"unlock\" audio\n      const buffer = this.audioContext.createBuffer(1, 1, 22050);\n      const source = this.audioContext.createBufferSource();\n      source.buffer = buffer;\n      source.connect(this.audioContext.destination);\n      source.start(0);\n      \n      return true;\n    } catch (error) {\n      console.warn('Failed to request audio permission:', error);\n      return false;\n    }\n  }\n\n  // Clean up resources\n  public dispose(): void {\n    if (this.audioContext) {\n      this.audioContext.close();\n      this.audioContext = null;\n    }\n    this.soundBuffers.clear();\n  }\n}\n\nexport default NotificationSoundService; ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/services/SchedulerService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":449,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":449,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14086,14089],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14086,14089],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as cron from 'node-cron';\nimport { NotificationService } from './NotificationService';\nimport CustomerNotificationService from './CustomerNotificationService';\nimport { connectToDatabase } from '@/lib/db';\nimport SchedulerSettingsModel, { SchedulerSettings } from '@/models/SchedulerSettings';\nimport { kpiAlertService } from '@/lib/services/kpiAlertService';\nimport { getSippyApiCredentials } from '@/lib/sippyClientConfig';\nimport { SippyClient } from '@/lib/sippyClient';\nimport UserModel from '@/models/User';\n\nexport class SchedulerService {\n  private static instance: SchedulerService;\n  private tasks: Map<string, cron.ScheduledTask> = new Map();\n  private isRunning = false;\n  private currentSettings: SchedulerSettings | null = null;\n\n  private constructor() {}\n\n  public static getInstance(): SchedulerService {\n    if (!SchedulerService.instance) {\n      SchedulerService.instance = new SchedulerService();\n    }\n    return SchedulerService.instance;\n  }\n\n  /**\n   * Get scheduler settings from database\n   */\n  private async getSchedulerSettings(): Promise<SchedulerSettings> {\n    try {\n      await connectToDatabase();\n      \n      let settings = await SchedulerSettingsModel.findOne();\n      \n      if (!settings) {\n        // Create default settings if none exist\n        settings = new SchedulerSettingsModel({\n          enabled: true,\n          checkInterval: 360, // 6 hours in minutes\n          timezone: 'Europe/London',\n        });\n        await settings.save();\n      }\n      \n      this.currentSettings = settings;\n      return settings;\n    } catch (error) {\n      console.error('Error fetching scheduler settings:', error);\n      // Return fallback settings\n      return {\n        enabled: true,\n        checkInterval: 360,\n        timezone: 'Europe/London',\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n    }\n  }\n\n  /**\n   * Convert minutes to cron expression\n   */\n  private minutesToCron(minutes: number): string {\n    if (minutes < 60) {\n      // Less than an hour: every X minutes\n      return `*/${minutes} * * * *`;\n    } else if (minutes % 60 === 0) {\n      // Exact hours: 0 */X * * *\n      const hours = minutes / 60;\n      return `0 */${hours} * * *`;\n    } else {\n      // Mixed: convert to minutes\n      return `*/${minutes} * * * *`;\n    }\n  }\n\n  /**\n   * Initialize and start all scheduled tasks\n   */\n  public async initialize(): Promise<void> {\n    if (this.isRunning) {\n      console.log('Scheduler is already running');\n      return;\n    }\n\n    console.log('🕐 Initializing Scheduler Service...');\n    \n    try {\n      // Get settings from database\n      const settings = await this.getSchedulerSettings();\n      \n      if (!settings.enabled) {\n        console.log('⏸️  Scheduler is disabled in settings');\n        return;\n      }\n\n      // Start balance check cron job\n      await this.startBalanceCheckTask();\n      \n      // Start KPI alert check cron job\n      await this.startKpiAlertTask();\n      \n      // Start customer notification execution task\n      await this.startCustomerNotificationTask();\n      \n      this.isRunning = true;\n      console.log('✅ Scheduler Service initialized successfully');\n    } catch (error) {\n      console.error('❌ Error initializing Scheduler Service:', error);\n    }\n  }\n\n  /**\n   * Start the balance check task using database settings\n   */\n  private async startBalanceCheckTask(): Promise<void> {\n    const settings = await this.getSchedulerSettings();\n    \n    if (!settings.enabled) {\n      console.log('Balance check task disabled in settings');\n      return;\n    }\n\n    // Convert minutes to cron expression\n    const cronSchedule = this.minutesToCron(settings.checkInterval);\n    \n    console.log(`⏰ Setting up balance check task:`);\n    console.log(`   Interval: ${settings.checkInterval} minutes`);\n    console.log(`   Cron: ${cronSchedule}`);\n    console.log(`   Timezone: ${settings.timezone}`);\n    console.log(`   Translation: ${this.describeCronSchedule(cronSchedule)}`);\n\n    const task = cron.schedule(cronSchedule, async () => {\n      console.log('\\n🔍 [CRON] Starting automatic balance check...');\n      const startTime = new Date();\n      \n      try {\n        // Update last check time in database\n        await this.updateLastCheckTime();\n        \n        const notificationService = NotificationService.getInstance();\n        await notificationService.checkAndNotifyLowBalances();\n        \n        const endTime = new Date();\n        const duration = endTime.getTime() - startTime.getTime();\n        console.log(`✅ [CRON] Balance check completed in ${duration}ms`);\n        \n      } catch (error) {\n        console.error('❌ [CRON] Error during balance check:', error);\n      }\n    }, {\n      timezone: settings.timezone\n    });\n\n    this.tasks.set('balance-check', task);\n    \n    console.log(`✅ Balance check task scheduled and started`);\n  }\n\n  /**\n   * Start the KPI alert check task\n   */\n  private async startKpiAlertTask(): Promise<void> {\n    const settings = await this.getSchedulerSettings();\n    \n    if (!settings.enabled) {\n      console.log('KPI alert task disabled in settings');\n      return;\n    }\n\n    // KPI alerts run daily at 6:00 AM during low activity hours\n    const cronSchedule = '0 6 * * *';\n    \n    console.log(`⏰ Setting up KPI alert check task:`);\n    console.log(`   Schedule: Daily at 6:00 AM`);\n    console.log(`   Cron: ${cronSchedule}`);\n    console.log(`   Timezone: ${settings.timezone}`);\n\n    const task = cron.schedule(cronSchedule, async () => {\n      console.log('\\n📊 [CRON] Starting automatic KPI alert check...');\n      const startTime = new Date();\n      \n      try {\n        await this.performKpiAlertCheck();\n        \n        const endTime = new Date();\n        const duration = endTime.getTime() - startTime.getTime();\n        console.log(`✅ [CRON] KPI alert check completed in ${duration}ms`);\n        \n      } catch (error) {\n        console.error('❌ [CRON] Error during KPI alert check:', error);\n      }\n    }, {\n      timezone: settings.timezone\n    });\n\n    this.tasks.set('kpi-alerts', task);\n    \n    console.log(`✅ KPI alert task scheduled and started`);\n  }\n\n  /**\n   * Update last check time in database\n   */\n  private async updateLastCheckTime(): Promise<void> {\n    try {\n      console.log('📝 Connecting to database to update last check time...');\n      await connectToDatabase();\n      \n      const now = new Date();\n      const nextCheckTime = new Date(now.getTime() + (this.currentSettings?.checkInterval || 360) * 60 * 1000);\n      \n      console.log(`📝 Updating lastCheck to: ${now.toISOString()}`);\n      console.log(`📝 Updating nextCheck to: ${nextCheckTime.toISOString()}`);\n      \n      const result = await SchedulerSettingsModel.findOneAndUpdate(\n        {},\n        { \n          lastCheck: now,\n          nextCheck: nextCheckTime,\n          updatedAt: now\n        },\n        { \n          new: true,\n          upsert: true // Create if doesn't exist\n        }\n      );\n      \n      if (result) {\n        console.log('✅ Successfully updated scheduler timestamps in database');\n        console.log(`   Last Check: ${result.lastCheck}`);\n        console.log(`   Next Check: ${result.nextCheck}`);\n      } else {\n        console.warn('⚠️ No result returned from database update');\n      }\n    } catch (error) {\n      console.error('❌ Error updating last check time in database:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Update scheduler from database settings\n   */\n  public async updateFromDatabaseSettings(): Promise<void> {\n    console.log('🔄 Updating scheduler from database settings...');\n    \n    try {\n      // Stop current tasks\n      this.stopAll();\n      \n      // Restart with new settings\n      await this.initialize();\n      \n      console.log('✅ Scheduler updated from database settings');\n    } catch (error) {\n      console.error('❌ Error updating scheduler from database:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Stop all scheduled tasks\n   */\n  public stopAll(): void {\n    console.log('⏹️  Stopping all scheduled tasks...');\n    \n    this.tasks.forEach((task, name) => {\n      task.stop();\n      console.log(`   Stopped task: ${name}`);\n    });\n    \n    this.tasks.clear();\n    this.isRunning = false;\n    console.log('✅ All scheduled tasks stopped');\n  }\n\n  /**\n   * Stop a specific task\n   */\n  public stopTask(taskName: string): boolean {\n    const task = this.tasks.get(taskName);\n    if (task) {\n      task.stop();\n      this.tasks.delete(taskName);\n      console.log(`⏹️  Stopped task: ${taskName}`);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Get status of all tasks with database settings\n   */\n  public async getStatus(): Promise<{ taskName: string; isRunning: boolean; schedule?: string; settings?: SchedulerSettings }[]> {\n    const status: { taskName: string; isRunning: boolean; schedule?: string; settings?: SchedulerSettings }[] = [];\n    \n    try {\n      const settings = await this.getSchedulerSettings();\n      \n      this.tasks.forEach((task, name) => {\n        let schedule: string | undefined;\n        \n        if (name === 'balance-check') {\n          schedule = this.minutesToCron(settings.checkInterval);\n        } else if (name === 'kpi-alerts') {\n          schedule = '0 6 * * *'; // Daily at 6:00 AM\n        }\n        \n        status.push({\n          taskName: name,\n          isRunning: this.isRunning,\n          schedule,\n          settings: ['balance-check', 'kpi-alerts'].includes(name) ? settings : undefined\n        });\n      });\n    } catch (error) {\n      console.error('Error getting settings for status:', error);\n    }\n    \n    return status;\n  }\n\n  /**\n   * Manually trigger the balance check (outside of schedule)\n   */\n  public async triggerBalanceCheck(): Promise<void> {\n    console.log('🔍 [MANUAL] Triggering manual balance check...');\n    const startTime = new Date();\n    \n    try {\n      // Update last check time in database first\n      console.log('📝 [MANUAL] Updating last check time...');\n      await this.updateLastCheckTime();\n      console.log('✅ [MANUAL] Last check time updated successfully');\n      \n      // Perform the actual balance check\n      console.log('🔍 [MANUAL] Starting balance notification check...');\n      const notificationService = NotificationService.getInstance();\n      await notificationService.checkAndNotifyLowBalances();\n      \n      const endTime = new Date();\n      const duration = endTime.getTime() - startTime.getTime();\n      console.log(`✅ [MANUAL] Manual balance check completed successfully in ${duration}ms`);\n    } catch (error) {\n      console.error('❌ [MANUAL] Error during manual balance check:', error);\n      \n      // Still try to update the last check time even if the notification check failed\n      try {\n        await this.updateLastCheckTime();\n        console.log('✅ [MANUAL] Last check time updated despite notification error');\n      } catch (updateError) {\n        console.error('❌ [MANUAL] Failed to update last check time:', updateError);\n      }\n      \n      throw error;\n    }\n  }\n\n  /**\n   * Update the balance check schedule (legacy method for backward compatibility)\n   */\n  public async updateBalanceCheckSchedule(newCronSchedule: string): Promise<void> {\n    console.log(`🔄 Legacy method called with cron: ${newCronSchedule}`);\n    console.log('Please use the database settings interface instead');\n    throw new Error('This method is deprecated. Please use the scheduler settings interface.');\n  }\n\n  /**\n   * Describe what a cron schedule means in human-readable format\n   */\n  private describeCronSchedule(cronSchedule: string): string {\n    const scheduleMap: { [key: string]: string } = {\n      '0 */6 * * *': 'Every 6 hours',\n      '0 */4 * * *': 'Every 4 hours', \n      '0 */12 * * *': 'Every 12 hours',\n      '0 0 * * *': 'Daily at midnight',\n      '0 6 * * *': 'Daily at 6:00 AM',\n      '0 0 */2 * *': 'Every 2 days at midnight',\n      '0 0 * * 0': 'Weekly on Sunday at midnight',\n      '*/30 * * * *': 'Every 30 minutes',\n      '0 */1 * * *': 'Every hour',\n      '*/60 * * * *': 'Every hour',\n      '*/120 * * * *': 'Every 2 hours',\n      '*/180 * * * *': 'Every 3 hours',\n      '*/240 * * * *': 'Every 4 hours',\n      '*/360 * * * *': 'Every 6 hours',\n      '*/720 * * * *': 'Every 12 hours',\n      '*/1440 * * * *': 'Every 24 hours'\n    };\n\n    return scheduleMap[cronSchedule] || `Custom schedule: ${cronSchedule}`;\n  }\n\n  /**\n   * Check if scheduler is running\n   */\n  public isSchedulerRunning(): boolean {\n    return this.isRunning;\n  }\n\n  /**\n   * Get current settings\n   */\n  public getCurrentSettings(): SchedulerSettings | null {\n    return this.currentSettings;\n  }\n\n  /**\n   * Perform KPI alert check for all users\n   */\n  private async performKpiAlertCheck(): Promise<void> {\n    try {\n      console.log('📊 [KPI] Starting KPI data collection for all users...');\n      \n      // Get Sippy API credentials\n      const credentials = await getSippyApiCredentials();\n      if (!credentials) {\n        console.error('❌ [KPI] Sippy API credentials not configured');\n        return;\n      }\n\n      // Get all admin users with Sippy accounts\n      await connectToDatabase();\n      const adminUsers = await UserModel.find({ \n        role: 'admin', \n        sippyAccountId: { $exists: true, $ne: null } \n      }).lean();\n\n      if (adminUsers.length === 0) {\n        console.log('ℹ️ [KPI] No admin users with Sippy accounts found');\n        return;\n      }\n\n      console.log(`📊 [KPI] Processing ${adminUsers.length} admin users...`);\n      \n      const sippyClient = new SippyClient(credentials);\n      const today = new Date();\n      const startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate());\n      const endOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 23, 59, 59);\n\n      const kpiDataByUser = new Map();\n\n      // Collect KPI data for each user\n      for (const user of adminUsers) {\n        try {\n          console.log(`📊 [KPI] Fetching CDR data for user ${user.name} (${user.email})...`);\n          \n          let allCdrs: any[] = [];\n          let offset = 0;\n          const limit = 1000;\n          let hasMore = true;\n\n          // Fetch all CDRs for today\n          while (hasMore) {\n            try {\n              const response = await sippyClient.getAccountCDRs({\n                i_account: user.sippyAccountId,\n                start_date: startOfDay.toISOString().split('T')[0],\n                end_date: endOfDay.toISOString().split('T')[0],\n                limit: limit,\n                offset: offset\n              });\n\n              if (response && Array.isArray(response) && response.length > 0) {\n                allCdrs = allCdrs.concat(response);\n                offset += limit;\n                \n                if (response.length < limit) {\n                  hasMore = false;\n                }\n              } else {\n                hasMore = false;\n              }\n            } catch (error) {\n              console.error(`❌ [KPI] Error fetching CDRs for user ${user.name}:`, error);\n              hasMore = false;\n            }\n          }\n\n          // Calculate KPIs from CDR data\n          let totalCost = 0;\n          let totalDuration = 0;\n          let successfulCalls = 0;\n          let failedCalls = 0;\n          let currency = 'EUR';\n\n          for (const cdr of allCdrs) {\n            const cost = parseFloat(cdr.cost) || 0;\n            const duration = parseInt(cdr.duration) || 0;\n            const result = parseInt(cdr.result);\n            \n            totalCost += cost;\n            totalDuration += duration;\n            \n            if (result === 0 || result === 200) {\n              successfulCalls++;\n            } else {\n              failedCalls++;\n            }\n            \n            if (cdr.currency) {\n              currency = cdr.currency;\n            }\n          }\n\n          const totalCalls = successfulCalls + failedCalls;\n          const asr = totalCalls > 0 ? (successfulCalls / totalCalls) * 100 : 0;\n          const totalMinutes = totalDuration / 60;\n\n          const kpiData = {\n            costOfDay: totalCost,\n            asr,\n            totalMinutes,\n            totalCalls,\n            successfulCalls,\n            failedCalls,\n            currency\n          };\n\n          console.log(`📊 [KPI] KPI data for ${user.name}:`, {\n            costOfDay: kpiData.costOfDay.toFixed(2),\n            asr: kpiData.asr.toFixed(1) + '%',\n            totalMinutes: kpiData.totalMinutes.toFixed(0),\n            totalCalls: kpiData.totalCalls,\n            cdrsProcessed: allCdrs.length\n          });\n\n          kpiDataByUser.set(user._id.toString(), kpiData);\n\n        } catch (error) {\n          console.error(`❌ [KPI] Error processing KPI data for user ${user.name}:`, error);\n        }\n      }\n\n      // Reset daily alerts at start of day\n      kpiAlertService.resetDailyAlerts();\n\n      // Check KPI alerts for all users\n      console.log(`📧 [KPI] Checking alerts for ${kpiDataByUser.size} users...`);\n      await kpiAlertService.checkAllUsersKpiAlerts(kpiDataByUser);\n      \n      console.log('✅ [KPI] KPI alert check completed successfully');\n\n    } catch (error) {\n      console.error('❌ [KPI] Error in performKpiAlertCheck:', error);\n    }\n  }\n\n  /**\n   * Manually trigger KPI alert check\n   */\n  public async triggerKpiAlertCheck(): Promise<void> {\n    console.log('📊 [MANUAL] Triggering manual KPI alert check...');\n    const startTime = new Date();\n    \n    try {\n      await this.performKpiAlertCheck();\n      \n      const endTime = new Date();\n      const duration = endTime.getTime() - startTime.getTime();\n      console.log(`✅ [MANUAL] Manual KPI alert check completed successfully in ${duration}ms`);\n    } catch (error) {\n      console.error('❌ [MANUAL] Error during manual KPI alert check:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Start customer notification execution task\n   */\n  private async startCustomerNotificationTask(): Promise<void> {\n    const settings = await this.getSchedulerSettings();\n    \n    if (!settings.enabled) {\n      console.log('Customer notification task disabled in settings');\n      return;\n    }\n\n    // Customer notifications run every 5 minutes to check for due notifications\n    const cronSchedule = '*/5 * * * *';\n    \n    console.log(`⏰ Setting up customer notification execution task:`);\n    console.log(`   Schedule: Every 5 minutes`);\n    console.log(`   Cron: ${cronSchedule}`);\n    console.log(`   Timezone: ${settings.timezone}`);\n\n    const task = cron.schedule(cronSchedule, async () => {\n      console.log('\\n📧 [CRON] Starting customer notification execution...');\n      const startTime = new Date();\n      \n      try {\n        const customerNotificationService = CustomerNotificationService.getInstance();\n        await customerNotificationService.executeScheduledNotifications();\n        \n        const endTime = new Date();\n        const duration = endTime.getTime() - startTime.getTime();\n        console.log(`✅ [CRON] Customer notification execution completed in ${duration}ms`);\n        \n      } catch (error) {\n        console.error('❌ [CRON] Error during customer notification execution:', error);\n      }\n    }, {\n      timezone: settings.timezone\n    });\n\n    this.tasks.set('customer-notifications', task);\n    \n    console.log(`✅ Customer notification task scheduled and started`);\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/services/SmtpService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":41,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[929,932],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[929,932],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":59,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1496,1499],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1496,1499],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":92,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2407,2410],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2407,2410],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":200,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":200,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5510,5513],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5510,5513],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import SmtpSettings from '@/models/SmtpSettings';\nimport { EmailCategory, ISmtpSettings } from '@/types/smtp';\nimport { connectToDatabase } from '@/lib/db';\nimport nodemailer from 'nodemailer';\n\nexport interface EmailOptions {\n  to: string;\n  subject: string;\n  html: string;\n  text?: string;\n  from?: string;\n  replyTo?: string;\n}\n\nexport interface EmailResult {\n  success: boolean;\n  messageId?: string;\n  error?: string;\n  accountUsed?: {\n    name: string;\n    category: EmailCategory;\n    fromEmail: string;\n  };\n}\n\nexport class SmtpService {\n  private static instance: SmtpService;\n  \n  private constructor() {}\n  \n  public static getInstance(): SmtpService {\n    if (!SmtpService.instance) {\n      SmtpService.instance = new SmtpService();\n    }\n    return SmtpService.instance;\n  }\n\n  /**\n   * Get SMTP account for a specific email category\n   */\n  public async getSmtpAccountForCategory(category: EmailCategory): Promise<any> {\n    try {\n      await connectToDatabase();\n      \n      // First try to find an enabled account for the specific category\n      let account = await SmtpSettings.findOne({\n        category,\n        enabled: true\n      })\n      .select('+password')\n      .sort({ priority: 1, createdAt: 1 });\n\n      // If no specific category account found, try to get the default account\n      if (!account && category !== 'default') {\n        account = await SmtpSettings.findOne({\n          isDefault: true,\n          enabled: true\n        })\n        .select('+password') as any;\n      }\n\n      // If still no account, get any enabled account as last resort\n      if (!account) {\n        account = await SmtpSettings.findOne({\n          enabled: true\n        })\n        .select('+password')\n        .sort({ priority: 1, createdAt: 1 });\n      }\n\n      return account;\n    } catch (error) {\n      console.error('Error getting SMTP account for category:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Send email using appropriate SMTP account based on category\n   */\n  public async sendEmail(category: EmailCategory, emailOptions: EmailOptions): Promise<EmailResult> {\n    try {\n      const smtpAccount = await this.getSmtpAccountForCategory(category);\n      \n      if (!smtpAccount) {\n        return {\n          success: false,\n          error: `No SMTP account available for category: ${category}`\n        };\n      }\n\n      const transporter = this.createTransporter(smtpAccount as any);\n      \n      // Verify connection first\n      await transporter.verify();\n\n      const mailOptions = {\n        from: emailOptions.from || `\"${smtpAccount.fromName}\" <${smtpAccount.fromEmail}>`,\n        to: emailOptions.to,\n        subject: emailOptions.subject,\n        html: emailOptions.html,\n        text: emailOptions.text,\n        replyTo: emailOptions.replyTo\n      };\n\n      const info = await transporter.sendMail(mailOptions);\n\n      return {\n        success: true,\n        messageId: info.messageId,\n        accountUsed: {\n          name: smtpAccount.name,\n          category: smtpAccount.category,\n          fromEmail: smtpAccount.fromEmail\n        }\n      };\n    } catch (error) {\n      console.error('Error sending email:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  /**\n   * Send billing-related emails (payments, balance alerts, invoices)\n   */\n  public async sendBillingEmail(emailOptions: EmailOptions): Promise<EmailResult> {\n    return this.sendEmail('billing', emailOptions);\n  }\n\n  /**\n   * Send authentication-related emails (signup, login, password reset, OTP)\n   */\n  public async sendAuthenticationEmail(emailOptions: EmailOptions): Promise<EmailResult> {\n    return this.sendEmail('authentication', emailOptions);\n  }\n\n  /**\n   * Send support-related emails (KPI alerts, system notifications)\n   */\n  public async sendSupportEmail(emailOptions: EmailOptions): Promise<EmailResult> {\n    return this.sendEmail('support', emailOptions);\n  }\n\n  /**\n   * Send general emails using default SMTP account\n   */\n  public async sendDefaultEmail(emailOptions: EmailOptions): Promise<EmailResult> {\n    return this.sendEmail('default', emailOptions);\n  }\n\n  /**\n   * Get all available SMTP accounts by category\n   */\n  public async getAllSmtpAccounts(): Promise<Record<EmailCategory, ISmtpSettings[]>> {\n    try {\n      await connectToDatabase();\n      \n      const accounts = await SmtpSettings.find({ enabled: true })\n        .select('-password')\n        .sort({ category: 1, priority: 1, createdAt: 1 });\n\n      const categorizedAccounts: Record<EmailCategory, ISmtpSettings[]> = {\n        billing: [],\n        authentication: [],\n        support: [],\n        default: []\n      };\n\n      accounts.forEach(account => {\n        categorizedAccounts[account.category].push(account);\n      });\n\n      return categorizedAccounts;\n    } catch (error) {\n      console.error('Error getting all SMTP accounts:', error);\n      return {\n        billing: [],\n        authentication: [],\n        support: [],\n        default: []\n      };\n    }\n  }\n\n  /**\n   * Test SMTP connection for a specific account\n   */\n  public async testSmtpAccount(accountId: string): Promise<{ success: boolean; error?: string }> {\n    try {\n      await connectToDatabase();\n      \n      const account = await SmtpSettings.findById(accountId).select('+password');\n      if (!account) {\n        return { success: false, error: 'Account not found' };\n      }\n\n      const transporter = this.createTransporter(account as any);\n      await transporter.verify();\n\n      return { success: true };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Connection failed'\n      };\n    }\n  }\n\n  /**\n   * Create nodemailer transporter for an SMTP account\n   */\n  private createTransporter(account: ISmtpSettings) {\n    return nodemailer.createTransport({\n      host: account.host,\n      port: account.port,\n      secure: account.secure,\n      auth: account.username && account.password ? {\n        user: account.username,\n        pass: account.password,\n      } : undefined,\n      connectionTimeout: 10000,\n      socketTimeout: 10000,\n      tls: {\n        rejectUnauthorized: false\n      }\n    });\n  }\n\n  /**\n   * Determine email category based on email type or content\n   */\n  public static categorizeEmail(emailType: string): EmailCategory {\n    const billingTypes = [\n      'topup-success', 'payment-confirmation', 'balance-low', 'balance-critical', \n      'payment-failed', 'invoice-generated', 'billing-update', 'subscription-renewal'\n    ];\n    \n    const authTypes = [\n      'signup-welcome', 'email-verification', 'forgot-password', 'password-reset', \n      'password-changed', 'otp-code', 'account-activation', 'login-alert', \n      'security-notification', 'account-locked'\n    ];\n    \n    const supportTypes = [\n      'kpi-alert', 'system-maintenance', 'performance-report', 'error-notification',\n      'usage-report', 'quota-exceeded', 'service-degradation', 'support-ticket'\n    ];\n\n    if (billingTypes.includes(emailType.toLowerCase())) {\n      return 'billing';\n    }\n    \n    if (authTypes.includes(emailType.toLowerCase())) {\n      return 'authentication';\n    }\n    \n    if (supportTypes.includes(emailType.toLowerCase())) {\n      return 'support';\n    }\n    \n    return 'default';\n  }\n}\n\nexport default SmtpService; ","usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/services/TicketNotificationService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/types/digest-fetch.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/types/notifications.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/types/papaparse.d.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":36,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1026,1029],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1026,1029],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":60,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1562,1565],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1562,1565],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/types/phoneNumber.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/types/smtp.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/types/ticket.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/types/user.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/macbook/Documents/projects/sipp/ovo/src/types/xmlrpc.d.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[331,334],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[331,334],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[384,387],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[384,387],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[675,678],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[675,678],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":31,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[728,731],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[728,731],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]